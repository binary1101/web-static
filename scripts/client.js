(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

global.AppStorage = require('./shared/resources/AppStorage');
global.gon = require('./desktop/resources/gon');
require('./desktop/bundle');

if (AppStorage.getItem('userLogged') == 'true') {
  var _gon = gon;
  var locale = _gon.locale;
  var user = _gon.user;

  Tasty.start({ locale: locale, user: user });
} else {
  console.log('Без пользователя');
  Tasty.start();
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./desktop/bundle":2,"./desktop/resources/gon":521,"./shared/resources/AppStorage":556}],2:[function(require,module,exports){
(function (global){
var DesignStore;

require('../shared/shims/console');

require('./resources/libs');

require('./resources/is_mobile');

require('./resources/fileReceiver');

require('./resources/tasty');

require('./resources/tasty_utils');

window.Routes = require('../shared/routes/routes');

window.ApiRoutes = require('../shared/routes/api');

require('./locales/numeral/ru');

require('./locales/moment/ru');

require('./locales/moment/en');

require('./react/services/positions');

global.NoticeService = require('./react/services/Notice');

global.BeepService = require('../shared/react/services/Beep');

global.ThumborService = require('../shared/react/services/thumbor');

require('./react/services/uuid');

require('./react/helpers/app');

require('./react/mixins/unmount');

require('./react/mixins/dom_manipulations');

require('./react/mixins/component_manipulations');

require('./react/mixins/positions');

require('./react/mixins/shake');

require('./react/mixins/grammar');

require('./react/mixins/error_timer');

require('./react/mixins/activities');

require('./react/mixins/requester');

require('./react/mixins/scroller');

require('./react/mixins/touch');

require('./react/dispatchers/current_user');

require('./react/dispatchers/relationships');

global.CurrentUserStore = require('./react/stores/current_user');

DesignStore = require('./react/stores/design');

require('./react/stores/EditorStore');

require('./react/stores/relationships');

require('./react/components/transition/timeout_transition_group');

require('./react/messaging/dispatchers/messaging');

global.MessagingStatusStore = require('./react/messaging/stores/messaging_status');

require('./react/messaging/stores/connection_state');

require('./react/messaging/stores/messages_popup_state');

require('./react/messaging/stores/conversations');

require('./react/messaging/stores/messages');

require('./react/messaging/stores/notifications');

require('./react/messaging/messaging_service');

require('./react/messaging/messaging_requester');

require('./react/messaging/messaging_testing');

require('./react/messaging/actions/popup');

global.ConversationActions = require('./react/messaging/actions/ConversationActions');

require('./react/messaging/actions/message');

require('./react/messaging/actions/notification');

require('./react/messaging/components/toolbars/indicators/indicators');

require('./react/messaging/components/toolbars/indicators/messages');

require('./react/messaging/components/toolbars/indicators/notifications');

require('./react/messaging/components/messages_popup/ui/back_button');

require('./react/messaging/components/messages_popup/loading_message');

require('./react/messaging/components/messages_popup/create_new_conversation/create_new_conversation');

require('./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser');

require('./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_button');

require('./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_dropdown');

require('./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_results');

require('./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_results_item');

require('./react/messaging/components/messages_popup/thread/message_list/message_list');

require('./react/messaging/components/messages_popup/thread/message_list/message_list_item');

require('./react/messaging/components/messages_popup/thread/message_list/message_list_item_manager');

require('./react/messaging/components/messages_popup/thread/message_list/empty');

require('./react/messaging/components/notifications_popup/notifications_popup');

require('./react/messaging/components/notifications_popup/notifications/notifications');

require('./react/messaging/components/notifications_popup/notifications/notification');

require('./react/messaging/components/notifications_popup/notifications/empty');

require('./react/components/common/adaptive_input');

global.EmbedComponent = require('./react/components/embed');

require('./react/components/avatars/avatar');

global.UserAvatar = require('./react/components/avatars/UserAvatar');

require('./react/components/Auth/Auth');

require('./react/components/Auth/authorization/authorization');

require('./react/components/Auth/authorization/vk');

require('./react/components/Auth/authorization/facebook');

require('./react/components/Auth/buttons/vk_auth_button');

require('./react/components/Auth/buttons/facebook_auth_button');

require('./react/components/Auth/email/email');

require('./react/components/Auth/recovery');

global.Settings = require('./react/components/Settings');

global.BrowserSupportContainer = require('./react/components/BrowserSupport/BrowserSupportContainer');

global.TlogAlertContainer = require('./react/components/TlogAlert/TlogAlertContainer');

global.ImageAttachmentsCollage = require('../shared/react/components/common/imageAttachmentsCollage');

global.UserToolbarContainer = require('./react/components/toolbars/UserToolbarContainer');

global.CloseToolbar = require('./react/components/toolbars/CloseToolbar');

global.NotificationsContainer = require('./react/components/Notifications/NotificationsContainer');

global.ComposeToolbarContainer = require('./react/components/toolbars/ComposeToolbarContainer');

global.AvatarToolbarContainer = require('./react/components/toolbars/AvatarToolbarContainer');

require('./react/components/shellboxes/confirm_registration');

require('./react/components/voting');

require('./react/components/shellbox_layer');

require('./react/components/buttons/load_more');

require('./react/components/relationship_buttons/mixins/relationship');

require('./react/components/relationship_buttons/follow_button');

require('./react/components/relationship_buttons/follower_button');

require('./react/components/relationship_buttons/ignore_button');

require('./react/components/relationship_buttons/request_button');

require('./react/components/relationship_buttons/guess_button');

require('./react/components/follow_status');

require('./react/components/smart_follow_status');

require('./react/components/editable_field');

require('./react/components/popup_box');

require('./react/components/popup/popup');

require('./react/components/popup/layout');

require('./react/components/popup/spinner');

require('./react/components/popup/header');

require('./react/components/calendar/calendar');

require('./react/components/calendar/calendar_timeline');

require('./react/components/calendar/calendar_header');

require('./react/components/calendar/calendar_period');

require('./react/components/calendar/calendar_marker');

global.Feed = require('./react/components/Feed/Feed');

global.EntryTlog = require('./react/components/Entry/EntryTlog/EntryTlog');

global.EntryTlogsContainer = require('./react/components/EntryTlogs/EntryTlogsContainer');

global.EntryBricksContainer = require('./react/components/EntryBricks/EntryBricksContainer');

global.FlowBricksContainer = require('./react/components/FlowBricks/FlowBricksContainer');

global.SearchResults = require('./react/components/SearchResults/SearchResults');

global.FlowCreator = require('./react/components/FlowPopups/FlowCreator');

global.FlowManager = require('./react/components/FlowPopups/FlowManager');

global.LiveLoadButtonContainer = require('./react/components/FeedPage/LiveLoadButtonContainer');

global.BestLoadButtonContainer = require('./react/components/FeedPage/BestLoadButtonContainer');

global.FriendsLoadButtonContainer = require('./react/components/FeedPage/FriendsLoadButtonContainer');

global.FeedPageBody = require('./react/components/FeedPage/FeedPageBody');

global.TlogPageBody = require('./react/components/TlogPage/TlogPageBody');

require('./react/components/search/search');

require('./react/components/search/button');

require('./react/components/search/field');

global.DesignSettingsContainer = require('./react/components/DesignSettings/DesignSettingsContainer');

global.DesignPaymentContainer = require('./react/components/DesignPayment/DesignPaymentContainer');

global.DesignSettingsColorPickerPopup = require('./react/components/DesignSettings/common/colorPicker/popup');

require('./react/components/persons_popup/mixins/panel_mixin');

require('./react/components/persons_popup/persons_popup');

require('./react/components/persons_popup/menu');

require('./react/components/persons_popup/menu_item');

require('./react/components/persons_popup/items/item');

require('./react/components/persons_popup/items/following_relationship');

require('./react/components/persons_popup/items/follower_relationship');

require('./react/components/persons_popup/items/requested_relationship');

require('./react/components/persons_popup/items/guess_relationship');

require('./react/components/persons_popup/items/ignored_relationship');

require('./react/components/persons_popup/panels/followings_panel');

require('./react/components/persons_popup/panels/followers_panel');

require('./react/components/persons_popup/panels/guessed_panel');

require('./react/components/persons_popup/panels/requested_panel');

require('./react/components/persons_popup/panels/ignored_panel');

require('./react/components/persons_popup/panels/socialNetwork/vkontakte');

require('./react/components/persons_popup/panels/socialNetwork/facebook');

require('./react/components/people/item');

require('./react/components/entry_metabar/entry_metabar');

require('./react/components/entry_metabar/author');

require('./react/components/entry_metabar/comment');

require('./react/components/entry_metabar/date');

require('./react/components/entry_metabar/dropdown_menu');

require('./react/components/entry_metabar/dropdown_menu_items/item');

require('./react/components/entry_metabar/dropdown_menu_items/favorite_item');

require('./react/components/entry_metabar/dropdown_menu_items/watch_item');

require('./react/components/entry_metabar/dropdown_menu_items/report_item');

require('./react/components/entry_metabar/dropdown_menu_items/delete_item');

require('./react/components/entry_comment_box/mixins/comments');

require('./react/components/entry_comment_box/entry_comment_box');

require('./react/components/entry_comment_box/comment_list/comment_list');

require('./react/components/entry_comment_box/comment_list/comment_manager');

require('./react/components/entry_comment_box/comment_list/comment');

require('./react/components/entry_comment_box/comment_metabar/comment_metabar');

require('./react/components/entry_comment_box/comment_metabar/date');

require('./react/components/entry_comment_box/comment_metabar/dropdown_menu');

require('./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/link_item');

require('./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/report_item');

require('./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/edit_item');

require('./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/delete_item');

require('./react/components/entry_comment_box/comment_metabar/reply');

require('./react/components/entry_comment_box/comment_form/comment_form');

require('./react/components/entry_comment_box/comment_form/comment_create_form_manager');

require('./react/components/entry_comment_box/comment_form/comment_edit_form_manager');

require('./react/components/entry_comment_box/comment_form/buttons/submit');

require('./react/components/entry_comment_box/load_more');

global.HeroFlow = require('./react/components/HeroComponent/HeroFlow');

global.HeroFlows = require('./react/components/HeroComponent/HeroFlows');

require('./react/components/hero/profile/profile');

require('./react/components/hero/profile/profile_avatar');

require('./react/components/hero/profile/profile_head');

require('./react/components/hero/profile/profile_stats');

require('./react/components/hero/profile/profile_stats_item');

require('./react/components/hero/profile/dropdown_menu');

require('./react/components/hero/profile/dropdown_menu_items/ignore');

require('./react/components/hero/profile/dropdown_menu_items/report');

require('./react/components/hero/profile/popup/popup');

require('./react/components/hero/profile/popup/followers_popup');

require('./react/components/hero/profile/popup/followings_popup');

require('./react/components/hero/profile/popup/tags_popup');

require('./react/components/hero/profile/popup/items/follower_item');

require('./react/components/hero/profile/popup/items/following_item');

require('./react/components/hero/profile/popup/items/tag_item');

global.EditorNew = require('./react/components/Editor/EditorNew');

global.EditorEdit = require('./react/components/Editor/EditorEdit');

global.Spinner = require('../shared/react/components/common/Spinner');

global.ScreenViewer = require('./react/components/screen_viewer/screen_viewer');

global.LandingPageBody = require('./react/components/LandingPage/LandingPageBody');

require('./react/components/alerts/tasty_confirm');

require('./react/components/alerts/tasty_alert');

require('./react/components/alerts/tasty_locking_alert');

require('./react/controllers/tasty_events');

require('./react/controllers/tasty_confirm');

require('./react/controllers/tasty_alert');

require('./react/controllers/tasty_locking_alert');

require('./react/controllers/shellbox');

require('./react/controllers/popup');

require('./react/mediators/comments');

require('./react/application');

global._popupActions = require('./react/actions/popup');


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../shared/react/components/common/Spinner":537,"../shared/react/components/common/imageAttachmentsCollage":547,"../shared/react/services/Beep":551,"../shared/react/services/thumbor":554,"../shared/routes/api":557,"../shared/routes/routes":558,"../shared/shims/console":559,"./locales/moment/en":3,"./locales/moment/ru":4,"./locales/numeral/ru":5,"./react/actions/popup":17,"./react/application":23,"./react/components/Auth/Auth":24,"./react/components/Auth/authorization/authorization":25,"./react/components/Auth/authorization/facebook":26,"./react/components/Auth/authorization/vk":27,"./react/components/Auth/buttons/facebook_auth_button":28,"./react/components/Auth/buttons/vk_auth_button":29,"./react/components/Auth/email/email":33,"./react/components/Auth/recovery":38,"./react/components/BrowserSupport/BrowserSupportContainer":41,"./react/components/DesignPayment/DesignPaymentContainer":43,"./react/components/DesignSettings/DesignSettingsContainer":50,"./react/components/DesignSettings/common/colorPicker/popup":62,"./react/components/Editor/EditorEdit":73,"./react/components/Editor/EditorNew":74,"./react/components/Entry/EntryTlog/EntryTlog":119,"./react/components/EntryBricks/EntryBricksContainer":148,"./react/components/EntryTlogs/EntryTlogsContainer":150,"./react/components/Feed/Feed":151,"./react/components/FeedPage/BestLoadButtonContainer":158,"./react/components/FeedPage/FeedPageBody":159,"./react/components/FeedPage/FriendsLoadButtonContainer":160,"./react/components/FeedPage/LiveLoadButtonContainer":162,"./react/components/FlowBricks/FlowBricksContainer":166,"./react/components/FlowPopups/FlowCreator":175,"./react/components/FlowPopups/FlowManager":176,"./react/components/HeroComponent/HeroFlow":183,"./react/components/HeroComponent/HeroFlows":184,"./react/components/LandingPage/LandingPageBody":187,"./react/components/Notifications/NotificationsContainer":189,"./react/components/SearchResults/SearchResults":205,"./react/components/Settings":225,"./react/components/TlogAlert/TlogAlertContainer":235,"./react/components/TlogPage/TlogPageBody":237,"./react/components/alerts/tasty_alert":243,"./react/components/alerts/tasty_confirm":244,"./react/components/alerts/tasty_locking_alert":245,"./react/components/avatars/UserAvatar":246,"./react/components/avatars/avatar":247,"./react/components/buttons/load_more":248,"./react/components/calendar/calendar":249,"./react/components/calendar/calendar_header":250,"./react/components/calendar/calendar_marker":251,"./react/components/calendar/calendar_period":252,"./react/components/calendar/calendar_timeline":253,"./react/components/common/adaptive_input":274,"./react/components/editable_field":277,"./react/components/embed":278,"./react/components/entry_comment_box/comment_form/buttons/submit":279,"./react/components/entry_comment_box/comment_form/comment_create_form_manager":280,"./react/components/entry_comment_box/comment_form/comment_edit_form_manager":281,"./react/components/entry_comment_box/comment_form/comment_form":282,"./react/components/entry_comment_box/comment_list/comment":283,"./react/components/entry_comment_box/comment_list/comment_list":284,"./react/components/entry_comment_box/comment_list/comment_manager":285,"./react/components/entry_comment_box/comment_metabar/comment_metabar":286,"./react/components/entry_comment_box/comment_metabar/date":287,"./react/components/entry_comment_box/comment_metabar/dropdown_menu":288,"./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/delete_item":289,"./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/edit_item":290,"./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/link_item":291,"./react/components/entry_comment_box/comment_metabar/dropdown_menu_items/report_item":292,"./react/components/entry_comment_box/comment_metabar/reply":293,"./react/components/entry_comment_box/entry_comment_box":294,"./react/components/entry_comment_box/load_more":295,"./react/components/entry_comment_box/mixins/comments":296,"./react/components/entry_metabar/author":297,"./react/components/entry_metabar/comment":298,"./react/components/entry_metabar/date":299,"./react/components/entry_metabar/dropdown_menu":300,"./react/components/entry_metabar/dropdown_menu_items/delete_item":301,"./react/components/entry_metabar/dropdown_menu_items/favorite_item":302,"./react/components/entry_metabar/dropdown_menu_items/item":303,"./react/components/entry_metabar/dropdown_menu_items/report_item":304,"./react/components/entry_metabar/dropdown_menu_items/watch_item":305,"./react/components/entry_metabar/entry_metabar":306,"./react/components/follow_status":309,"./react/components/hero/profile/dropdown_menu":315,"./react/components/hero/profile/dropdown_menu_items/ignore":316,"./react/components/hero/profile/dropdown_menu_items/report":317,"./react/components/hero/profile/popup/followers_popup":318,"./react/components/hero/profile/popup/followings_popup":319,"./react/components/hero/profile/popup/items/follower_item":320,"./react/components/hero/profile/popup/items/following_item":321,"./react/components/hero/profile/popup/items/tag_item":322,"./react/components/hero/profile/popup/popup":323,"./react/components/hero/profile/popup/tags_popup":324,"./react/components/hero/profile/profile":325,"./react/components/hero/profile/profile_avatar":326,"./react/components/hero/profile/profile_head":327,"./react/components/hero/profile/profile_stats":328,"./react/components/hero/profile/profile_stats_item":329,"./react/components/people/item":330,"./react/components/persons_popup/items/follower_relationship":331,"./react/components/persons_popup/items/following_relationship":332,"./react/components/persons_popup/items/guess_relationship":333,"./react/components/persons_popup/items/ignored_relationship":334,"./react/components/persons_popup/items/item":335,"./react/components/persons_popup/items/requested_relationship":336,"./react/components/persons_popup/menu":337,"./react/components/persons_popup/menu_item":338,"./react/components/persons_popup/mixins/panel_mixin":339,"./react/components/persons_popup/panels/followers_panel":340,"./react/components/persons_popup/panels/followings_panel":341,"./react/components/persons_popup/panels/guessed_panel":342,"./react/components/persons_popup/panels/ignored_panel":343,"./react/components/persons_popup/panels/requested_panel":344,"./react/components/persons_popup/panels/socialNetwork/facebook":345,"./react/components/persons_popup/panels/socialNetwork/vkontakte":355,"./react/components/persons_popup/persons_popup":362,"./react/components/popup/header":363,"./react/components/popup/layout":364,"./react/components/popup/popup":365,"./react/components/popup/spinner":366,"./react/components/popup_box":367,"./react/components/relationship_buttons/follow_button":373,"./react/components/relationship_buttons/follower_button":374,"./react/components/relationship_buttons/guess_button":375,"./react/components/relationship_buttons/ignore_button":376,"./react/components/relationship_buttons/mixins/relationship":377,"./react/components/relationship_buttons/request_button":378,"./react/components/screen_viewer/screen_viewer":379,"./react/components/search/button":380,"./react/components/search/field":381,"./react/components/search/search":382,"./react/components/shellbox_layer":383,"./react/components/shellboxes/confirm_registration":384,"./react/components/smart_follow_status":385,"./react/components/toolbars/AvatarToolbarContainer":387,"./react/components/toolbars/CloseToolbar":388,"./react/components/toolbars/ComposeToolbarContainer":390,"./react/components/toolbars/UserToolbarContainer":394,"./react/components/transition/timeout_transition_group":400,"./react/components/voting":401,"./react/controllers/popup":417,"./react/controllers/shellbox":419,"./react/controllers/tasty_alert":420,"./react/controllers/tasty_confirm":421,"./react/controllers/tasty_events":422,"./react/controllers/tasty_locking_alert":423,"./react/dispatchers/current_user":425,"./react/dispatchers/relationships":427,"./react/helpers/app":433,"./react/mediators/comments":434,"./react/messaging/actions/ConversationActions":435,"./react/messaging/actions/message":436,"./react/messaging/actions/notification":437,"./react/messaging/actions/popup":438,"./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser":449,"./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_button":450,"./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_dropdown":451,"./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_results":452,"./react/messaging/components/messages_popup/create_new_conversation/chooser/chooser_results_item":453,"./react/messaging/components/messages_popup/create_new_conversation/create_new_conversation":454,"./react/messaging/components/messages_popup/loading_message":456,"./react/messaging/components/messages_popup/thread/message_list/empty":462,"./react/messaging/components/messages_popup/thread/message_list/message_list":463,"./react/messaging/components/messages_popup/thread/message_list/message_list_item":464,"./react/messaging/components/messages_popup/thread/message_list/message_list_item_manager":465,"./react/messaging/components/messages_popup/ui/back_button":466,"./react/messaging/components/notifications_popup/notifications/empty":467,"./react/messaging/components/notifications_popup/notifications/notification":468,"./react/messaging/components/notifications_popup/notifications/notifications":469,"./react/messaging/components/notifications_popup/notifications_popup":470,"./react/messaging/components/toolbars/indicators/indicators":471,"./react/messaging/components/toolbars/indicators/messages":472,"./react/messaging/components/toolbars/indicators/notifications":473,"./react/messaging/dispatchers/messaging":475,"./react/messaging/messaging_requester":476,"./react/messaging/messaging_service":477,"./react/messaging/messaging_testing":478,"./react/messaging/stores/connection_state":480,"./react/messaging/stores/conversations":481,"./react/messaging/stores/messages":482,"./react/messaging/stores/messages_popup_state":483,"./react/messaging/stores/messaging_status":484,"./react/messaging/stores/notifications":485,"./react/mixins/activities":486,"./react/mixins/component_manipulations":487,"./react/mixins/dom_manipulations":488,"./react/mixins/error_timer":489,"./react/mixins/grammar":490,"./react/mixins/positions":491,"./react/mixins/requester":492,"./react/mixins/scroller":493,"./react/mixins/shake":494,"./react/mixins/touch":495,"./react/mixins/unmount":496,"./react/services/Notice":503,"./react/services/positions":509,"./react/services/uuid":510,"./react/stores/EditorStore":511,"./react/stores/current_user":517,"./react/stores/design":518,"./react/stores/relationships":519,"./resources/fileReceiver":520,"./resources/is_mobile":522,"./resources/libs":523,"./resources/tasty":524,"./resources/tasty_utils":525}],3:[function(require,module,exports){
// Подключаем оригинальный файл с локализацией. В нём производится определение перевода
// вида moment.defineLocale(...)
'use strict';

require('../../../../../node_modules/moment/locale/en-gb');

},{"../../../../../node_modules/moment/locale/en-gb":657}],4:[function(require,module,exports){
// Подключаем оригинальный файл с локализацией. В нём производится определение перевода
// вида moment.defineLocale(...)
'use strict';

require('../../../../../node_modules/moment/locale/ru');

// Перезаписываем необходимые правила вендорной локализации.

function plural(word, num) {
  var forms = word.split('_');
  return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
}

function pastTime(output) {
  return output != 'только что' ? '%s назад'.replace(/%s/i, output) : output;
}

function relativeTimeWithPlural(number, withoutSuffix, key) {
  var format = {
    'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
    'hh': 'час_часа_часов',
    'dd': 'день_дня_дней',
    'MM': 'месяц_месяца_месяцев',
    'yy': 'год_года_лет'
  };

  if (key === 'm') {
    return withoutSuffix ? 'минута' : 'минуту';
  } else {
    return number + ' ' + plural(format[key], +number);
  }
}

moment.locale('ru', {
  relativeTime: {
    future: 'через %s',
    past: pastTime,
    s: 'только что',
    m: relativeTimeWithPlural,
    mm: relativeTimeWithPlural,
    h: 'час',
    hh: relativeTimeWithPlural,
    d: 'день',
    dd: relativeTimeWithPlural,
    M: 'месяц',
    MM: relativeTimeWithPlural,
    y: 'год',
    yy: relativeTimeWithPlural
  }
});

},{"../../../../../node_modules/moment/locale/ru":658}],5:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var language = require('../../../../../node_modules/numeral/languages/ru');
_numeral2['default'].language('ru', language);

},{"../../../../../node_modules/numeral/languages/ru":660,"babel-runtime/helpers/interop-require-default":574,"numeral":"numeral"}],6:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Entry = require('./Entry');

var _Entry2 = _interopRequireDefault(_Entry);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _storesEntriesStore = require('../stores/EntriesStore');

var _storesEntriesStore2 = _interopRequireDefault(_storesEntriesStore);

var _constantsEntriesConstants = require('../constants/EntriesConstants');

var _constantsEntriesConstants2 = _interopRequireDefault(_constantsEntriesConstants);

function setIsLoading(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_IS_LOADING
  });
}

function setHasMore(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_HAS_MORE
  });
}

function setEntries(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_ENTRIES
  });
}

function setNextPage(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE
  });
}

function setNextPageParam(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE_PARAM
  });
}

function setNextPageField(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE_FIELD
  });
}

function setLoadUrl(payload) {
  _dispatchersDispatcher2['default'].handleViewAction({
    payload: payload,
    type: _constantsEntriesConstants2['default'].ENTRIES_SET_LOAD_URL
  });
}

var EntriesActions = {
  init: function init(_ref) {
    var entries_info = _ref.entries_info;
    var loadUrl = _ref.loadUrl;
    var nextPageFieldName = _ref.nextPageFieldName;
    var nextPageParamName = _ref.nextPageParamName;

    setEntries(entries_info.items);
    setHasMore(entries_info.has_more);
    setNextPage(entries_info[nextPageFieldName]);
    setNextPageParam(nextPageParamName);
    setNextPageField(nextPageFieldName);
    setLoadUrl(loadUrl);
  },

  loadMoreEntries: function loadMoreEntries() {
    var data = _storesEntriesStore2['default'].getNextPageData();
    var loadUrl = _storesEntriesStore2['default'].getLoadUrl();

    setIsLoading(true);

    _Entry2['default'].load(loadUrl, data).then(function (entriesInfo) {
      var entries = _storesEntriesStore2['default'].getEntries();
      var nextPageField = _storesEntriesStore2['default'].getNextPageField();

      // Обрабатываем случай, когда передан левый урл. Если в ответе нет нужных
      // нам полей, просто прекращаем дальнейшую загрузку
      if (entriesInfo.has_more != null) {
        setEntries(entries.concat(entriesInfo.items));
        setHasMore(entriesInfo.has_more);
        setNextPage(entriesInfo[nextPageField]);
      } else {
        setHasMore(false);
      }
    }).fail(function () {
      return setHasMore(false);
    }).always(function () {
      return setIsLoading(false);
    });
  },

  loadNewEntries: function loadNewEntries(tillEntryId, count) {
    if (!tillEntryId) {
      return null;
    }

    var loadUrl = _storesEntriesStore2['default'].getLoadUrl();
    var data = {
      till_entry_id: tillEntryId,
      limit: count
    };

    setIsLoading(true);
    return _Entry2['default'].load(loadUrl, data).then(function (entriesInfo) {
      var entries = _storesEntriesStore2['default'].getEntries();
      setEntries((entriesInfo.items || []).concat(entries));
    }).always(function () {
      return setIsLoading(false);
    });
  },

  deleteEntry: function deleteEntry(entryId) {
    var entries = _storesEntriesStore2['default'].getEntries();
    setEntries(entries.filter(function (entry) {
      return entry.entry.id !== entryId;
    }));
  }
};

exports['default'] = EntriesActions;
module.exports = exports['default'];

},{"../constants/EntriesConstants":403,"../dispatchers/dispatcher":426,"../stores/EntriesStore":512,"./Entry":7,"babel-runtime/helpers/interop-require-default":574}],7:[function(require,module,exports){
/*global i18n */
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _sharedReactServicesError = require('../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _servicesNotice = require('../services/Notice');

var _servicesNotice2 = _interopRequireDefault(_servicesNotice);

var EntryActionCreators = {
  vote: function vote(entryID) {
    return _apiApi2['default'].entry.vote(entryID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Голосование за запись', {
        method: 'EntryActionCreators.vote(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  addToFavorites: function addToFavorites(entryID) {
    return _apiApi2['default'].entry.addToFavorites(entryID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Добавление записи в избранное', {
        method: 'EntryActionCreators.addToFavorites(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  removeFromFavorites: function removeFromFavorites(entryID) {
    return _apiApi2['default'].entry.removeFromFavorites(entryID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Удаление записи из избранного', {
        method: 'EntryActionCreators.removeFromFavorites(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  addToWatching: function addToWatching(entryID) {
    return _apiApi2['default'].entry.addToWatching(entryID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Подписка на комментарии к посту', {
        method: 'EntryActionCreators.addToWatching(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  removeFromWatching: function removeFromWatching(entryID) {
    return _apiApi2['default'].entry.removeFromWatching(entryID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Отписка от комментариев к посту', {
        method: 'EntryActionCreators.removeFromWatching(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  report: function report(entryID) {
    return _apiApi2['default'].entry.report(entryID).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('report_entry_success'));
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Жалоба на пост', {
        method: 'EntryActionCreators.report(entryID)',
        methodArguments: { entryID: entryID },
        response: xhr.responseJSON
      });
    });
  },
  'delete': function _delete(entryID, tlogID) {
    return _apiApi2['default'].entry['delete'](entryID, tlogID).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('delete_entry_success'));
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Удаление поста', {
        method: 'EntryActionCreators.delete(entryID, tlogID)',
        methodArguments: { entryID: entryID, tlogID: tlogID },
        response: xhr.responseJSON
      });
    });
  },
  repost: function repost(entryID, tlogID) {
    return _apiApi2['default'].entry.repost(entryID, tlogID).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('repost_entry_success'));
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Репост поста', {
        method: 'EntryActionCreators.repost(entryID, tlogID)',
        methodArguments: { entryID: entryID, tlogID: tlogID },
        response: xhr.responseJSON
      });
    });
  },
  accept: function accept(acceptUrl) {
    return _apiApi2['default'].entry.accept(acceptUrl).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('messages.entry_accept_success'));
    }).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Принятие записи', {
        method: 'EntryActionCreators.accept(acceptUrl)',
        methodArguments: { acceptUrl: acceptUrl },
        response: xhr.responseJSON
      });
    });
  },
  decline: function decline(declineUrl) {
    return _apiApi2['default'].entry.decline(declineUrl).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('messages.entry_decline_success'));
    }).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Отклонение записи', {
        method: 'EntryActionCreators.decline(declineUrl)',
        methodArguments: { declineUrl: declineUrl },
        response: xhr.responseJSON
      });
    });
  },
  load: function load(url, data) {
    return _apiApi2['default'].entry.load(url, data).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка записей', {
        method: 'EntryActionCreators.load(url, data)',
        methodArguments: { url: url, data: data },
        response: xhr.responseJSON
      });
    });
  },
  loadHtml: function loadHtml(url) {
    return _apiApi2['default'].entry.loadHtml(url).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка записей в виде HTML', {
        method: 'EntryActionCreators.loadHtml(url)',
        methodArguments: { url: url },
        response: xhr.responseJSON
      });
    });
  },
  loadComments: function loadComments(entryID, toCommentID, limit) {
    return _apiApi2['default'].entry.loadComments(entryID, toCommentID, limit).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка комментариев', {
        method: 'EntryActionCreators.loadComments(entryID, toCommentID, limit)',
        methodArguments: { entryID: entryID, toCommentID: toCommentID, limit: limit },
        response: xhr.responseJSON
      });
    });
  },
  createComment: function createComment(entryID, text) {
    return _apiApi2['default'].entry.createComment(entryID, text).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Создание комментария к записи', {
        method: 'EntryActionCreators.createComment(entryID, text)',
        methodArguments: { entryID: entryID, text: text },
        response: xhr.responseJSON
      });
    });
  },
  reportComment: function reportComment(commentID) {
    return _apiApi2['default'].entry.reportComment(commentID).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('report_comment_success'));
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Жалоба на комментарий', {
        method: 'EntryActionCreators.reportComment(commentID)',
        methodArguments: { commentID: commentID },
        response: xhr.responseJSON
      });
    });
  },
  editComment: function editComment(commentID, text) {
    return _apiApi2['default'].entry.editComment(commentID, text).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Редактирования комментария к записи', {
        method: 'EntryActionCreators.editComment(commentID, text)',
        methodArguments: { commentID: commentID, text: text },
        response: xhr.responseJSON
      });
    });
  },
  deleteComment: function deleteComment(commentID) {
    return _apiApi2['default'].entry.deleteComment(commentID).then(function () {
      _servicesNotice2['default'].notifySuccess(i18n.t('delete_comment_success'));
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Удаление комментария', {
        method: 'EntryActionCreators.deleteComment(commentID)',
        methodArguments: { commentID: commentID },
        response: xhr.responseJSON
      });
    });
  }
};

exports['default'] = EntryActionCreators;
module.exports = exports['default'];

},{"../../../shared/react/services/Error":552,"../api/api":21,"../services/Notice":503,"babel-runtime/helpers/interop-require-default":574}],8:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.addLiveEntry = addLiveEntry;
exports.resetLiveEntries = resetLiveEntries;
exports.addBestEntry = addBestEntry;
exports.resetBestEntries = resetBestEntries;
exports.addFriendsEntry = addFriendsEntry;
exports.resetFriendsEntries = resetFriendsEntries;
exports.addAnonymousEntry = addAnonymousEntry;
exports.resetAnonymousEntries = resetAnonymousEntries;
exports.addLiveFlowEntry = addLiveFlowEntry;
exports.resetLiveFlowEntries = resetLiveFlowEntries;

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsFeedConstants = require('../constants/FeedConstants');

var _constantsFeedConstants2 = _interopRequireDefault(_constantsFeedConstants);

function addLiveEntry(entry) {
  _dispatchersDispatcher2['default'].handleServerAction({
    payload: entry,
    type: _constantsFeedConstants2['default'].FEED_LIVE_NEW_ENTRY
  });
}

function resetLiveEntries() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_LIVE_RESET
  });
}

function addBestEntry(entry) {
  _dispatchersDispatcher2['default'].handleServerAction({
    payload: entry,
    type: _constantsFeedConstants2['default'].FEED_BEST_NEW_ENTRY
  });
}

function resetBestEntries() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_BEST_RESET
  });
}

function addFriendsEntry(entry) {
  _dispatchersDispatcher2['default'].handleServerAction({
    payload: entry,
    type: _constantsFeedConstants2['default'].FEED_FRIENDS_NEW_ENTRY
  });
}

function resetFriendsEntries() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_FRIENDS_RESET
  });
}

function addAnonymousEntry() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_ANONYMOUS_NEW_ENTRY
  });
}

function resetAnonymousEntries() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_ANONYMOUS_RESET
  });
}

function addLiveFlowEntry() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_LIVE_FLOW_NEW_ENTRY
  });
}

function resetLiveFlowEntries() {
  _dispatchersDispatcher2['default'].handleViewAction({
    type: _constantsFeedConstants2['default'].FEED_LIVE_FLOW_RESET
  });
}

},{"../constants/FeedConstants":405,"../dispatchers/dispatcher":426,"babel-runtime/helpers/interop-require-default":574}],9:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _sharedHelpersApi = require('../../../shared/helpers/api');

var _sharedHelpersApi2 = _interopRequireDefault(_sharedHelpersApi);

var _sharedReactServicesError = require('../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _servicesNotice = require('../services/Notice');

var _servicesNotice2 = _interopRequireDefault(_servicesNotice);

var FlowActionCreators = {
  create: function create(_ref) {
    var name = _ref.name;
    var title = _ref.title;
    var picFile = _ref.picFile;
    var staffs = _ref.staffs;

    var formData = _sharedHelpersApi2['default'].prepareFormData({
      name: name, title: title,
      flowpic: picFile,
      staff_ids: staffs.map(function (staff) {
        return staff.user.id;
      })
    });

    return _apiApi2['default'].flow.create(formData).then(function (flow) {
      TastyLockingAlertController.show({
        message: "Поток создан! Переходим на страницу потока..",
        action: function action() {
          window.location = flow.tlog_url;
        }
      });
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Создание нового потока', {
        method: 'FlowActionCreators.create({name, title, picFile, staffs})',
        methodArguments: { name: name, title: title, picFile: picFile, staffs: staffs },
        response: xhr.responseJSON
      });
    });
  },

  update: function update(flowID, _ref2) {
    var name = _ref2.name;
    var slug = _ref2.slug;
    var title = _ref2.title;
    var picFile = _ref2.picFile;
    var is_privacy = _ref2.is_privacy;
    var has_premoderation = _ref2.has_premoderation;

    var formData = _sharedHelpersApi2['default'].prepareFormData({
      name: name, slug: slug, title: title, is_privacy: is_privacy, has_premoderation: has_premoderation, flowpic: picFile
    });

    return _apiApi2['default'].flow.update(flowID, formData).then(function (flow) {
      _servicesNotice2['default'].notifySuccess('Поток успешно обновлён');
      return flow;
    }).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Изменение потока', {
        method: 'FlowActionCreators.update(flowID, {name, slug, title, picFile, is_privacy, has_premoderation})',
        methodArguments: { flowID: flowID, name: name, slug: slug, title: title, picFile: picFile, is_privacy: is_privacy, has_premoderation: has_premoderation },
        response: xhr.responseJSON
      });
    });
  },

  addStaff: function addStaff(flowID, userID) {
    return _apiApi2['default'].flow.addStaff(flowID, userID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Добавление модератора потока', {
        method: 'FlowActionCreators.addStaff(flowID, userID)',
        methodArguments: { flowID: flowID, userID: userID },
        response: xhr.responseJSON
      });
    });
  },

  removeStaff: function removeStaff(flowID, userID) {
    return _apiApi2['default'].flow.removeStaff(flowID, userID).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Удаление модератора потока', {
        method: 'FlowActionCreators.removeStaff(flowID, userID)',
        methodArguments: { flowID: flowID, userID: userID },
        response: xhr.responseJSON
      });
    });
  },

  changeStaffRole: function changeStaffRole(flowID, userID, role) {
    return _apiApi2['default'].flow.changeStaffRole(flowID, userID, role).fail(function (xhr) {
      _servicesNotice2['default'].errorResponse(xhr);
      _sharedReactServicesError2['default'].notifyErrorResponse('Изменение роли модератора', {
        method: 'FlowActionCreators.removeStaff(flowID, userID, role)',
        methodArguments: { flowID: flowID, userID: userID, role: role },
        response: xhr.responseJSON
      });
    });
  },

  load: function load(url, data) {
    return _apiApi2['default'].flow.load(url, data).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка потоков', {
        method: 'FlowActionCreators.load(url, data)',
        methodArguments: { url: url, data: data },
        response: xhr.responseJSON
      });
    });
  },

  loadMine: function loadMine(data) {
    return _apiApi2['default'].flow.loadMine(data).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка моих потоков', {
        method: 'FlowActionCreators.loadMine(data)',
        methodArguments: { data: data },
        response: xhr.responseJSON
      });
    });
  },

  loadAvailable: function loadAvailable(data) {
    return _apiApi2['default'].flow.loadAvailable(data).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка доступных для репостинга потоков', {
        method: 'FlowActionCreators.loadAvailable(data)',
        methodArguments: { data: data },
        response: xhr.responseJSON
      });
    });
  }
};

exports['default'] = FlowActionCreators;
module.exports = exports['default'];

},{"../../../shared/helpers/api":528,"../../../shared/react/services/Error":552,"../api/api":21,"../services/Notice":503,"babel-runtime/helpers/interop-require-default":574}],10:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _constantsNotification = require('../constants/notification');

var _constantsNotification2 = _interopRequireDefault(_constantsNotification);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var NotificationActionCreators = {
  load: function load() {
    // async setState workaround
    setTimeout(function () {
      _dispatchersDispatcher2['default'].handleViewAction({
        type: _constantsNotification2['default'].LOAD
      });
    }, 0);

    _apiApi2['default'].notifications.load().then(function (response) {
      var notifications = response.notifications;
      var totalCount = response.total_count;

      _dispatchersDispatcher2['default'].handleServerAction({
        notifications: notifications, totalCount: totalCount,
        type: _constantsNotification2['default'].LOAD_SUCCESS
      });
    }).fail(function (xhr) {
      NoticeService.errorResponse(xhr);
      _dispatchersDispatcher2['default'].handleServerAction({
        type: _constantsNotification2['default'].LOAD_ERROR
      });
    });
  },

  markAsRead: function markAsRead(notificationID) {
    _apiApi2['default'].notifications.markAsRead(notificationID).then(function (notification) {
      _dispatchersDispatcher2['default'].handleServerAction({
        notification: notification,
        type: _constantsNotification2['default'].MARK_AS_READ_SUCCESS
      });
    }).fail(function (xhr) {
      NoticeService.errorResponse(xhr);
    });
  },

  loadMore: function loadMore(sinceID) {
    _dispatchersDispatcher2['default'].handleViewAction({
      type: _constantsNotification2['default'].LOAD_MORE
    });

    _apiApi2['default'].notifications.load(sinceID).then(function (response) {
      var notifications = response.notifications;
      var totalCount = response.total_count;

      _dispatchersDispatcher2['default'].handleServerAction({
        notifications: notifications, totalCount: totalCount,
        type: _constantsNotification2['default'].LOAD_MORE_SUCCESS
      });
    }).fail(function (xhr) {
      NoticeService.errorResponse(xhr);
      _dispatchersDispatcher2['default'].handleServerAction({
        type: _constantsNotification2['default'].LOAD_MORE_ERROR
      });
    });
  }
};

exports['default'] = NotificationActionCreators;
module.exports = exports['default'];

},{"../api/api":21,"../constants/notification":412,"../dispatchers/dispatcher":426,"babel-runtime/helpers/interop-require-default":574}],11:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _sharedReactServicesError = require('../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

// TODO: RelationshipStore or smth similar

var RelationshipActionCreators = {
  unfollow: function unfollow(objectID, subjectID) {
    return _apiApi2['default'].relationship.unfollow(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Отписка от тлога', {
        method: 'RelationshipActionCreators.unfollow(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  unfollowFromYourself: function unfollowFromYourself(objectID, subjectID) {
    return _apiApi2['default'].relationship.unfollowFromYourself(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Отписка тлога от себя', {
        method: 'RelationshipActionCreators.unfollowFromYourself(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  follow: function follow(objectID, subjectID) {
    return _apiApi2['default'].relationship.follow(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Подписка на тлог', {
        method: 'RelationshipActionCreators.follow(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  cancel: function cancel(objectID, subjectID) {
    return _apiApi2['default'].relationship.cancel(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Отмена заявки на подписку на тлог', {
        method: 'RelationshipActionCreators.cancel(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  ignore: function ignore(objectID, subjectID) {
    return _apiApi2['default'].relationship.ignore(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Игнорирование тлога', {
        method: 'RelationshipActionCreators.ignore(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  approve: function approve(objectID, subjectID) {
    return _apiApi2['default'].relationship.approve(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Подтверждение запроса на дружбу', {
        method: 'RelationshipActionCreators.approve(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  decline: function decline(objectID, subjectID) {
    return _apiApi2['default'].relationship.decline(objectID, subjectID).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Отказ запроса на дружбу', {
        method: 'RelationshipActionCreators.decline(objectID, subjectID)',
        methodArguments: { objectID: objectID, subjectID: subjectID },
        response: xhr.responseJSON
      });
    });
  },

  load: function load(url, sincePosition, limit) {
    return _apiApi2['default'].relationship.load(url, sincePosition, limit).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Загрузка списка отношений', {
        method: 'RelationshipActionCreators.load(url, sincePosition, limit)',
        methodArguments: { url: url, sincePosition: sincePosition, limit: limit },
        response: xhr.responseJSON
      });
    });
  }
};

exports['default'] = RelationshipActionCreators;
module.exports = exports['default'];

},{"../../../shared/react/services/Error":552,"../api/api":21,"babel-runtime/helpers/interop-require-default":574}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var ToolbarActionCreators = {
  initVisibility: function initVisibility(value) {
    ReactApp.layoutStatesController.toggleState('userToolbar', value);
  },

  toggleOpenness: function toggleOpenness(value) {
    ReactApp.layoutStatesController.toggleState('userToolbar', value);
  }
};

exports['default'] = ToolbarActionCreators;
module.exports = exports['default'];

},{}],13:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _sharedReactServicesError = require('../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var UserActionCreators = {
  predict: function predict(query, limit) {
    return _apiApi2['default'].user.predict(query, limit).fail(function (xhr) {
      _sharedReactServicesError2['default'].notifyErrorResponse('Получение списка пользователей по слагу', {
        method: 'UserActionCreators.predict(query, limit)',
        methodArguments: { query: query, limit: limit },
        response: xhr.responseJSON
      });
    });
  }
};

exports['default'] = UserActionCreators;
module.exports = exports['default'];

},{"../../../shared/react/services/Error":552,"../api/api":21,"babel-runtime/helpers/interop-require-default":574}],14:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.load = load;

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _sharedReactServicesError = require('../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _servicesNotice = require('../services/Notice');

var _servicesNotice2 = _interopRequireDefault(_servicesNotice);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsUserOnboardingConstants = require('../constants/UserOnboardingConstants');

function setIsLoading(status) {
  _dispatchersDispatcher2['default'].handleServerAction({
    payload: status,
    type: _constantsUserOnboardingConstants.USER_ONBOARDING_SET_ISLOADING
  });
}

function load() {
  setIsLoading(true);

  return _apiApi2['default'].onboarding.load().then(function (data) {
    _dispatchersDispatcher2['default'].handleServerAction({
      payload: data.relationships,
      type: _constantsUserOnboardingConstants.USER_ONBOARDING_SET_RELATIONSHIPS
    });
  }).fail(function (xhr) {
    _servicesNotice2['default'].errorResponse(xhr);
    _sharedReactServicesError2['default'].notifyErrorResponse('Подгрузка новых пользователей', {
      method: 'UserOnboardingActions.loadMore()',
      methodArguments: {},
      response: xhr.responseJSON
    });
  }).always(function () {
    return setIsLoading(false);
  });
}

},{"../../../shared/react/services/Error":552,"../api/api":21,"../constants/UserOnboardingConstants":407,"../dispatchers/dispatcher":426,"../services/Notice":503,"babel-runtime/helpers/interop-require-default":574}],15:[function(require,module,exports){
/*global $ */
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _apiSubmitter = require('../api/submitter');

var _apiSubmitter2 = _interopRequireDefault(_apiSubmitter);

var _storesCurrent_user = require('../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _storesDesign = require('../stores/design');

var _storesDesign2 = _interopRequireDefault(_storesDesign);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _servicesDesignPreview = require('../services/designPreview');

var _servicesDesignPreview2 = _interopRequireDefault(_servicesDesignPreview);

var _constantsDesign = require('../constants/design');

var _constantsDesign2 = _interopRequireDefault(_constantsDesign);

var _sharedHelpersBrowser = require('../../../shared/helpers/browser');

var _sharedHelpersBrowser2 = _interopRequireDefault(_sharedHelpersBrowser);

var uploadBgPromise = $.Deferred().resolve();

var DesignActionCreators = {
  initCurrent: function initCurrent(design) {
    _dispatchersDispatcher2['default'].handleViewAction({
      type: _constantsDesign2['default'].INIT_CURRENT,
      design: design
    });
  },

  changeOption: function changeOption(name, value) {
    _dispatchersDispatcher2['default'].handleViewAction({
      type: _constantsDesign2['default'].CHANGE_OPTION,
      name: name, value: value
    });

    var design = _storesDesign2['default'].getCurrent();
    _servicesDesignPreview2['default'].apply(design);
  },

  changeBgImage: function changeBgImage(file) {
    var _this = this;

    var formData = new FormData();
    formData.append('image', file);

    //TODO: Делать что-то на случай если картинка не создастся, а base64 мы уже показали
    uploadBgPromise = _apiApi2['default'].design.createBgImage(formData).then(function (image) {
      _this.changeOption('backgroundId', image.id);
    });

    this.changeOption('backgroundImageUrl', _sharedHelpersBrowser2['default'].createObjectURL(file));
  },

  closeDesignSettings: function closeDesignSettings() {
    _dispatchersDispatcher2['default'].handleViewAction({
      type: _constantsDesign2['default'].CLOSE_DESIGN_SETTINGS
    });

    var design = _storesDesign2['default'].getCurrent();
    _servicesDesignPreview2['default'].apply(design);
  },

  saveCurrent: function saveCurrent() {
    var userID = _storesCurrent_user2['default'].getUser().id;
    var unsavedFields = _storesDesign2['default'].getUnsavedFields();

    if (_Object$keys(unsavedFields).length === 0) {
      NoticeService.notifyError(i18n.t('design_settings_no_unsaved_fields_error'));
    } else {
      // Удаляем ключ содержащий фон картинки, если такой имеется. если мы загрузили
      // картинку, то у нас будет backgroundId его и будем передавать.
      _dispatchersDispatcher2['default'].handleViewAction({
        type: _constantsDesign2['default'].SAVE_CURRENT_START
      });

      uploadBgPromise.then(function () {
        //wait for bg uploads if any
        var design = _storesDesign2['default'].getCurrent();
        delete design.backgroundImageUrl;
        _apiApi2['default'].design.saveCurrent(design, userID).then(function (design) {
          _dispatchersDispatcher2['default'].handleServerAction({
            type: _constantsDesign2['default'].SAVE_CURRENT_SUCCESS,
            design: design
          });
          NoticeService.notifySuccess(i18n.t('design_settings_save_success'));
        }).fail(function () {
          _dispatchersDispatcher2['default'].handleServerAction({
            type: _constantsDesign2['default'].SAVE_CURRENT_FAIL
          });
          NoticeService.notifyError(i18n.t('design_settings_save_error'));
        });
      });
    }
  },

  proceedPayment: function proceedPayment() {
    var url = Routes.orders(),
        design = _storesDesign2['default'].getCurrent();

    // Удаляем ключ содержащий фон картинки, если такой имеется. если мы загрузили
    // картинку, то у нас будет backgroundId его и будем передавать.
    delete design.backgroundImageUrl;
    _apiSubmitter2['default'].postRequest(url, { design: design });
  }
};

exports['default'] = DesignActionCreators;
module.exports = exports['default'];

},{"../../../shared/helpers/browser":529,"../api/api":21,"../api/submitter":22,"../constants/design":410,"../dispatchers/dispatcher":426,"../services/designPreview":506,"../stores/current_user":517,"../stores/design":518,"babel-runtime/core-js/object/keys":565,"babel-runtime/helpers/interop-require-default":574}],16:[function(require,module,exports){
'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _apiApi = require('../api/api');

var _apiApi2 = _interopRequireDefault(_apiApi);

var _constantsEditor = require('../constants/editor');

var _constantsEditor2 = _interopRequireDefault(_constantsEditor);

var _storesEditorStore = require('../stores/EditorStore');

var _storesEditorStore2 = _interopRequireDefault(_storesEditorStore);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _sharedReactServicesUuid = require('../../../shared/react/services/uuid');

var _sharedReactServicesUuid2 = _interopRequireDefault(_sharedReactServicesUuid);

var _sharedHelpersApi = require('../../../shared/helpers/api');

var _sharedHelpersApi2 = _interopRequireDefault(_sharedHelpersApi);

var _sharedHelpersBrowser = require('../../../shared/helpers/browser');

var _sharedHelpersBrowser2 = _interopRequireDefault(_sharedHelpersBrowser);

function createBlobAttachment(image, uuid) {
  return {
    uuid: uuid,
    image: {
      geometry: {
        width: image.width,
        height: image.height
      },
      url: image.src
    }
  };
}

function prepareEntryData(entryType) {
  var pinEntry = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  var data = {},
      title = _storesEditorStore2['default'].getEntryValue('title'),
      text = _storesEditorStore2['default'].getEntryValue('text'),
      privacy = _storesEditorStore2['default'].getEntryPrivacy(),
      imageAttachmentsIDs = _storesEditorStore2['default'].getEntryImageAttachmentsIDs(),
      tlogID = _storesEditorStore2['default'].getTlogID(),
      imageUrl = _storesEditorStore2['default'].getEntryValue('imageUrl'),
      embedUrl = _storesEditorStore2['default'].getEntryValue('embedUrl'),
      source = _storesEditorStore2['default'].getEntryValue('source');

  imageAttachmentsIDs = imageAttachmentsIDs.length ? imageAttachmentsIDs : [''];

  switch (entryType) {
    case 'text':
      data = { title: title, text: text, privacy: privacy };
      break;
    case 'anonymous':
      data = { title: title, text: text };
      break;
    case 'image':
      data = {
        title: title, privacy: privacy,
        image_url: imageUrl,
        image_attachments_ids: imageAttachmentsIDs
      };
      break;
    case 'instagram':
    case 'music':
    case 'video':
      data = {
        title: title, privacy: privacy,
        video_url: embedUrl
      };
      break;
    case 'quote':
      data = { text: text, source: source, privacy: privacy };
      break;
  }

  // Здесь устанавливаются общие для всех типов постов данные
  if (tlogID != null) data.tlog_id = tlogID;
  if (pinEntry) {
    data.want_to_fix = true;
  }

  return data;
}

var EditorActionCreators = {
  init: function init(_ref) {
    var entry = _ref.entry;
    var tlog = _ref.tlog;
    var tlogType = _ref.tlogType;

    _dispatchersDispatcher2['default'].handleViewAction({
      entry: entry, tlog: tlog, tlogType: tlogType,
      type: _constantsEditor2['default'].INIT
    });
  },

  updateField: function updateField(key, value) {
    _dispatchersDispatcher2['default'].handleViewAction({
      key: key, value: value,
      type: _constantsEditor2['default'].UPDATE_FIELD
    });
  },

  changeEntryType: function changeEntryType(entryType) {
    _dispatchersDispatcher2['default'].handleViewAction({
      entryType: entryType,
      type: _constantsEditor2['default'].CHANGE_TYPE
    });
  },

  changeEntryPrivacy: function changeEntryPrivacy(entryPrivacy) {
    _dispatchersDispatcher2['default'].handleViewAction({
      entryPrivacy: entryPrivacy,
      type: _constantsEditor2['default'].CHANGE_PRIVACY
    });
  },

  changeTitle: function changeTitle(title) {
    this.updateField('title', title);
  },

  changeText: function changeText(text) {
    this.updateField('text', text);
  },

  changeImageUrl: function changeImageUrl(imageUrl) {
    this.updateField('imageUrl', imageUrl);
  },

  changeEmbedUrl: function changeEmbedUrl(embedUrl) {
    this.updateField('embedUrl', embedUrl);
  },

  changeEmbedHtml: function changeEmbedHtml(embedHtml) {
    this.updateField('embedHtml', embedHtml);
  },

  changeSource: function changeSource(source) {
    this.updateField('source', source);
  },

  createImageAttachments: function createImageAttachments(files) {
    var _this = this;

    var promises = [];

    _lodash2['default'].forEach(files, function (file) {
      // Общий uuid для imageAttachment-like blob и imageAttachment
      var uuid = _sharedReactServicesUuid2['default'].generate(),
          uploadFailed = false;

      // Добавляем imageAttachment-like blob объект, назначаем ему uuid
      var image = new Image();
      image.onload = function () {
        var attachments = _storesEditorStore2['default'].getEntryValue('imageAttachments') || [],
            newAttachments = [].concat(_toConsumableArray(attachments)),
            blobAttachment = createBlobAttachment(image, uuid);

        newAttachments.push(blobAttachment);
        if (!uploadFailed) {
          _this.updateField('imageAttachments', newAttachments);
        }
      };
      image.src = _sharedHelpersBrowser2['default'].createObjectURL(file);

      // Делаем запрос на создание картинки, на успешный ответ заменяем blob с uuid
      var formData = new FormData();
      formData.append('image', file);

      var promise = _apiApi2['default'].editor.createImageAttachment(formData).then(function (imageAttachment) {
        var attachments = _storesEditorStore2['default'].getEntryValue('imageAttachments') || [],
            newAttachments = [].concat(_toConsumableArray(attachments));
        var blobIndex = _lodash2['default'].findIndex(newAttachments, function (item) {
          return item.uuid === uuid;
        });

        if (blobIndex === -1) {
          // Такого аттачмента локально уже нет, удаляем его на сервере.
          _apiApi2['default'].editor.deleteImageAttachment(imageAttachment.id);
        } else {
          newAttachments[blobIndex] = imageAttachment;
        }

        _this.updateField('imageAttachments', newAttachments);
      }).fail(function (xhr) {
        var attachments = _storesEditorStore2['default'].getEntryValue('imageAttachments') || [],
            newAttachments = [].concat(_toConsumableArray(attachments));
        var blobIndex = _lodash2['default'].findIndex(newAttachments, function (item) {
          return item.uuid === uuid;
        });

        uploadFailed = true;
        NoticeService.notifyError(i18n.t('editor_attachment_error', { fileName: file.name }));
        if (blobIndex !== -1) {
          newAttachments.splice(blobIndex, 1);
        }

        _this.updateField('imageAttachments', newAttachments);
      });
      promises.push(promise);
    });

    _dispatchersDispatcher2['default'].handleServerAction({
      type: _constantsEditor2['default'].ENTRY_CREATING_ATTACHMENTS_START
    });

    return _sharedHelpersApi2['default'].settle(promises).always(function () {
      _dispatchersDispatcher2['default'].handleServerAction({
        type: _constantsEditor2['default'].ENTRY_CREATING_ATTACHMENTS_END
      });
    });
  },

  deleteEmbedUrl: function deleteEmbedUrl() {
    this.changeEmbedUrl(null);
  },

  deleteEmbedHtml: function deleteEmbedHtml() {
    this.changeEmbedHtml(null);
  },

  deleteImageUrl: function deleteImageUrl() {
    this.changeImageUrl(null);
  },

  deleteImageAttachments: function deleteImageAttachments() {
    var attachments = _storesEditorStore2['default'].getEntryValue('imageAttachments') || [];

    _lodash2['default'].forEach(attachments, function (item) {
      if (!item.entry_id && item.id) {
        _apiApi2['default'].editor.deleteImageAttachment(item.id);
      }
    });

    this.updateField('imageAttachments', []);
  },

  createEmbed: function createEmbed(embedUrl) {
    return _apiApi2['default'].editor.createEmbed(embedUrl);
  },

  pinEntry: function pinEntry() {
    _dispatchersDispatcher2['default'].handleViewAction({
      type: _constantsEditor2['default'].ENTRY_PIN
    });

    return this.saveEntry(true);
  },

  saveEntry: function saveEntry(pinEntry) {
    return new _Promise(function (resolve, reject) {
      var entryType = _storesEditorStore2['default'].getEntryType();

      // Сохраняем Video, Instagram и Music в video точке
      if (entryType === 'music' || entryType === 'instagram') {
        entryType = 'video';
      }

      _dispatchersDispatcher2['default'].handleServerAction({
        type: _constantsEditor2['default'].ENTRY_SAVE
      });

      function onSuccessCreate(entry) {
        _dispatchersDispatcher2['default'].handleServerAction({
          type: _constantsEditor2['default'].ENTRY_SAVE_SUCCESS
        });
        NoticeService.closeAll();
        TastyLockingAlertController.show({
          title: i18n.t('editor_alert_header'),
          message: i18n.t('editor_create_success'),
          action: function action() {
            return resolve(entry);
          }
        });
      }

      function onSuccessEdit(entry) {
        _dispatchersDispatcher2['default'].handleServerAction({
          type: _constantsEditor2['default'].ENTRY_SAVE_SUCCESS
        });
        TastyLockingAlertController.show({
          title: i18n.t('editor_alert_header'),
          message: i18n.t('editor_edit_success'),
          action: function action() {
            return resolve(entry);
          }
        });
      }

      function onFail(xhr) {
        _dispatchersDispatcher2['default'].handleServerAction({
          type: _constantsEditor2['default'].ENTRY_SAVE_ERROR
        });
        NoticeService.errorResponse(xhr);
        reject(xhr);
      }

      // Если есть незагруженные аттачменты, ждём пока загрузка не завершится,
      // чтобы отправить данные не выводя лишних сообщений.
      var saveInterval = setInterval(saveWhenPossible, 500);

      function saveWhenPossible() {
        if (!_storesEditorStore2['default'].isCreatingAttachments()) {
          clearInterval(saveInterval);

          var entryID = _storesEditorStore2['default'].getEntryID();
          var data = prepareEntryData(entryType, pinEntry);

          if (entryID) {
            var url = ApiRoutes.update_entry_url(entryID, entryType);
            _apiApi2['default'].editor.updateEntry(url, data).then(onSuccessEdit).fail(onFail);
          } else {
            var url = ApiRoutes.create_entry_url(entryType);
            _apiApi2['default'].editor.createEntry(url, data).then(onSuccessCreate).fail(onFail);
          }
        }
      }
    });
  }
};

exports['default'] = EditorActionCreators;
module.exports = exports['default'];

},{"../../../shared/helpers/api":528,"../../../shared/helpers/browser":529,"../../../shared/react/services/uuid":555,"../api/api":21,"../constants/editor":411,"../dispatchers/dispatcher":426,"../stores/EditorStore":511,"babel-runtime/core-js/promise":567,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/to-consumable-array":576,"lodash":"lodash"}],17:[function(require,module,exports){
var CurrentUserStore, PinEntryPopup, PopupActions, Searchbox, UserOnboarding;

PinEntryPopup = require('../components/Editor/PinEntryPopup');

UserOnboarding = require('../components/UserOnboarding');

CurrentUserStore = require('../stores/current_user');

Searchbox = require('../components/Searchbox/Searchbox');

PopupActions = {
  showSettings: function() {
    return ReactApp.popupController.openWithBackground({
      Component: Settings,
      popupProps: {
        title: i18n.t('settings_header'),
        className: 'popup--settings popup--dark',
        clue: 'settings'
      }
    });
  },
  showUserOnboarding: function() {
    return ReactApp.popupController.openWithBackground({
      Component: UserOnboarding,
      popupProps: {
        title: i18n.t('user_onboarding_title'),
        className: 'popup--onboarding popup--dark',
        clue: 'userOnboarding'
      }
    });
  },
  showDesignSettings: function() {
    var url, user;
    url = location.href;
    user = CurrentUserStore.getUser();
    if (url.indexOf(user.tlog_url.toLowerCase()) === -1) {
      return TastyConfirmController.show({
        message: i18n.t('design_settings_page_confirm'),
        acceptButtonText: i18n.t('design_settings_page_confirm_approve'),
        acceptButtonColor: 'green',
        onAccept: function() {
          return window.location.href = Routes.userDesignSettings(user.slug);
        }
      });
    } else {
      return ReactApp.popupController.open({
        Component: DesignSettingsContainer,
        popupProps: {
          title: i18n.t('design_settings_header'),
          className: 'popup--design-settings',
          clue: 'designSettings',
          draggable: true
        },
        containerAttribute: 'design-settings-container'
      });
    }
  },
  showDesignSettingsPayment: function() {
    return ReactApp.popupController.openWithBackground({
      Component: DesignPaymentContainer,
      popupProps: {
        title: i18n.t('design_payment_header'),
        className: 'popup--payment'
      }
    });
  },
  showSearch: function(props) {
    return ReactApp.popupController.openPopup(Searchbox, props, 'searchbox-container');
  },
  showColorPicker: function(props) {
    return ReactApp.popupController.openPopup(DesignSettingsColorPickerPopup, props, 'color-picker-container');
  },
  closeColorPicker: function() {
    return ReactApp.popupController.close('color-picker-container');
  },
  showFriends: function(panelName, userId) {
    var container;
    container = document.querySelector('[popup-persons-container]');
    if (container == null) {
      container = document.createElement('div');
      container.setAttribute('popup-persons-container', '');
      document.body.appendChild(container);
    }
    return React.render(React.createElement(PersonsPopup, {
      "panelName": panelName,
      "userId": userId
    }), container);
  },
  createFlow: function() {
    return ReactApp.popupController.openWithBackground({
      Component: FlowCreator,
      popupProps: {
        title: i18n.t('create_flow.header'),
        className: 'popup--dark popup--flows',
        clue: 'create-flow'
      }
    });
  },
  manageFlow: function(flow, onUpdate) {
    return ReactApp.popupController.openWithBackground({
      Component: FlowManager,
      props: {
        flow: flow,
        onUpdate: onUpdate
      },
      popupProps: {
        title: i18n.t('manage_flow.header'),
        className: 'popup--dark popup--flows',
        clue: 'manage-flow'
      }
    });
  },
  toggleFriends: function() {
    var container;
    container = document.querySelector('[popup-persons-container]');
    if (container != null) {
      return ReactApp.popupController.close('popup-persons-container');
    } else {
      return this.showFriends();
    }
  },
  toggleDesignSettings: function() {
    var container;
    container = document.querySelector('[design-settings-container]');
    if (container != null) {
      return ReactApp.popupController.close('design-settings-container');
    } else {
      return this.showDesignSettings();
    }
  },
  toggleMessages: function() {
    return messagingService.toggleMessagesPopup();
  },
  showNotifications: function() {
    return ReactApp.padController.open(NotificationsContainer, {
      actSelector: '.toolbar__nav-item .icon--bell'
    });
  },
  showPinEntryPopup: function(props) {
    return ReactApp.popupController.openWithBackground({
      props: props,
      Component: PinEntryPopup,
      popupProps: {
        title: 'eeee',
        className: '',
        clue: ''
      }
    });
  }
};

module.exports = PopupActions;


},{"../components/Editor/PinEntryPopup":83,"../components/Searchbox/Searchbox":208,"../components/UserOnboarding":241,"../stores/current_user":517}],18:[function(require,module,exports){
var Api, SearchActions;

Api = require('../api/api');

SearchActions = {
  loadNextPage: function(searchUrl) {
    return Api.search.loadNextPage(searchUrl);
  }
};

module.exports = SearchActions;


},{"../api/api":21}],19:[function(require,module,exports){
var CurrentUserServerActions;

CurrentUserServerActions = {
  updateUser: function(user) {
    return CurrentUserDispatcher.handleServerAction({
      type: 'userUpdated',
      user: user
    });
  },
  updateUserpic: function(userpic) {
    return CurrentUserDispatcher.handleServerAction({
      type: 'userpicUpdated',
      userpic: userpic
    });
  },
  cancelEmailConfirmation: function() {
    return CurrentUserDispatcher.handleServerAction({
      type: 'confirmationEmailCanceled'
    });
  },
  stopFbCrosspost: function() {
    return CurrentUserDispatcher.handleServerAction({
      type: 'stopFbCrosspost'
    });
  },
  stopTwitterCrosspost: function() {
    return CurrentUserDispatcher.handleServerAction({
      type: 'stopTwitterCrosspost'
    });
  }
};

module.exports = CurrentUserServerActions;


},{}],20:[function(require,module,exports){
var CurrentUserResource, CurrentUserServerActions, CurrentUserViewActions;

CurrentUserResource = require('../../resources/current_user');

CurrentUserServerActions = require('../server/current_user');

CurrentUserViewActions = {
  updateSlug: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        slug: options.slug
      }
    });
    return this.update(options);
  },
  updateTitle: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        title: options.title
      }
    });
    return this.update(options);
  },
  updatePrivacy: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        is_privacy: options.privacy
      }
    });
    return this.update(options);
  },
  updateDaylog: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        is_daylog: options.daylog
      }
    });
    return this.update(options);
  },
  updateFemale: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        is_female: options.female
      }
    });
    return this.update(options);
  },
  updateAvailableNotifications: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        available_notifications: options.availableNotifications
      }
    });
    return this.update(options);
  },
  updatePhone: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        phone: options.phone
      }
    });
    return this.update(options);
  },
  updateEmail: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        email: options.email
      }
    });
    return this.update(options);
  },
  updatePassword: function(options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, {
      data: {
        password: options.password
      }
    });
    return this.update(options);
  },
  updateLanguage: function(language) {
    var data;
    data = {
      locale: language
    };
    return this.update({
      data: data
    });
  },
  stopFbCrosspost: function(options) {
    var oldSuccess;
    if (options == null) {
      options = {};
    }
    oldSuccess = options.success;
    options.success = function() {
      CurrentUserServerActions.stopFbCrosspost();
      return typeof oldSuccess === "function" ? oldSuccess() : void 0;
    };
    return CurrentUserResource.stopFbCrosspost(options);
  },
  stopTwitterCrosspost: function(options) {
    var oldSuccess;
    if (options == null) {
      options = {};
    }
    oldSuccess = options.success;
    options.success = function() {
      CurrentUserServerActions.stopTwitterCrosspost();
      return typeof oldSuccess === "function" ? oldSuccess() : void 0;
    };
    return CurrentUserResource.stopTwitterCrosspost(options);
  },
  cancelEmailConfirmation: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return CurrentUserResource.cancelEmailConfirmation({
      beforeSend: beforeSend,
      success: function() {
        CurrentUserServerActions.cancelEmailConfirmation();
        return typeof success === "function" ? success() : void 0;
      },
      error: error,
      complete: complete
    });
  },
  resendEmailConfirmation: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return CurrentUserResource.resendEmailConfirmation({
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete
    });
  },
  update: function(arg) {
    var beforeSend, complete, data, error, success;
    data = arg.data, beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return CurrentUserResource.update({
      data: data,
      beforeSend: beforeSend,
      success: function(user) {
        CurrentUserServerActions.updateUser(user);
        return typeof success === "function" ? success(user) : void 0;
      },
      error: function(data) {
        NoticeService.errorResponse(data);
        return typeof error === "function" ? error(data) : void 0;
      },
      complete: complete
    });
  }
};

module.exports = CurrentUserViewActions;


},{"../../resources/current_user":500,"../server/current_user":19}],21:[function(require,module,exports){
var Api, Constants, CurrentUserStore, _, _pendingRequests, abortPendingRequests, csrfToken, deleteRequest, getRequest, postRequest, prepareData, putRequest, request, userToken;

_ = require('lodash');

Constants = require('../constants/constants');

CurrentUserStore = require('../stores/current_user');

_pendingRequests = {};

prepareData = function(sourceData) {
  var data;
  data = {};
  Object.keys(sourceData).forEach(function(key, idx) {
    if (sourceData[key] != null) {
      return data[key] = sourceData[key];
    }
  });
  return data;
};

abortPendingRequests = function(key) {
  if (_pendingRequests[key]) {
    _pendingRequests[key].abort();
    return _pendingRequests[key] = null;
  }
};

userToken = function() {
  return CurrentUserStore.getAccessToken();
};

csrfToken = function() {
  var tokenNode;
  tokenNode = document.querySelector('[name="csrf-token"]');
  if (tokenNode != null) {
    return tokenNode.getAttribute('content');
  } else {
    return null;
  }
};

request = function(_method, url, data) {
  var contentType, headers, method, processData;
  if (data == null) {
    data = {};
  }
  headers = {
    'X-Requested-With': 'XMLHttpRequest',
    'X-Tasty-Client-Name': 'web_desktop',
    'X-Tasty-Client-Version': gon.version
  };
  if (userToken()) {
    headers['X-User-Token'] = userToken();
  }
  if (csrfToken()) {
    headers['X-CSRF-Token'] = csrfToken();
  }
  method = (function() {
    switch (_method) {
      case 'GET':
        return 'GET';
      case 'POST':
      case 'PUT':
      case 'DELETE':
        return 'POST';
      default:
        return 'GET';
    }
  })();
  if (data instanceof FormData) {
    contentType = false;
    processData = false;
    data.append('_method', _method);
  } else {
    contentType = 'application/x-www-form-urlencoded';
    processData = true;
    data = _.extend({}, data, {
      _method: _method
    });
  }
  return $.ajax({
    url: url,
    method: method,
    data: data,
    contentType: contentType,
    processData: processData,
    headers: headers,
    xhrFields: {
      withCredentials: true,
      crossDomain: true
    }
  });
};

getRequest = function(url, data) {
  return request('GET', url, data);
};

postRequest = function(url, data) {
  return request('POST', url, data);
};

putRequest = function(url, data) {
  return request('PUT', url, data);
};

deleteRequest = function(url, data) {
  return request('DELETE', url, data);
};

Api = {
  search: {
    loadNextPage: function(searchUrl) {
      var key;
      key = Constants.api.SEARCH_LOAD_NEXT_PAGE;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(searchUrl);
    }
  },
  design: {
    saveCurrent: function(design, userID) {
      var data, key, url;
      url = ApiRoutes.design_settings_url(userID);
      key = Constants.api.DESIGN_SAVE;
      data = design;
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(url, data);
    },
    createBgImage: function(formData) {
      var key, url;
      url = ApiRoutes.backgrounds();
      key = Constants.api.CREATE_BG_IMAGE;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, formData);
    }
  },
  editor: {
    createImageAttachment: function(formData) {
      var key, url;
      url = ApiRoutes.imageAttachments();
      key = Constants.api.EDITOR_CREATE_IMAGE_ATTACHMENT;
      return _pendingRequests[key] = postRequest(url, formData);
    },
    deleteImageAttachment: function(attachmentID) {
      var key, url;
      url = ApiRoutes.imageAttachmentsWithID(attachmentID);
      key = Constants.api.EDITOR_DELETE_IMAGE_ATTACHMENT;
      return _pendingRequests[key] = deleteRequest(url);
    },
    createEmbed: function(embedUrl) {
      var data, key, url;
      url = ApiRoutes.iframely_url();
      key = Constants.api.EDITOR_CREATE_EMBED;
      data = {
        url: embedUrl
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    createEntry: function(url, data) {
      var key;
      key = Constants.api.EDITOR_CREATE_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    updateEntry: function(url, data) {
      var key;
      key = Constants.api.EDITOR_UPDATE_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(url, data);
    }
  },
  notifications: {
    load: function(sinceID) {
      var data, key, url;
      url = ApiRoutes.notificationsUrl();
      key = Constants.api.LOAD_NOTIFICATIONS;
      data = {
        to_notification_id: sinceID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    },
    markAsRead: function(notificationID) {
      var key, url;
      url = ApiRoutes.notifications_read_url(notificationID);
      key = Constants.api.READ_NOTIFICATION;
      return _pendingRequests[key] = putRequest(url);
    }
  },
  relationship: {
    unfollow: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsToTlog(objectID, subjectID, 'unfollow');
      key = Constants.api.UNFOLLOW_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    unfollowFromYourself: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsByTlog(objectID, subjectID);
      key = Constants.api.UNFOLLOW_TLOG_FROM_YOURSELF;
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url);
    },
    follow: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsToTlog(objectID, subjectID, 'follow');
      key = Constants.api.FOLLOW_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    cancel: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsToTlog(objectID, subjectID, 'cancel');
      key = Constants.api.CANCEL_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    ignore: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsToTlog(objectID, subjectID, 'ignore');
      key = Constants.api.IGNORE_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    approve: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsByApprove(objectID, subjectID);
      key = Constants.api.APPROVE_REQUEST_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    decline: function(objectID, subjectID) {
      var key, url;
      url = ApiRoutes.tlogRelationshipsByDisapprove(objectID, subjectID);
      key = Constants.api.DISAPPROVE_REQUEST_TLOG;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    load: function(url, sincePosition, limit) {
      var data, key;
      key = Constants.api.LOAD_RELATIONSHIPS;
      data = prepareData({
        limit: limit,
        since_position: sincePosition
      });
      return _pendingRequests[key] = getRequest(url, data);
    }
  },
  entry: {
    vote: function(entryID) {
      var key, url;
      url = ApiRoutes.votes_url(entryID);
      key = Constants.api.VOTE_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    addToFavorites: function(entryID) {
      var data, key, url;
      url = ApiRoutes.favorites_url();
      key = Constants.api.ADD_TO_FAVORITES_ENTRY;
      data = {
        entry_id: entryID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    removeFromFavorites: function(entryID) {
      var data, key, url;
      url = ApiRoutes.favorites_url();
      key = Constants.api.REMOVE_FROM_FAVORITES_ENTRY;
      data = {
        entry_id: entryID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url, data);
    },
    addToWatching: function(entryID) {
      var data, key, url;
      url = ApiRoutes.watching_url();
      key = Constants.api.ADD_TO_WATCHING_ENTRY;
      data = {
        entry_id: entryID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    removeFromWatching: function(entryID) {
      var data, key, url;
      url = ApiRoutes.watching_url();
      key = Constants.api.REMOVE_FROM_WATCHING_ENTRY;
      data = {
        entry_id: entryID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url, data);
    },
    repost: function(entryID, tlogID) {
      var data, key, url;
      url = ApiRoutes.reposts_url();
      key = Constants.api.REPOST_ENTRY;
      data = {
        entry_id: entryID,
        tlog_id: tlogID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    report: function(entryID) {
      var key, url;
      url = ApiRoutes.report_url(entryID);
      key = Constants.api.REPORT_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    "delete": function(entryID, tlogID) {
      var data, key, url;
      url = ApiRoutes.reposts_url();
      key = Constants.api.DELETE_ENTRY;
      data = {
        entry_id: entryID,
        tlog_id: tlogID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url, data);
    },
    accept: function(acceptUrl) {
      var key;
      key = Constants.api.ACCEPT_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(acceptUrl);
    },
    decline: function(declineUrl) {
      var key;
      key = Constants.api.DECLINE_ENTRY;
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(declineUrl);
    },
    load: function(url, data) {
      var key;
      key = Constants.api.LOAD_ENTRIES;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    },
    loadHtml: function(url) {
      var key;
      key = Constants.api.LOAD_HTML_ENTRIES;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url);
    },
    loadComments: function(entryID, toCommentID, limit) {
      var data, url;
      url = ApiRoutes.comments_url();
      data = {
        limit: limit,
        entry_id: entryID,
        to_comment_id: toCommentID
      };
      return getRequest(url, data);
    },
    createComment: function(entryID, text) {
      var data, key, url;
      url = ApiRoutes.comments_url();
      key = Constants.api.CREATE_COMMENT;
      data = {
        text: text,
        entry_id: entryID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    reportComment: function(commentID) {
      var key, url;
      url = ApiRoutes.comments_report_url(commentID);
      key = Constants.api.REPORT_COMMENT;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url);
    },
    editComment: function(commentID, text) {
      var data, key, url;
      url = ApiRoutes.comments_edit_delete_url(commentID);
      key = Constants.api.EDIT_COMMENT;
      data = {
        text: text
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(url, data);
    },
    deleteComment: function(commentID) {
      var key, url;
      url = ApiRoutes.comments_edit_delete_url(commentID);
      key = Constants.api.DELETE_COMMENT;
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url);
    }
  },
  user: {
    predict: function(query, limit) {
      var data, key, url;
      url = ApiRoutes.users_predict();
      key = Constants.api.PREDICT_USERS;
      data = {
        query: query,
        limit: limit
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    }
  },
  onboarding: {
    load: function(params) {
      var key, url;
      url = ApiRoutes.relationships_to_url('friend');
      key = Constants.api.USER_ONBOARDING_LOAD;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, params);
    }
  },
  flow: {
    create: function(formData) {
      var key, url;
      url = ApiRoutes.flows();
      key = Constants.api.CREATE_FLOW;
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, formData);
    },
    update: function(flowID, formData) {
      var key, url;
      url = ApiRoutes.flow(flowID);
      key = Constants.api.UPDATE_FLOW;
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(url, formData);
    },
    addStaff: function(flowID, userID) {
      var data, key, url;
      url = ApiRoutes.flowStaffs(flowID);
      key = Constants.api.ADD_STAFF_FLOW;
      data = {
        user_id: userID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = postRequest(url, data);
    },
    removeStaff: function(flowID, userID) {
      var data, key, url;
      url = ApiRoutes.flowStaffs(flowID);
      key = Constants.api.REMOVE_STAFF_FLOW;
      data = {
        user_id: userID
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = deleteRequest(url, data);
    },
    changeStaffRole: function(flowID, userID, role) {
      var data, key, url;
      url = ApiRoutes.flowStaffs(flowID);
      key = Constants.api.CHANGE_STAFF_ROLE_FLOW;
      data = {
        user_id: userID,
        role: role
      };
      abortPendingRequests(key);
      return _pendingRequests[key] = putRequest(url, data);
    },
    load: function(url, data) {
      var key;
      key = Constants.api.LOAD_FLOWS;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    },
    loadMine: function(data) {
      var key, url;
      url = ApiRoutes.flowsMine();
      key = Constants.api.LOAD_MY_FLOWS;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    },
    loadAvailable: function(data) {
      var key, url;
      url = ApiRoutes.flowsAvailable();
      key = Constants.api.LOAD_AVAILABLE_FLOWS;
      abortPendingRequests(key);
      return _pendingRequests[key] = getRequest(url, data);
    }
  }
};

module.exports = Api;


},{"../constants/constants":409,"../stores/current_user":517,"lodash":"lodash"}],22:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function buildParams(prefix, obj, traditional, add) {
  var name = undefined,
      i = undefined,
      v = undefined,
      rbracket = /\[\]$/;

  if (_lodash2['default'].isArray(obj)) {
    // Serialize array item.
    for (i = 0; obj && i < obj.length; i++) {
      v = obj[i];
      if (traditional || rbracket.test(prefix)) {
        // Treat each array item as a scalar.
        add(prefix, v);
      } else {
        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
      }
    }
  } else if (_lodash2['default'].isObject(obj)) {
    // Serialize object item.
    for (name in obj) {
      buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
    }
  } else {
    // Serialize scalar item.
    add(prefix, obj);
  }
}

function csrfToken() {
  var tokenNode = document.querySelector('[name="csrf-token"]'),
      token = undefined;

  if (tokenNode != null) {
    token = tokenNode.getAttribute('content');
  } else {
    token = null;
  }

  return token;
}

var Submitter = {
  request: function request(method, url, data) {
    if (method === undefined) method = 'POST';
    var traditional = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

    var form = document.createElement('form');
    form.setAttribute('method', method);
    form.setAttribute('action', url);

    function add(key, value) {
      var hiddenField = document.createElement('input');
      hiddenField.setAttribute('type', 'hidden');
      hiddenField.setAttribute('name', key);
      hiddenField.setAttribute('value', value);
      form.appendChild(hiddenField);
    };

    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        buildParams(key, data[key], traditional, add);
      }
    }

    // Add CSRF-token
    var token = csrfToken();
    if (token != null) {
      buildParams('authenticity_token', token, traditional, add);
    }

    document.body.appendChild(form);
    form.submit();
  },

  getRequest: function getRequest(url, data) {
    var traditional = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    this.request('GET', url, data, traditional);
  },

  postRequest: function postRequest(url, data) {
    var traditional = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    this.request('POST', url, data, traditional);
  }
};

exports['default'] = Submitter;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"lodash":"lodash"}],23:[function(require,module,exports){
var AppDispatcher, DesignActionCreators, EditorActionCreators, EntryConstants, FeedsUpdateService, GuideController, LayoutStatesController, PadController, PopupActions, PopupController, ReactUjs, initLocales, initRoutes, injectTapEventPlugin, numeral;

window.i18n = require('i18next');

ReactUjs = require('reactUjs');

PopupActions = require('./actions/popup');

DesignActionCreators = require('./actions/design');

AppDispatcher = require('./dispatchers/dispatcher');

GuideController = require('./controllers/guide');

LayoutStatesController = require('./controllers/layoutStates');

PopupController = require('./controllers/popuup');

PadController = require('./controllers/pad');

numeral = require('numeral');

injectTapEventPlugin = require('react-tap-event-plugin');

FeedsUpdateService = require('./services/FeedsUpdateService');

EditorActionCreators = require('./actions/editor');

EntryConstants = require('./constants/EntryConstants');

initLocales = function(locale, callback) {
  numeral.language(locale);
  moment.locale(locale);
  return i18n.init({
    lng: locale,
    fallbackLng: 'ru',
    cache: true,
    resGetPath: Routes.locale()
  }, callback);
};

initRoutes = function() {
  var EditorTarget, UserRouteTarget, hasAccessBySlug;
  hasAccessBySlug = function(urlSlug) {
    var user, userLogged;
    user = CurrentUserStore.getUser();
    userLogged = CurrentUserStore.isLogged();
    if (!userLogged || urlSlug.slice(1).toLowerCase() !== (user != null ? user.slug : void 0)) {
      return false;
    } else {
      return true;
    }
  };
  UserRouteTarget = {
    profile: function() {
      return TastyEvents.emit(TastyEvents.keys.command_hero_open());
    },
    settings: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showSettings();
    },
    design_settings: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showDesignSettings(req.params.slug);
    },
    showRequestedById: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showFriends('vkontakte', Number(req.params.id));
    },
    showRequested: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showFriends('requested');
    },
    showVkontakte: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showFriends('vkontakte');
    },
    showFacebook: function(req) {
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      return PopupActions.showFriends('facebook');
    }
  };
  EditorTarget = {
    index: function(req) {
      var reqHash;
      if (!hasAccessBySlug(req.params.slug)) {
        return;
      }
      reqHash = window.location.hash.substr(1);
      if (EntryConstants.ENTRY_TYPES.indexOf(reqHash) > -1) {
        return EditorActionCreators.changeEntryType(reqHash);
      }
    }
  };
  Aviator.setRoutes({
    '/:slug': {
      target: UserRouteTarget,
      '/profile': 'profile',
      '/settings': 'settings',
      '/design_settings': 'design_settings',
      '/new': {
        target: EditorTarget,
        '/': 'index'
      },
      '/friends': {
        '/requested': {
          '/': 'showRequested',
          '/:id': 'showRequestedById'
        },
        '/vkontakte': 'showVkontakte',
        '/facebook': 'showFacebook'
      }
    }
  });
  return Aviator.dispatch();
};

window.ReactApp = {
  start: function(arg) {
    var locale, user;
    user = arg.user, locale = arg.locale;
    console.log('ReactApp start');
    if (user != null) {
      CurrentUserDispatcher.setupUser(user);
      window.messagingService = new MessagingService({
        user: CurrentUserStore.getUser()
      });
      DesignActionCreators.initCurrent(CurrentUserStore.getUser().design);
    }
    FeedsUpdateService(user);
    initLocales(locale, function() {
      console.log('Locales loaded');
      ReactUjs.initialize();
      return initRoutes();
    });
    injectTapEventPlugin();
    this.layoutStatesController = new LayoutStatesController();
    this.popupController = new PopupController();
    this.padController = new PadController();
    this.shellbox = new ReactShellBox();
    this.popup = new ReactPopup();
    $('[invite-button]').click((function(_this) {
      return function() {
        return _this.shellbox.show(Auth);
      };
    })(this));
    $("[tooltip]").tooltip();
    return $('.js-connection-start').connection({
      connectionEnd: '.js-connection-end',
      connectionLineClass: 'connection-line'
    });
  }
};


},{"./actions/design":15,"./actions/editor":16,"./actions/popup":17,"./constants/EntryConstants":404,"./controllers/guide":414,"./controllers/layoutStates":415,"./controllers/pad":416,"./controllers/popuup":418,"./dispatchers/dispatcher":426,"./services/FeedsUpdateService":502,"i18next":"i18next","numeral":"numeral","react-tap-event-plugin":"react-tap-event-plugin","reactUjs":"reactUjs"}],24:[function(require,module,exports){
(function (global){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

global.Auth = React.createClass({
  displayName: 'Auth',

  propTypes: {
    fixed: React.PropTypes.bool
  },

  render: function render() {
    var inviterClasses = (0, _classnames2['default'])('inviter', {
      'inviter--fixed': this.props.fixed
    });
    var boxStyle = {
      backgroundImage: 'url("http://thumbor0.tasty0.ru/unsafe/712x416/smart/images/inviter_bg.jpg")'
    };

    return React.createElement(
      'div',
      { className: inviterClasses },
      React.createElement(
        'div',
        { className: 'inviter__box', style: boxStyle },
        React.createElement('div', { className: 'inviter__overlay' }),
        React.createElement(
          'div',
          { className: 'grid-full' },
          React.createElement(
            'div',
            { className: 'grid-full__middle' },
            React.createElement(
              'div',
              { className: 'inviter__logo' },
              React.createElement('i', { className: 'icon icon--ribbon' })
            ),
            React.createElement('div', { className: 'inviter__title', dangerouslySetInnerHTML: { __html: i18n.t('auth') } }),
            React.createElement(
              'div',
              { className: 'inviter__text' },
              i18n.t('auth_select_signin_method')
            ),
            React.createElement(
              'div',
              { className: 'inviter__actions' },
              React.createElement(
                'a',
                { href: ApiRoutes.omniauth_url('vkontakte'),
                  className: 'vk-auth-button',
                  onClick: this.handleVkClick },
                i18n.t('vkontakte')
              ),
              React.createElement(
                'a',
                { href: ApiRoutes.omniauth_url('facebook'),
                  className: 'fb-auth-button',
                  onClick: this.handleFacebookClick },
                i18n.t('facebook')
              ),
              React.createElement(
                'a',
                { href: '#',
                  className: 'site-auth-button',
                  onClick: this.handleEmailClick },
                i18n.t('auth_signin_login')
              )
            ),
            React.createElement('div', { className: 'inviter__spacer' }),
            React.createElement(
              'div',
              { className: 'inviter__stats' },
              React.createElement(
                'div',
                { className: 'inviter__stats-item' },
                this.renderEntriesCount()
              ),
              React.createElement(
                'div',
                { className: 'inviter__stats-item' },
                this.renderUsersCount()
              ),
              React.createElement(
                'div',
                { className: 'inviter__stats-item' },
                this.renderSecondsCount()
              )
            )
          )
        )
      )
    );
  },

  renderEntriesCount: function renderEntriesCount() {
    var number = parseInt(TastyUtils.formatNumber(gon.app_stats.entries_count, 100, '')),
        formatedNumber = TastyUtils.formatNumber(gon.app_stats.entries_count, 100);

    return React.createElement(
      'span',
      null,
      React.createElement(
        'strong',
        null,
        formatedNumber,
        '+'
      ),
      React.createElement(
        'span',
        null,
        i18n.t('entries_count', { count: number })
      )
    );
  },

  renderUsersCount: function renderUsersCount() {
    var number = parseInt(TastyUtils.formatNumber(gon.app_stats.users_count, 100, '')),
        formatedNumber = TastyUtils.formatNumber(gon.app_stats.users_count, 100);

    return React.createElement(
      'span',
      null,
      React.createElement(
        'strong',
        null,
        formatedNumber,
        '+'
      ),
      React.createElement(
        'span',
        null,
        i18n.t('users_count', { count: number })
      )
    );
  },

  renderSecondsCount: function renderSecondsCount() {
    var number = 30;

    return React.createElement(
      'span',
      null,
      React.createElement(
        'strong',
        null,
        React.createElement(
          'span',
          { className: 'tilde' },
          '~'
        ),
        React.createElement(
          'span',
          null,
          number
        )
      ),
      React.createElement(
        'span',
        null,
        i18n.t('seconds_count', { count: number })
      )
    );
  },

  handleEmailClick: function handleEmailClick(ev) {
    ev.preventDefault();
    ReactApp.shellbox.show(Email);
  }
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"babel-runtime/helpers/interop-require-default":574,"classnames":647}],25:[function(require,module,exports){
window.AuthorizationShellbox = React.createClass({
  render: function() {
    var boxStyle, entriesCount, usersCount;
    entriesCount = this._getEntriesCount();
    usersCount = this._getUsersCount();
    boxStyle = {
      backgroundImage: "url(http://thumbor0.tasty0.ru/unsafe/712x416/smart//images/inviter_bg.jpg)"
    };
    return React.createElement("div", {
      "className": "inviter"
    }, React.createElement("div", {
      "className": "inviter__box",
      "style": boxStyle
    }, React.createElement("div", {
      "className": "inviter__overlay"
    }), React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "inviter__logo"
    }, React.createElement("i", {
      "className": "icon icon--ribbon"
    })), React.createElement("div", {
      "className": "inviter__title",
      "dangerouslySetInnerHTML": {
        __html: i18n.t('auth')
      }
    }), React.createElement("div", {
      "className": "inviter__actions"
    }, this.props.children), React.createElement("div", {
      "className": "inviter__spacer"
    }), React.createElement("div", {
      "className": "inviter__stats"
    }, React.createElement("div", {
      "className": "inviter__stats-item"
    }, this.renderEntriesCount()), React.createElement("div", {
      "className": "inviter__stats-item"
    }, this.renderUsersCount()), React.createElement("div", {
      "className": "inviter__stats-item"
    }, this.renderSecondsCount()))))));
  },
  renderEntriesCount: function() {
    var formatedNumber, number;
    number = parseInt(TastyUtils.formatNumber(window.gon.app_stats.entries_count, 100, ''));
    formatedNumber = TastyUtils.formatNumber(window.gon.app_stats.entries_count, 100);
    return React.createElement("span", null, React.createElement("strong", null, formatedNumber, "+"), React.createElement("span", null, i18n.t('entries_count', {
      count: number
    })));
  },
  renderUsersCount: function() {
    var formatedNumber, number;
    number = parseInt(TastyUtils.formatNumber(window.gon.app_stats.users_count, 100, ''));
    formatedNumber = TastyUtils.formatNumber(window.gon.app_stats.users_count, 100);
    return React.createElement("span", null, React.createElement("strong", null, formatedNumber, "+"), React.createElement("span", null, i18n.t('users_count', {
      count: number
    })));
  },
  renderSecondsCount: function() {
    var number;
    number = 30;
    return React.createElement("span", null, React.createElement("strong", null, React.createElement("span", {
      "className": "tilde"
    }, "~"), number), React.createElement("span", null, i18n.t('seconds_count', {
      count: number
    })));
  }
});


},{}],26:[function(require,module,exports){
var AUTH_TIMEOUT;

AUTH_TIMEOUT = 30000;

window.FacebookAuthorizationShellbox = React.createClass({
  propTypes: {
    disableShellbox: React.PropTypes.func.isRequired,
    enableShellbox: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      isActive: true
    };
  },
  componentDidMount: function() {
    this.props.disableShellbox();
    this.timeout = setTimeout(this._cancelAuth, AUTH_TIMEOUT);
    return _.defer(function() {
      return window.location = ApiRoutes.omniauth_url('facebook');
    });
  },
  componentWillUnmount: function() {
    if (this.timeout != null) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    return React.createElement(AuthorizationShellbox, null, React.createElement(Shellbox_FacebookAuthButton, {
      "isActive": this.state.isActive
    }));
  },
  _cancelAuth: function() {
    this.props.enableShellbox();
    window.stop();
    return ReactApp.shellbox.show(AuthShellbox);
  }
});


},{}],27:[function(require,module,exports){
var AUTH_TIMEOUT;

AUTH_TIMEOUT = 30000;

window.VkAuthorizationShellbox = React.createClass({
  propTypes: {
    disableShellbox: React.PropTypes.func.isRequired,
    enableShellbox: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      isActive: true
    };
  },
  componentDidMount: function() {
    this.props.disableShellbox();
    this.timeout = setTimeout(this._cancelAuth, AUTH_TIMEOUT);
    return _.defer(function() {
      return window.location = ApiRoutes.omniauth_url('vkontakte');
    });
  },
  componentWillUnmount: function() {
    if (this.timeout != null) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    return React.createElement(AuthorizationShellbox, null, React.createElement(Shellbox_VkAuthButton, {
      "isActive": this.state.isActive
    }));
  },
  _cancelAuth: function() {
    this.props.enableShellbox();
    window.stop();
    return ReactApp.shellbox.show(AuthShellbox);
  }
});


},{}],28:[function(require,module,exports){
window.Shellbox_FacebookAuthButton = React.createClass({
  propTypes: {
    isActive: React.PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      isActive: false
    };
  },
  render: function() {
    var icon;
    if (this.props.isActive) {
      icon = React.createElement("span", {
        "className": "icon"
      }, React.createElement(Spinner, {
        "size": 14.
      }));
    } else {
      icon = React.createElement("span", {
        "className": "icon icon--vkontakte"
      });
    }
    return React.createElement("a", {
      "href": ApiRoutes.omniauth_url('vkontakte'),
      "onClick": this.onClick
    }, React.createElement("button", {
      "className": "button button--vkontakte"
    }, icon, React.createElement("span", {
      "className": "button__text"
    }, this._getTitle())));
  },
  onClick: function(e) {
    e.preventDefault();
    if (this.props.onClick != null) {
      return this.props.onClick();
    }
  },
  _getTitle: function() {
    if (this.props.isActive) {
      return i18n.t('facebook_signin_process_button');
    } else {
      return i18n.t('facebook_signup_process_button');
    }
  }
});


},{}],29:[function(require,module,exports){
window.Shellbox_VkAuthButton = React.createClass({
  propTypes: {
    isActive: React.PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      isActive: false
    };
  },
  render: function() {
    var icon;
    if (this.props.isActive) {
      icon = React.createElement("span", {
        "className": "icon"
      }, React.createElement(Spinner, {
        "size": 14.
      }));
    } else {
      icon = React.createElement("span", {
        "className": "icon icon--vkontakte"
      });
    }
    return React.createElement("a", {
      "href": ApiRoutes.omniauth_url('vkontakte'),
      "onClick": this.onClick
    }, React.createElement("button", {
      "className": "button button--vkontakte"
    }, icon, React.createElement("span", {
      "className": "button__text"
    }, this._getTitle())));
  },
  onClick: function(e) {
    e.preventDefault();
    if (this.props.onClick != null) {
      return this.props.onClick();
    }
  },
  _getTitle: function() {
    if (this.props.isActive) {
      return i18n.t('vkontakte_signin_process_button');
    } else {
      return i18n.t('vkontakte_signup_process_button');
    }
  }
});


},{}],30:[function(require,module,exports){
var EmailFooter;

EmailFooter = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": "form-popup__footer"
    }, React.createElement("a", {
      "title": i18n.t('return_to_selecting_signin_method'),
      "className": "form-popup__footer-item",
      "onClick": this.handleAuthClick
    }, i18n.t('return_to_selecting_signin_method')), React.createElement("span", {
      "className": "form-popup__footer-sep"
    }, "·"), React.createElement("a", {
      "title": i18n.t('forgot_password_or_email'),
      "className": "form-popup__footer-item",
      "onClick": this.handleRecoveryClick
    }, i18n.t('forgot_password_or_email')));
  },
  handleAuthClick: function(e) {
    e.preventDefault();
    return ReactApp.shellbox.show(Auth);
  },
  handleRecoveryClick: function(e) {
    e.preventDefault();
    return ReactApp.shellbox.show(RecoveryShellbox);
  }
});

module.exports = EmailFooter;


},{}],31:[function(require,module,exports){
var EmailSubmitButton;

EmailSubmitButton = React.createClass({
  propTypes: {
    isProcess: React.PropTypes.bool,
    isDisabled: React.PropTypes.bool,
    onSubmit: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "form-popup__submit"
    }, React.createElement("button", {
      "disabled": this.props.isDisabled,
      "className": "button button--large button--green-light button--block button--rectangle",
      "onClick": this.handleClick
    }, React.createElement("span", {
      "className": "button__text"
    }, this.getTitle())));
  },
  getTitle: function() {
    if (this.props.isProcess) {
      return i18n.t('email_submit_process_button');
    } else {
      return i18n.t('email_submit_button');
    }
  },
  handleClick: function(e) {
    e.preventDefault();
    return this.props.onSubmit();
  }
});

module.exports = EmailSubmitButton;


},{}],32:[function(require,module,exports){
var ConfirmRegistrationMixin, EmailConfirmRegistration;

ConfirmRegistrationMixin = require('../mixins/confirm_registration');

EmailConfirmRegistration = React.createClass({
  mixins: [ConfirmRegistrationMixin, RequesterMixin, ReactShakeMixin, ComponentManipulationsMixin],
  propTypes: {
    email: React.PropTypes.string.isRequired,
    password: React.PropTypes.string.isRequired,
    proposedSlug: React.PropTypes.string.isRequired
  },
  getInitialState: function() {
    return {
      isProcess: false
    };
  },
  render: function() {
    return React.createElement("div", {
      "className": "form-popup form-popup--confirm"
    }, React.createElement("div", {
      "className": "form-popup__body"
    }, React.createElement("div", {
      "className": "form-popup__lead"
    }, i18n.t('confirm_signup', {
      userSlug: this.props.proposedSlug
    })), React.createElement("div", {
      "className": "form-popup__submit"
    }, React.createElement("button", {
      "className": "button button--large button--green-light button--block button--rectangle",
      "onClick": this.handleApproveClick
    }, i18n.t('confirm_signup_approve')))), React.createElement("div", {
      "className": "form-popup__footer"
    }, React.createElement("span", {
      "className": "form-popup__footer-or"
    }, i18n.t('or')), React.createElement("a", {
      "className": "form-popup__footer-item",
      "onClick": this.handleDisapproveClick
    }, i18n.t('already_registered_link'))));
  },
  handleApproveClick: function(e) {
    e.preventDefault();
    return this.register();
  },
  handleDisapproveClick: function(e) {
    e.preventDefault();
    return this.returnToEmail();
  }
});

module.exports = EmailConfirmRegistration;


},{"../mixins/confirm_registration":37}],33:[function(require,module,exports){
var EmailFooter, EmailLoginField, EmailMixin, EmailPasswordField, EmailSubmitButton;

EmailFooter = require('./_partials/footer');

EmailLoginField = require('./fields/EmailLoginField');

EmailPasswordField = require('./fields/EmailPasswordField');

EmailSubmitButton = require('./buttons/submit');

EmailMixin = require('./mixins/email');

window.Email = React.createClass({
  mixins: [EmailMixin, ReactShakeMixin, RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    login: React.PropTypes.string,
    password: React.PropTypes.string
  },
  getDefaultProps: function() {
    return {
      login: '',
      password: ''
    };
  },
  getInitialState: function() {
    return {
      formData: {
        login: this.props.login,
        password: this.props.password
      },
      isProcess: false,
      isLoginError: false,
      isPasswordError: false
    };
  },
  render: function() {
    var footer;
    if (!this.state.isProcess) {
      footer = React.createElement(EmailFooter, null);
    }
    return React.createElement("div", {
      "className": "form-popup form-popup--login"
    }, React.createElement("div", {
      "className": "form-popup__header"
    }, React.createElement("h3", {
      "className": "form-popup__title"
    }, i18n.t('email_signin_signup_header'))), React.createElement("div", {
      "className": "form-popup__body"
    }, React.createElement("form", null, React.createElement(EmailLoginField, {
      "ref": "login",
      "value": this.state.formData.login,
      "isDisabled": this.state.isProcess,
      "isError": this.state.isLoginError,
      "onChange": this.handleLoginChange
    }), React.createElement(EmailPasswordField, {
      "ref": "password",
      "value": this.state.formData.password,
      "isDisabled": this.state.isProcess,
      "isError": this.state.isPasswordError,
      "onChange": this.handlePasswordChange
    }), React.createElement(EmailSubmitButton, {
      "isProcess": this.state.isProcess,
      "isDisabled": this.state.isProcess,
      "onSubmit": this.handleSubmit
    }))), footer);
  }
});


},{"./_partials/footer":30,"./buttons/submit":31,"./fields/EmailLoginField":34,"./fields/EmailPasswordField":35,"./mixins/email":36}],34:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedReactComponentsCommonFieldsTextField = require('../../../../../../shared/react/components/common/fields/TextField');

var _sharedReactComponentsCommonFieldsTextField2 = _interopRequireDefault(_sharedReactComponentsCommonFieldsTextField);

var EmailLoginField = React.createClass({
  displayName: 'EmailLoginField',

  propTypes: {
    value: React.PropTypes.string,
    isDisabled: React.PropTypes.bool,
    isError: React.PropTypes.bool,
    onChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var fieldClasses = (0, _classnames2['default'])('form-field', 'form-field--simple', {
      'form-field--error': this.props.isError
    });

    return React.createElement(
      'div',
      { className: 'form-popup__item' },
      React.createElement(
        'div',
        { className: fieldClasses },
        React.createElement(_sharedReactComponentsCommonFieldsTextField2['default'], {
          defaultValue: this.props.value,
          placeholder: i18n.t('login_field_placeholder'),
          autoFocus: true,
          required: true,
          disabled: this.props.isDisabled,
          className: 'form-field__input',
          onChange: this.props.onChange }),
        React.createElement('div', { className: 'form-field__bg' })
      )
    );
  }
});

exports['default'] = EmailLoginField;
module.exports = exports['default'];

},{"../../../../../../shared/react/components/common/fields/TextField":546,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],35:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedReactComponentsCommonFieldsPasswordField = require('../../../../../../shared/react/components/common/fields/PasswordField');

var _sharedReactComponentsCommonFieldsPasswordField2 = _interopRequireDefault(_sharedReactComponentsCommonFieldsPasswordField);

var EmailPasswordField = React.createClass({
  displayName: 'EmailPasswordField',

  propTypes: {
    value: React.PropTypes.string,
    isDisabled: React.PropTypes.bool,
    isError: React.PropTypes.bool,
    onChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var fieldClasses = (0, _classnames2['default'])('form-field', 'form-field--simple', {
      'form-field--error': this.props.isError
    });

    return React.createElement(
      'div',
      { className: 'form-popup__item' },
      React.createElement(
        'div',
        { className: fieldClasses },
        React.createElement(_sharedReactComponentsCommonFieldsPasswordField2['default'], {
          defaultValue: this.props.value,
          placeholder: i18n.t('password_field'),
          required: true,
          disabled: this.props.isDisabled,
          className: 'form-field__input',
          onChange: this.props.onChange }),
        React.createElement('div', { className: 'form-field__bg' })
      )
    );
  }
});

exports['default'] = EmailPasswordField;
module.exports = exports['default'];

},{"../../../../../../shared/react/components/common/fields/PasswordField":545,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],36:[function(require,module,exports){
var EmailConfirmRegistration, EmailMixin, INVALID_EMAIL_MESSAGE, INVALID_PASSWORD_MESSAGE, INVALID_SLUG_MESSAGE;

EmailConfirmRegistration = require('../confirm_registration');

INVALID_PASSWORD_MESSAGE = 'user_authenticator/invalid_password';

INVALID_EMAIL_MESSAGE = 'user_authenticator/user_by_email_not_found';

INVALID_SLUG_MESSAGE = 'user_authenticator/user_by_slug_not_found';

EmailMixin = {
  isValid: function() {
    var login, password;
    login = this.state.formData.login;
    password = this.state.formData.password;
    switch (false) {
      case login.length !== 0:
        NoticeService.notifyError(i18n.t('empty_login_error'));
        return false;
      case password.length !== 0:
        NoticeService.notifyError(i18n.t('empty_password_error'));
        return false;
      default:
        return true;
    }
  },
  login: function() {
    var login, password;
    login = this.state.formData.login;
    password = this.state.formData.password;
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.signin_url(),
      method: 'POST',
      data: {
        email: login,
        password: password
      },
      success: (function(_this) {
        return function(data) {
          NoticeService.notifySuccess(i18n.t('signin_success', {
            userSlug: data.name
          }));
          ReactApp.shellbox.close();
          return _.defer(function() {
            return location.reload(true);
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          var proposedData;
          _this.shake();
          if (data.responseJSON != null) {
            switch (data.responseJSON.error_code) {
              case INVALID_PASSWORD_MESSAGE:
                _this.safeUpdateState({
                  isPasswordError: true
                });
                break;
              case INVALID_EMAIL_MESSAGE:
              case INVALID_SLUG_MESSAGE:
                proposedData = data.responseJSON.proposed_data;
                _this.safeUpdateState({
                  isLoginError: true
                });
                if (proposedData != null) {
                  return _this.handleInvalidLogin({
                    proposedSlug: proposedData.slug
                  });
                }
            }
          }
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  handleSubmit: function() {
    this.resetPasswordErrors();
    if (this.isValid()) {
      return this.login();
    } else {
      return this.shake();
    }
  },
  handleInvalidLogin: function(arg) {
    var proposedSlug;
    proposedSlug = arg.proposedSlug;
    return ReactApp.shellbox.show(EmailConfirmRegistration, {
      email: this.state.formData.login,
      password: this.state.formData.password,
      proposedSlug: proposedSlug
    });
  },
  resetPasswordErrors: function() {
    return this.setState({
      isLoginError: false,
      isPasswordError: false
    });
  },
  handleLoginChange: function(val) {
    var newFormData;
    newFormData = _.clone(this.state.formData);
    newFormData.login = val;
    return this.setState({
      formData: newFormData
    });
  },
  handlePasswordChange: function(val) {
    var newFormData;
    newFormData = _.clone(this.state.formData);
    newFormData.password = val;
    return this.setState({
      formData: newFormData
    });
  }
};

module.exports = EmailMixin;


},{"../confirm_registration":32}],37:[function(require,module,exports){
var ConfirmRegistrationMixin, USER_EXISTS_MESSAGE;

USER_EXISTS_MESSAGE = 'user_creator/user_exists';

ConfirmRegistrationMixin = {
  register: function() {
    var email, password, proposedSlug, ref;
    if (this.state.isProcess) {
      return;
    }
    ref = this.props, email = ref.email, password = ref.password, proposedSlug = ref.proposedSlug;
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.signup_url(),
      method: 'POST',
      data: {
        email: email,
        password: password,
        slug: proposedSlug
      },
      success: (function(_this) {
        return function(data) {
          NoticeService.notifySuccess(i18n.t('signup_success', {
            userSlug: data.name
          }));
          ReactApp.shellbox.close();
          return _.defer(function() {
            return window.location.href = data.tlog_url;
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          if (data.responseJSON && data.responseJSON.error_code === USER_EXISTS_MESSAGE) {
            _this.returnToEmail();
          } else {
            _this.shake();
          }
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  returnToEmail: function() {
    var email, password, ref;
    ref = this.props, email = ref.email, password = ref.password;
    return ReactApp.shellbox.show(Email, {
      login: email,
      password: password
    });
  },
  returnToAuth: function() {
    return ReactApp.shellbox.show(Auth);
  }
};

module.exports = ConfirmRegistrationMixin;


},{}],38:[function(require,module,exports){
window.RecoveryShellbox = React.createClass({
  mixins: [ReactShakeMixin, RequesterMixin, ComponentManipulationsMixin],
  getInitialState: function() {
    return {
      inProcess: false
    };
  },
  gotoSelectSignin: function() {
    event.preventDefault();
    event.stopPropagation();
    return ReactApp.shellbox.show(Auth);
  },
  submit: function(event) {
    var slug;
    event.preventDefault();
    if (this.state.inProcess) {
      return;
    }
    slug = this.refs.slug.getDOMNode().value;
    if (slug.length < 1) {
      this.shake();
      NoticeService.notifyError(i18n.t('empty_login_error'));
      return;
    }
    this.setState({
      inProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.recovery_url(),
      data: {
        slug_or_email: slug
      },
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          NoticeService.notifySuccess(i18n.t('recovery_mail_sent'), 10000);
          return ReactApp.shellbox.close();
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.shake();
          _this.refs.slug.getDOMNode().focus();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            inProcess: false
          });
        };
      })(this)
    });
  },
  render: function() {
    var button_title, footer;
    if (this.state.inProcess) {
      button_title = i18n.t('reset_password_process_button');
    } else {
      footer = this.renderFooter();
      button_title = i18n.t('reset_password_button');
    }
    return React.createElement("div", {
      "className": 'form-popup shellbox-content'
    }, React.createElement("div", {
      "className": 'form-popup__header'
    }, React.createElement("h3", {
      "className": 'form-popup__title'
    }, i18n.t('email_recovery_header'))), React.createElement("div", {
      "className": 'form-popup__body'
    }, React.createElement("form", {
      "onSubmit": this.submit
    }, React.createElement("div", {
      "className": 'form-popup__item'
    }, React.createElement("div", {
      "className": 'form-field form-field--simple'
    }, React.createElement("input", {
      "ref": 'slug',
      "autoFocus": true,
      "disabled": this.state.inProcess,
      "className": 'form-field__input',
      "placeholder": i18n.t('login_field_placeholder'),
      "type": 'text'
    }), React.createElement("div", {
      "className": 'form-field__bg'
    }))), React.createElement("div", {
      "className": 'form-popup__submit'
    }, React.createElement("button", {
      "disabled": this.state.inProcess,
      "className": "button button--large button--green-light button--block button--rectangle"
    }, React.createElement("span", {
      "className": 'button__text'
    }, button_title))))), footer);
  },
  renderFooter: function() {
    return React.createElement("div", {
      "className": 'form-popup__footer'
    }, React.createElement("a", {
      "className": 'form-popup__footer-item',
      "title": i18n.t('remembered_password_link'),
      "onClick": this.gotoSelectSignin
    }, i18n.t('remembered_password_link')));
  }
});


},{}],39:[function(require,module,exports){
var ConfirmRegistrationMixin, SocialNetworksConfirmRegistration;

ConfirmRegistrationMixin = require('../mixins/confirm_registration');

SocialNetworksConfirmRegistration = React.createClass({
  mixins: [ConfirmRegistrationMixin, ReactShakeMixin],
  propTypes: {
    postUrl: React.PropTypes.string.isRequired,
    proposedSlug: React.PropTypes.string.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "form-popup form-popup--confirm"
    }, React.createElement("div", {
      "className": "form-popup__body"
    }, React.createElement("form", {
      "action": this.props.postUrl,
      "method": "post"
    }, React.createElement("div", {
      "className": "form-popup__lead"
    }, i18n.t('confirm_signup', {
      userSlug: this.props.proposedSlug
    })), React.createElement("div", {
      "className": "form-popup__submit"
    }, React.createElement("button", {
      "className": "button button--large button--green-light button--block button--rectangle",
      "onClick": this.handleApproveClick
    }, i18n.t('confirm_signup_approve'))))), React.createElement("div", {
      "className": "form-popup__footer"
    }, React.createElement("span", {
      "className": "form-popup__footer-or"
    }, "или"), React.createElement("a", {
      "className": "form-popup__footer-item",
      "onClick": this.handleDisapproveClick
    }, i18n.t('already_registered_link'))));
  },
  handleDisapproveClick: function(e) {
    e.preventDefault();
    return this.returnToAuth();
  }
});

module.exports = SocialNetworksConfirmRegistration;


},{"../mixins/confirm_registration":37}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var BrowserSupport = React.createClass({
  displayName: "BrowserSupport",

  propTypes: {
    name: React.PropTypes.string.isRequired,
    version: React.PropTypes.number.isRequired,
    updateUrl: React.PropTypes.string
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "browserbar" },
      React.createElement(
        "div",
        { className: "browserbar__inner" },
        this.renderText(),
        " ",
        this.renderLink()
      )
    );
  },

  renderText: function renderText() {
    return i18n.t('browser_support_update_to', {
      browserName: this.props.name,
      browserVersion: this.props.version
    });
  },

  renderLink: function renderLink() {
    var phrase = i18n.t('browser_support_last_version');

    if (this.props.updateUrl) {
      return React.createElement(
        "a",
        { href: this.props.updateUrl },
        phrase
      );
    } else {
      return phrase;
    }
  }
});

exports["default"] = BrowserSupport;
module.exports = exports["default"];

},{}],41:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _bowser = require('bowser');

var _bowser2 = _interopRequireDefault(_bowser);

var _BrowserSupport = require('./BrowserSupport');

var _BrowserSupport2 = _interopRequireDefault(_BrowserSupport);

var MINIMAL_BROWSER_VERSION = {
  'Chrome': 27,
  'Firefox': 25,
  'Safari': 6,
  'Opera': 15,
  'Internet Explorer': 10
};

var UPDATE_URLS = {
  'Chrome': 'https://www.google.com/chrome/browser',
  'Firefox': 'https://www.mozilla.org/en-US/firefox/new/',
  'Safari': 'https://support.apple.com/en-us/HT204416',
  'Opera': 'http://www.opera.com/download',
  'Internet Explorer': 'https://www.microsoft.com/en-us/download/internet-explorer.aspx'
};

var BrowserSupportContainer = React.createClass({
  displayName: 'BrowserSupportContainer',

  getInitialState: function getInitialState() {
    return {
      name: null,
      version: null,
      updateUrl: null,
      incompatable: null
    };
  },

  componentDidMount: function componentDidMount() {
    // Показываем через секунду, чтобы страница успела прогрузиться и показалась
    // анимация и тд.
    setTimeout(this.checkCompatability, 1000);
  },

  checkCompatability: function checkCompatability() {
    var name = _bowser2['default'].browser.name,
        version = parseFloat(_bowser2['default'].browser.version),
        incompatable = null,
        updateUrl = null;

    if (version < MINIMAL_BROWSER_VERSION[name]) {
      incompatable = true;
      updateUrl = UPDATE_URLS[name];
    } else {
      incompatable = false;
    }

    if (incompatable) {
      ReactApp.layoutStatesController.toggleState('browserIncompatable', true);
    }

    this.setState({ name: name, version: version, incompatable: incompatable, updateUrl: updateUrl });
  },

  render: function render() {
    if (this.state.incompatable) {
      return React.createElement(_BrowserSupport2['default'], {
        name: this.state.name,
        version: this.state.version,
        updateUrl: this.state.updateUrl });
    } else {
      return null;
    }
  }
});

exports['default'] = BrowserSupportContainer;
module.exports = exports['default'];

},{"./BrowserSupport":40,"babel-runtime/helpers/interop-require-default":574,"bowser":"bowser"}],42:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _ListList = require('./List/List');

var _ListList2 = _interopRequireDefault(_ListList);

var _buttonsProceed = require('./buttons/Proceed');

var _buttonsProceed2 = _interopRequireDefault(_buttonsProceed);

var DesignPayment = React.createClass({
  displayName: 'DesignPayment',

  propTypes: {
    options: React.PropTypes.object.isRequired,
    onProceed: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'payment' },
      React.createElement(_ListList2['default'], { options: this.props.options }),
      React.createElement(_buttonsProceed2['default'], { onClick: this.props.onProceed })
    );
  }
});

exports['default'] = DesignPayment;
module.exports = exports['default'];

},{"./List/List":44,"./buttons/Proceed":46,"babel-runtime/helpers/interop-require-default":574}],43:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _storesDesign = require('../../stores/design');

var _storesDesign2 = _interopRequireDefault(_storesDesign);

var _actionsDesign = require('../../actions/design');

var _actionsDesign2 = _interopRequireDefault(_actionsDesign);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _DesignPayment = require('./DesignPayment');

var _DesignPayment2 = _interopRequireDefault(_DesignPayment);

var DesignPaymentContainer = React.createClass({
  displayName: 'DesignPaymentContainer',

  propTypes: {
    options: React.PropTypes.object.isRequired
  },

  render: function render() {
    return React.createElement(_DesignPayment2['default'], {
      options: this.props.options,
      onProceed: this.proceedPayment });
  },

  proceedPayment: function proceedPayment() {
    _actionsDesign2['default'].proceedPayment();
  }
});

DesignPaymentContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(DesignPaymentContainer, [_storesDesign2['default']], function (props) {
  return {
    options: _storesDesign2['default'].getPaymentOptions()
  };
});

exports['default'] = DesignPaymentContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/design":15,"../../stores/design":518,"./DesignPayment":42,"babel-runtime/helpers/interop-require-default":574}],44:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _sharedReactComponentsCommonMoneyMoney = require('../../../../../shared/react/components/common/Money/Money');

var _sharedReactComponentsCommonMoneyMoney2 = _interopRequireDefault(_sharedReactComponentsCommonMoneyMoney);

var _DesignSettingsCommonSlider = require('../../DesignSettings/common/slider');

var _DesignSettingsCommonSlider2 = _interopRequireDefault(_DesignSettingsCommonSlider);

var _commonRadioList = require('../common/RadioList');

var _commonRadioList2 = _interopRequireDefault(_commonRadioList);

var _ListItem = require('./ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var DesignPaymentList = React.createClass({
  displayName: 'DesignPaymentList',

  propTypes: {
    options: React.PropTypes.object.isRequired
  },

  render: function render() {
    return React.createElement(
      'ul',
      { className: 'payment__list' },
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_header_font_title') },
        React.createElement(
          _DesignSettingsCommonSlider2['default'],
          null,
          React.createElement(_commonRadioList2['default'], {
            style: 'font',
            items: this.props.options.headerFont })
        )
      ),
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_feed_font_title') },
        React.createElement(
          _DesignSettingsCommonSlider2['default'],
          null,
          React.createElement(_commonRadioList2['default'], {
            style: 'font',
            items: this.props.options.feedFont })
        )
      ),
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_feed_and_header_colors_title') },
        React.createElement(_commonRadioList2['default'], {
          style: 'circlebtns',
          items: this.props.options.feedAndHeaderColors })
      ),
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_terms_title') },
        i18n.t('design_payment_terms_description')
      ),
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_cost_title') },
        React.createElement(_sharedReactComponentsCommonMoneyMoney2['default'], { value: gon.prices.design.cents, currency: gon.prices.design.currency })
      ),
      React.createElement(
        _ListItem2['default'],
        { title: i18n.t('design_payment_payment_methods_title') },
        i18n.t('design_payment_payment_methods_description')
      )
    );
  }
});

exports['default'] = DesignPaymentList;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Money/Money":536,"../../DesignSettings/common/slider":66,"../common/RadioList":47,"./ListItem":45,"babel-runtime/helpers/interop-require-default":574}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DesignPaymentListItem = React.createClass({
  displayName: "DesignPaymentListItem",

  propTypes: {
    title: React.PropTypes.string.isRequired,
    children: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.array, React.PropTypes.string])
  },

  render: function render() {
    return React.createElement(
      "li",
      { className: "payment__item" },
      React.createElement("div", { className: "payment__item-title",
        dangerouslySetInnerHTML: { __html: this.props.title || '' } }),
      React.createElement(
        "div",
        { className: "payment__item-content" },
        this.props.children
      )
    );
  }
});

exports["default"] = DesignPaymentListItem;
module.exports = exports["default"];

},{}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DesignPaymentProceedButton = React.createClass({
  displayName: "DesignPaymentProceedButton",

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "payment__button", onClick: this.handleClick },
      i18n.t('design_payment_proceed_button')
    );
  },

  handleClick: function handleClick() {
    this.props.onClick();
  }
});

exports["default"] = DesignPaymentProceedButton;
module.exports = exports["default"];

},{}],47:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _RadioListItem = require('./RadioListItem');

var _RadioListItem2 = _interopRequireDefault(_RadioListItem);

var DesignPaymentRadioList = React.createClass({
  displayName: 'DesignPaymentRadioList',

  propTypes: {
    style: React.PropTypes.string.isRequired,
    items: React.PropTypes.array.isRequired
  },

  render: function render() {
    var listClasses = ['form-radiogroup', 'form-radiogroup--' + this.props.style].join(' ');
    var listItems = this.props.items.map(function (item) {
      return React.createElement(_RadioListItem2['default'], { value: item, custom: item === ':ANY:', key: item });
    });

    return React.createElement(
      'span',
      { className: listClasses },
      listItems
    );
  }
});

exports['default'] = DesignPaymentRadioList;
module.exports = exports['default'];

},{"./RadioListItem":48,"babel-runtime/helpers/interop-require-default":574}],48:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _DesignSettingsCommonColorPicker = require('../../DesignSettings/common/colorPicker');

var _DesignSettingsCommonColorPicker2 = _interopRequireDefault(_DesignSettingsCommonColorPicker);

var DesignPaymentRadioListItem = React.createClass({
  displayName: 'DesignPaymentRadioListItem',

  propTypes: {
    value: React.PropTypes.string.isRequired,
    custom: React.PropTypes.bool.isRequired
  },

  render: function render() {
    var name = this.props.custom ? 'custom' : this.props.value;

    return React.createElement(
      'span',
      { className: 'form-radiobtn form-radiobtn--' + name },
      React.createElement(
        'label',
        { className: 'form-radiobtn__label' },
        React.createElement(
          'span',
          { className: 'form-radiobtn__inner' },
          React.createElement(
            'span',
            { className: 'form-radiobtn__text' },
            'Aa'
          )
        ),
        this.renderColorPicker()
      )
    );
  },

  renderColorPicker: function renderColorPicker() {
    if (this.props.custom) {
      return React.createElement(_DesignSettingsCommonColorPicker2['default'], null);
    }
  }
});

exports['default'] = DesignPaymentRadioListItem;
module.exports = exports['default'];

},{"../../DesignSettings/common/colorPicker":61,"babel-runtime/helpers/interop-require-default":574}],49:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _DropZoneDropZone = require('./DropZone/DropZone');

var _DropZoneDropZone2 = _interopRequireDefault(_DropZoneDropZone);

var _GroupsGroups = require('./Groups/Groups');

var _GroupsGroups2 = _interopRequireDefault(_GroupsGroups);

var _buttonsSave = require('./buttons/Save');

var _buttonsSave2 = _interopRequireDefault(_buttonsSave);

var DesignSettings = (function (_Component) {
  _inherits(DesignSettings, _Component);

  function DesignSettings() {
    _classCallCheck(this, DesignSettings);

    _get(Object.getPrototypeOf(DesignSettings.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      dragActive: false
    };
  }

  _createClass(DesignSettings, [{
    key: 'handleDragLeave',
    value: function handleDragLeave(e) {
      var rect = (0, _react.findDOMNode)(this).getBoundingClientRect();

      if (e.clientX > rect.left + rect.width || e.clientX < rect.left || e.clientY > rect.top + rect.height || e.clientY < rect.top) {
        this.setState({ dragActive: false });
      }
    }
  }, {
    key: 'handleDragOver',
    value: function handleDragOver(e) {
      e.preventDefault();

      if (!this.state.dragActive) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';

        this.setState({ dragActive: true });
      }
    }
  }, {
    key: 'handleDrop',
    value: function handleDrop(e) {
      e.preventDefault();
      var file = e.dataTransfer.files[0];

      if (file) {
        this.props.onBgImageChange(file);
      }

      this.setState({ dragActive: false });
    }
  }, {
    key: 'renderSaveButton',
    value: function renderSaveButton() {
      var _props = this.props;
      var hasDesignBundle = _props.hasDesignBundle;
      var hasPaidValues = _props.hasPaidValues;
      var hasUnsavedFields = _props.hasUnsavedFields;
      var isSaving = _props.isSaving;
      var onSave = _props.onSave;

      if (hasUnsavedFields) {
        return _react2['default'].createElement(_buttonsSave2['default'], {
          hasDesignBundle: hasDesignBundle,
          hasPaidValues: hasPaidValues,
          isSaving: isSaving,
          onClick: onSave
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var settingsClasses = (0, _classnames2['default'])('design-settings', {
        '__has-unsaved-fields': this.props.hasUnsavedFields,
        '__draghover': this.state.dragActive
      });

      return _react2['default'].createElement(
        'div',
        {
          className: settingsClasses,
          onDragLeave: this.handleDragLeave.bind(this),
          onDragOver: this.handleDragOver.bind(this),
          onDrop: this.handleDrop.bind(this)
        },
        _react2['default'].createElement(_DropZoneDropZone2['default'], null),
        _react2['default'].createElement(
          'div',
          { className: 'design-settings__options' },
          _react2['default'].createElement(_GroupsGroups2['default'], {
            design: this.props.design,
            onBgImageChange: this.props.onBgImageChange,
            onOptionChange: this.props.onOptionChange,
            options: this.props.options
          }),
          this.renderSaveButton()
        )
      );
    }
  }]);

  return DesignSettings;
})(_react.Component);

DesignSettings.propTypes = {
  design: _react.PropTypes.object.isRequired,
  hasDesignBundle: _react.PropTypes.bool.isRequired,
  hasPaidValues: _react.PropTypes.bool.isRequired,
  hasUnsavedFields: _react.PropTypes.bool.isRequired,
  isSaving: _react.PropTypes.bool.isRequired,
  onBgImageChange: _react.PropTypes.func.isRequired,
  onOptionChange: _react.PropTypes.func.isRequired,
  onSave: _react.PropTypes.func.isRequired,
  options: _react.PropTypes.object.isRequired
};

exports['default'] = DesignSettings;
module.exports = exports['default'];

},{"./DropZone/DropZone":51,"./Groups/Groups":55,"./buttons/Save":60,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],50:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsDesign = require('../../actions/design');

var _actionsDesign2 = _interopRequireDefault(_actionsDesign);

var _actionsPopup = require('../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _storesDesign = require('../../stores/design');

var _storesDesign2 = _interopRequireDefault(_storesDesign);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _DesignSettings = require('./DesignSettings');

var _DesignSettings2 = _interopRequireDefault(_DesignSettings);

var DesignSettingsContainer = React.createClass({
  displayName: 'DesignSettingsContainer',

  propTypes: {
    design: React.PropTypes.object.isRequired,
    hasDesignBundle: React.PropTypes.bool.isRequired,
    hasPaidValues: React.PropTypes.bool.isRequired,
    isSaving: React.PropTypes.bool.isRequired,
    options: React.PropTypes.object.isRequired
  },

  componentWillUnmount: function componentWillUnmount() {
    _actionsDesign2['default'].closeDesignSettings();
  },

  render: function render() {
    return React.createElement(_DesignSettings2['default'], _extends({}, this.props, {
      onBgImageChange: this.changeBgImage,
      onOptionChange: this.changeOption,
      onSave: this.save
    }));
  },

  changeOption: function changeOption(name, value) {
    _actionsDesign2['default'].changeOption(name, value);
  },

  changeBgImage: function changeBgImage(file) {
    _actionsDesign2['default'].changeBgImage(file);
  },

  save: function save() {
    if (this.props.hasPaidValues && !this.props.hasDesignBundle) {
      _actionsPopup2['default'].showDesignSettingsPayment();
    } else {
      _actionsDesign2['default'].saveCurrent();
    }
  }
});

DesignSettingsContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(DesignSettingsContainer, [_storesDesign2['default'], _storesCurrent_user2['default']], function (props) {
  return {
    design: _storesDesign2['default'].getCurrent(),
    options: _storesDesign2['default'].getOptions(),
    hasDesignBundle: _storesCurrent_user2['default'].hasDesignBundle(),
    hasUnsavedFields: _storesDesign2['default'].hasUnsavedFields(),
    hasPaidValues: _storesDesign2['default'].hasPaidValues(),
    isSaving: _storesDesign2['default'].isSaving()
  };
});

exports['default'] = DesignSettingsContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/design":15,"../../actions/popup":17,"../../stores/current_user":517,"../../stores/design":518,"./DesignSettings":49,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DesignSettingsDropZone = React.createClass({
  displayName: "DesignSettingsDropZone",

  render: function render() {
    return React.createElement(
      "div",
      { className: "design-settings__dragzone" },
      React.createElement(
        "div",
        { className: "design-settings__dragzone-table" },
        React.createElement(
          "div",
          { className: "design-settings__dragzone-cell" },
          React.createElement(
            "div",
            { className: "design-settings__dragzone-text" },
            i18n.t('design_settings_dropzone')
          )
        )
      )
    );
  }
});

exports["default"] = DesignSettingsDropZone;
module.exports = exports["default"];

},{}],52:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Group = require('./Group');

var _Group2 = _interopRequireDefault(_Group);

var _OptionOption = require('../Option/Option');

var _OptionOption2 = _interopRequireDefault(_OptionOption);

var _OptionState = require('../Option/State');

var _OptionState2 = _interopRequireDefault(_OptionState);

var _OptionUpload = require('../Option/Upload');

var _OptionUpload2 = _interopRequireDefault(_OptionUpload);

var _commonRadioList = require('../common/radioList');

var _commonRadioList2 = _interopRequireDefault(_commonRadioList);

var DesignSettingsBackgroundGroup = React.createClass({
  displayName: 'DesignSettingsBackgroundGroup',

  propTypes: {
    backgroundColor: React.PropTypes.string.isRequired,
    backgroundImageUrl: React.PropTypes.string.isRequired,
    backgroundImageEnabled: React.PropTypes.bool.isRequired,
    backgroundAlignment: React.PropTypes.string.isRequired,
    backgroundColorItems: React.PropTypes.array.isRequired,
    backgroundAlignmentItems: React.PropTypes.array.isRequired,
    onBgImageChange: React.PropTypes.func.isRequired,
    onOptionChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      _Group2['default'],
      { title: i18n.t('design_settings_background_title') },
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_background_color_title'), name: 'bgcolor' },
        React.createElement(_OptionState2['default'], { style: 'circlebtn' }),
        React.createElement(_commonRadioList2['default'], {
          style: 'circlebtns',
          optionName: 'backgroundColor',
          value: this.props.backgroundColor,
          items: this.props.backgroundColorItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'backgroundColor') })
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_background_image_title'), name: 'bgimage' },
        React.createElement(_OptionUpload2['default'], {
          optionName: 'backgroundImage',
          backgroundImageUrl: this.props.backgroundImageUrl,
          backgroundImageEnabled: this.props.backgroundImageEnabled,
          onBgImageChange: this.props.onBgImageChange,
          onImageVisibilityChange: this.props.onOptionChange.bind(null, 'backgroundImageEnabled') })
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_background_alignment_title'), name: 'bgalignment' },
        React.createElement(_commonRadioList2['default'], {
          style: 'dotted',
          optionName: 'backgroundAlignment',
          value: this.props.backgroundAlignment,
          items: this.props.backgroundAlignmentItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'backgroundAlignment') })
      )
    );
  }
});

exports['default'] = DesignSettingsBackgroundGroup;
module.exports = exports['default'];

},{"../Option/Option":57,"../Option/State":58,"../Option/Upload":59,"../common/radioList":64,"./Group":54,"babel-runtime/helpers/interop-require-default":574}],53:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Group = require('./Group');

var _Group2 = _interopRequireDefault(_Group);

var _OptionOption = require('../Option/Option');

var _OptionOption2 = _interopRequireDefault(_OptionOption);

var _OptionState = require('../Option/State');

var _OptionState2 = _interopRequireDefault(_OptionState);

var _commonSlider = require('../common/slider');

var _commonSlider2 = _interopRequireDefault(_commonSlider);

var _commonRadioList = require('../common/radioList');

var _commonRadioList2 = _interopRequireDefault(_commonRadioList);

var _commonRange = require('../common/range');

var _commonRange2 = _interopRequireDefault(_commonRange);

var DesignSettingsFeedGroup = React.createClass({
  displayName: 'DesignSettingsFeedGroup',

  propTypes: {
    feedBackgroundColor: React.PropTypes.string.isRequired,
    feedFont: React.PropTypes.string.isRequired,
    feedFontColor: React.PropTypes.string.isRequired,
    feedOpacity: React.PropTypes.number.isRequired,
    feedBackgroundColorItems: React.PropTypes.array.isRequired,
    feedFontItems: React.PropTypes.array.isRequired,
    feedFontColorItems: React.PropTypes.array.isRequired,
    onOptionChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      _Group2['default'],
      { title: i18n.t('design_settings_feed_title') },
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_feed_color_title'), name: 'feedbgcolor' },
        React.createElement(_OptionState2['default'], { style: 'circlebtn' }),
        React.createElement(_commonRadioList2['default'], {
          style: 'circlebtns',
          optionName: 'feedBackgroundColor',
          value: this.props.feedBackgroundColor,
          items: this.props.feedBackgroundColorItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'feedBackgroundColor') })
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_feed_font_title'), name: 'feedfont' },
        React.createElement(_OptionState2['default'], { style: 'font', text: 'Aa' }),
        React.createElement(
          _commonSlider2['default'],
          { className: 'ds-fadein-down' },
          React.createElement(_commonRadioList2['default'], {
            style: 'font',
            optionName: 'feedFont',
            value: this.props.feedFont,
            items: this.props.feedFontItems,
            onChange: this.props.onOptionChange.bind(null, 'feedFont') })
        )
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_feed_font_color_title'), name: 'feedcolor' },
        React.createElement(_OptionState2['default'], { style: 'circlebtn' }),
        React.createElement(_commonRadioList2['default'], {
          style: 'circlebtns',
          optionName: 'feedFontColor',
          value: this.props.feedFontColor,
          items: this.props.feedFontColorItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'feedFontColor') })
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_feed_opacity_title'), name: 'opacity' },
        React.createElement(_commonRange2['default'], {
          value: this.props.feedOpacity,
          onChange: this.props.onOptionChange.bind(null, 'feedOpacity') })
      )
    );
  }
});

exports['default'] = DesignSettingsFeedGroup;
module.exports = exports['default'];

},{"../Option/Option":57,"../Option/State":58,"../common/radioList":64,"../common/range":65,"../common/slider":66,"./Group":54,"babel-runtime/helpers/interop-require-default":574}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DesignSettingsGroup = React.createClass({
  displayName: "DesignSettingsGroup",

  propTypes: {
    title: React.PropTypes.string.isRequired
  },

  render: function render() {
    return React.createElement(
      "section",
      { className: "design-settings__group" },
      React.createElement(
        "header",
        { className: "design-settings__group-header" },
        this.props.title
      ),
      React.createElement(
        "div",
        { className: "design-settings__group-content" },
        this.props.children
      )
    );
  }
});

exports["default"] = DesignSettingsGroup;
module.exports = exports["default"];

},{}],55:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _commonScrollerScroller = require('../../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var _HeaderGroup = require('./HeaderGroup');

var _HeaderGroup2 = _interopRequireDefault(_HeaderGroup);

var _BackgroundGroup = require('./BackgroundGroup');

var _BackgroundGroup2 = _interopRequireDefault(_BackgroundGroup);

var _FeedGroup = require('./FeedGroup');

var _FeedGroup2 = _interopRequireDefault(_FeedGroup);

var DesignSettingsGroups = React.createClass({
  displayName: 'DesignSettingsGroups',

  propTypes: {
    design: React.PropTypes.object.isRequired,
    options: React.PropTypes.object.isRequired,
    onOptionChange: React.PropTypes.func.isRequired,
    onBgImageChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'design-settings__groups' },
      React.createElement(
        _commonScrollerScroller2['default'],
        { className: 'scroller--design' },
        React.createElement(_HeaderGroup2['default'], {
          headerFont: this.props.design.headerFont,
          headerSize: this.props.design.headerSize,
          headerColor: this.props.design.headerColor,
          headerFontItems: this.props.options.headerFont,
          headerSizeItems: this.props.options.headerSize,
          headerColorItems: this.props.options.headerColor,
          onOptionChange: this.props.onOptionChange }),
        React.createElement(_BackgroundGroup2['default'], {
          backgroundColor: this.props.design.backgroundColor,
          backgroundImageUrl: this.props.design.backgroundImageUrl,
          backgroundImageEnabled: this.props.design.backgroundImageEnabled,
          backgroundAlignment: this.props.design.backgroundAlignment,
          backgroundColorItems: this.props.options.backgroundColor,
          backgroundAlignmentItems: this.props.options.backgroundAlignment,
          onOptionChange: this.props.onOptionChange,
          onBgImageChange: this.props.onBgImageChange }),
        React.createElement(_FeedGroup2['default'], {
          feedBackgroundColor: this.props.design.feedBackgroundColor,
          feedFont: this.props.design.feedFont,
          feedFontColor: this.props.design.feedFontColor,
          feedOpacity: this.props.design.feedOpacity,
          feedBackgroundColorItems: this.props.options.feedBackgroundColor,
          feedFontItems: this.props.options.feedFont,
          feedFontColorItems: this.props.options.feedFontColor,
          onOptionChange: this.props.onOptionChange })
      )
    );
  }
});

exports['default'] = DesignSettingsGroups;
module.exports = exports['default'];

},{"../../common/scroller/scroller":276,"./BackgroundGroup":52,"./FeedGroup":53,"./HeaderGroup":56,"babel-runtime/helpers/interop-require-default":574}],56:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Group = require('./Group');

var _Group2 = _interopRequireDefault(_Group);

var _OptionOption = require('../Option/Option');

var _OptionOption2 = _interopRequireDefault(_OptionOption);

var _OptionState = require('../Option/State');

var _OptionState2 = _interopRequireDefault(_OptionState);

var _commonSlider = require('../common/slider');

var _commonSlider2 = _interopRequireDefault(_commonSlider);

var _commonRadioList = require('../common/radioList');

var _commonRadioList2 = _interopRequireDefault(_commonRadioList);

var DesignSettingsHeaderGroup = React.createClass({
  displayName: 'DesignSettingsHeaderGroup',

  propTypes: {
    headerFont: React.PropTypes.string.isRequired,
    headerSize: React.PropTypes.string.isRequired,
    headerColor: React.PropTypes.string.isRequired,
    headerFontItems: React.PropTypes.array.isRequired,
    headerSizeItems: React.PropTypes.array.isRequired,
    headerColorItems: React.PropTypes.array.isRequired,
    onOptionChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      _Group2['default'],
      { title: i18n.t('design_settings_header_title') },
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_header_font_title'), name: 'headerfont' },
        React.createElement(_OptionState2['default'], { style: 'font', text: 'Aa' }),
        React.createElement(
          _commonSlider2['default'],
          { className: 'ds-fadein-down' },
          React.createElement(_commonRadioList2['default'], {
            style: 'font',
            optionName: 'headerFont',
            value: this.props.headerFont,
            items: this.props.headerFontItems,
            onChange: this.props.onOptionChange.bind(null, 'headerFont') })
        )
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_header_size_title'), name: 'headersize' },
        React.createElement(_commonRadioList2['default'], {
          style: 'dotted',
          optionName: 'headerSize',
          value: this.props.headerSize,
          items: this.props.headerSizeItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'headerSize') })
      ),
      React.createElement(
        _OptionOption2['default'],
        { title: i18n.t('design_settings_header_color_title'), name: 'headercolor' },
        React.createElement(_OptionState2['default'], { style: 'circlebtn' }),
        React.createElement(_commonRadioList2['default'], {
          style: 'circlebtns',
          optionName: 'headerColor',
          value: this.props.headerColor,
          items: this.props.headerColorItems,
          className: 'ds-absolute-left ds-fadein-down',
          onChange: this.props.onOptionChange.bind(null, 'headerColor') })
      )
    );
  }
});

exports['default'] = DesignSettingsHeaderGroup;
module.exports = exports['default'];

},{"../Option/Option":57,"../Option/State":58,"../common/radioList":64,"../common/slider":66,"./Group":54,"babel-runtime/helpers/interop-require-default":574}],57:[function(require,module,exports){
var DesignSettingsOption, PropTypes;

PropTypes = React.PropTypes;

DesignSettingsOption = React.createClass({
  displayName: 'DesignSettingsOption',
  propTypes: {
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired,
    title: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    free: PropTypes.bool
  },
  render: function() {
    return React.createElement("div", {
      "className": "design-settings__option design-settings__option--" + this.props.name
    }, React.createElement("div", {
      "className": "design-settings__option-content"
    }, React.createElement("span", {
      "className": "design-settings__text ds-absolute-left ds-fadeout-down"
    }, this.props.title, this.renderFreeLabel()), this.props.children));
  },
  renderFreeLabel: function() {
    if (this.props.free) {
      return React.createElement("span", {
        "className": "free"
      }, "free");
    }
  }
});

module.exports = DesignSettingsOption;


},{}],58:[function(require,module,exports){
var DesignSettingsOptionState, PropTypes;

PropTypes = React.PropTypes;

DesignSettingsOptionState = React.createClass({
  displayName: 'DesignSettingsOptionState',
  propTypes: {
    style: PropTypes.string.isRequired,
    text: PropTypes.string
  },
  render: function() {
    return React.createElement("span", {
      "className": 'design-settings__state design-settings__state--' + this.props.style + ' ds-absolute-right ds-fadeout-right'
    }, React.createElement("span", {
      "className": "design-settings__state-i"
    }, this.props.text));
  }
});

module.exports = DesignSettingsOptionState;


},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DesignSettingsOptionUpload = React.createClass({
  displayName: "DesignSettingsOptionUpload",

  propTypes: {
    optionName: React.PropTypes.string.isRequired,
    backgroundImageUrl: React.PropTypes.string.isRequired,
    backgroundImageEnabled: React.PropTypes.bool.isRequired,
    onBgImageChange: React.PropTypes.func.isRequired,
    onImageVisibilityChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "span",
      null,
      React.createElement(
        "span",
        { className: "design-settings__text ds-absolute-left ds-fadein-down" },
        i18n.t('design_settings_upload_drag_or'),
        React.createElement(
          "span",
          { className: "form-upload form-upload--cover" },
          React.createElement(
            "span",
            { className: "form-upload__text" },
            i18n.t('design_settings_upload_upload')
          ),
          React.createElement("input", { type: "file",
            accept: "image/*",
            className: "form-upload__input",
            onChange: this.handleBgImageChange })
        )
      ),
      React.createElement("span", { className: "design-settings__cover ds-absolute-right ds-fadeout-right",
        style: { backgroundImage: "url(\"" + this.props.backgroundImageUrl + "\")" } }),
      React.createElement(
        "span",
        { className: "design-settings__text ds-absolute-right ds-fadein-left" },
        React.createElement(
          "span",
          { className: "form-checkbox" },
          React.createElement("input", { type: "checkbox",
            defaultChecked: this.props.backgroundImageEnabled,
            id: this.props.optionName,
            className: "form-checkbox__input",
            onChange: this.handleVisibilityChange }),
          React.createElement(
            "label",
            { htmlFor: this.props.optionName,
              className: "form-checkbox__label" },
            React.createElement(
              "span",
              { className: "form-checkbox__box" },
              React.createElement("i", { className: "form-checkbox__icon" })
            ),
            i18n.t('design_settings_background_enabled')
          )
        )
      )
    );
  },

  handleVisibilityChange: function handleVisibilityChange(e) {
    this.props.onImageVisibilityChange(e.target.checked);
  },

  handleBgImageChange: function handleBgImageChange(e) {
    var file = e.target.files[0];

    if (file) {
      this.props.onBgImageChange(file);
    }
  }
});

exports["default"] = DesignSettingsOptionUpload;
module.exports = exports["default"];

},{}],60:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonSpinner = require('../../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var DesignSettingsSaveButton = (function () {
  function DesignSettingsSaveButton() {
    _classCallCheck(this, DesignSettingsSaveButton);
  }

  _createClass(DesignSettingsSaveButton, [{
    key: 'getTitle',
    value: function getTitle() {
      return this.props.hasDesignBundle || !this.props.hasPaidValues ? i18n.t('design_settings_save_button') : i18n.t('design_settings_save_with_payment_button');
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.props.onClick();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'button',
        { className: 'design-settings__save-button', onClick: this.handleClick.bind(this) },
        this.props.isSaving ? _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 14 }) : this.getTitle()
      );
    }
  }]);

  return DesignSettingsSaveButton;
})();

DesignSettingsSaveButton.propTypes = {
  hasDesignBundle: _react.PropTypes.bool.isRequired,
  hasPaidValues: _react.PropTypes.bool.isRequired,
  isSaving: _react.PropTypes.bool.isRequired,
  onClick: _react.PropTypes.func
};

exports['default'] = DesignSettingsSaveButton;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Spinner":537,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],61:[function(require,module,exports){
var DesignSettingsColorPicker, PopupActions, PropTypes;

PopupActions = require('../../../actions/popup');

PropTypes = React.PropTypes;

DesignSettingsColorPicker = React.createClass({
  displayName: 'DesignSettingsColorPicker',
  propTypes: {
    color: PropTypes.string.isRequired,
    onChange: PropTypes.func
  },
  getInitialState: function() {
    return {
      open: false,
      color: this.props.color
    };
  },
  getDefaultProps: function() {
    return {
      color: '#2ac67e'
    };
  },
  componentWillUnmount: function() {
    if (this.state.open) {
      return PopupActions.closeColorPicker();
    }
  },
  render: function() {
    return React.createElement("span", {
      "className": "color-picker",
      "style": {
        backgroundColor: this.state.color
      },
      "onClick": this.toggle
    });
  },
  activateCloseState: function() {
    return this.setState({
      open: false
    });
  },
  activateOpenState: function() {
    return this.setState({
      open: true
    });
  },
  getValue: function() {
    return this.state.color;
  },
  open: function() {
    var activator;
    activator = this.getDOMNode();
    PopupActions.showColorPicker({
      color: this.state.color,
      activatorRect: activator.getBoundingClientRect(),
      onDrag: this.handleDrag,
      onChange: this.handleChange,
      onClose: this.activateCloseState
    });
    return this.activateOpenState();
  },
  close: function() {
    PopupActions.closeColorPicker();
    return this.activateCloseState();
  },
  toggle: function() {
    if (this.state.open) {
      return this.close();
    } else {
      return this.open();
    }
  },
  handleDrag: function(color) {
    return this.setState({
      color: color
    });
  },
  handleChange: function(color) {
    var base;
    return typeof (base = this.props).onChange === "function" ? base.onChange(color) : void 0;
  }
});

module.exports = DesignSettingsColorPicker;


},{"../../../actions/popup":17}],62:[function(require,module,exports){
var DesignSettingsColorPickerPopup, PropTypes, ReactColorPicker, closest;

ReactColorPicker = require('react-color-picker');

PropTypes = React.PropTypes;

closest = function(el, target) {
  while (target.parentNode) {
    if (target === el) {
      return true;
    }
    target = target.parentNode;
  }
  return false;
};

DesignSettingsColorPickerPopup = React.createClass({
  displayName: 'DesignSettingsColorPickerPopup',
  propTypes: {
    color: PropTypes.string.isRequired,
    activatorRect: PropTypes.object.isRequired,
    onDrag: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
    onChange: PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      top: -9999,
      left: -9999
    };
  },
  componentDidMount: function() {
    var activatorRect, popupRect;
    activatorRect = this.props.activatorRect;
    popupRect = this.getDOMNode().getBoundingClientRect();
    this.setState({
      top: activatorRect.top + activatorRect.height,
      left: activatorRect.left - (popupRect.width - activatorRect.width) / 2
    });
    Mousetrap.bind('esc', this.props.onClose);
    $('.scroller__pane').on('scroll', this.props.onClose);
    $(document).on('click', this.handleDocumentClick);
    return $(document).on('scroll', this.props.onClose);
  },
  componentWillUnmount: function() {
    Mousetrap.unbind('esc');
    $('.scroller__pane').off('scroll', this.props.onClose);
    $(document).off('click', this.handleDocumentClick);
    return $(document).off('scroll', this.props.onClose);
  },
  render: function() {
    return React.createElement("div", {
      "className": "color-picker-popup",
      "style": {
        top: this.state.top,
        left: this.state.left
      }
    }, React.createElement("i", {
      "className": "color-picker-popup__arrow"
    }), React.createElement(ReactColorPicker, {
      "defaultValue": this.props.color,
      "saturationWidth": 140.,
      "saturationHeight": 140.,
      "hueWidth": 6.,
      "onDrag": this.handleDrag,
      "onChange": this.handleChange
    }));
  },
  handleDrag: function(color) {
    return this.props.onDrag(color);
  },
  handleChange: function(color) {
    return this.props.onChange(color);
  },
  handleDocumentClick: function(e) {
    var isClickInside;
    isClickInside = closest(this.getDOMNode(), e.target);
    if (!(isClickInside || e.target.type === 'radio')) {
      return this.props.onClose();
    }
  }
});

module.exports = DesignSettingsColorPickerPopup;


},{"react-color-picker":"react-color-picker"}],63:[function(require,module,exports){
var DesignOptionsService, DesignPresenterService, DesignSettingsColorPicker, DesignSettingsRadio, PropTypes;

DesignOptionsService = require('../../../services/designOptions');

DesignPresenterService = require('../../../services/designPresenter');

DesignSettingsColorPicker = require('./colorPicker');

PropTypes = React.PropTypes;

DesignSettingsRadio = React.createClass({
  displayName: 'DesignSettingsRadio',
  propTypes: {
    value: PropTypes.string.isRequired,
    custom: PropTypes.bool.isRequired,
    checked: PropTypes.bool.isRequired,
    optionName: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      name: DesignPresenterService.getName(this.props.optionName, this.props.value),
      text: DesignPresenterService.getText(this.props.optionName, this.props.value),
      free: !DesignOptionsService.isPaidValue(this.props.optionName, this.props.value),
      bought: DesignOptionsService.isBoughtValue(this.props.optionName, this.props.value)
    };
  },
  render: function() {
    var name;
    name = this.props.custom ? 'custom' : this.state.name;
    return React.createElement("span", {
      "className": 'form-radiobtn form-radiobtn--' + name
    }, React.createElement("input", {
      "type": "radio",
      "checked": this.props.checked,
      "id": this.props.optionName + '-' + name,
      "className": "form-radiobtn__input",
      "onChange": this.handleChange
    }), React.createElement("label", {
      "htmlFor": this.props.optionName + '-' + name,
      "className": "form-radiobtn__label"
    }, this.renderFreeLabel(), React.createElement("span", {
      "className": "form-radiobtn__inner"
    }, React.createElement("span", {
      "className": "form-radiobtn__text"
    }, this.state.text)), this.renderColorPicker()));
  },
  renderColorPicker: function() {
    if (this.props.custom) {
      return React.createElement(DesignSettingsColorPicker, {
        "ref": "colorPicker",
        "color": this.props.value,
        "onChange": this.props.onChange
      });
    }
  },
  renderFreeLabel: function() {
    if (!this.state.bought && this.state.free && !this.props.custom) {
      return React.createElement("span", {
        "className": "free"
      }, "free");
    }
  },
  handleChange: function() {
    var value;
    value = this.refs.colorPicker != null ? this.refs.colorPicker.getValue() : this.props.value;
    return this.props.onChange(value);
  }
});

module.exports = DesignSettingsRadio;


},{"../../../services/designOptions":504,"../../../services/designPresenter":505,"./colorPicker":61}],64:[function(require,module,exports){
var DesignSettingsRadio, DesignSettingsRadioList, PropTypes, _;

_ = require('lodash');

DesignSettingsRadio = require('./radio');

PropTypes = React.PropTypes;

DesignSettingsRadioList = React.createClass({
  displayName: 'DesignSettingsRadioList',
  propTypes: {
    style: PropTypes.string.isRequired,
    optionName: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    items: PropTypes.array.isRequired,
    className: PropTypes.string,
    onChange: PropTypes.func.isRequired
  },
  render: function() {
    var listClasses, listItems;
    listClasses = ['form-radiogroup', 'form-radiogroup--' + this.props.style, this.props.className].join(' ');
    listItems = _.map(this.props.items, (function(_this) {
      return function(item) {
        var checked, custom, value;
        value = item;
        custom = false;
        checked = _this.props.value === value;
        if (item === ':ANY:') {
          value = _this.props.value;
          custom = true;
          checked = _this.props.items.indexOf(value) === -1;
        }
        return React.createElement(DesignSettingsRadio, {
          "value": value,
          "custom": custom,
          "checked": checked,
          "optionName": _this.props.optionName,
          "onChange": _this.props.onChange,
          "key": item
        });
      };
    })(this));
    return React.createElement("span", {
      "className": listClasses
    }, listItems);
  }
});

module.exports = DesignSettingsRadioList;


},{"./radio":63,"lodash":"lodash"}],65:[function(require,module,exports){
var DesignSettingsRange, MAXIMUM, MINIMUM, PropTypes, STEP;

PropTypes = React.PropTypes;

MINIMUM = 0;

MAXIMUM = 1;

STEP = 0.01;

DesignSettingsRange = React.createClass({
  displayName: 'DesignSettingsRange',
  propTypes: {
    value: PropTypes.number.isRequired,
    from: PropTypes.number,
    to: PropTypes.number,
    step: PropTypes.number,
    onChange: PropTypes.func.isRequired
  },
  getDefaultProps: function() {
    return {
      from: MINIMUM,
      to: MAXIMUM,
      step: STEP
    };
  },
  getInitialState: function() {
    return {
      value: this.props.value
    };
  },
  componentDidMount: function() {
    var range;
    range = this.refs.range.getDOMNode();
    return $(range).slider({
      min: this.props.from,
      max: this.props.to,
      step: this.props.step,
      range: 'min',
      value: this.props.value,
      animate: true,
      slide: this.handleSlide
    });
  },
  componentWillUnmount: function() {
    var range;
    range = this.refs.range.getDOMNode();
    return $(range).slider('destroy');
  },
  render: function() {
    return React.createElement("span", null, React.createElement("span", {
      "ref": "range",
      "className": "form-range ds-absolute-left ds-fadein-down"
    }, React.createElement("input", {
      "type": "text",
      "className": "form-range__input"
    })), this.renderValue());
  },
  renderValue: function() {
    var formattedValue;
    formattedValue = (this.state.value * 100).toFixed() + '%';
    return React.createElement("span", {
      "className": "form-range-value"
    }, formattedValue);
  },
  handleSlide: function(e, ui) {
    this.setState({
      value: ui.value
    });
    return this.props.onChange(ui.value);
  }
});

module.exports = DesignSettingsRange;


},{}],66:[function(require,module,exports){
var DesignSettingsSlider, DesignSettingsSliderNextButton, DesignSettingsSliderPrevButton, PropTypes, _, classnames;

_ = require('lodash');

classnames = require('classnames');

DesignSettingsSliderPrevButton = require('./slider/prevButton');

DesignSettingsSliderNextButton = require('./slider/nextButton');

PropTypes = React.PropTypes;

DesignSettingsSlider = React.createClass({
  displayName: 'DesignSettingsSlider',
  propTypes: {
    className: PropTypes.string,
    children: PropTypes.element.isRequired
  },
  getInitialState: function() {
    return {
      inited: false,
      leftLimit: true,
      rightLimit: false,
      leftOffset: 0
    };
  },
  componentDidMount: function() {
    return this.setState({
      inited: true
    });
  },
  render: function() {
    var sliderClasses;
    sliderClasses = classnames('slider', {
      '__inited': this.state.inited,
      '__leftlimit': this.state.leftLimit,
      '__rightlimit': this.state.rightLimit
    });
    sliderClasses = [sliderClasses, this.props.className].join(' ');
    return React.createElement("div", {
      "className": sliderClasses
    }, React.createElement("div", {
      "ref": "main",
      "className": "slider__main"
    }, React.createElement("div", {
      "ref": "list",
      "className": "slider__list",
      "style": this.getListStyles()
    }, React.createElement("div", {
      "className": "slider__table"
    }, React.createElement("div", {
      "className": "slider__table-cell"
    }, this.props.children)))), this.renderButtons());
  },
  renderButtons: function() {
    var buttons, listWidth, mainWidth, nextButton, prevButton;
    buttons = [];
    prevButton = React.createElement(DesignSettingsSliderPrevButton, {
      "onClick": this.slidePrev,
      "key": "prev"
    });
    nextButton = React.createElement(DesignSettingsSliderNextButton, {
      "onClick": this.slideNext,
      "key": "next"
    });
    if (this.state.inited) {
      listWidth = this.refs.list.getDOMNode().offsetWidth;
      mainWidth = this.refs.main.getDOMNode().offsetWidth;
      if (listWidth > mainWidth) {
        buttons = buttons.concat(prevButton, nextButton);
      }
    }
    return buttons;
  },
  slidePrev: function() {
    var leftLimit, leftOffset, listWidth, mainWidth, rightLimit, shift;
    rightLimit = false;
    leftLimit = this.state.leftLimit;
    listWidth = this.refs.list.getDOMNode().offsetWidth;
    mainWidth = this.refs.main.getDOMNode().offsetWidth;
    leftOffset = Math.abs(this.state.leftOffset);
    shift = mainWidth - 40;
    if (leftOffset === 0) {
      return;
    }
    if (leftOffset - shift <= 0) {
      leftOffset = 0;
      leftLimit = true;
    } else {
      leftOffset = leftOffset - shift;
    }
    return this.setState({
      leftLimit: leftLimit,
      rightLimit: rightLimit,
      leftOffset: leftOffset * -1
    });
  },
  slideNext: function() {
    var leftLimit, leftOffset, listWidth, mainWidth, rightLimit, shift;
    leftLimit = false;
    rightLimit = this.state.rightLimit;
    listWidth = this.refs.list.getDOMNode().offsetWidth;
    mainWidth = this.refs.main.getDOMNode().offsetWidth;
    leftOffset = Math.abs(this.state.leftOffset);
    shift = mainWidth - 40;
    if (leftOffset + shift >= listWidth) {
      return;
    }
    if (leftOffset + shift >= listWidth - mainWidth) {
      rightLimit = true;
      leftOffset = listWidth - mainWidth;
    } else {
      leftOffset = leftOffset + shift;
    }
    return this.setState({
      leftLimit: leftLimit,
      rightLimit: rightLimit,
      leftOffset: leftOffset * -1
    });
  },
  getListStyles: function() {
    var styles, supportedTransform;
    styles = {};
    supportedTransform = this.getSupportedTransform();
    if (supportedTransform) {
      styles[supportedTransform] = 'translateX(' + this.state.leftOffset + 'px)';
    } else {
      styles.left = this.state.leftOffset;
    }
    return styles;
  },
  getSupportedTransform: function() {
    var div, firstPrefix, prefixes;
    prefixes = 'transform WebkitTransform MozTransform OTransform msTransform'.split(' ');
    div = document.createElement('div');
    firstPrefix = _.find(prefixes, function(prefix) {
      return div.style[prefix] != null;
    });
    return firstPrefix != null ? firstPrefix : false;
  }
});

module.exports = DesignSettingsSlider;


},{"./slider/nextButton":67,"./slider/prevButton":68,"classnames":647,"lodash":"lodash"}],67:[function(require,module,exports){
var DesignSettingsSliderNextButton, PropTypes;

PropTypes = React.PropTypes;

DesignSettingsSliderNextButton = React.createClass({
  displayName: 'DesignSettingsSliderNextButton',
  propTypes: {
    onClick: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "slider__btn slider__btn--right",
      "onClick": this.handleClick
    });
  },
  handleClick: function() {
    return this.props.onClick();
  }
});

module.exports = DesignSettingsSliderNextButton;


},{}],68:[function(require,module,exports){
var DesignSettingsSliderPrevButton, PropTypes;

PropTypes = React.PropTypes;

DesignSettingsSliderPrevButton = React.createClass({
  displayName: 'DesignSettingsSliderPrevButton',
  propTypes: {
    onClick: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "slider__btn slider__btn--left",
      "onClick": this.handleClick
    });
  },
  handleClick: function() {
    return this.props.onClick();
  }
});

module.exports = DesignSettingsSliderPrevButton;


},{}],69:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _buttonsVote = require('../buttons/Vote');

var _buttonsVote2 = _interopRequireDefault(_buttonsVote);

var _buttonsPrivacy = require('../buttons/Privacy');

var _buttonsPrivacy2 = _interopRequireDefault(_buttonsPrivacy);

var _buttonsPreview = require('../buttons/Preview');

var _buttonsPreview2 = _interopRequireDefault(_buttonsPreview);

var _buttonsSave = require('../buttons/Save');

var _buttonsSave2 = _interopRequireDefault(_buttonsSave);

var _constantsEntryConstants = require('../../../constants/EntryConstants');

var ENTRY_PRIVACY_PRIVATE = 'private';
var ENTRY_PRIVACY_PUBLIC = 'public';
var ENTRY_PRIVACY_LIVE = 'live';
var TLOG_TYPE_PRIVATE = 'private';
//const TLOG_TYPE_PUBLIC = 'public';
var TLOG_TYPE_ANONYMOUS = 'anonymous';

var EditorActions = (function (_Component) {
  _inherits(EditorActions, _Component);

  function EditorActions() {
    _classCallCheck(this, EditorActions);

    _get(Object.getPrototypeOf(EditorActions.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      preview: false
    };
  }

  // <div className="post-action post-action--button">
  //   <button className="button button--outline button--gray">
  //     Привязать пост к потоку
  //   </button>
  // </div>

  _createClass(EditorActions, [{
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      //TODO: Применятор для показа превью
      if (this.state.preview !== nextState.preview) {
        if (nextState.preview) {
          $('body').removeClass('tlog-mode-minimal').addClass('tlog-mode-full');
        } else {
          $('body').removeClass('tlog-mode-full').addClass('tlog-mode-minimal');
        }
      }
    }
  }, {
    key: 'handleVoteButtonClick',
    value: function handleVoteButtonClick() {
      if (this.props.loading) {
        return;
      }
      var newEntryPrivacy = this.isEntryLive() ? ENTRY_PRIVACY_PUBLIC : ENTRY_PRIVACY_LIVE;
      this.props.onChangePrivacy(newEntryPrivacy);
    }
  }, {
    key: 'handlePrivacyButtonClick',
    value: function handlePrivacyButtonClick() {
      if (this.props.loading) {
        return;
      }
      var newEntryPrivacy = this.isEntryPrivate() ? ENTRY_PRIVACY_PUBLIC : ENTRY_PRIVACY_PRIVATE;
      this.props.onChangePrivacy(newEntryPrivacy);
    }
  }, {
    key: 'onPinEntryButtonClick',
    value: function onPinEntryButtonClick() {
      var _props = this.props;
      var loading = _props.loading;
      var pinOrderUrl = _props.pinOrderUrl;

      if (loading || this.isPinned()) {
        return;
      }

      this.props.onPinEntry(pinOrderUrl);
    }
  }, {
    key: 'isEntryForCurrentUser',
    value: function isEntryForCurrentUser() {
      if (this.props.tlog != null) {
        return this.props.tlog.id == this.props.userID;
      }
      return true;
    }
  }, {
    key: 'isEntryLive',
    value: function isEntryLive() {
      return this.props.entryPrivacy == ENTRY_PRIVACY_LIVE;
    }
  }, {
    key: 'isEntryPrivate',
    value: function isEntryPrivate() {
      return this.props.entryPrivacy == ENTRY_PRIVACY_PRIVATE;
    }
  }, {
    key: 'isTlogPrivate',
    value: function isTlogPrivate() {
      return this.props.tlogType == TLOG_TYPE_PRIVATE;
    }
  }, {
    key: 'isTlogAnonymous',
    value: function isTlogAnonymous() {
      return this.props.tlogType == TLOG_TYPE_ANONYMOUS;
    }
  }, {
    key: 'isVotable',
    value: function isVotable() {
      return !(this.isTlogAnonymous() || this.isEntryPrivate() || this.isTlogPrivate()) || !this.isEntryForCurrentUser();
    }
  }, {
    key: 'isPinned',
    value: function isPinned() {
      return this.props.pinState === _constantsEntryConstants.ENTRY_PINNED_STATE;
    }
  }, {
    key: 'isAwaitingPayment',
    value: function isAwaitingPayment() {
      return this.props.pinState === _constantsEntryConstants.ENTRY_AWAITING_PAYMENT_STATE;
    }
  }, {
    key: 'togglePreview',
    value: function togglePreview() {
      if (this.props.loading) {
        return;
      }

      this.setState({ preview: !this.state.preview });
    }
  }, {
    key: 'saveEntry',
    value: function saveEntry() {
      if (this.props.loading) {
        return;
      }

      this.props.onSaveEntry();
    }
  }, {
    key: 'renderPinEntryButton',
    value: function renderPinEntryButton() {
      var _props2 = this.props;
      var canPinEntry = _props2.canPinEntry;
      var pinnedTill = _props2.pinnedTill;

      var isPinned = this.isPinned();

      if (!(isPinned && pinnedTill || canPinEntry) || !this.isVotable()) {
        return null;
      }

      var pinnedTillStr = (0, _moment2['default'])(pinnedTill).format('H:mm D MMMM');
      var buttonClasses = (0, _classnames2['default'])({
        'button': true,
        'post-settings-button': true,
        'post-settings-promotion-button': true,
        '__promoted': isPinned
      });
      var buttonText = isPinned ? i18n.t('buttons.editor.pin_entry_promoted', { date: pinnedTillStr }) : this.isAwaitingPayment() ? i18n.t('buttons.editor.pin_entry_awaiting_payment') : i18n.t('buttons.editor.pin_entry');

      return _react2['default'].createElement(
        'div',
        { className: 'post-action post-action--button', onClick: this.onPinEntryButtonClick.bind(this) },
        _react2['default'].createElement(
          'button',
          { className: buttonClasses },
          buttonText
        )
      );
    }
  }, {
    key: 'renderVoteButton',
    value: function renderVoteButton() {
      if (this.isVotable()) {
        return _react2['default'].createElement(
          'div',
          { className: 'post-action post-action--button' },
          _react2['default'].createElement(_buttonsVote2['default'], { enabled: this.isEntryLive(), onClick: this.handleVoteButtonClick.bind(this) })
        );
      }
    }
  }, {
    key: 'renderPrivacyButton',
    value: function renderPrivacyButton() {
      if (this.isEntryForCurrentUser() && !this.isTlogAnonymous()) {
        return _react2['default'].createElement(
          'div',
          { className: 'post-action post-action--button' },
          _react2['default'].createElement(_buttonsPrivacy2['default'], {
            live: this.isEntryLive(),
            onClick: this.handlePrivacyButtonClick.bind(this),
            'private': this.isEntryPrivate()
          })
        );
      }
    }
  }, {
    key: 'renderSpinner',
    value: function renderSpinner() {
      if (this.props.loading) {
        return _react2['default'].createElement(
          'div',
          { className: 'post-action post-action--loader' },
          _react2['default'].createElement(Spinner, { size: 8 })
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props;
      var loading = _props3.loading;
      var tlog = _props3.tlog;

      var actionsClasses = (0, _classnames2['default'])({
        'post-actions': true,
        'state--loading': loading
      });

      return _react2['default'].createElement(
        'div',
        { className: actionsClasses },
        this.renderSpinner(),
        this.renderPinEntryButton(),
        this.renderVoteButton(),
        this.renderPrivacyButton(),
        _react2['default'].createElement(
          'div',
          { className: 'post-action post-action--button' },
          _react2['default'].createElement(_buttonsPreview2['default'], { onClick: this.togglePreview.bind(this) })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post-action post-action--button' },
          _react2['default'].createElement(
            'div',
            { className: 'button-group' },
            _react2['default'].createElement(_buttonsSave2['default'], {
              entryForCurrentUser: this.isEntryForCurrentUser(),
              onClick: this.saveEntry.bind(this),
              'private': this.isEntryPrivate(),
              tlog: tlog
            })
          )
        )
      );
    }
  }]);

  return EditorActions;
})(_react.Component);

EditorActions.propTypes = {
  canPinEntry: _react.PropTypes.bool,
  entryPrivacy: _react.PropTypes.string.isRequired,
  loading: _react.PropTypes.bool.isRequired,
  onChangePrivacy: _react.PropTypes.func.isRequired,
  onPinEntry: _react.PropTypes.func.isRequired,
  onSaveEntry: _react.PropTypes.func.isRequired,
  pinOrderUrl: _react.PropTypes.string,
  pinState: _react.PropTypes.string,
  pinnedTill: _react.PropTypes.string,
  tlog: _react.PropTypes.object,
  tlogType: _react.PropTypes.string.isRequired,
  userID: _react.PropTypes.number.isRequired
};

exports['default'] = EditorActions;
module.exports = exports['default'];

},{"../../../constants/EntryConstants":404,"../buttons/Preview":86,"../buttons/Privacy":87,"../buttons/Save":88,"../buttons/Vote":89,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"moment":659,"react":"react"}],70:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LayoutLayout = require('./Layout/Layout');

var _LayoutLayout2 = _interopRequireDefault(_LayoutLayout);

var _ActionsActions = require('./Actions/Actions');

var _ActionsActions2 = _interopRequireDefault(_ActionsActions);

var _TypeSwitcherTypeSwitcher = require('./TypeSwitcher/TypeSwitcher');

var _TypeSwitcherTypeSwitcher2 = _interopRequireDefault(_TypeSwitcherTypeSwitcher);

var _EditorArea = require('./EditorArea');

var _EditorArea2 = _interopRequireDefault(_EditorArea);

var _sharedConstantsTlogEntry = require('../../../../shared/constants/TlogEntry');

var Editor = (function () {
  function Editor() {
    _classCallCheck(this, Editor);
  }

  _createClass(Editor, [{
    key: 'renderTypeSwitcher',
    value: function renderTypeSwitcher() {
      var _props = this.props;
      var canChangeType = _props.canChangeType;
      var entryType = _props.entryType;
      var loading = _props.loading;
      var onChangeType = _props.onChangeType;
      var tlogType = _props.tlogType;

      if (tlogType !== _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_ANONYMOUS) {
        return _react2['default'].createElement(_TypeSwitcherTypeSwitcher2['default'], {
          canChangeType: canChangeType,
          entryType: entryType,
          loading: loading,
          onChangeType: onChangeType
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var backUrl = _props2.backUrl;
      var entry = _props2.entry;
      var entryPrivacy = _props2.entryPrivacy;
      var entryType = _props2.entryType;
      var loading = _props2.loading;
      var onChangePrivacy = _props2.onChangePrivacy;
      var onPinEntry = _props2.onPinEntry;
      var onSaveEntry = _props2.onSaveEntry;
      var tlog = _props2.tlog;
      var tlogType = _props2.tlogType;
      var _props2$user = _props2.user;
      var id = _props2$user.id;
      var features = _props2$user.features;

      return _react2['default'].createElement(
        _LayoutLayout2['default'],
        { backUrl: backUrl, loading: loading },
        _react2['default'].createElement(_ActionsActions2['default'], {
          canPinEntry: features.fixup,
          entryPrivacy: entryPrivacy,
          loading: loading,
          onChangePrivacy: onChangePrivacy,
          onPinEntry: onPinEntry,
          onSaveEntry: onSaveEntry,
          pinOrderUrl: entry.pinOrderUrl,
          pinState: entry.pinState,
          pinnedTill: entry.pinnedTill,
          tlog: tlog,
          tlogType: tlogType,
          userID: id
        }),
        _react2['default'].createElement(_EditorArea2['default'], {
          entry: entry,
          entryPrivacy: entryPrivacy,
          entryType: entryType,
          loading: loading
        }),
        this.renderTypeSwitcher()
      );
    }
  }]);

  return Editor;
})();

Editor.propTypes = {
  backUrl: _react.PropTypes.string,
  canChangeType: _react.PropTypes.bool.isRequired,
  entry: _react.PropTypes.object.isRequired,
  entryPrivacy: _react.PropTypes.string.isRequired,
  entryType: _react.PropTypes.string.isRequired,
  loading: _react.PropTypes.bool.isRequired,
  onChangePrivacy: _react.PropTypes.func.isRequired,
  onChangeType: _react.PropTypes.func.isRequired,
  onPinEntry: _react.PropTypes.func.isRequired,
  onSaveEntry: _react.PropTypes.func.isRequired,
  tlog: _react.PropTypes.object,
  tlogType: _react.PropTypes.string.isRequired,
  user: _react.PropTypes.object.isRequired
};

exports['default'] = Editor;
module.exports = exports['default'];

},{"../../../../shared/constants/TlogEntry":527,"./Actions/Actions":69,"./EditorArea":71,"./Layout/Layout":79,"./TypeSwitcher/TypeSwitcher":84,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],71:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedConstantsTlogEntry = require('../../../../shared/constants/TlogEntry');

var _typesText = require('./types/Text');

var _typesText2 = _interopRequireDefault(_typesText);

var _typesImage = require('./types/Image');

var _typesImage2 = _interopRequireDefault(_typesImage);

var _typesInstagram = require('./types/Instagram');

var _typesInstagram2 = _interopRequireDefault(_typesInstagram);

var _typesMusic = require('./types/Music');

var _typesMusic2 = _interopRequireDefault(_typesMusic);

var _typesVideo = require('./types/Video');

var _typesVideo2 = _interopRequireDefault(_typesVideo);

var _typesQuote = require('./types/Quote');

var _typesQuote2 = _interopRequireDefault(_typesQuote);

var EditorArea = (function () {
  function EditorArea() {
    _classCallCheck(this, EditorArea);
  }

  _createClass(EditorArea, [{
    key: 'renderEditor',
    value: function renderEditor() {
      var _props = this.props;
      var entry = _props.entry;
      var entryType = _props.entryType;
      var loading = _props.loading;

      var props = { entry: entry, entryType: entryType, loading: loading };
      var Component = undefined;

      switch (entryType) {
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_TEXT:
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_ANONYMOUS:
          Component = _typesText2['default'];
          break;
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_IMAGE:
          Component = _typesImage2['default'];
          break;
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_INSTAGRAM:
          Component = _typesInstagram2['default'];
          break;
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_MUSIC:
          Component = _typesMusic2['default'];
          break;
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_VIDEO:
          Component = _typesVideo2['default'];
          break;
        case _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_QUOTE:
          Component = _typesQuote2['default'];
          break;
        default:
          console.warn('Unknown type of normalized entry', entryType);
      }

      return _react2['default'].createElement(Component, props);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'section',
        { className: 'posts posts--edit' },
        this.renderEditor()
      );
    }
  }]);

  return EditorArea;
})();

EditorArea.propTypes = {
  entry: _react.PropTypes.object.isRequired,
  entryPrivacy: _react.PropTypes.string.isRequired,
  entryType: _react.PropTypes.string.isRequired,
  loading: _react.PropTypes.bool.isRequired
};

exports['default'] = EditorArea;
module.exports = exports['default'];

},{"../../../../shared/constants/TlogEntry":527,"./types/Image":91,"./types/Instagram":96,"./types/Music":98,"./types/Quote":100,"./types/Text":101,"./types/Video":102,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],72:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _actionsEditor = require('../../actions/editor');

var _actionsEditor2 = _interopRequireDefault(_actionsEditor);

//import PopupActions from '../../actions/popup';

var _storesEditorStore = require('../../stores/EditorStore');

var _storesEditorStore2 = _interopRequireDefault(_storesEditorStore);

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _Editor = require('./Editor');

var _Editor2 = _interopRequireDefault(_Editor);

var _constantsOrderConstants = require('../../constants/OrderConstants');

var orderConstants = _interopRequireWildcard(_constantsOrderConstants);

var _EditorContainer = (function () {
  function _EditorContainer() {
    _classCallCheck(this, _EditorContainer);
  }

  _createClass(_EditorContainer, [{
    key: 'pinEntry',
    value: function pinEntry(pinOrderUrl) {
      _actionsEditor2['default'].pinEntry().then(function (entry) {
        //PopupActions.showPinEntryPopup({ entry });
        window.location.href = pinOrderUrl || _sharedRoutesRoutes2['default'].ordersNew(entry.id, orderConstants.PIN_ENTRY_ORDER);
      });
    }
  }, {
    key: 'saveEntry',
    value: function saveEntry() {
      _actionsEditor2['default'].saveEntry().then(function (entry) {
        window.location.href = entry.entry_url;
      });
    }
  }, {
    key: 'changePrivacy',
    value: function changePrivacy(privacy) {
      _actionsEditor2['default'].changeEntryPrivacy(privacy);
    }
  }, {
    key: 'changeType',
    value: function changeType(type) {
      _actionsEditor2['default'].changeEntryType(type);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_Editor2['default'], _extends({}, this.props, {
        onChangePrivacy: this.changePrivacy,
        onChangeType: this.changeType,
        onPinEntry: this.pinEntry,
        onSaveEntry: this.saveEntry
      }));
    }
  }]);

  return _EditorContainer;
})();

_EditorContainer.propTypes = {
  backUrl: _react.PropTypes.string,
  canChangeType: _react.PropTypes.bool,
  entry: _react.PropTypes.object.isRequired,
  entryPrivacy: _react.PropTypes.string.isRequired,
  entryType: _react.PropTypes.string.isRequired,
  loading: _react.PropTypes.bool.isRequired,
  tlog: _react.PropTypes.object,
  tlogType: _react.PropTypes.oneOf(['public', 'private', 'anonymous']).isRequired,
  user: _react.PropTypes.object.isRequired
};

var EditorContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(_EditorContainer, [_storesEditorStore2['default'], _storesCurrent_user2['default']], function (props) {
  return {
    entry: _storesEditorStore2['default'].getEntry(),
    entryType: _storesEditorStore2['default'].getEntryType(),
    entryPrivacy: _storesEditorStore2['default'].getEntryPrivacy(),
    loading: _storesEditorStore2['default'].isLoading(),
    tlog: _storesEditorStore2['default'].getTlog(),
    user: _storesCurrent_user2['default'].getUser()
  };
});

exports['default'] = EditorContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/editor":16,"../../constants/OrderConstants":406,"../../stores/EditorStore":511,"../../stores/current_user":517,"./Editor":70,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],73:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsEditor = require('../../actions/editor');

var _actionsEditor2 = _interopRequireDefault(_actionsEditor);

var _EditorContainer = require('./EditorContainer');

var _EditorContainer2 = _interopRequireDefault(_EditorContainer);

var EditorEdit = (function (_Component) {
  _inherits(EditorEdit, _Component);

  function EditorEdit() {
    _classCallCheck(this, EditorEdit);

    _get(Object.getPrototypeOf(EditorEdit.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(EditorEdit, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props;
      var entry = _props.entry;
      var tlog = _props.tlog;
      var tlogType = _props.tlogType;

      // Here we just initialize EditorStore data, it will be used in EditorContainer later on
      _actionsEditor2['default'].init({ entry: entry, tlog: tlog, tlogType: tlogType });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var backUrl = _props2.backUrl;
      var tlogType = _props2.tlogType;

      return _react2['default'].createElement(_EditorContainer2['default'], {
        backUrl: backUrl,
        canChangeType: false,
        tlogType: tlogType
      });
    }
  }]);

  return EditorEdit;
})(_react.Component);

EditorEdit.propTypes = {
  backUrl: _react.PropTypes.string,
  entry: _react.PropTypes.object.isRequired,
  tlog: _react.PropTypes.object,
  tlogType: _react.PropTypes.oneOf(['public', 'private', 'anonymous']).isRequired
};

exports['default'] = EditorEdit;
module.exports = exports['default'];

},{"../../actions/editor":16,"./EditorContainer":72,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],74:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsEditor = require('../../actions/editor');

var _actionsEditor2 = _interopRequireDefault(_actionsEditor);

var _EditorContainer = require('./EditorContainer');

var _EditorContainer2 = _interopRequireDefault(_EditorContainer);

var EditorNew = React.createClass({
  displayName: 'EditorNew',

  propTypes: {
    tlog: React.PropTypes.object,
    tlogType: React.PropTypes.oneOf(['public', 'private', 'anonymous']).isRequired,
    backUrl: React.PropTypes.string
  },

  componentWillMount: function componentWillMount() {
    var _props = this.props;
    var tlog = _props.tlog;
    var tlogType = _props.tlogType;

    // Here we just initialize EditorStore data, it will be used in EditorContainer later on
    _actionsEditor2['default'].init({
      tlog: tlog, tlogType: tlogType,
      entry: null
    });
  },

  render: function render() {
    return React.createElement(_EditorContainer2['default'], {
      tlogType: this.props.tlogType,
      backUrl: this.props.backUrl,
      canChangeType: true });
  }
});

exports['default'] = EditorNew;
module.exports = exports['default'];

},{"../../actions/editor":16,"./EditorContainer":72,"babel-runtime/helpers/interop-require-default":574}],75:[function(require,module,exports){
var EditorActionCreators, EditorEmbed, EditorEmbedLoaded, EditorEmbedLoading, EditorEmbedUrlInsert, INSERT_STATE, LOADED_STATE, LOADING_STATE, PropTypes, WELCOME_STATE, cloneWithProps;

cloneWithProps = require('react/lib/cloneWithProps');

EditorActionCreators = require('../../../actions/editor');

EditorEmbedUrlInsert = require('./EmbedUrlInsert');

EditorEmbedLoading = require('./EmbedLoading');

EditorEmbedLoaded = require('./EmbedLoaded');

PropTypes = React.PropTypes;

INSERT_STATE = 'insert';

LOADED_STATE = 'loaded';

WELCOME_STATE = 'welcome';

LOADING_STATE = 'loading';

EditorEmbed = React.createClass({
  displayName: 'EditorEmbed',
  propTypes: {
    embedUrl: PropTypes.string,
    embedHtml: PropTypes.string,
    loading: React.PropTypes.bool.isRequired,
    onCreate: PropTypes.func.isRequired,
    onChaneEmbedUrl: PropTypes.func.isRequired,
    onDelete: PropTypes.func.isRequired,
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired
  },
  getInitialState: function() {
    return {
      currentState: this.getInitialCurrentState()
    };
  },
  render: function() {
    var children;
    switch (this.state.currentState) {
      case WELCOME_STATE:
        children = React.Children.map(this.props.children, (function(_this) {
          return function(child) {
            return cloneWithProps(child, {
              onClickInsertState: _this.activateInsertState
            });
          };
        })(this));
        return React.createElement("div", null, children);
      case LOADED_STATE:
        return React.createElement(EditorEmbedLoaded, {
          "embedHtml": this.props.embedHtml,
          "loading": this.props.loading,
          "onDelete": this.handleDeleteEmbed
        });
      case INSERT_STATE:
        return React.createElement(EditorEmbedUrlInsert, {
          "onInsert": this.handleChangeEmbedUrl,
          "onCancel": this.activateWelcomeState
        });
      case LOADING_STATE:
        return React.createElement(EditorEmbedLoading, {
          "embedUrl": this.props.embedUrl
        });
      default:
        return null;
    }
  },
  activateLoadedState: function() {
    return this.setState({
      currentState: LOADED_STATE
    });
  },
  activateInsertState: function() {
    return this.setState({
      currentState: INSERT_STATE
    });
  },
  activateWelcomeState: function() {
    return this.setState({
      currentState: WELCOME_STATE
    });
  },
  activateLoadingState: function() {
    return this.setState({
      currentState: LOADING_STATE
    });
  },
  getInitialCurrentState: function() {
    if (this.props.embedHtml) {
      return LOADED_STATE;
    } else {
      return WELCOME_STATE;
    }
  },
  handleChangeEmbedUrl: function(embedUrl) {
    this.props.onChaneEmbedUrl(embedUrl);
    this.activateLoadingState();
    return EditorActionCreators.createEmbed(embedUrl).then((function(_this) {
      return function(iframely) {
        var ref, ref1;
        _this.props.onCreate({
          title: ((ref = iframely.meta) != null ? ref.description : void 0) || ((ref1 = iframely.meta) != null ? ref1.title : void 0),
          embedHtml: iframely.html
        });
        return _this.activateLoadedState();
      };
    })(this)).fail(this.activateInsertState);
  },
  handleDeleteEmbed: function() {
    this.activateWelcomeState();
    return this.props.onDelete();
  }
});

module.exports = EditorEmbed;


},{"../../../actions/editor":16,"./EmbedLoaded":76,"./EmbedLoading":77,"./EmbedUrlInsert":78,"react/lib/cloneWithProps":797}],76:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MediaBoxMediaBox = require('../MediaBox/MediaBox');

var _MediaBoxMediaBox2 = _interopRequireDefault(_MediaBoxMediaBox);

var _MediaBoxMediaBoxActions = require('../MediaBox/MediaBoxActions');

var _MediaBoxMediaBoxActions2 = _interopRequireDefault(_MediaBoxMediaBoxActions);

var EditorEmbedLoaded = React.createClass({
  displayName: 'EditorEmbedLoaded',

  propTypes: {
    embedHtml: React.PropTypes.string.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    loading: React.PropTypes.bool.isRequired
  },

  render: function render() {
    return React.createElement(
      _MediaBoxMediaBox2['default'],
      { entryType: 'video', state: 'loaded' },
      React.createElement('div', { className: 'media-box__display',
        dangerouslySetInnerHTML: { __html: this.props.embedHtml || '' } }),
      this.renderActions()
    );
  },

  renderActions: function renderActions() {
    if (!this.props.loading) {
      return React.createElement(_MediaBoxMediaBoxActions2['default'], { onDelete: this.props.onDelete });
    }
  }
});

exports['default'] = EditorEmbedLoaded;
module.exports = exports['default'];

},{"../MediaBox/MediaBox":80,"../MediaBox/MediaBoxActions":81,"babel-runtime/helpers/interop-require-default":574}],77:[function(require,module,exports){
var EditorEmbedLoading, MediaBox, PropTypes;

MediaBox = require('../MediaBox/MediaBox');

PropTypes = React.PropTypes;

EditorEmbedLoading = React.createClass({
  displayName: 'EditorEmbedLoading',
  propTypes: {
    embedUrl: PropTypes.string.isRequired
  },
  render: function() {
    return React.createElement(MediaBox, {
      "entryType": "video"
    }, React.createElement("div", {
      "className": "media-box__info"
    }, React.createElement("div", {
      "className": "media-box__text"
    }, React.createElement("span", null, this.props.embedUrl), React.createElement("br", null), React.createElement("span", null, i18n.t('editor_video_mediabox_loading')))));
  }
});

module.exports = EditorEmbedLoading;


},{"../MediaBox/MediaBox":80}],78:[function(require,module,exports){
var EditorEmbedUrlInsert, MediaBox, MediaBoxActions, PropTypes;

MediaBox = require('../MediaBox/MediaBox');

MediaBoxActions = require('../MediaBox/MediaBoxActions');

PropTypes = React.PropTypes;

EditorEmbedUrlInsert = React.createClass({
  displayName: 'EditorEmbedUrlInsert',
  propTypes: {
    onInsert: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement(MediaBox, {
      "entryType": "video",
      "state": "insert"
    }, React.createElement("label", {
      "htmlFor": "media-box-video-url",
      "className": "media-box__form"
    }, React.createElement("input", {
      "type": "url",
      "autoFocus": true,
      "id": "media-box-video-url",
      "className": "media-box__form-input",
      "onPaste": this.handlePaste,
      "onBlur": this.handleBlur
    })), React.createElement(MediaBoxActions, {
      "onDelete": this.props.onCancel
    }));
  },
  handlePaste: function(e) {
    return this.props.onInsert(e.clipboardData.getData('text'));
  },
  handleBlur: function() {
    return this.props.onCancel();
  }
});

module.exports = EditorEmbedUrlInsert;


},{"../MediaBox/MediaBox":80,"../MediaBox/MediaBoxActions":81}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var EditorLayout = React.createClass({
  displayName: "EditorLayout",

  propTypes: {
    loading: React.PropTypes.bool.isRequired,
    backUrl: React.PropTypes.string
  },

  render: function render() {
    return React.createElement(
      "div",
      null,
      this.renderBackButton(),
      this.props.children
    );
  },

  renderBackButton: function renderBackButton() {
    if (this.props.loading) {
      return;
    }
    return React.createElement("a", { className: "back-button", onClick: this.handleClick });
  },

  handleClick: function handleClick() {
    this.props.backUrl ? location.href = this.props.backUrl : history.back();
  }
});

exports["default"] = EditorLayout;
module.exports = exports["default"];

},{}],80:[function(require,module,exports){
var EditorMediaBox, PropTypes;

PropTypes = React.PropTypes;

EditorMediaBox = React.createClass({
  displayName: 'EditorMediaBox',
  propTypes: {
    state: PropTypes.string,
    entryType: PropTypes.string.isRequired,
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired
  },
  getDefaultProps: function() {
    return {
      state: null
    };
  },
  render: function() {
    var mediaBoxClasses;
    mediaBoxClasses = ['media-box'];
    if (this.props.state != null) {
      mediaBoxClasses.push('state--' + this.props.state);
    }
    return React.createElement("figure", {
      "className": this.props.entryType
    }, React.createElement("div", {
      "className": mediaBoxClasses.join(' ')
    }, this.props.children));
  }
});

module.exports = EditorMediaBox;


},{}],81:[function(require,module,exports){
var EditorMediaBoxActions, PropTypes;

PropTypes = React.PropTypes;

EditorMediaBoxActions = React.createClass({
  displayName: 'EditorMediaBoxActions',
  propTypes: {
    onDelete: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "media-box__actions"
    }, React.createElement("div", {
      "title": i18n.t('editor_mediabox_delete'),
      "className": "media-box__action media-box__action--delete",
      "onClick": this.handleClick
    }, React.createElement("span", {
      "className": "icon icon--cross"
    })));
  },
  handleClick: function() {
    return this.props.onDelete();
  }
});

module.exports = EditorMediaBoxActions;


},{}],82:[function(require,module,exports){
var EditorMediaBoxProgess, PropTypes;

PropTypes = React.PropTypes;

EditorMediaBoxProgess = React.createClass({
  displayName: 'EditorMediaBoxProgess',
  propTypes: {
    progress: PropTypes.number.isRequired
  },
  render: function() {
    var progress;
    progress = Math.min(this.props.progress, 100);
    progress = Math.max(this.props.progress, 0);
    return React.createElement("div", {
      "className": "media-box__loader"
    }, React.createElement("div", {
      "className": "media-box__loader-fill",
      "style": {
        width: progress + '%'
      }
    }));
  }
});

module.exports = EditorMediaBoxProgess;


},{}],83:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var PinEntryPopup = (function () {
  function PinEntryPopup() {
    _classCallCheck(this, PinEntryPopup);
  }

  _createClass(PinEntryPopup, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement("div", { className: "pin-entry-popup" });
    }
  }]);

  return PinEntryPopup;
})();

PinEntryPopup.propTypes = {
  entry: _react.PropTypes.object.isRequired
};

exports["default"] = PinEntryPopup;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],84:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TypeSwitcherItem = require('./TypeSwitcherItem');

var _TypeSwitcherItem2 = _interopRequireDefault(_TypeSwitcherItem);

var AVAILABLE_TYPES = ['text', 'image', 'instagram', 'music', 'video', 'quote'];
var ENTRY_TYPES = {
  text: {
    title: function title() {
      return i18n.t('editor_text_type');
    },
    icon: 'icon--text-circle'
  },
  anonymous: {
    title: function title() {
      return i18n.t('editor_anonymous_type');
    },
    icon: 'icon--text-circle'
  },
  image: {
    title: function title() {
      return i18n.t('editor_image_type');
    },
    icon: 'icon--image-circle'
  },
  instagram: {
    title: function title() {
      return i18n.t('editor_instagram_type');
    },
    icon: 'icon--instagram-circle'
  },
  music: {
    title: function title() {
      return i18n.t('editor_music_type');
    },
    icon: 'icon--music-circle'
  },
  video: {
    title: function title() {
      return i18n.t('editor_video_type');
    },
    icon: 'icon--video-circle'
  },
  quote: {
    title: function title() {
      return i18n.t('editor_quote_type');
    },
    icon: 'icon--quote-circle'
  }
};

var EditorTypeSwitcher = React.createClass({
  displayName: 'EditorTypeSwitcher',

  propTypes: {
    entryType: React.PropTypes.string.isRequired,
    canChangeType: React.PropTypes.bool.isRequired,
    loading: React.PropTypes.bool.isRequired,
    onChangeType: React.PropTypes.func.isRequired
  },

  render: function render() {
    var switcherClasses = (0, _classnames2['default'])('nav-types', {
      'state--loading': this.props.loading
    });

    return React.createElement(
      'nav',
      { className: switcherClasses },
      this.renderListItems()
    );
  },

  renderListItems: function renderListItems() {
    var _this = this;

    var listItems = undefined;

    if (this.props.canChangeType) {
      listItems = AVAILABLE_TYPES.map(function (type) {
        return React.createElement(_TypeSwitcherItem2['default'], {
          title: ENTRY_TYPES[type].title(),
          icon: ENTRY_TYPES[type].icon,
          active: _this.props.entryType === type,
          onClick: _this.changeType.bind(null, type),
          key: type });
      });
    } else {
      listItems = React.createElement(_TypeSwitcherItem2['default'], {
        title: ENTRY_TYPES[this.props.entryType].title(),
        icon: ENTRY_TYPES[this.props.entryType].icon,
        active: true });
    }

    return listItems;
  },

  changeType: function changeType(type) {
    if (this.props.loading) {
      return;
    }
    this.props.onChangeType(type);
  }
});

exports['default'] = EditorTypeSwitcher;
module.exports = exports['default'];

},{"./TypeSwitcherItem":85,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],85:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var EditorTypeSwitcherItem = React.createClass({
  displayName: 'EditorTypeSwitcherItem',

  propTypes: {
    title: React.PropTypes.string.isRequired,
    icon: React.PropTypes.string.isRequired,
    active: React.PropTypes.bool.isRequired,
    onClick: React.PropTypes.func
  },

  componentDidMount: function componentDidMount() {
    $(this.getDOMNode()).tooltip();
  },

  componentWillUnmount: function componentWillUnmount() {
    $(this.getDOMNode()).tooltip('destroy');
  },

  render: function render() {
    var itemClasses = (0, _classnames2['default'])('button', 'button--circle', {
      'state--disable': this.props.loading,
      'state--active': this.props.active
    });

    return React.createElement(
      'button',
      {
        title: this.props.title,
        className: itemClasses,
        onClick: this.handleClick },
      React.createElement('i', { className: 'icon ' + this.props.icon })
    );
  },

  handleClick: function handleClick() {
    if (this.props.active) {
      return;
    }
    if (this.props.onClick && typeof this.props.onClick === 'function') {
      this.props.onClick();
    }
  }
});

exports['default'] = EditorTypeSwitcherItem;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"classnames":647}],86:[function(require,module,exports){
var EditorPreviewButton, PropTypes;

PropTypes = React.PropTypes;

EditorPreviewButton = React.createClass({
  displayName: 'EditorPreviewButton',
  propTypes: {
    onClick: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("button", {
      "className": "button button--grey",
      "onClick": this.handleClick
    }, React.createElement("span", {
      "className": "button__text"
    }, i18n.t('editor_preview_button')));
  },
  handleClick: function() {
    return this.props.onClick();
  }
});

module.exports = EditorPreviewButton;


},{}],87:[function(require,module,exports){
var EditorPrivacyButton, PropTypes, classnames;

classnames = require('classnames');

PropTypes = React.PropTypes;

EditorPrivacyButton = React.createClass({
  displayName: 'EditorPrivacyButton',
  propTypes: {
    live: PropTypes.bool.isRequired,
    "private": PropTypes.bool.isRequired,
    onClick: PropTypes.func.isRequired
  },
  componentDidMount: function() {
    this.$button = $(this.getDOMNode());
    return this.setTooltip();
  },
  componentDidUpdate: function() {
    var ref;
    if ((ref = this.$button) != null) {
      ref.tooltip('destroy');
    }
    return this.setTooltip();
  },
  componentWillUnmount: function() {
    var ref;
    return (ref = this.$button) != null ? ref.tooltip('destroy') : void 0;
  },
  setTooltip: function() {
    var ref;
    return (ref = this.$button) != null ? ref.tooltip({
      placement: 'bottom',
      title: this.getTitle()
    }) : void 0;
  },
  render: function() {
    var iconClasses;
    iconClasses = classnames('icon', {
      'icon--unlock': !this.props["private"],
      'icon--lock': this.props["private"]
    });
    return React.createElement("button", {
      "title": this.getTitle(),
      "className": "button button--outline-grey post-settings-button",
      "onClick": this.handleClick
    }, React.createElement("span", {
      "className": iconClasses
    }));
  },
  getTitle: function() {
    var title;
    title = this.props["private"] ? i18n.t('editor_private_entry') : i18n.t('editor_public_entry');
    if (this.props.live) {
      title = i18n.t('editor_public_with_voting_entry');
    }
    return title;
  },
  handleClick: function() {
    var ref;
    if ((ref = this.$button) != null) {
      ref.tooltip('hide');
    }
    return this.props.onClick();
  }
});

module.exports = EditorPrivacyButton;


},{"classnames":647}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var EditorSaveButton = React.createClass({
  displayName: "EditorSaveButton",

  propTypes: {
    tlog: React.PropTypes.object,
    "private": React.PropTypes.bool.isRequired,
    entryForCurrentUser: React.PropTypes.bool.isRequired,
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "button button--green", onClick: this.props.onClick },
      React.createElement(
        "span",
        { className: "button__text" },
        this.getTitle()
      )
    );
  },

  getTitle: function getTitle() {
    if (this.props.entryForCurrentUser) {
      return this.props["private"] ? i18n.t('editor_save_button') : i18n.t('editor_publish_button');
    } else {
      return i18n.t('editor_publish_to_tlog_button', { tlogTag: this.props.tlog.tag });
    }
  }
});

exports["default"] = EditorSaveButton;
module.exports = exports["default"];

},{}],89:[function(require,module,exports){
var EditorVoteButton, PropTypes, classnames;

classnames = require('classnames');

PropTypes = React.PropTypes;

EditorVoteButton = React.createClass({
  displayName: 'EditorVoteButton',
  propTypes: {
    enabled: PropTypes.bool.isRequired,
    onClick: PropTypes.func.isRequired
  },
  componentDidMount: function() {
    var $button;
    $button = $(this.getDOMNode());
    return $button.tooltip({
      placement: 'bottom'
    });
  },
  componentDidUpdate: function(prevProps) {
    var $button;
    if (prevProps.enabled !== this.props.enabled) {
      $button = $(this.getDOMNode());
      return $button.tooltip('hide').tooltip('show');
    }
  },
  componentWillUnmount: function() {
    var $button;
    $button = $(this.getDOMNode());
    return $button.tooltip('destroy');
  },
  render: function() {
    var iconClasses;
    iconClasses = classnames('icon', 'post-settings-voting', {
      'post-settings-voted': this.props.enabled
    });
    return React.createElement("button", {
      "data-original-title": this.getTitle(),
      "className": "button button--outline-grey post-settings-button",
      "onClick": this.handleClick
    }, React.createElement("span", {
      "className": iconClasses
    }));
  },
  getTitle: function() {
    if (this.props.enabled) {
      return i18n.t('editor_disable_voting');
    } else {
      return i18n.t('editor_enable_voting');
    }
  },
  handleClick: function() {
    return this.props.onClick();
  }
});

module.exports = EditorVoteButton;


},{"classnames":647}],90:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _mediumEditor = require('medium-editor');

var _mediumEditor2 = _interopRequireDefault(_mediumEditor);

var _sharedHelpersString = require('../../../../../shared/helpers/string');

var _sharedHelpersString2 = _interopRequireDefault(_sharedHelpersString);

//TODO: Maybe will be better if we will get this data from EditorStore?
var FIELD_MODES = ['inline', 'partial', 'rich'];
var FIELD_MODE_OPTIONS = {
  inline: {
    disableReturn: false,
    disableDoubleReturn: true,
    paste: {
      cleanPastedHTML: true
    },
    toolbar: false
  },
  partial: {
    disableReturn: false,
    disableDoubleReturn: true,
    paste: {
      cleanPastedHTML: true
    },
    toolbar: false
  },
  rich: {
    disableToolbar: false,
    disableReturn: false,
    disableDoubleReturn: false,
    targetBlank: true,
    paste: {
      cleanPastedHTML: true
    },
    toolbar: {
      buttons: ['anchor', 'italic', 'quote', 'orderedlist', 'unorderedlist']
    }
  }
};

var EditorTextField = _react2['default'].createClass({
  displayName: 'EditorTextField',

  propTypes: {
    mode: _react.PropTypes.string,
    text: _react.PropTypes.string,
    placeholder: _react.PropTypes.string.isRequired,
    className: _react.PropTypes.string,
    onChange: _react.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      mode: 'inline'
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    var fieldContent = (0, _react.findDOMNode)(this.refs.fieldContent);
    return fieldContent.innerHTML !== nextProps.text;
  },

  componentDidMount: function componentDidMount() {
    var fieldContent = (0, _react.findDOMNode)(this.refs.fieldContent);
    var modeOptions = FIELD_MODE_OPTIONS[this.props.mode];
    var options = _extends({}, modeOptions, {
      placeholder: _extends({}, modeOptions.placeholder, {
        text: this.props.placeholder.replace('<br>', '\r\n')
      })
    });

    this.mediumEditor = new _mediumEditor2['default'](fieldContent, options);
    this.mediumEditor.subscribe('editableInput', this.handleInput);
  },

  componentWillUnmount: function componentWillUnmount() {
    this.mediumEditor.unsubscribe('editableInput', this.handleInput);
    this.mediumEditor.destroy();
    this.mediumEditor = null;
  },

  render: function render() {
    var fieldClasses = (0, _classnames2['default'])('tasty-editor', this.props.className);

    return _react2['default'].createElement(
      'div',
      { className: fieldClasses },
      _react2['default'].createElement('div', { ref: 'fieldContent',
        className: 'tasty-editor-content',
        dangerouslySetInnerHTML: { __html: this.props.text || '' } })
    );
  },

  handleInput: function handleInput(e) {
    this.props.onChange(e.target.innerHTML);
  }
});

exports['default'] = EditorTextField;
module.exports = exports['default'];

},{"../../../../../shared/helpers/string":530,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"medium-editor":"medium-editor","react":"react"}],91:[function(require,module,exports){
var EditorActionCreators, EditorMediaBox, EditorMediaBoxProgress, EditorStore, EditorTextField, EditorTypeImage, EditorTypeImageLoaded, EditorTypeImageLoadingUrl, EditorTypeImageUrlInsert, EditorTypeImageWelcome, INSERT_STATE, LOADED_STATE, LOADING_URL_STATE, MAX_ATTACHMENTS, PropTypes, WELCOME_STATE, _, classnames;

_ = require('lodash');

classnames = require('classnames');

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

EditorTextField = require('../fields/Text');

EditorMediaBox = require('../MediaBox/MediaBox');

EditorMediaBoxProgress = require('../MediaBox/MediaBoxProgress');

EditorTypeImageWelcome = require('./Image/Welcome');

EditorTypeImageUrlInsert = require('./Image/UrlInsert');

EditorTypeImageLoaded = require('./Image/Loaded');

EditorTypeImageLoadingUrl = require('./Image/LoadingUrl');

PropTypes = React.PropTypes;

MAX_ATTACHMENTS = 8;

WELCOME_STATE = 'welcome';

INSERT_STATE = 'insert';

LOADING_URL_STATE = 'loading';

LOADED_STATE = 'loaded';

EditorTypeImage = React.createClass({
  displayName: 'EditorTypeImage',
  propTypes: {
    entryType: PropTypes.string.isRequired,
    loading: React.PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return _.extend({}, this.getStateFromStore(), {
      currentState: this.getInitialCurrentState(),
      dragging: false,
      uploadingProgress: null
    });
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    var editorClasses;
    editorClasses = classnames('post', 'post--image', 'post--edit', {
      'state--insert': this.isInsertState()
    });
    return React.createElement("article", {
      "className": editorClasses
    }, React.createElement("div", {
      "className": "post__content"
    }, React.createElement(EditorMediaBox, {
      "entryType": this.props.entryType,
      "state": this.getMediaBoxState()
    }, this.renderEditorScreen(), this.renderProgress()), React.createElement(EditorTextField, {
      "mode": "rich",
      "text": this.state.title,
      "placeholder": i18n.t('editor_description_placeholder'),
      "className": "post__content",
      "onChange": this.handleChangeTitle
    })));
  },
  renderEditorScreen: function() {
    switch (this.state.currentState) {
      case WELCOME_STATE:
        return React.createElement(EditorTypeImageWelcome, {
          "onClickInsertState": this.activateInsertState,
          "onSelectFiles": this.handleSelectFiles,
          "onDragOver": this.draggingOn,
          "onDragLeave": this.draggingOff,
          "onDrop": this.draggingOff
        });
      case INSERT_STATE:
        return React.createElement(EditorTypeImageUrlInsert, {
          "onInsertImageUrl": this.handleChangeImageUrl,
          "onCancel": this.activateWelcomeState
        });
      case LOADED_STATE:
        return React.createElement(EditorTypeImageLoaded, {
          "imageUrl": this.state.imageUrl,
          "imageAttachments": this.state.imageAttachments,
          "loading": this.props.loading,
          "onDelete": this.handleDeleteLoadedImages
        });
      case LOADING_URL_STATE:
        return React.createElement(EditorTypeImageLoadingUrl, {
          "imageUrl": this.state.imageUrl
        });
      default:
        return null;
    }
  },
  renderProgress: function() {
    if (this.state.uploadingProgress != null) {
      return React.createElement(EditorMediaBoxProgress, {
        "progress": this.state.uploadingProgress
      });
    }
  },
  isWelcomeState: function() {
    return this.state.currentState === WELCOME_STATE;
  },
  isInsertState: function() {
    return this.state.currentState === INSERT_STATE;
  },
  isLoadingUrlState: function() {
    return this.state.currentState === LOADING_URL_STATE;
  },
  activateInsertState: function() {
    return this.setState({
      currentState: INSERT_STATE
    });
  },
  activateLoadingUrlState: function() {
    return this.setState({
      currentState: LOADING_URL_STATE
    });
  },
  activateLoadedState: function() {
    return this.setState({
      currentState: LOADED_STATE
    });
  },
  activateWelcomeState: function() {
    return this.setState({
      currentState: WELCOME_STATE
    });
  },
  draggingOn: function() {
    return this.setState({
      dragging: true
    });
  },
  draggingOff: function() {
    return this.setState({
      dragging: false
    });
  },
  getMediaBoxState: function() {
    switch (false) {
      case !this.isWelcomeState():
        return null;
      case !this.state.dragging:
        return 'drag-hover';
      case !this.isInsertState():
        return 'insert';
      case !this.isLoadingUrlState():
        return 'loading';
      case !(this.state.imageAttachments.length || this.state.imageUrl):
        return 'loaded';
      default:
        return null;
    }
  },
  getInitialCurrentState: function() {
    var ref;
    if (EditorStore.getEntryValue('imageUrl') || ((ref = EditorStore.getEntryValue('imageAttachments')) != null ? ref.length : void 0)) {
      return LOADED_STATE;
    } else {
      return WELCOME_STATE;
    }
  },
  handleDeleteLoadedImages: function() {
    EditorActionCreators.deleteImageAttachments();
    EditorActionCreators.deleteImageUrl();
    return this.activateWelcomeState();
  },
  handleChangeImageUrl: function(imageUrl) {
    var image;
    image = new Image();
    this.activateLoadingUrlState();
    this.setState({
      imageUrl: imageUrl
    });
    image.onload = (function(_this) {
      return function() {
        _this.activateLoadedState();
        return EditorActionCreators.changeImageUrl(imageUrl);
      };
    })(this);
    image.onerror = (function(_this) {
      return function() {
        NoticeService.notifyError(i18n.t('editor_image_doesnt_exist', {
          imageUrl: imageUrl
        }));
        return _this.activateWelcomeState();
      };
    })(this);
    return image.src = imageUrl;
  },
  handleSelectFiles: function(files) {
    var imageFiles;
    imageFiles = _.filter(files, function(file) {
      return file.type.match(/(\.|\/)(gif|jpe?g|png)$/i);
    });
    if (!imageFiles.length) {
      return NoticeService.notifyError(i18n.t('editor_files_without_images'));
    }
    if (imageFiles.length > MAX_ATTACHMENTS) {
      imageFiles = imageFiles.slice(0, MAX_ATTACHMENTS);
      NoticeService.notifyError(i18n.t('editor_files_limit_reached', {
        count: MAX_ATTACHMENTS
      }));
    }
    EditorActionCreators.createImageAttachments(imageFiles).progress((function(_this) {
      return function(soFar) {
        if (_this.state.imageAttachments.length) {
          return _this.setState({
            uploadingProgress: soFar * 100
          });
        } else {
          return _this.setState({
            uploadingProgress: 0
          });
        }
      };
    })(this)).always((function(_this) {
      return function() {
        if (_this.isMounted()) {
          if (_this.state.imageAttachments.length) {
            _this.activateLoadedState();
          } else {
            _this.activateWelcomeState();
          }
          return _.delay((function() {
            return _this.setState({
              uploadingProgress: null
            });
          }), 500);
        }
      };
    })(this));
    return this.activateLoadedState();
  },
  handleChangeTitle: function(title) {
    return EditorActionCreators.changeTitle(title);
  },
  getStateFromStore: function() {
    return {
      title: EditorStore.getEntryValue('title'),
      imageUrl: EditorStore.getEntryValue('imageUrl'),
      imageAttachments: EditorStore.getEntryValue('imageAttachments') || []
    };
  }
});

module.exports = EditorTypeImage;


},{"../../../actions/editor":16,"../../../stores/EditorStore":511,"../MediaBox/MediaBox":80,"../MediaBox/MediaBoxProgress":82,"../fields/Text":90,"./Image/Loaded":92,"./Image/LoadingUrl":93,"./Image/UrlInsert":94,"./Image/Welcome":95,"classnames":647,"lodash":"lodash"}],92:[function(require,module,exports){
var EditorMediaBoxActions, EditorTypeImageLoaded, PropTypes, _;

_ = require('lodash');

EditorMediaBoxActions = require('../../MediaBox/MediaBoxActions');

PropTypes = React.PropTypes;

EditorTypeImageLoaded = React.createClass({
  displayName: 'EditorTypeImageLoaded',
  propTypes: {
    imageUrl: PropTypes.string,
    imageAttachments: PropTypes.array.isRequired,
    loading: React.PropTypes.bool.isRequired,
    onDelete: PropTypes.func.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.imageAttachments.length !== nextProps.imageAttachments.length || this.props.imageUrl !== nextProps.imageUrl) {
      return true;
    } else {
      return false;
    }
  },
  render: function() {
    return React.createElement("div", {
      "className": "media-box__display"
    }, this.renderImage(), this.renderActions());
  },
  renderImage: function() {
    switch (false) {
      case !this.props.imageAttachments.length:
        return React.createElement(ImageAttachmentsCollage, {
          "imageAttachments": this.props.imageAttachments
        });
      case !this.props.imageUrl:
        return React.createElement("img", {
          "src": this.props.imageUrl
        });
      default:
        return null;
    }
  },
  renderActions: function() {
    if (!this.props.loading) {
      return React.createElement(EditorMediaBoxActions, {
        "onDelete": this.props.onDelete
      });
    }
  }
});

module.exports = EditorTypeImageLoaded;


},{"../../MediaBox/MediaBoxActions":81,"lodash":"lodash"}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var EditorTypeImageLoadingUrl = React.createClass({
  displayName: "EditorTypeImageLoadingUrl",

  propTypes: {
    imageUrl: React.PropTypes.string.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      imageUrl: 'https://drscdn.500px.org/photo/103544339/m%3D1170/c1aa9785dac814298957160c6255821f'
    };
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "media-box__info" },
      React.createElement(
        "div",
        { className: "media-box__text" },
        React.createElement(
          "span",
          null,
          this.props.imageUrl
        ),
        React.createElement("br", null),
        React.createElement(
          "span",
          null,
          i18n.t('editor_image_mediabox_loading')
        )
      )
    );
  }
});

exports["default"] = EditorTypeImageLoadingUrl;
module.exports = exports["default"];

},{}],94:[function(require,module,exports){
var EditorMediaBoxActions, EditorTypeImageUrlInsert, PropTypes;

EditorMediaBoxActions = require('../../MediaBox/MediaBoxActions');

PropTypes = React.PropTypes;

EditorTypeImageUrlInsert = React.createClass({
  displayName: 'EditorTypeImageUrlInsert',
  propTypes: {
    onInsertImageUrl: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("label", {
      "htmlFor": "media-box-image-url",
      "className": "media-box__form"
    }, React.createElement("input", {
      "type": "url",
      "autoFocus": true,
      "id": "media-box-image-url",
      "className": "media-box__form-input",
      "onPaste": this.handlePaste,
      "onBlur": this.handleBlur
    }), React.createElement(EditorMediaBoxActions, {
      "onDelete": this.props.onCancel
    }));
  },
  handlePaste: function(e) {
    return this.props.onInsertImageUrl(e.clipboardData.getData('text'));
  },
  handleBlur: function() {
    return this.props.onCancel();
  }
});

module.exports = EditorTypeImageUrlInsert;


},{"../../MediaBox/MediaBoxActions":81}],95:[function(require,module,exports){
var DropZone, EditorTypeImageWelcome, PropTypes;

DropZone = require('../../../common/DropZone/DropZone');

PropTypes = React.PropTypes;

EditorTypeImageWelcome = React.createClass({
  displayName: 'EditorTypeImageWelcome',
  propTypes: {
    onClickInsertState: PropTypes.func.isRequired,
    onSelectFiles: PropTypes.func.isRequired,
    onDragOver: PropTypes.func.isRequired,
    onDragLeave: PropTypes.func.isRequired,
    onDrop: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement(DropZone, {
      "global": true,
      "onDragOver": this.props.onDragOver,
      "onDragLeave": this.props.onDragLeave,
      "onDrop": this.handleDrop
    }, React.createElement("div", {
      "className": "media-box__info"
    }, React.createElement("div", {
      "className": "media-box__text"
    }, React.createElement("span", null, i18n.t('editor_welcome_move_or'), " "), React.createElement("span", {
      "className": "form-upload form-upload--image"
    }, React.createElement("span", {
      "className": "form-upload__text"
    }, i18n.t('editor_welcome_choose')), React.createElement("input", {
      "type": "file",
      "id": "image",
      "className": "form-upload__input",
      "accept": "image/*",
      "multiple": true,
      "onClick": this.handleClick,
      "onChange": this.handleChange
    })), React.createElement("span", null, " ", i18n.t('editor_welcome_picture_or')), React.createElement("br", null), React.createElement("a", {
      "title": i18n.t('editor_welcome_insert'),
      "onClick": this.handleClickInsert
    }, i18n.t('editor_welcome_insert')), React.createElement("span", null, " ", i18n.t('editor_welcome_link_to_it')))));
  },
  handleClick: function(e) {
    return e.target.value = null;
  },
  handleChange: function(e) {
    var files;
    files = e.target.files;
    if (files.length) {
      return this.props.onSelectFiles(files);
    }
  },
  handleDrop: function(files) {
    this.props.onDrop();
    if (files.length) {
      return this.props.onSelectFiles(files);
    }
  },
  handleClickInsert: function(e) {
    e.preventDefault();
    return this.props.onClickInsertState();
  }
});

module.exports = EditorTypeImageWelcome;


},{"../../../common/DropZone/DropZone":254}],96:[function(require,module,exports){
var EditorActionCreators, EditorEmbed, EditorStore, EditorTextField, EditorTypeInstagram, EditorTypeInstagramWelcome, PropTypes, StringHelpers;

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

StringHelpers = require('../../../../../shared/helpers/string');

EditorTextField = require('../fields/Text');

EditorEmbed = require('../Embed/Embed');

EditorTypeInstagramWelcome = require('./Instagram/Welcome');

PropTypes = React.PropTypes;

EditorTypeInstagram = React.createClass({
  displayName: 'EditorTypeInstagram',
  propTypes: {
    loading: React.PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    return React.createElement("article", {
      "className": "post post--video post--edit"
    }, React.createElement("div", {
      "className": "post__content"
    }, React.createElement(EditorEmbed, {
      "embedUrl": this.state.embedUrl,
      "embedHtml": this.state.embedHtml,
      "loading": this.props.loading,
      "onCreate": this.handleCreateEmbed,
      "onChaneEmbedUrl": this.handleChangeEmbedUrl,
      "onDelete": this.handleDeleteEmbed
    }, React.createElement(EditorTypeInstagramWelcome, null)), React.createElement(EditorTextField, {
      "mode": "partial",
      "text": this.state.title,
      "placeholder": i18n.t('editor_description_placeholder'),
      "onChange": this.handleChangeTitle
    })));
  },
  handleCreateEmbed: function(arg) {
    var embedHtml, title;
    embedHtml = arg.embedHtml, title = arg.title;
    EditorActionCreators.changeEmbedHtml(embedHtml);
    if (!StringHelpers.removeTags(this.state.title)) {
      return EditorActionCreators.changeTitle(title);
    }
  },
  handleDeleteEmbed: function() {
    EditorActionCreators.deleteEmbedUrl();
    return EditorActionCreators.deleteEmbedHtml();
  },
  handleChangeTitle: function(title) {
    return EditorActionCreators.changeTitle(title);
  },
  handleChangeEmbedUrl: function(embedUrl) {
    return EditorActionCreators.changeEmbedUrl(embedUrl);
  },
  getStateFromStore: function() {
    return {
      title: EditorStore.getEntryValue('title'),
      embedUrl: EditorStore.getEntryValue('embedUrl'),
      embedHtml: EditorStore.getEntryValue('embedHtml')
    };
  }
});

module.exports = EditorTypeInstagram;


},{"../../../../../shared/helpers/string":530,"../../../actions/editor":16,"../../../stores/EditorStore":511,"../Embed/Embed":75,"../fields/Text":90,"./Instagram/Welcome":97}],97:[function(require,module,exports){
var EditorTypeInstagramWelcome, MediaBox, PropTypes;

MediaBox = require('../../MediaBox/MediaBox');

PropTypes = React.PropTypes;

EditorTypeInstagramWelcome = React.createClass({
  displayName: 'EditorTypeInstagramWelcome',
  propTypes: {
    onClickInsertState: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement(MediaBox, {
      "entryType": "video"
    }, React.createElement("div", {
      "className": "media-box__info"
    }, React.createElement("div", {
      "className": "media-box__text"
    }, React.createElement("a", {
      "title": i18n.t('editor_welcome_instagram_insert'),
      "onClick": this.handleClickInsert
    }, i18n.t('editor_welcome_instagram_insert')), React.createElement("span", null, " ", i18n.t('editor_welcome_instagram_link')))));
  },
  handleClickInsert: function(e) {
    e.preventDefault();
    return this.props.onClickInsertState();
  }
});

module.exports = EditorTypeInstagramWelcome;


},{"../../MediaBox/MediaBox":80}],98:[function(require,module,exports){
var EditorActionCreators, EditorEmbed, EditorStore, EditorTextField, EditorTypeMusic, EditorTypeMusicWelcome, PropTypes, StringHelpers;

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

StringHelpers = require('../../../../../shared/helpers/string');

EditorTextField = require('../fields/Text');

EditorEmbed = require('../Embed/Embed');

EditorTypeMusicWelcome = require('./Music/Welcome');

PropTypes = React.PropTypes;

EditorTypeMusic = React.createClass({
  displayName: 'EditorTypeMusic',
  propTypes: {
    loading: React.PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    return React.createElement("article", {
      "className": "post post--video post--edit"
    }, React.createElement("div", {
      "className": "post__content"
    }, React.createElement(EditorEmbed, {
      "embedUrl": this.state.embedUrl,
      "embedHtml": this.state.embedHtml,
      "loading": this.props.loading,
      "onCreate": this.handleCreateEmbed,
      "onChaneEmbedUrl": this.handleChangeEmbedUrl,
      "onDelete": this.handleDeleteEmbed
    }, React.createElement(EditorTypeMusicWelcome, null)), React.createElement(EditorTextField, {
      "mode": "partial",
      "text": this.state.title,
      "placeholder": i18n.t('editor_description_placeholder'),
      "onChange": this.handleChangeTitle
    })));
  },
  handleCreateEmbed: function(arg) {
    var embedHtml, title;
    embedHtml = arg.embedHtml, title = arg.title;
    EditorActionCreators.changeEmbedHtml(embedHtml);
    if (!StringHelpers.removeTags(this.state.title)) {
      return EditorActionCreators.changeTitle(title);
    }
  },
  handleDeleteEmbed: function() {
    EditorActionCreators.deleteEmbedUrl();
    return EditorActionCreators.deleteEmbedHtml();
  },
  handleChangeTitle: function(title) {
    return EditorActionCreators.changeTitle(title);
  },
  handleChangeEmbedUrl: function(embedUrl) {
    return EditorActionCreators.changeEmbedUrl(embedUrl);
  },
  getStateFromStore: function() {
    return {
      title: EditorStore.getEntryValue('title'),
      embedUrl: EditorStore.getEntryValue('embedUrl'),
      embedHtml: EditorStore.getEntryValue('embedHtml')
    };
  }
});

module.exports = EditorTypeMusic;


},{"../../../../../shared/helpers/string":530,"../../../actions/editor":16,"../../../stores/EditorStore":511,"../Embed/Embed":75,"../fields/Text":90,"./Music/Welcome":99}],99:[function(require,module,exports){
var EditorTypeMusicWelcome, MediaBox, PropTypes;

MediaBox = require('../../MediaBox/MediaBox');

PropTypes = React.PropTypes;

EditorTypeMusicWelcome = React.createClass({
  displayName: 'EditorTypeMusicWelcome',
  propTypes: {
    onClickInsertState: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement(MediaBox, {
      "entryType": "video"
    }, React.createElement("div", {
      "className": "media-box__info"
    }, React.createElement("div", {
      "className": "media-box__text"
    }, React.createElement("a", {
      "title": i18n.t('editor_welcome_music_insert'),
      "onClick": this.handleClickInsert
    }, i18n.t('editor_welcome_music_insert')), React.createElement("span", null, " ", i18n.t('editor_welcome_music_supported_services')))));
  },
  handleClickInsert: function(e) {
    e.preventDefault();
    return this.props.onClickInsertState();
  }
});

module.exports = EditorTypeMusicWelcome;


},{"../../MediaBox/MediaBox":80}],100:[function(require,module,exports){
var EditorActionCreators, EditorStore, EditorTextField, EditorTypeQuote, PropTypes;

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

EditorTextField = require('../fields/Text');

PropTypes = React.PropTypes;

EditorTypeQuote = React.createClass({
  displayName: 'EditorTypeQuote',
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    return React.createElement("article", {
      "className": "post post--quote post--edit"
    }, React.createElement("div", {
      "className": "post__content"
    }, React.createElement("blockquote", {
      "className": "blockquote"
    }, React.createElement(EditorTextField, {
      "text": this.state.text,
      "placeholder": i18n.t('editor_quote_text_placeholder'),
      "onChange": this.handleTextChange
    }), React.createElement("div", {
      "className": "blockquote__caption"
    }, React.createElement("span", {
      "className": "blockquote__dash"
    }, "—"), React.createElement(EditorTextField, {
      "text": this.state.source,
      "placeholder": i18n.t('editor_quote_source_placeholder'),
      "onChange": this.handleSourceChange
    })))));
  },
  handleTextChange: function(text) {
    return EditorActionCreators.changeText(text);
  },
  handleSourceChange: function(source) {
    return EditorActionCreators.changeSource(source);
  },
  getStateFromStore: function() {
    return {
      text: EditorStore.getEntryValue('text'),
      source: EditorStore.getEntryValue('source')
    };
  }
});

module.exports = EditorTypeQuote;


},{"../../../actions/editor":16,"../../../stores/EditorStore":511,"../fields/Text":90}],101:[function(require,module,exports){
var EditorActionCreators, EditorStore, EditorTextField, EditorTypeText, PropTypes;

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

EditorTextField = require('../fields/Text');

PropTypes = React.PropTypes;

EditorTypeText = React.createClass({
  displayName: 'EditorTypeText',
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    return React.createElement("article", {
      "className": "post post--text post--edit"
    }, React.createElement("header", {
      "className": "post__header"
    }, React.createElement(EditorTextField, {
      "text": this.state.title,
      "placeholder": i18n.t('editor_title_placeholder'),
      "className": "post__title",
      "onChange": this.handleTitleChange
    })), React.createElement(EditorTextField, {
      "mode": "rich",
      "text": this.state.text,
      "placeholder": i18n.t('editor_text_placeholder'),
      "className": "post__content",
      "onChange": this.handleTextChange
    }));
  },
  handleTitleChange: function(title) {
    return EditorActionCreators.changeTitle(title);
  },
  handleTextChange: function(text) {
    return EditorActionCreators.changeText(text);
  },
  getStateFromStore: function() {
    return {
      title: EditorStore.getEntryValue('title'),
      text: EditorStore.getEntryValue('text')
    };
  }
});

module.exports = EditorTypeText;


},{"../../../actions/editor":16,"../../../stores/EditorStore":511,"../fields/Text":90}],102:[function(require,module,exports){
var EditorActionCreators, EditorEmbed, EditorStore, EditorTextField, EditorTypeVideo, EditorTypeVideoWelcome, PropTypes, StringHelpers;

EditorStore = require('../../../stores/EditorStore');

EditorActionCreators = require('../../../actions/editor');

StringHelpers = require('../../../../../shared/helpers/string');

EditorTextField = require('../fields/Text');

EditorEmbed = require('../Embed/Embed');

EditorTypeVideoWelcome = require('./Video/Welcome');

PropTypes = React.PropTypes;

EditorTypeVideo = React.createClass({
  displayName: 'EditorTypeVideo',
  propTypes: {
    loading: React.PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillReceiveProps: function() {
    return this.setState(this.getStateFromStore());
  },
  render: function() {
    return React.createElement("article", {
      "className": "post post--video post--edit"
    }, React.createElement("div", {
      "className": "post__content"
    }, React.createElement(EditorEmbed, {
      "embedUrl": this.state.embedUrl,
      "embedHtml": this.state.embedHtml,
      "loading": this.props.loading,
      "onCreate": this.handleCreateEmbed,
      "onChaneEmbedUrl": this.handleChangeEmbedUrl,
      "onDelete": this.handleDeleteEmbed
    }, React.createElement(EditorTypeVideoWelcome, null)), React.createElement(EditorTextField, {
      "mode": "partial",
      "text": this.state.title,
      "placeholder": i18n.t('editor_description_placeholder'),
      "onChange": this.handleChangeTitle
    })));
  },
  handleCreateEmbed: function(arg) {
    var embedHtml, title;
    embedHtml = arg.embedHtml, title = arg.title;
    EditorActionCreators.changeEmbedHtml(embedHtml);
    if (!StringHelpers.removeTags(this.state.title)) {
      return EditorActionCreators.changeTitle(title);
    }
  },
  handleDeleteEmbed: function() {
    EditorActionCreators.deleteEmbedUrl();
    return EditorActionCreators.deleteEmbedHtml();
  },
  handleChangeTitle: function(title) {
    return EditorActionCreators.changeTitle(title);
  },
  handleChangeEmbedUrl: function(embedUrl) {
    return EditorActionCreators.changeEmbedUrl(embedUrl);
  },
  getStateFromStore: function() {
    return {
      title: EditorStore.getEntryValue('title'),
      embedUrl: EditorStore.getEntryValue('embedUrl'),
      embedHtml: EditorStore.getEntryValue('embedHtml')
    };
  }
});

module.exports = EditorTypeVideo;


},{"../../../../../shared/helpers/string":530,"../../../actions/editor":16,"../../../stores/EditorStore":511,"../Embed/Embed":75,"../fields/Text":90,"./Video/Welcome":103}],103:[function(require,module,exports){
var EditorTypeVideoWelcome, MediaBox, PropTypes;

MediaBox = require('../../MediaBox/MediaBox');

PropTypes = React.PropTypes;

EditorTypeVideoWelcome = React.createClass({
  displayName: 'EditorTypeVideoWelcome',
  propTypes: {
    onClickInsertState: PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement(MediaBox, {
      "entryType": "video"
    }, React.createElement("div", {
      "className": "media-box__info"
    }, React.createElement("div", {
      "className": "media-box__text"
    }, React.createElement("a", {
      "title": i18n.t('editor_welcome_video_insert'),
      "onClick": this.handleClickInsert
    }, i18n.t('editor_welcome_video_insert')), React.createElement("span", null, " ", i18n.t('editor_welcome_video_link')), React.createElement("br", null), React.createElement("span", null, " ", i18n.t('editor_welcome_video_supported_services')))));
  },
  handleClickInsert: function(e) {
    e.preventDefault();
    return this.props.onClickInsertState();
  }
});

module.exports = EditorTypeVideoWelcome;


},{"../../MediaBox/MediaBox":80}],104:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _actionsEntry = require('../../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var _EntryBrickContent = require('./EntryBrickContent');

var _EntryBrickContent2 = _interopRequireDefault(_EntryBrickContent);

var _EntryBrickFlowHeader = require('./EntryBrickFlowHeader');

var _EntryBrickFlowHeader2 = _interopRequireDefault(_EntryBrickFlowHeader);

var _EntryBrickPinHeader = require('./EntryBrickPinHeader');

var _EntryBrickPinHeader2 = _interopRequireDefault(_EntryBrickPinHeader);

var _constantsEntryConstants = require('../../../constants/EntryConstants');

var EntryBrick = _react2['default'].createClass({
  displayName: 'EntryBrick',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    host_tlog_id: _react.PropTypes.number,
    moderation: _react.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      visible: true,
      hasModeration: !!this.props.moderation
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return this.state.hasModeration != nextState.hasModeration || this.state.visible != nextState.visible;
  },

  renderFlowHeader: function renderFlowHeader() {
    var _props = this.props;
    var _props$entry = _props.entry;
    var author = _props$entry.author;
    var tlog = _props$entry.tlog;
    var host_tlog_id = _props.host_tlog_id;

    if (host_tlog_id == null && author && tlog && author.id !== tlog.id) {
      return _react2['default'].createElement(_EntryBrickFlowHeader2['default'], { flow: tlog });
    }
  },

  renderPinHeader: function renderPinHeader() {
    if (this.props.entry.fixed_state === _constantsEntryConstants.ENTRY_PINNED_STATE) {
      return _react2['default'].createElement(_EntryBrickPinHeader2['default'], null);
    }
  },

  render: function render() {
    var entry = this.props.entry;

    if (this.state.visible) {
      return _react2['default'].createElement(
        'article',
        { className: this.getBrickClasses(), 'data-id': entry.id },
        this.renderFlowHeader(),
        this.renderPinHeader(),
        _react2['default'].createElement(_EntryBrickContent2['default'], {
          entry: entry,
          hasModeration: this.state.hasModeration,
          host_tlog_id: this.props.host_tlog_id,
          onEntryAccept: this.acceptEntry,
          onEntryDecline: this.declineEntry
        })
      );
    } else {
      return null;
    }
  },

  getBrickClasses: function getBrickClasses() {
    var type = this.props.entry.type;

    var typeClass = _constantsEntryConstants.ENTRY_TYPES.indexOf(type) != -1 ? type : 'text';

    return 'brick brick--' + typeClass;
  },

  acceptEntry: function acceptEntry() {
    var _this = this;

    _actionsEntry2['default'].accept(this.props.moderation.accept_url).then(function () {
      var accept_action = _this.props.moderation.accept_action;

      if (_this.isMounted()) {
        switch (accept_action) {
          case 'delete':
            _this.setState({ visible: false, hasModeration: false });
            break;
          case 'nothing':
            _this.setState({ hasModeration: false });
            break;
        }
      }
    });
  },

  declineEntry: function declineEntry() {
    var _this2 = this;

    _actionsEntry2['default'].decline(this.props.moderation.decline_url).then(function () {
      var decline_action = _this2.props.moderation.decline_action;

      if (_this2.isMounted()) {
        switch (decline_action) {
          case 'delete':
            _this2.setState({ visible: false, hasModeration: false });
            break;
          case 'nothing':
            _this2.setState({ hasModeration: false });
            break;
        }
      }
    });
  }
});

exports['default'] = EntryBrick;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../actions/Entry":7,"../../../constants/EntryConstants":404,"./EntryBrickContent":107,"./EntryBrickFlowHeader":108,"./EntryBrickPinHeader":112,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],105:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var EntryBrickActions = React.createClass({
  displayName: "EntryBrickActions",

  propTypes: {
    hasModeration: React.PropTypes.bool.isRequired,
    onAccept: React.PropTypes.func.isRequired,
    onDecline: React.PropTypes.func.isRequired
  },

  render: function render() {
    if (this.props.hasModeration) {
      return React.createElement(
        "div",
        { className: "brick__actions" },
        React.createElement(
          "div",
          { className: "moderator-actions" },
          React.createElement(
            "div",
            { className: "moderator-action moderator-action--accept",
              onClick: this.props.onAccept },
            React.createElement("i", { className: "icon icon--tick" })
          ),
          React.createElement(
            "div",
            { className: "moderator-action moderator-action--reject",
              onClick: this.props.onDecline },
            React.createElement("i", { className: "icon icon--cross" })
          )
        )
      );
    } else {
      return null;
    }
  }
});

exports["default"] = EntryBrickActions;
module.exports = exports["default"];

},{}],106:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var EntryBrickCodeType = _react2['default'].createClass({
  displayName: 'EntryBrickCodeType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        this.renderBrickTitle(),
        _react2['default'].createElement(
          'div',
          { className: 'brick__text' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
            _react2['default'].createElement(
              'pre',
              null,
              _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: this.props.entry.text_truncated, withHTML: true })
            )
          )
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderBrickTitle: function renderBrickTitle() {
    if (this.props.entry.title) {
      return _react2['default'].createElement(
        'a',
        { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
        _react2['default'].createElement(
          'h2',
          { className: 'brick__title' },
          this.props.entry.title
        )
      );
    }
  }
});

exports['default'] = EntryBrickCodeType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],107:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactServicesError = require('../../../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _EntryBrickTextType = require('./EntryBrickTextType');

var _EntryBrickTextType2 = _interopRequireDefault(_EntryBrickTextType);

var _EntryBrickImageType = require('./EntryBrickImageType');

var _EntryBrickImageType2 = _interopRequireDefault(_EntryBrickImageType);

var _EntryBrickVideoType = require('./EntryBrickVideoType');

var _EntryBrickVideoType2 = _interopRequireDefault(_EntryBrickVideoType);

var _EntryBrickQuoteType = require('./EntryBrickQuoteType');

var _EntryBrickQuoteType2 = _interopRequireDefault(_EntryBrickQuoteType);

var _EntryBrickLinkType = require('./EntryBrickLinkType');

var _EntryBrickLinkType2 = _interopRequireDefault(_EntryBrickLinkType);

var _EntryBrickSongType = require('./EntryBrickSongType');

var _EntryBrickSongType2 = _interopRequireDefault(_EntryBrickSongType);

var _EntryBrickCodeType = require('./EntryBrickCodeType');

var _EntryBrickCodeType2 = _interopRequireDefault(_EntryBrickCodeType);

var _EntryBrickUnknownType = require('./EntryBrickUnknownType');

var _EntryBrickUnknownType2 = _interopRequireDefault(_EntryBrickUnknownType);

var _constantsEntryConstants = require('../../../constants/EntryConstants');

var EntryBrickContent = (function () {
  function EntryBrickContent() {
    _classCallCheck(this, EntryBrickContent);
  }

  _createClass(EntryBrickContent, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var id = _props$entry.id;
      var type = _props$entry.type;

      switch (type) {
        case _constantsEntryConstants.ENTRY_TYPE_TEXT:
        case _constantsEntryConstants.ENTRY_TYPE_ANONYMOUS:
        case _constantsEntryConstants.ENTRY_TYPE_CONVO:
          return _react2['default'].createElement(_EntryBrickTextType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_IMAGE:
          return _react2['default'].createElement(_EntryBrickImageType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_VIDEO:
          return _react2['default'].createElement(_EntryBrickVideoType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_QUOTE:
          return _react2['default'].createElement(_EntryBrickQuoteType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_LINK:
          return _react2['default'].createElement(_EntryBrickLinkType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_SONG:
          return _react2['default'].createElement(_EntryBrickSongType2['default'], this.props);
        case _constantsEntryConstants.ENTRY_TYPE_CODE:
          return _react2['default'].createElement(_EntryBrickCodeType2['default'], this.props);
        default:
          _sharedReactServicesError2['default'].notifyWarning('Неизвестный тип brick-поста', {
            componentName: this.constructor.displayName,
            method: 'render',
            entryID: id,
            entryType: type
          });

          return _react2['default'].createElement(_EntryBrickUnknownType2['default'], this.props);
      }
    }
  }]);

  return EntryBrickContent;
})();

EntryBrickContent.propTypes = {
  entry: _react.PropTypes.object.isRequired,
  hasModeration: _react.PropTypes.bool.isRequired,
  onEntryAccept: _react.PropTypes.func.isRequired,
  onEntryDecline: _react.PropTypes.func.isRequired
};

exports['default'] = EntryBrickContent;
module.exports = exports['default'];

},{"../../../../../shared/react/services/Error":552,"../../../constants/EntryConstants":404,"./EntryBrickCodeType":106,"./EntryBrickImageType":109,"./EntryBrickLinkType":110,"./EntryBrickQuoteType":113,"./EntryBrickSongType":114,"./EntryBrickTextType":115,"./EntryBrickUnknownType":116,"./EntryBrickVideoType":117,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],108:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _sharedReactComponentsCommonLazyLoadImage = require('../../../../../shared/react/components/common/LazyLoadImage');

var _sharedReactComponentsCommonLazyLoadImage2 = _interopRequireDefault(_sharedReactComponentsCommonLazyLoadImage);

var _constants = require('./constants');

var EntryBrickFlowHeader = (function () {
  function EntryBrickFlowHeader() {
    _classCallCheck(this, EntryBrickFlowHeader);
  }

  _createClass(EntryBrickFlowHeader, [{
    key: 'render',
    value: function render() {
      var flow = this.props.flow;

      var bgUrl = ThumborService.newImageUrl(flow.userpic.original_url, { width: _constants.brickWidth }, ['blur(5)']);
      var bgStyle = { backgroundImage: 'url(\'' + bgUrl + '\')' };
      var avatarData = {
        geometry: {
          width: _constants.flowAvatarSize,
          height: _constants.flowAvatarSize
        },
        url: flow.userpic.original_url
      };

      return _react2['default'].createElement(
        'div',
        { className: 'brick__flow-header-container', style: bgStyle },
        _react2['default'].createElement(
          'a',
          { href: flow.url },
          _react2['default'].createElement(
            'div',
            { className: 'brick__flow-header' },
            _react2['default'].createElement(
              'span',
              { className: 'brick__flow-header-avatar-container' },
              _react2['default'].createElement(
                'div',
                { className: 'brick__flow-header-avatar' },
                _react2['default'].createElement(_sharedReactComponentsCommonLazyLoadImage2['default'], { image: avatarData })
              )
            ),
            _react2['default'].createElement(
              'span',
              { className: 'brick__flow-header-data' },
              _react2['default'].createElement(
                'div',
                { className: 'brick__flow-header-name' },
                '#' + flow.name
              ),
              _react2['default'].createElement(
                'div',
                { className: 'brick__flow-header-info' },
                _react2['default'].createElement(
                  'div',
                  { className: 'brick__data-item' },
                  _react2['default'].createElement('i', { className: 'icon icon--friends' }),
                  _react2['default'].createElement(
                    'span',
                    null,
                    flow.followers_count || 0
                  )
                ),
                _react2['default'].createElement(
                  'div',
                  { className: 'brick__data-item' },
                  _react2['default'].createElement('i', { className: 'icon icon--text-circle' }),
                  _react2['default'].createElement(
                    'span',
                    null,
                    flow.public_tlog_entries_count || 0
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return EntryBrickFlowHeader;
})();

EntryBrickFlowHeader.propTypes = {
  flow: ProjectTypes.tlogData.isRequired
};

exports['default'] = EntryBrickFlowHeader;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/LazyLoadImage":535,"./constants":118,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],109:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactComponentsCommonLazyLoadImage = require('../../../../../shared/react/components/common/LazyLoadImage');

var _sharedReactComponentsCommonLazyLoadImage2 = _interopRequireDefault(_sharedReactComponentsCommonLazyLoadImage);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var _constants = require('./constants');

var EntryBrickImageType = _react2['default'].createClass({
  displayName: 'EntryBrickImageType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__media' },
        _react2['default'].createElement(
          'a',
          { href: this.props.entry.url, className: 'brick__link' },
          this.renderBrickImage()
        )
      ),
      this.renderBrickBody(),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline
      })
    );
  },

  renderBrickImage: function renderBrickImage() {
    if (this.props.entry.preview_image) {
      return _react2['default'].createElement(_sharedReactComponentsCommonLazyLoadImage2['default'], { image: this.props.entry.preview_image, maxWidth: _constants.brickWidth });
    } else {
      return _react2['default'].createElement(
        'span',
        null,
        i18n.t('entry.has_no_images')
      );
    }
  },

  renderBrickBody: function renderBrickBody() {
    if (this.props.entry.title_truncated) {
      return _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        _react2['default'].createElement(
          'div',
          { className: 'brick__text' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.url, title: this.props.entry.title_truncated, className: 'brick__link' },
            _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: this.props.entry.title_truncated, withHTML: true })
          )
        )
      );
    }
  }
});

exports['default'] = EntryBrickImageType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/LazyLoadImage":535,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"./constants":118,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],110:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var EntryBrickLinkType = _react2['default'].createClass({
  displayName: 'EntryBrickLinkType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        this.renderBrickTitle()
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderBrickTitle: function renderBrickTitle() {
    if (this.props.entry.title) {
      return _react2['default'].createElement(
        'a',
        { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
        _react2['default'].createElement(
          'h2',
          { className: 'brick__title' },
          this.props.entry.title
        )
      );
    }
  }
});

exports['default'] = EntryBrickLinkType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],111:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _sharedReactComponentsCommonAvatar = require('../../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var _helpersEntryMetabarHelpers = require('../../../helpers/EntryMetabarHelpers');

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var EntryBrickMetabar = _react2['default'].createClass({
  displayName: 'EntryBrickMetabar',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    host_tlog_id: _react.PropTypes.number
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      { className: 'meta-bar' },
      this.renderMetaVote(),
      this.renderMetaComments(),
      this.renderMetaTlog()
    );
  },

  renderMetaVote: function renderMetaVote() {
    var _props$entry = this.props.entry;
    var id = _props$entry.id;
    var rating = _props$entry.rating;

    if (rating.is_voteable) {
      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item--vote' },
        _react2['default'].createElement(
          'span',
          { className: 'meta-item__content' },
          _react2['default'].createElement(_commonVoting2['default'], { entryID: id, rating: rating })
        )
      );
    }
  },

  renderMetaComments: function renderMetaComments() {
    var _props$entry2 = this.props.entry;
    var commentsCount = _props$entry2.comments_count;
    var url = _props$entry2.url;

    if (commentsCount) {
      var title = i18n.t('comments_count', { count: commentsCount });

      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item--comments' },
        _react2['default'].createElement(
          'span',
          { className: 'meta-item__content' },
          _react2['default'].createElement(
            'a',
            { href: url + '#comments', title: title, className: 'meta-item__link' },
            title
          )
        )
      );
    }
  },

  renderMetaTlog: function renderMetaTlog() {
    var _props = this.props;
    var _props$entry3 = _props.entry;
    var author = _props$entry3.author;
    var tlog = _props$entry3.tlog;
    var host_tlog_id = _props.host_tlog_id;

    var authorMeta = (0, _helpersEntryMetabarHelpers.metabarAuthor)({ host_tlog_id: host_tlog_id, tlog: tlog, author: author });

    if (authorMeta) {
      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item--user' },
        _react2['default'].createElement(
          'span',
          { className: 'meta-item__content' },
          _react2['default'].createElement(
            'a',
            {
              className: 'meta-item__link',
              href: tlog.url,
              title: tlog.tag
            },
            _react2['default'].createElement(
              'span',
              { className: 'meta-item__ava' },
              _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: tlog.userpic, size: 20 })
            )
          ),
          _react2['default'].createElement('span', {
            className: 'meta-item__author',
            dangerouslySetInnerHTML: { __html: authorMeta }
          })
        )
      );
    }
  }
});

exports['default'] = EntryBrickMetabar;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/Avatar":532,"../../../helpers/EntryMetabarHelpers":432,"../../common/Voting":273,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],112:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryBrickPinHeader = (function () {
  function EntryBrickPinHeader() {
    _classCallCheck(this, EntryBrickPinHeader);
  }

  _createClass(EntryBrickPinHeader, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'brick__notice brick__notice--info' },
        i18n.t('entry.pinned_header')
      );
    }
  }]);

  return EntryBrickPinHeader;
})();

EntryBrickPinHeader.propTypes = {};

exports['default'] = EntryBrickPinHeader;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],113:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var EntryBrickQuoteType = _react2['default'].createClass({
  displayName: 'EntryBrickQuoteType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        _react2['default'].createElement(
          'a',
          { href: this.props.entry.url, className: 'brick__link' },
          _react2['default'].createElement(
            'blockquote',
            { className: 'blockquote' },
            _react2['default'].createElement(
              'span',
              { className: 'laquo' },
              '«'
            ),
            this.props.entry.text_truncated,
            _react2['default'].createElement(
              'span',
              { className: 'raquo' },
              '»'
            ),
            this.renderQuoteSource()
          )
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderQuoteSource: function renderQuoteSource() {
    if (this.props.entry.source_truncated) {
      return _react2['default'].createElement(
        'span',
        { className: 'blockquote__caption' },
        '—',
        _react2['default'].createElement(
          'span',
          { className: 'blockquote__source' },
          _react2['default'].createElement(
            'i',
            null,
            this.props.entry.source_truncated
          )
        )
      );
    }
  }
});

exports['default'] = EntryBrickQuoteType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],114:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var EntryBrickSongType = _react2['default'].createClass({
  displayName: 'EntryBrickSongType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        this.renderBrickTitle()
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderBrickTitle: function renderBrickTitle() {
    if (this.props.entry.title) {
      return _react2['default'].createElement(
        'a',
        { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
        _react2['default'].createElement(
          'h2',
          { className: 'brick__title' },
          this.props.entry.title
        )
      );
    }
  }
});

exports['default'] = EntryBrickSongType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],115:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var EntryBrickTextType = _react2['default'].createClass({
  displayName: 'EntryBrickTextType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    var _props = this.props;
    var entry = _props.entry;
    var hasModeration = _props.hasModeration;
    var host_tlog_id = _props.host_tlog_id;
    var onEntryAccept = _props.onEntryAccept;
    var onEntryDecline = _props.onEntryDecline;

    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        this.renderBrickTitle(),
        _react2['default'].createElement(
          'div',
          { className: 'brick__text' },
          _react2['default'].createElement(
            'a',
            { href: entry.url, title: entry.title, className: 'brick__link' },
            _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: entry.text_truncated, withHTML: true })
          )
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: entry,
          host_tlog_id: host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: hasModeration,
        onAccept: onEntryAccept,
        onDecline: onEntryDecline })
    );
  },

  renderBrickTitle: function renderBrickTitle() {
    if (this.props.entry.title) {
      return _react2['default'].createElement(
        'a',
        { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
        _react2['default'].createElement(
          'h2',
          { className: 'brick__title' },
          this.props.entry.title
        )
      );
    }
  }
});

exports['default'] = EntryBrickTextType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],116:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var EntryBrickUnknownType = _react2['default'].createClass({
  displayName: 'EntryBrickUnknownType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        this.renderBrickTitle(),
        _react2['default'].createElement(
          'div',
          { className: 'brick__text' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.url, title: this.props.entry.title, className: 'brick__link' },
            i18n.t('entry.unknown_type')
          )
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderBrickTitle: function renderBrickTitle() {
    if (this.props.entry.title) {
      return _react2['default'].createElement(
        'a',
        { href: this.props.entry.entry_url, title: this.props.entry.title, className: 'brick__link' },
        _react2['default'].createElement(
          'h2',
          { className: 'brick__title' },
          this.props.entry.title
        )
      );
    }
  }
});

exports['default'] = EntryBrickUnknownType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],117:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactComponentsCommonLazyLoadImage = require('../../../../../shared/react/components/common/LazyLoadImage');

var _sharedReactComponentsCommonLazyLoadImage2 = _interopRequireDefault(_sharedReactComponentsCommonLazyLoadImage);

var _EntryBrickMetabar = require('./EntryBrickMetabar');

var _EntryBrickMetabar2 = _interopRequireDefault(_EntryBrickMetabar);

var _EntryBrickActions = require('./EntryBrickActions');

var _EntryBrickActions2 = _interopRequireDefault(_EntryBrickActions);

var _constants = require('./constants');

var EntryBrickVideoType = _react2['default'].createClass({
  displayName: 'EntryBrickVideoType',

  propTypes: {
    entry: ProjectTypes.tlogEntry.isRequired,
    hasModeration: _react.PropTypes.bool.isRequired,
    host_tlog_id: _react.PropTypes.number,
    onEntryAccept: _react.PropTypes.func.isRequired,
    onEntryDecline: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2['default'].createElement(
      'span',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'brick__media' },
        _react2['default'].createElement(
          'figure',
          { className: 'video' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.url },
            _react2['default'].createElement(
              'div',
              { className: 'video__cover' },
              _react2['default'].createElement(_sharedReactComponentsCommonLazyLoadImage2['default'], { image: this.props.entry.preview_image, maxWidth: _constants.brickWidth }),
              this.renderVideoOverlay()
            )
          )
        )
      ),
      this.renderBrickBody(),
      _react2['default'].createElement(
        'div',
        { className: 'brick__meta' },
        _react2['default'].createElement(_EntryBrickMetabar2['default'], {
          entry: this.props.entry,
          host_tlog_id: this.props.host_tlog_id
        })
      ),
      _react2['default'].createElement(_EntryBrickActions2['default'], {
        hasModeration: this.props.hasModeration,
        onAccept: this.props.onEntryAccept,
        onDecline: this.props.onEntryDecline })
    );
  },

  renderBrickBody: function renderBrickBody() {
    if (this.props.entry.title_truncated) {
      return _react2['default'].createElement(
        'div',
        { className: 'brick__body' },
        _react2['default'].createElement(
          'div',
          { className: 'brick__text' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.url, title: this.props.entry.title_truncated, className: 'brick__link' },
            _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: this.props.entry.title_truncated, withHTML: true })
          )
        )
      );
    }
  },

  renderVideoOverlay: function renderVideoOverlay() {
    if (this.props.entry.is_playable) {
      return _react2['default'].createElement('div', { className: 'video__overlay' });
    }
  }
});

exports['default'] = EntryBrickVideoType;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"../../../../../shared/react/components/common/LazyLoadImage":535,"../../../../../shared/react/components/common/Text":538,"./EntryBrickActions":105,"./EntryBrickMetabar":111,"./constants":118,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],118:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var brickWidth = 302;
exports.brickWidth = brickWidth;
var flowAvatarSize = 55;
exports.flowAvatarSize = flowAvatarSize;

},{}],119:[function(require,module,exports){
/*global i18n, TastyConfirmController */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsEntry = require('../../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var _EntryTlogContent = require('./EntryTlogContent');

var _EntryTlogContent2 = _interopRequireDefault(_EntryTlogContent);

var _sharedReactServicesError = require('../../../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _constantsEntryConstants = require('../../../constants/EntryConstants');

var EntryTlog = (function (_Component) {
  _inherits(EntryTlog, _Component);

  function EntryTlog() {
    _classCallCheck(this, EntryTlog);

    _get(Object.getPrototypeOf(EntryTlog.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      entry: this.props.entry,
      hasModeration: !!this.props.moderation
    };
  }

  _createClass(EntryTlog, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props;
      var _props$entry = _props.entry;
      var can_delete = _props$entry.can_delete;
      var id = _props$entry.id;
      var tlog = _props$entry.tlog;
      var host_tlog_id = _props.host_tlog_id;

      if (can_delete && !host_tlog_id) {
        _sharedReactServicesError2['default'].notifyWarning('Неконсистентный флаг can_delete', {
          componentName: 'EntryTlog',
          method: 'componentWillMount',
          canDelete: can_delete,
          entryID: id,
          entryTlogID: tlog && tlog.id,
          hostTlogID: host_tlog_id
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.state.hasModeration !== nextState.hasModeration;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var commentator = _props2.commentator;
      var entry = _props2.entry;
      var host_tlog_id = _props2.host_tlog_id;

      var actions = {
        onAddToFavorites: this.addToFavorites.bind(this),
        onRemoveFromFavorites: this.removeFromFavorites.bind(this),
        onAddToWatching: this.addToWatching.bind(this),
        onRemoveFromWatching: this.removeFromWatching.bind(this),
        onReport: this.report.bind(this),
        onDelete: this['delete'].bind(this),
        onAccept: this.accept.bind(this),
        onDecline: this.decline.bind(this)
      };

      return _react2['default'].createElement(
        'article',
        {
          'data-id': entry.id,
          'data-time': entry.created_at,
          className: this.getEntryClasses()
        },
        _react2['default'].createElement(_EntryTlogContent2['default'], _extends({}, actions, {
          entry: entry,
          commentator: commentator,
          hasModeration: this.state.hasModeration,
          hideCommentForm: this.props.hideCommentForm,
          host_tlog_id: host_tlog_id
        }))
      );
    }
  }, {
    key: 'addToFavorites',
    value: function addToFavorites() {
      var _this = this;

      _actionsEntry2['default'].addToFavorites(this.props.entry.id).then(function () {
        _this.state.entry.is_favorited = true;
        _this.forceUpdate();
      });
    }
  }, {
    key: 'removeFromFavorites',
    value: function removeFromFavorites() {
      var _this2 = this;

      _actionsEntry2['default'].removeFromFavorites(this.props.entry.id).then(function () {
        _this2.state.entry.is_favorited = false;
        _this2.forceUpdate();
      });
    }
  }, {
    key: 'addToWatching',
    value: function addToWatching() {
      var _this3 = this;

      _actionsEntry2['default'].addToWatching(this.props.entry.id).then(function () {
        _this3.state.entry.is_watching = true;
        _this3.forceUpdate();
      });
    }
  }, {
    key: 'removeFromWatching',
    value: function removeFromWatching() {
      var _this4 = this;

      _actionsEntry2['default'].removeFromWatching(this.props.entry.id).then(function () {
        _this4.state.entry.is_watching = false;
        _this4.forceUpdate();
      });
    }
  }, {
    key: 'report',
    value: function report() {
      var _this5 = this;

      TastyConfirmController.show({
        message: i18n.t('report_entry_confirm'),
        acceptButtonText: i18n.t('report_entry_button'),
        onAccept: function onAccept() {
          _actionsEntry2['default'].report(_this5.props.entry.id);
        }
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _props3 = this.props;
      var entryID = _props3.entry.id;
      var tlogID = _props3.host_tlog_id;
      var onDelete = _props3.onDelete;
      var successDeleteUrl = _props3.successDeleteUrl;

      TastyConfirmController.show({
        message: i18n.t('delete_entry_confirm'),
        acceptButtonText: i18n.t('delete_entry_button'),
        onAccept: function onAccept() {
          _actionsEntry2['default']['delete'](entryID, tlogID).then(function () {
            // onDelete у нас есть только если пост рендерят из контейнера
            // тогда отдаем удаление контейнеру, иначе редиректим куда указано
            if (typeof onDelete === 'function') {
              onDelete(entryID);
            } else if (successDeleteUrl) {
              window.setTimeout(function () {
                return window.location.href = successDeleteUrl;
              }, 0);
            }
          });
        }
      });
    }
  }, {
    key: 'accept',
    value: function accept() {
      var _this6 = this;

      _actionsEntry2['default'].accept(this.props.moderation.accept_url).then(function () {
        var accept_action = _this6.props.moderation.accept_action;

        switch (accept_action) {
          case 'delete':
            _this6.props.onDelete(_this6.props.entry.id);
            break;
          case 'nothing':
            _this6.setState({ hasModeration: false });
            break;
        }
      });
    }
  }, {
    key: 'decline',
    value: function decline() {
      var _this7 = this;

      _actionsEntry2['default'].decline(this.props.moderation.decline_url).then(function () {
        var decline_action = _this7.props.moderation.decline_action;

        switch (decline_action) {
          case 'delete':
            _this7.props.onDelete(_this7.props.entry.id);
            break;
          case 'nothing':
            _this7.setState({ hasModeration: false });
            break;
        }
      });
    }
  }, {
    key: 'getEntryClasses',
    value: function getEntryClasses() {
      var type = this.props.entry.type;

      var typeClass = _constantsEntryConstants.ENTRY_TYPES.indexOf(type) != -1 ? type : 'text';

      return 'post post--' + typeClass;
    }
  }], [{
    key: 'propTypes',
    value: {
      commentator: _react.PropTypes.object,
      entry: _react.PropTypes.object.isRequired,
      hideCommentForm: _react.PropTypes.bool,
      host_tlog_id: _react.PropTypes.number,
      moderation: _react.PropTypes.object,
      onDelete: _react.PropTypes.func,
      successDeleteUrl: _react.PropTypes.string
    },
    enumerable: true
  }]);

  return EntryTlog;
})(_react.Component);

exports['default'] = EntryTlog;
module.exports = exports['default'];

},{"../../../../../shared/react/services/Error":552,"../../../actions/Entry":7,"../../../constants/EntryConstants":404,"./EntryTlogContent":133,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],120:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogActions = (function () {
  function EntryTlogActions() {
    _classCallCheck(this, EntryTlogActions);
  }

  _createClass(EntryTlogActions, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "div",
        { className: "post__actions" },
        _react2["default"].createElement(
          "div",
          { className: "moderator-actions" },
          _react2["default"].createElement(
            "div",
            { className: "moderator-action moderator-action--accept",
              onClick: this.props.onAccept },
            _react2["default"].createElement("i", { className: "icon icon--tick" })
          ),
          _react2["default"].createElement(
            "div",
            { className: "moderator-action moderator-action--reject",
              onClick: this.props.onDecline },
            _react2["default"].createElement("i", { className: "icon icon--cross" })
          )
        )
      );
    }
  }], [{
    key: "propTypes",
    value: {
      onAccept: _react.PropTypes.func.isRequired,
      onDecline: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogActions;
})();

exports["default"] = EntryTlogActions;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],121:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogCodeType = (function () {
  function EntryTlogCodeType() {
    _classCallCheck(this, EntryTlogCodeType);
  }

  _createClass(EntryTlogCodeType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var is_private = _props$entry.is_private;
      var text = _props$entry.text;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          this.renderTitle()
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(
            'pre',
            null,
            _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: text, withHTML: true })
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (this.props.entry.title) {
        return _react2['default'].createElement(
          'h1',
          { className: 'post__title' },
          this.props.entry.title
        );
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCodeType;
})();

exports['default'] = EntryTlogCodeType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],122:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonAvatar = require('../../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var _EntryTlogCommentMetabar = require('./EntryTlogCommentMetabar');

var _EntryTlogCommentMetabar2 = _interopRequireDefault(_EntryTlogCommentMetabar);

var EntryTlogComment = (function () {
  function EntryTlogComment() {
    _classCallCheck(this, EntryTlogComment);
  }

  _createClass(EntryTlogComment, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'article',
        { className: 'comment' },
        _react2['default'].createElement(
          'div',
          { className: 'comment__table' },
          _react2['default'].createElement(
            'div',
            { className: 'comment__table-cell' },
            _react2['default'].createElement(
              'a',
              { href: this.props.comment.user.tlog_url,
                title: this.props.comment.user.name,
                target: '_blank',
                className: 'comment__user' },
              _react2['default'].createElement(
                'span',
                { className: 'comment__avatar' },
                _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: this.props.comment.user.userpic, size: 35 })
              ),
              _react2['default'].createElement(
                'span',
                { className: 'comment__username comment__username--bold' },
                this.props.comment.user.name,
                ' '
              )
            ),
            _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: this.props.comment.comment_html } }),
            _react2['default'].createElement(_EntryTlogCommentMetabar2['default'], this.props)
          )
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      comment: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      entryUrl: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogComment;
})();

exports['default'] = EntryTlogComment;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Avatar":532,"./EntryTlogCommentMetabar":128,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],123:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogCommentEditForm = require('./EntryTlogCommentEditForm');

var _EntryTlogCommentEditForm2 = _interopRequireDefault(_EntryTlogCommentEditForm);

var _EntryTlogComment = require('./EntryTlogComment');

var _EntryTlogComment2 = _interopRequireDefault(_EntryTlogComment);

var EntryTlogCommentContainer = (function (_Component) {
  _inherits(EntryTlogCommentContainer, _Component);

  function EntryTlogCommentContainer() {
    _classCallCheck(this, EntryTlogCommentContainer);

    _get(Object.getPrototypeOf(EntryTlogCommentContainer.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      edit: false,
      processEdit: false
    };
  }

  _createClass(EntryTlogCommentContainer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.processEdit) {
        this.setState({ processEdit: false });
      }
      if (this.props.comment.comment_html !== nextProps.comment.comment_html) {
        this.setState({ edit: false });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.edit) {
        return _react2['default'].createElement(_EntryTlogCommentEditForm2['default'], {
          comment: this.props.comment,
          commentator: this.props.commentator,
          process: this.state.processEdit,
          onCommentUpdate: this.updateComment.bind(this),
          onCancel: this.show.bind(this) });
      } else {
        return _react2['default'].createElement(_EntryTlogComment2['default'], _extends({}, this.props, { onCommentEdit: this.edit.bind(this) }));
      }
    }
  }, {
    key: 'updateComment',
    value: function updateComment(text) {
      var _this = this;

      this.setState({ processEdit: true }, function () {
        _this.props.onCommentUpdate(text);
      });
    }
  }, {
    key: 'edit',
    value: function edit() {
      this.setState({ edit: true });
    }
  }, {
    key: 'show',
    value: function show() {
      this.setState({ edit: false });
    }
  }], [{
    key: 'propTypes',
    value: {
      comment: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      entryUrl: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentContainer;
})(_react.Component);

exports['default'] = EntryTlogCommentContainer;
module.exports = exports['default'];

},{"./EntryTlogComment":122,"./EntryTlogCommentEditForm":125,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],124:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogCommentForm = require('./EntryTlogCommentForm');

var _EntryTlogCommentForm2 = _interopRequireDefault(_EntryTlogCommentForm);

var FORM_SHOW_STATE = 'show',
    FORM_LINK_STATE = 'link',
    FORM_HIDDEN_STATE = 'hidden';

var EntryTlogCommentCreateForm = (function (_Component) {
  _inherits(EntryTlogCommentCreateForm, _Component);

  function EntryTlogCommentCreateForm() {
    _classCallCheck(this, EntryTlogCommentCreateForm);

    _get(Object.getPrototypeOf(EntryTlogCommentCreateForm.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      currentState: this.props.hideCommentForm ? this.props.totalCommentsCount > 5 ? FORM_LINK_STATE : FORM_HIDDEN_STATE : FORM_SHOW_STATE
    };
  }

  _createClass(EntryTlogCommentCreateForm, [{
    key: 'render',
    value: function render() {
      switch (this.state.currentState) {
        case FORM_SHOW_STATE:
          return _react2['default'].createElement(_EntryTlogCommentForm2['default'], {
            commentator: this.props.commentator,
            onCancel: this.close.bind(this),
            onSubmit: this.props.onCommentCreate,
            process: this.props.process,
            ref: 'form'
          });
        case FORM_LINK_STATE:
          return _react2['default'].createElement(
            'div',
            { className: 'comments__more' },
            _react2['default'].createElement(
              'a',
              { className: 'comments__more-link', onClick: this.open.bind(this) },
              i18n.t('comment_more_link')
            )
          );
        default:
          return null;
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      if (this.state.currentState === FORM_SHOW_STATE) {
        this.refs.form.clear();
      }
    }
  }, {
    key: 'reply',
    value: function reply(username) {
      var _this = this;

      if (this.state.currentState === FORM_SHOW_STATE) {
        this.refs.form.addReply(username);
      } else {
        this.setState({ currentState: FORM_SHOW_STATE }, function () {
          _this.refs.form.addReply(username);
        });
      }
    }
  }, {
    key: 'close',
    value: function close() {
      var newState = this.props.totalCommentsCount > 5 ? FORM_LINK_STATE : FORM_HIDDEN_STATE;
      this.setState({ currentState: newState });
    }
  }, {
    key: 'open',
    value: function open() {
      var _this2 = this;

      this.setState({ currentState: FORM_SHOW_STATE }, function () {
        _this2.refs.form.focus();
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      entryID: _react.PropTypes.number.isRequired,
      commentator: _react.PropTypes.object.isRequired,
      hideCommentForm: _react.PropTypes.bool,
      totalCommentsCount: _react.PropTypes.number.isRequired,
      process: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return EntryTlogCommentCreateForm;
})(_react.Component);

exports['default'] = EntryTlogCommentCreateForm;
module.exports = exports['default'];

},{"./EntryTlogCommentForm":126,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],125:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogCommentForm = require('./EntryTlogCommentForm');

var _EntryTlogCommentForm2 = _interopRequireDefault(_EntryTlogCommentForm);

var EntryTlogCommentEditForm = (function () {
  function EntryTlogCommentEditForm() {
    _classCallCheck(this, EntryTlogCommentEditForm);
  }

  _createClass(EntryTlogCommentEditForm, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_EntryTlogCommentForm2['default'], {
        text: this.props.comment.comment_html,
        commentator: this.props.commentator,
        process: this.props.process,
        onSubmit: this.props.onCommentUpdate,
        onCancel: this.props.onCancel });
    }
  }], [{
    key: 'propTypes',
    value: {
      comment: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object.isRequired,
      process: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return EntryTlogCommentEditForm;
})();

exports['default'] = EntryTlogCommentEditForm;
module.exports = exports['default'];

},{"./EntryTlogCommentForm":126,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],126:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTextareaAutosize = require('react-textarea-autosize');

var _reactTextareaAutosize2 = _interopRequireDefault(_reactTextareaAutosize);

var _sharedReactComponentsCommonAvatar = require('../../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var REPLIES_LIMIT = 5;

var EntryTlogCommentForm = (function (_Component) {
  _inherits(EntryTlogCommentForm, _Component);

  function EntryTlogCommentForm() {
    _classCallCheck(this, EntryTlogCommentForm);

    _get(Object.getPrototypeOf(EntryTlogCommentForm.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      text: this.props.text || ''
    };
  }

  _createClass(EntryTlogCommentForm, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Ставим курсор в конец
      var field = _react2['default'].findDOMNode(this.refs.field);

      if (field.setSelectionRange) {
        var len = field.value.length * 2;
        field.setSelectionRange(len, len);
      } else {
        field.value = field.value;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'comment-form' },
        _react2['default'].createElement(
          'div',
          { className: 'comment-form__table' },
          _react2['default'].createElement(
            'div',
            { className: 'comment-form__table-cell' },
            _react2['default'].createElement(
              'form',
              null,
              this.renderAvatar(),
              this.renderSubmitButton(),
              _react2['default'].createElement(
                'span',
                { className: 'comment-form__field' },
                _react2['default'].createElement(_reactTextareaAutosize2['default'], {
                  className: 'comment-form__field-textarea',
                  disabled: this.props.process,
                  onChange: this.handleChange.bind(this),
                  onKeyDown: this.handleKeyDown.bind(this),
                  placeholder: i18n.t('comment_form_placeholder'),
                  ref: 'field',
                  value: this.state.text
                })
              )
            )
          )
        )
      );
    }
  }, {
    key: 'renderAvatar',
    value: function renderAvatar() {
      var _props = this.props;
      var userpic = _props.commentator.userpic;
      var process = _props.process;

      return _react2['default'].createElement(
        'span',
        { className: 'comment-form__avatar' },
        process ? _react2['default'].createElement(Spinner, { size: 30 }) : _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], {
          size: 35,
          userpic: userpic
        })
      );
    }
  }, {
    key: 'renderSubmitButton',
    value: function renderSubmitButton() {
      if (!this.isEmpty() && !this.props.process) {
        return _react2['default'].createElement(
          'button',
          { className: 'comment-form__submit', onClick: this.handleButtonClick.bind(this) },
          i18n.t('comment_form_submit')
        );
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.refs.field.focus();
    }
  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      return !this.state.text.trim();
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.setState({ text: '' });
    }
  }, {
    key: 'addReply',
    value: function addReply(username) {
      var userTag = '@' + username,
          postfix = /^@/.exec(this.state.text) ? ', ' : ' ',
          newText = this.state.text,
          replies = this.getReplies();

      if (replies.length > REPLIES_LIMIT) {
        newText = this.removeLastReply();
      }
      if (!RegExp(userTag).test(newText)) {
        newText = userTag + postfix + newText;
      }

      this.setState({ text: newText }, this.focus);
    }
  }, {
    key: 'getReplies',
    value: function getReplies() {
      var replies = [],
          text = this.state.text,
          regExp = /@[^, ]{1,}/g;

      var found = undefined,
          results = [];
      while (found = regExp.exec(text)) {
        results.push(found[0]);
      }
      return results;
    }
  }, {
    key: 'removeLastReply',
    value: function removeLastReply() {
      return this.state.text.replace(/, @\w+(?=\s)/g, '');
    }
  }, {
    key: 'submit',
    value: function submit() {
      this.props.onSubmit(this.state.text);
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      this.setState({ text: e.target.value });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      switch (e.which) {
        case 13:
          if (!this.isEmpty() && !e.shiftKey && !e.ctrlKey && !e.altKey) {
            e.preventDefault();
            this.submit();
          }
          break;
        case 27:
          this.props.onCancel();
          break;
      }
    }
  }, {
    key: 'handleButtonClick',
    value: function handleButtonClick(e) {
      e.preventDefault();
      this.submit();
    }
  }], [{
    key: 'propTypes',
    value: {
      commentator: _react.PropTypes.object.isRequired,
      onCancel: _react.PropTypes.func.isRequired,
      onSubmit: _react.PropTypes.func.isRequired,
      process: _react.PropTypes.bool,
      text: _react.PropTypes.string
    },
    enumerable: true
  }]);

  return EntryTlogCommentForm;
})(_react.Component);

exports['default'] = EntryTlogCommentForm;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Avatar":532,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react","react-textarea-autosize":681}],127:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogCommentContainer = require('./EntryTlogCommentContainer');

var _EntryTlogCommentContainer2 = _interopRequireDefault(_EntryTlogCommentContainer);

var EntryTlogCommentList = (function () {
  function EntryTlogCommentList() {
    _classCallCheck(this, EntryTlogCommentList);
  }

  _createClass(EntryTlogCommentList, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var commentList = this.props.comments.map(function (comment) {
        return _react2['default'].createElement(_EntryTlogCommentContainer2['default'], {
          comment: comment,
          commentator: _this.props.commentator,
          entryUrl: _this.props.entryUrl,
          onCommentReply: _this.props.onCommentReply.bind(null, comment.user.name),
          onCommentUpdate: _this.props.onCommentUpdate.bind(null, comment.id),
          onCommentReport: _this.props.onCommentReport.bind(null, comment.id),
          onCommentDelete: _this.props.onCommentDelete.bind(null, comment.id),
          key: comment.id });
      });

      return _react2['default'].createElement(
        'div',
        { className: 'comments__list' },
        commentList
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      comments: _react.PropTypes.array.isRequired,
      commentator: _react.PropTypes.object,
      entryUrl: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentList;
})();

exports['default'] = EntryTlogCommentList;
module.exports = exports['default'];

},{"./EntryTlogCommentContainer":123,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],128:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogCommentMetabarDate = require('./EntryTlogCommentMetabarDate');

var _EntryTlogCommentMetabarDate2 = _interopRequireDefault(_EntryTlogCommentMetabarDate);

var _EntryTlogCommentMetabarActions = require('./EntryTlogCommentMetabarActions');

var _EntryTlogCommentMetabarActions2 = _interopRequireDefault(_EntryTlogCommentMetabarActions);

var EntryTlogCommentMetabar = (function () {
  function EntryTlogCommentMetabar() {
    _classCallCheck(this, EntryTlogCommentMetabar);
  }

  _createClass(EntryTlogCommentMetabar, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'span',
        { className: 'comment__meta' },
        this.renderReply(),
        _react2['default'].createElement(_EntryTlogCommentMetabarDate2['default'], {
          url: this.getCommentUrl(),
          date: this.props.comment.created_at }),
        _react2['default'].createElement(
          'span',
          { className: 'comment__dot' },
          '·'
        ),
        _react2['default'].createElement(_EntryTlogCommentMetabarActions2['default'], _extends({}, this.props, { url: this.getCommentUrl() }))
      );
    }
  }, {
    key: 'renderReply',
    value: function renderReply() {
      if (this.props.commentator) {
        return _react2['default'].createElement(
          'span',
          null,
          _react2['default'].createElement(
            'span',
            { className: 'comment__reply', onClick: this.props.onCommentReply },
            'Ответить'
          ),
          _react2['default'].createElement(
            'span',
            { className: 'comment__dot' },
            '·'
          )
        );
      }
    }
  }, {
    key: 'getCommentUrl',
    value: function getCommentUrl() {
      return this.props.entryUrl + '#comment-' + this.props.comment.id;
    }
  }], [{
    key: 'propTypes',
    value: {
      comment: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      entryUrl: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentMetabar;
})();

exports['default'] = EntryTlogCommentMetabar;
module.exports = exports['default'];

},{"./EntryTlogCommentMetabarActions":129,"./EntryTlogCommentMetabarDate":130,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],129:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var MARGIN_BETWEEN_TOGGLER_AND_MENU = 20;

var EntryTlogCommentMetabarActions = (function (_Component) {
  _inherits(EntryTlogCommentMetabarActions, _Component);

  function EntryTlogCommentMetabarActions() {
    _classCallCheck(this, EntryTlogCommentMetabarActions);

    _get(Object.getPrototypeOf(EntryTlogCommentMetabarActions.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      open: false,
      marginTop: MARGIN_BETWEEN_TOGGLER_AND_MENU
    };
  }

  _createClass(EntryTlogCommentMetabarActions, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.open) this.calculateTopPosition();
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      if (this.state.open !== nextState.open) {
        this.calculateTopPosition();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var menuClasses = (0, _classnames2['default'])('meta-item__dropdown', {
        'state--open': this.state.open,
        'position-top': this.state.marginTop != MARGIN_BETWEEN_TOGGLER_AND_MENU / 2
      });
      var menuStyles = {
        marginTop: this.state.marginTop
      };

      return _react2['default'].createElement(
        'span',
        { className: 'comment__actions',
          onMouseEnter: function () {
            return _this.setState({ open: true });
          },
          onMouseLeave: function () {
            return _this.setState({ open: false });
          } },
        _react2['default'].createElement('i', { className: 'icon icon--dots' }),
        _react2['default'].createElement(
          'span',
          { ref: 'menu', className: menuClasses, style: menuStyles },
          _react2['default'].createElement(EntryTlogCommentMetabarAction, {
            url: this.props.url,
            title: i18n.t('link_comment_item'),
            icon: 'icon--hyperlink' }),
          this.props.comment.can_report && _react2['default'].createElement(EntryTlogCommentMetabarAction, {
            icon: 'icon--exclamation-mark',
            title: i18n.t('report_comment_item'),
            onClick: this.props.onCommentReport }),
          this.props.comment.can_edit && _react2['default'].createElement(EntryTlogCommentMetabarAction, {
            icon: 'icon--pencil',
            title: i18n.t('edit_comment_item'),
            onClick: this.props.onCommentEdit }),
          this.props.comment.can_delete && _react2['default'].createElement(EntryTlogCommentMetabarAction, {
            icon: 'icon--basket',
            title: i18n.t('delete_comment_item'),
            onClick: this.props.onCommentDelete })
        )
      );
    }
  }, {
    key: 'calculateTopPosition',
    value: function calculateTopPosition() {
      var wHeight = $(window).height(),
          wScrollTop = $(window).scrollTop(),
          $menu = $(_react2['default'].findDOMNode(this.refs.menu)),
          menuHeight = $menu.innerHeight(),
          menuOffset = $menu.offset();

      var menuScrollTopWindow = menuOffset.top - wScrollTop,
          marginTop = MARGIN_BETWEEN_TOGGLER_AND_MENU / 2;

      if (this.state.marginTop != marginTop) {
        menuScrollTopWindow -= this.state.marginTop;
      }

      if (menuScrollTopWindow + menuHeight > wHeight) {
        marginTop = (menuHeight + MARGIN_BETWEEN_TOGGLER_AND_MENU) / -1;
      }

      this.setState({ marginTop: marginTop });
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string.isRequired,
      comment: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentMetabarActions;
})(_react.Component);

exports['default'] = EntryTlogCommentMetabarActions;

var EntryTlogCommentMetabarAction = (function (_Component2) {
  _inherits(EntryTlogCommentMetabarAction, _Component2);

  function EntryTlogCommentMetabarAction() {
    _classCallCheck(this, EntryTlogCommentMetabarAction);

    _get(Object.getPrototypeOf(EntryTlogCommentMetabarAction.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      hover: false
    };
  }

  _createClass(EntryTlogCommentMetabarAction, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var iconClasses = (0, _classnames2['default'])('icon', this.props.icon);

      return _react2['default'].createElement(
        'a',
        { href: this.props.url,
          className: 'comment__dropdown-item',
          onClick: this.props.onClick,
          onMouseEnter: function () {
            return _this2.setState({ hover: true });
          },
          onMouseLeave: function () {
            return _this2.setState({ hover: false });
          } },
        _react2['default'].createElement('i', { className: iconClasses }),
        this.getTitle()
      );
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      var _props = this.props;
      var title = _props.title;
      var hoverTitle = _props.hoverTitle;

      return this.state.hover && hoverTitle ? hoverTitle : title;
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string,
      title: _react.PropTypes.string.isRequired,
      hoverTitle: _react.PropTypes.string,
      icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.array]).isRequired,
      onClick: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return EntryTlogCommentMetabarAction;
})(_react.Component);

module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],130:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogCommentMetabarDate = (function () {
  function EntryTlogCommentMetabarDate() {
    _classCallCheck(this, EntryTlogCommentMetabarDate);
  }

  _createClass(EntryTlogCommentMetabarDate, [{
    key: 'render',
    value: function render() {
      var now = moment(),
          createdAt = moment(this.props.date);

      var date = undefined;
      if (now.diff(createdAt, 'seconds') < 5) {
        date = createdAt.subtract(5, 's').fromNow();
      } else if (now.diff(createdAt, 'minutes') < 180) {
        date = createdAt.fromNow();
      } else if (now.diff(createdAt, 'days') < 1) {
        date = createdAt.calendar();
      } else {
        date = createdAt.format(now.year() !== createdAt.year() ? 'D MMMM YYYY' : 'D MMMM');
      }

      return _react2['default'].createElement(
        'a',
        { className: 'comment__date-link', href: this.props.url },
        _react2['default'].createElement(
          'span',
          { className: 'comment__date' },
          date
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string.isRequired,
      date: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentMetabarDate;
})();

exports['default'] = EntryTlogCommentMetabarDate;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],131:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsEntry = require('../../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var _EntryTlogCommentCreateForm = require('./EntryTlogCommentCreateForm');

var _EntryTlogCommentCreateForm2 = _interopRequireDefault(_EntryTlogCommentCreateForm);

var _EntryTlogCommentList = require('./EntryTlogCommentList');

var _EntryTlogCommentList2 = _interopRequireDefault(_EntryTlogCommentList);

var _EntryTlogCommentsLoadMore = require('./EntryTlogCommentsLoadMore');

var _EntryTlogCommentsLoadMore2 = _interopRequireDefault(_EntryTlogCommentsLoadMore);

var LOAD_COMMENTS_LIMIT = 50;

var EntryTlogComments = (function (_Component) {
  _inherits(EntryTlogComments, _Component);

  function EntryTlogComments() {
    _classCallCheck(this, EntryTlogComments);

    _get(Object.getPrototypeOf(EntryTlogComments.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      comments: this.props.entry.comments || [],
      totalCount: this.props.entry.comments_count,
      processCreate: false,
      loadingMore: false
    };
  }

  _createClass(EntryTlogComments, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'section',
        { className: 'comments' },
        this.renderLoadMoreButton.call(this),
        this.renderCommentList(),
        this.renderCommentForm()
      );
    }
  }, {
    key: 'renderLoadMoreButton',
    value: function renderLoadMoreButton() {
      if (this.state.totalCount > this.state.comments.length) {
        return _react2['default'].createElement(_EntryTlogCommentsLoadMore2['default'], {
          totalCount: this.state.totalCount,
          loadedCount: this.state.comments.length,
          limit: this.props.limit,
          loading: this.state.loadingMore,
          onLoadMore: this.loadMore.bind(this) });
      }
    }
  }, {
    key: 'renderCommentList',
    value: function renderCommentList() {
      if (this.state.comments.length) {
        var actions = {
          onCommentReport: this.reportComment.bind(this),
          onCommentDelete: this.deleteComment.bind(this),
          onCommentUpdate: this.updateComment.bind(this),
          onCommentReply: this.replyComment.bind(this)
        };
        return _react2['default'].createElement(_EntryTlogCommentList2['default'], _extends({}, actions, {
          comments: this.state.comments,
          commentator: this.props.commentator,
          entryUrl: this.props.entry.url }));
      }
    }
  }, {
    key: 'renderCommentForm',
    value: function renderCommentForm() {
      if (this.props.commentator) {
        var actions = {
          onCommentCreate: this.createComment.bind(this)
        };

        return _react2['default'].createElement(_EntryTlogCommentCreateForm2['default'], _extends({}, this.props, actions, {
          ref: 'createForm',
          entryID: this.props.entry.id,
          hideCommentForm: this.props.hideCommentForm,
          totalCommentsCount: this.state.totalCount,
          process: this.state.processCreate
        }));
      }
    }
  }, {
    key: 'createComment',
    value: function createComment(text) {
      var _this = this;

      this.setState({ processCreate: true });

      _actionsEntry2['default'].createComment(this.props.entry.id, text).then(function (comment) {
        _this.setState({
          comments: _this.state.comments.concat(comment),
          totalCount: _this.state.totalCount + 1
        }, function () {
          $(document).trigger('domChanged');
        });
        _this.refs.createForm.clear();
      }).always(function () {
        _this.setState({ processCreate: false });
      });
    }
  }, {
    key: 'replyComment',
    value: function replyComment(username) {
      this.refs.createForm.reply(username);
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.createForm.open();
    }
  }, {
    key: 'reportComment',
    value: function reportComment(commentID) {
      TastyConfirmController.show({
        message: i18n.t('report_comment_confirm'),
        acceptButtonText: i18n.t('report_comment_button'),
        onAccept: function onAccept() {
          _actionsEntry2['default'].reportComment(commentID);
        }
      });
    }
  }, {
    key: 'updateComment',
    value: function updateComment(commentID, text) {
      var _this2 = this;

      _actionsEntry2['default'].editComment(commentID, text).then(function (comment) {
        for (var i = 0; i < _this2.state.comments.length; i++) {
          if (_this2.state.comments[i].id === commentID) {
            _this2.state.comments.splice(i, 1, comment);
            break;
          }
        }
      }).always(function () {
        _this2.forceUpdate();
      });
    }
  }, {
    key: 'deleteComment',
    value: function deleteComment(commentID) {
      var _this3 = this;

      TastyConfirmController.show({
        message: i18n.t('delete_comment_confirm'),
        acceptButtonText: i18n.t('delete_comment_button'),
        onAccept: function onAccept() {
          _actionsEntry2['default'].deleteComment(commentID).then(function () {
            var newComments = _this3.state.comments.filter(function (comment) {
              return comment.id !== commentID;
            });

            _this3.setState({
              comments: newComments,
              totalCount: _this3.state.totalCount - 1
            });
          });
        }
      });
    }
  }, {
    key: 'loadMore',
    value: function loadMore() {
      var _this4 = this;

      var toCommentID = this.state.comments[0] ? this.state.comments[0].id : null;

      this.setState({ loadingMore: true });
      _actionsEntry2['default'].loadComments(this.props.entry.id, toCommentID, this.props.limit).then(function (data) {
        var newComments = data.comments.concat(_this4.state.comments);
        _this4.setState({
          comments: data.comments.concat(_this4.state.comments),
          totalCount: data.total_count
        }, function () {
          $(document).trigger('domChanged');
        });
      }).always(function () {
        _this4.setState({ loadingMore: false });
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      commentator: _react.PropTypes.object,
      entry: _react.PropTypes.object.isRequired,
      hideCommentForm: _react.PropTypes.bool,
      limit: _react.PropTypes.number
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      limit: LOAD_COMMENTS_LIMIT
    },
    enumerable: true
  }]);

  return EntryTlogComments;
})(_react.Component);

exports['default'] = EntryTlogComments;
module.exports = exports['default'];

},{"../../../actions/Entry":7,"./EntryTlogCommentCreateForm":124,"./EntryTlogCommentList":127,"./EntryTlogCommentsLoadMore":132,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],132:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogCommentsLoadMore = (function () {
  function EntryTlogCommentsLoadMore() {
    _classCallCheck(this, EntryTlogCommentsLoadMore);
  }

  _createClass(EntryTlogCommentsLoadMore, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "div",
        { className: "comments__more", onClick: this.props.onLoadMore },
        _react2["default"].createElement(
          "a",
          { className: "comments__more-link" },
          this.getTitle(),
          ' ',
          this.renderSpinner()
        )
      );
    }
  }, {
    key: "renderSpinner",
    value: function renderSpinner() {
      if (this.props.loading) return _react2["default"].createElement(Spinner, { size: 8 });
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      var remainingCount = this.props.totalCount - this.props.loadedCount,
          possibleCount = this.props.loadedCount + this.props.limit;

      if (possibleCount < this.props.totalCount) {
        return i18n.t('load_more_comments', { count: this.props.limit });
      } else {
        return i18n.t('load_more_comments_remaining', { count: remainingCount });
      }
    }
  }], [{
    key: "propTypes",
    value: {
      totalCount: _react.PropTypes.number.isRequired,
      loadedCount: _react.PropTypes.number.isRequired,
      loading: _react.PropTypes.bool.isRequired,
      limit: _react.PropTypes.number.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogCommentsLoadMore;
})();

exports["default"] = EntryTlogCommentsLoadMore;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],133:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactServicesError = require('../../../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _EntryTlogTextType = require('./EntryTlogTextType');

var _EntryTlogTextType2 = _interopRequireDefault(_EntryTlogTextType);

var _EntryTlogImageType = require('./EntryTlogImageType');

var _EntryTlogImageType2 = _interopRequireDefault(_EntryTlogImageType);

var _EntryTlogVideoType = require('./EntryTlogVideoType');

var _EntryTlogVideoType2 = _interopRequireDefault(_EntryTlogVideoType);

var _EntryTlogQuoteType = require('./EntryTlogQuoteType');

var _EntryTlogQuoteType2 = _interopRequireDefault(_EntryTlogQuoteType);

var _EntryTlogLinkType = require('./EntryTlogLinkType');

var _EntryTlogLinkType2 = _interopRequireDefault(_EntryTlogLinkType);

var _EntryTlogSongType = require('./EntryTlogSongType');

var _EntryTlogSongType2 = _interopRequireDefault(_EntryTlogSongType);

var _EntryTlogCodeType = require('./EntryTlogCodeType');

var _EntryTlogCodeType2 = _interopRequireDefault(_EntryTlogCodeType);

var _EntryTlogUnknownType = require('./EntryTlogUnknownType');

var _EntryTlogUnknownType2 = _interopRequireDefault(_EntryTlogUnknownType);

var ENTRY_TEXT_TYPE = 'text',
    ENTRY_IMAGE_TYPE = 'image',
    ENTRY_VIDEO_TYPE = 'video',
    ENTRY_QUOTE_TYPE = 'quote',
    ENTRY_LINK_TYPE = 'link',
    ENTRY_SONG_TYPE = 'song',
    ENTRY_CODE_TYPE = 'code',
    ENTRY_CONVO_TYPE = 'convo',
    ENTRY_ANONYMOUS_TYPE = 'anonymous';

var EntryTlogContent = (function () {
  function EntryTlogContent() {
    _classCallCheck(this, EntryTlogContent);
  }

  _createClass(EntryTlogContent, [{
    key: 'render',
    value: function render() {
      switch (this.props.entry.type) {
        case ENTRY_TEXT_TYPE:
        case ENTRY_ANONYMOUS_TYPE:
        case ENTRY_CONVO_TYPE:
          return _react2['default'].createElement(_EntryTlogTextType2['default'], this.props);
        case ENTRY_IMAGE_TYPE:
          return _react2['default'].createElement(_EntryTlogImageType2['default'], this.props);
        case ENTRY_VIDEO_TYPE:
          return _react2['default'].createElement(_EntryTlogVideoType2['default'], this.props);
        case ENTRY_QUOTE_TYPE:
          return _react2['default'].createElement(_EntryTlogQuoteType2['default'], this.props);
        case ENTRY_LINK_TYPE:
          return _react2['default'].createElement(_EntryTlogLinkType2['default'], this.props);
        case ENTRY_SONG_TYPE:
          return _react2['default'].createElement(_EntryTlogSongType2['default'], this.props);
        case ENTRY_CODE_TYPE:
          return _react2['default'].createElement(_EntryTlogCodeType2['default'], this.props);
        default:
          _sharedReactServicesError2['default'].notifyWarning('Неизвестный тип tlog-поста', {
            componentName: this.constructor.name,
            method: 'render',
            entryID: this.props.entry.id,
            entryType: this.props.entry.type
          });

          return _react2['default'].createElement(_EntryTlogUnknownType2['default'], this.props);
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      hasModeration: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return EntryTlogContent;
})();

exports['default'] = EntryTlogContent;
module.exports = exports['default'];

},{"../../../../../shared/react/services/Error":552,"./EntryTlogCodeType":121,"./EntryTlogImageType":134,"./EntryTlogLinkType":135,"./EntryTlogQuoteType":142,"./EntryTlogSongType":143,"./EntryTlogTextType":144,"./EntryTlogUnknownType":145,"./EntryTlogVideoType":146,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],134:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _sharedReactComponentsCommonImageAttachmentsCollage = require('../../../../../shared/react/components/common/imageAttachmentsCollage');

var _sharedReactComponentsCommonImageAttachmentsCollage2 = _interopRequireDefault(_sharedReactComponentsCommonImageAttachmentsCollage);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogImageType = (function () {
  function EntryTlogImageType() {
    _classCallCheck(this, EntryTlogImageType);
  }

  _createClass(EntryTlogImageType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var image_attachments = _props$entry.image_attachments;
      var is_private = _props$entry.is_private;
      var title = _props$entry.title;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(_sharedReactComponentsCommonImageAttachmentsCollage2['default'], {
            imageAttachments: image_attachments,
            width: 712
          }),
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: title, withHTML: true })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogImageType;
})();

exports['default'] = EntryTlogImageType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../../../../shared/react/components/common/imageAttachmentsCollage":547,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],135:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogLinkType = (function () {
  function EntryTlogLinkType() {
    _classCallCheck(this, EntryTlogLinkType);
  }

  _createClass(EntryTlogLinkType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var is_private = _props$entry.is_private;
      var text = _props$entry.text;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          this.renderTitle()
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: text, withHTML: true })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (this.props.entry.title) {
        return _react2['default'].createElement(
          'h1',
          { className: 'post__title' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.link, target: '_blank', className: 'post__link' },
            this.props.entry.title
          )
        );
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogLinkType;
})();

exports['default'] = EntryTlogLinkType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],136:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonAvatar = require('../../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var _helpersEntryMetabarHelpers = require('../../../helpers/EntryMetabarHelpers');

var _EntryTlogMetabarComments = require('./EntryTlogMetabarComments');

var _EntryTlogMetabarComments2 = _interopRequireDefault(_EntryTlogMetabarComments);

var _EntryTlogMetabarDate = require('./EntryTlogMetabarDate');

var _EntryTlogMetabarDate2 = _interopRequireDefault(_EntryTlogMetabarDate);

var _EntryTlogMetabarRepost = require('./EntryTlogMetabarRepost');

var _EntryTlogMetabarRepost2 = _interopRequireDefault(_EntryTlogMetabarRepost);

var _EntryTlogMetabarTags = require('./EntryTlogMetabarTags');

var _EntryTlogMetabarTags2 = _interopRequireDefault(_EntryTlogMetabarTags);

var _EntryTlogMetabarActions = require('./EntryTlogMetabarActions');

var _EntryTlogMetabarActions2 = _interopRequireDefault(_EntryTlogMetabarActions);

var _sharedConstantsTlogEntry = require('../../../../../shared/constants/TlogEntry');

var EntryTlogMetabar = (function () {
  function EntryTlogMetabar() {
    _classCallCheck(this, EntryTlogMetabar);
  }

  _createClass(EntryTlogMetabar, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var commentator = _props.commentator;
      var entry = _props.entry;
      var onComment = _props.onComment;

      return _react2['default'].createElement(
        'span',
        { className: 'meta-bar' },
        this.renderAuthor(),
        _react2['default'].createElement(_EntryTlogMetabarComments2['default'], {
          commentator: commentator,
          commentsCount: entry.comments_count,
          onComment: onComment,
          url: entry.url
        }),
        _react2['default'].createElement(_EntryTlogMetabarDate2['default'], {
          date: entry.created_at,
          url: entry.url
        }),
        entry.type !== _sharedConstantsTlogEntry.TLOG_ENTRY_TYPE_ANONYMOUS && _react2['default'].createElement(_EntryTlogMetabarRepost2['default'], {
          commentator: commentator,
          entryID: entry.id
        }),
        this.renderTags(),
        _react2['default'].createElement(_EntryTlogMetabarActions2['default'], this.props)
      );
    }
  }, {
    key: 'renderAuthor',
    value: function renderAuthor() {
      var _props2 = this.props;
      var _props2$entry = _props2.entry;
      var author = _props2$entry.author;
      var tlog = _props2$entry.tlog;
      var host_tlog_id = _props2.host_tlog_id;

      var authorMeta = (0, _helpersEntryMetabarHelpers.metabarAuthor)({ host_tlog_id: host_tlog_id, author: author, tlog: tlog });

      if (authorMeta) {
        return _react2['default'].createElement(
          'span',
          { className: 'meta-item meta-item--user' },
          _react2['default'].createElement(
            'span',
            { className: 'meta-item__content' },
            _react2['default'].createElement(
              'a',
              { href: tlog.url, className: 'meta-item__link' },
              _react2['default'].createElement(
                'span',
                { className: 'meta-item__ava' },
                _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: tlog.userpic, size: 20 })
              )
            ),
            _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: authorMeta } })
          )
        );
      }
    }
  }, {
    key: 'renderTags',
    value: function renderTags() {
      if (this.props.entry.tags && this.props.entry.tags.length) {
        return _react2['default'].createElement(_EntryTlogMetabarTags2['default'], {
          tags: this.props.entry.tags,
          userSlug: this.props.entry.tlog.slug });
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      commentator: _react.PropTypes.object,
      entry: _react.PropTypes.object.isRequired,
      host_tlog_id: _react.PropTypes.number,
      onComment: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return EntryTlogMetabar;
})();

exports['default'] = EntryTlogMetabar;
module.exports = exports['default'];

},{"../../../../../shared/constants/TlogEntry":527,"../../../../../shared/react/components/common/Avatar":532,"../../../helpers/EntryMetabarHelpers":432,"./EntryTlogMetabarActions":137,"./EntryTlogMetabarComments":138,"./EntryTlogMetabarDate":139,"./EntryTlogMetabarRepost":140,"./EntryTlogMetabarTags":141,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],137:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var MARGIN_BETWEEN_TOGGLER_AND_MENU = 20;

var EntryTlogMetabarActions = (function (_Component) {
  _inherits(EntryTlogMetabarActions, _Component);

  function EntryTlogMetabarActions() {
    _classCallCheck(this, EntryTlogMetabarActions);

    _get(Object.getPrototypeOf(EntryTlogMetabarActions.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      open: false,
      marginTop: MARGIN_BETWEEN_TOGGLER_AND_MENU
    };
  }

  _createClass(EntryTlogMetabarActions, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.open) this.calculateTopPosition();
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      if (this.state.open !== nextState.open) {
        this.calculateTopPosition();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var menuClasses = (0, _classnames2['default'])('meta-item__dropdown', {
        'state--open': this.state.open,
        'position-top': this.state.marginTop != MARGIN_BETWEEN_TOGGLER_AND_MENU / 2
      });
      var menuStyles = {
        marginTop: this.state.marginTop
      };

      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item--actions' },
        _react2['default'].createElement(
          'span',
          { className: 'meta-item__content',
            onMouseEnter: function () {
              return _this.setState({ open: true });
            },
            onMouseLeave: function () {
              return _this.setState({ open: false });
            } },
          _react2['default'].createElement('i', { className: 'meta-item__common icon icon--dots' }),
          _react2['default'].createElement(
            'span',
            { ref: 'menu', className: menuClasses, style: menuStyles },
            this.props.entry.can_edit && _react2['default'].createElement(EntryTlogMetabarAction, {
              url: this.props.entry.edit_url,
              title: i18n.t('edit_entry_item'),
              icon: 'icon--pencil' }),
            _react2['default'].createElement(EntryTlogMetabarAction, {
              url: this.props.entry.url,
              title: i18n.t('link_entry_item'),
              icon: 'icon--hyperlink' }),
            this.props.entry.can_favorite && _react2['default'].createElement(EntryTlogMetabarFavorite, _extends({}, this.props, {
              isFavorited: this.props.entry.is_favorited })),
            this.props.entry.can_watch && _react2['default'].createElement(EntryTlogMetabarWatch, _extends({}, this.props, {
              isWatching: this.props.entry.is_watching })),
            this.props.entry.can_report && _react2['default'].createElement(EntryTlogMetabarReport, this.props),
            this.props.entry.can_delete && _react2['default'].createElement(EntryTlogMetabarDelete, this.props)
          )
        )
      );
    }
  }, {
    key: 'calculateTopPosition',
    value: function calculateTopPosition() {
      var wHeight = $(window).height(),
          wScrollTop = $(window).scrollTop(),
          $menu = $(_react2['default'].findDOMNode(this.refs.menu)),
          menuHeight = $menu.innerHeight(),
          menuOffset = $menu.offset();

      var menuScrollTopWindow = menuOffset.top - wScrollTop,
          marginTop = MARGIN_BETWEEN_TOGGLER_AND_MENU / 2;

      if (this.state.marginTop != marginTop) {
        menuScrollTopWindow -= this.state.marginTop;
      }

      if (menuScrollTopWindow + menuHeight > wHeight) {
        marginTop = (menuHeight + MARGIN_BETWEEN_TOGGLER_AND_MENU) / -1;
      }

      this.setState({ marginTop: marginTop });
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarActions;
})(_react.Component);

exports['default'] = EntryTlogMetabarActions;

var EntryTlogMetabarAction = (function (_Component2) {
  _inherits(EntryTlogMetabarAction, _Component2);

  function EntryTlogMetabarAction() {
    _classCallCheck(this, EntryTlogMetabarAction);

    _get(Object.getPrototypeOf(EntryTlogMetabarAction.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      hover: false
    };
  }

  _createClass(EntryTlogMetabarAction, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var iconClasses = (0, _classnames2['default'])('icon', this.props.icon);

      return _react2['default'].createElement(
        'a',
        { href: this.props.url,
          className: 'meta-item__dropdown-item',
          onClick: this.props.onClick,
          onMouseEnter: function () {
            return _this2.setState({ hover: true });
          },
          onMouseLeave: function () {
            return _this2.setState({ hover: false });
          } },
        _react2['default'].createElement('i', { className: iconClasses }),
        this.getTitle()
      );
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      var _props = this.props;
      var title = _props.title;
      var hoverTitle = _props.hoverTitle;

      return this.state.hover && hoverTitle ? hoverTitle : title;
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string,
      title: _react.PropTypes.string.isRequired,
      hoverTitle: _react.PropTypes.string,
      icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.array]).isRequired,
      onClick: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return EntryTlogMetabarAction;
})(_react.Component);

var EntryTlogMetabarFavorite = (function () {
  function EntryTlogMetabarFavorite() {
    _classCallCheck(this, EntryTlogMetabarFavorite);
  }

  _createClass(EntryTlogMetabarFavorite, [{
    key: 'render',
    value: function render() {
      var icon = undefined,
          title = undefined,
          hoverTitle = undefined;

      if (this.props.isFavorited) {
        icon = ['icon--star', 'icon--star-fill'];
        title = i18n.t('entry_in_favorites');
        hoverTitle = i18n.t('remove_from_favorites_entry_item');
      } else {
        icon = ['icon--star'];
        title = i18n.t('add_to_favorites_entry_item');
      }

      return _react2['default'].createElement(EntryTlogMetabarAction, {
        icon: icon,
        title: title,
        hoverTitle: hoverTitle,
        onClick: this.handleClick() });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      return this.props.isFavorited ? this.props.onRemoveFromFavorites : this.props.onAddToFavorites;
    }
  }], [{
    key: 'propTypes',
    value: {
      isFavorited: _react.PropTypes.bool,
      onAddToFavorites: _react.PropTypes.func.isRequired,
      onRemoveFromFavorites: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarFavorite;
})();

var EntryTlogMetabarWatch = (function () {
  function EntryTlogMetabarWatch() {
    _classCallCheck(this, EntryTlogMetabarWatch);
  }

  _createClass(EntryTlogMetabarWatch, [{
    key: 'render',
    value: function render() {
      var title = undefined,
          hoverTitle = undefined;

      if (this.props.isWatching) {
        title = i18n.t('watching_entry_item');
        hoverTitle = i18n.t('stop_watch_entry_item');
      } else {
        title = i18n.t('start_watch_entry_item');
      }

      return _react2['default'].createElement(EntryTlogMetabarAction, {
        icon: 'icon--comments-subscribe',
        title: title,
        hoverTitle: hoverTitle,
        onClick: this.handleClick() });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      return this.props.isWatching ? this.props.onRemoveFromWatching : this.props.onAddToWatching;
    }
  }], [{
    key: 'propTypes',
    value: {
      isWatching: _react.PropTypes.bool,
      onAddToWatching: _react.PropTypes.func.isRequired,
      onRemoveFromWatching: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarWatch;
})();

var EntryTlogMetabarReport = (function () {
  function EntryTlogMetabarReport() {
    _classCallCheck(this, EntryTlogMetabarReport);
  }

  _createClass(EntryTlogMetabarReport, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(EntryTlogMetabarAction, {
        icon: 'icon--exclamation-mark',
        title: i18n.t('report_entry_item'),
        onClick: this.props.onReport });
    }
  }], [{
    key: 'propTypes',
    value: {
      onReport: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarReport;
})();

var EntryTlogMetabarDelete = (function () {
  function EntryTlogMetabarDelete() {
    _classCallCheck(this, EntryTlogMetabarDelete);
  }

  _createClass(EntryTlogMetabarDelete, [{
    key: 'render',
    value: function render() {
      var title = undefined,
          hoverTitle = undefined;

      if (this.props.isWatching) {
        title = i18n.t('watching_entry_item');
        hoverTitle = i18n.t('stop_watch_entry_item');
      } else {
        title = i18n.t('start_watch_entry_item');
      }

      return _react2['default'].createElement(EntryTlogMetabarAction, {
        icon: 'icon--basket',
        title: i18n.t('delete_entry_item'),
        hoverTitle: hoverTitle,
        onClick: this.props.onDelete });
    }
  }], [{
    key: 'propTypes',
    value: {
      onDelete: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarDelete;
})();

module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],138:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogMetabarComments = (function () {
  function EntryTlogMetabarComments() {
    _classCallCheck(this, EntryTlogMetabarComments);
  }

  _createClass(EntryTlogMetabarComments, [{
    key: 'render',
    value: function render() {
      var content = undefined;

      if (this.props.commentator) {
        content = _react2['default'].createElement(
          'a',
          { className: 'meta-item__common meta__link',
            onClick: this.props.onComment },
          i18n.t('entry_meta_comment_link')
        );
      } else {
        content = _react2['default'].createElement(
          'a',
          { href: this.props.url, className: 'meta-item__common meta__link' },
          this.getNumberOfComments()
        );
      }

      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item_comments' },
        _react2['default'].createElement(
          'span',
          { className: 'meta__content' },
          content
        )
      );
    }
  }, {
    key: 'getNumberOfComments',
    value: function getNumberOfComments() {
      if (this.props.commentsCount) {
        return i18n.t('comments_count', { count: this.props.commentsCount });
      } else {
        return i18n.t('no_comments');
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string.isRequired,
      commentator: _react.PropTypes.object,
      commentsCount: _react.PropTypes.number.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarComments;
})();

exports['default'] = EntryTlogMetabarComments;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],139:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogMetabarDate = (function () {
  function EntryTlogMetabarDate() {
    _classCallCheck(this, EntryTlogMetabarDate);
  }

  _createClass(EntryTlogMetabarDate, [{
    key: 'render',
    value: function render() {
      var now = moment(),
          createdAt = moment(this.props.date);

      var date = undefined;
      if (now.diff(createdAt, 'days') < 1) {
        date = createdAt.calendar();
      } else {
        date = createdAt.format(now.year() !== createdAt.year() ? 'D MMMM YYYY' : 'D MMMM');
      }

      return _react2['default'].createElement(
        'span',
        { className: 'meta-item meta-item--date' },
        _react2['default'].createElement(
          'span',
          { className: 'meta-item__content' },
          _react2['default'].createElement(
            'a',
            { href: this.props.url },
            _react2['default'].createElement(
              'span',
              { className: 'meta-item__common' },
              date
            )
          )
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string.isRequired,
      date: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarDate;
})();

exports['default'] = EntryTlogMetabarDate;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],140:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _popupsEntryRepostPopup = require('../../popups/EntryRepostPopup');

var _popupsEntryRepostPopup2 = _interopRequireDefault(_popupsEntryRepostPopup);

var EntryTlogMetabarRepost = (function (_Component) {
  _inherits(EntryTlogMetabarRepost, _Component);

  function EntryTlogMetabarRepost() {
    _classCallCheck(this, EntryTlogMetabarRepost);

    _get(Object.getPrototypeOf(EntryTlogMetabarRepost.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      isPopupOpened: false
    };
  }

  _createClass(EntryTlogMetabarRepost, [{
    key: 'render',
    value: function render() {
      if (this.props.commentator) {
        return _react2['default'].createElement(
          'span',
          { className: 'meta-item meta-item--repost' },
          _react2['default'].createElement(
            'span',
            { ref: 'toggle', className: 'meta-item__content' },
            _react2['default'].createElement(
              'a',
              { onClick: this.togglePopup.bind(this) },
              _react2['default'].createElement(
                'span',
                { className: 'meta-item__common' },
                i18n.t('entry_meta_repost_link')
              )
            )
          ),
          this.state.isPopupOpened && _react2['default'].createElement(_popupsEntryRepostPopup2['default'], {
            entryID: this.props.entryID,
            targetRef: this.refs.toggle,
            isOpened: this.state.isPopupOpened,
            onClose: this.closePopup.bind(this)
          })
        );
      } else {
        return null;
      }
    }
  }, {
    key: 'closePopup',
    value: function closePopup() {
      this.setState({ isPopupOpened: false });
    }
  }, {
    key: 'togglePopup',
    value: function togglePopup() {
      this.setState({ isPopupOpened: !this.state.isPopupOpened });
    }
  }], [{
    key: 'propTypes',
    value: {
      commentator: _react.PropTypes.object,
      entryID: _react.PropTypes.number.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarRepost;
})(_react.Component);

exports['default'] = EntryTlogMetabarRepost;
module.exports = exports['default'];

},{"../../popups/EntryRepostPopup":370,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],141:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryTlogMetabarTags = (function () {
  function EntryTlogMetabarTags() {
    _classCallCheck(this, EntryTlogMetabarTags);
  }

  _createClass(EntryTlogMetabarTags, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "span",
        { className: "meta-item meta-item--tags" },
        _react2["default"].createElement(
          "span",
          { className: "meta-item__content" },
          this.props.tags.map(this.renderTag.bind(this))
        )
      );
    }
  }, {
    key: "renderTag",
    value: function renderTag(tag, idx) {
      var separator = undefined;

      if (idx < this.props.tags.length - 1) {
        separator = _react2["default"].createElement(
          "span",
          { className: "meta-item__common" },
          ", "
        );
      }

      return _react2["default"].createElement(
        "span",
        { key: "tag-" + idx },
        _react2["default"].createElement(
          "a",
          { href: Routes.userTag(this.props.userSlug, tag),
            target: "_blank",
            className: "meta-item__common meta-item__link" },
          "#",
          tag
        ),
        separator
      );
    }
  }], [{
    key: "propTypes",
    value: {
      tags: _react.PropTypes.array.isRequired,
      userSlug: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogMetabarTags;
})();

exports["default"] = EntryTlogMetabarTags;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],142:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogQuoteType = (function () {
  function EntryTlogQuoteType() {
    _classCallCheck(this, EntryTlogQuoteType);
  }

  _createClass(EntryTlogQuoteType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var is_private = _props$entry.is_private;
      var source = _props$entry.source;
      var text = _props$entry.text;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null)
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(
            'blockquote',
            { className: 'blockquote' },
            _react2['default'].createElement(
              'span',
              { className: 'laquo' },
              '«'
            ),
            text,
            _react2['default'].createElement(
              'span',
              { className: 'raquo' },
              '»'
            ),
            source && _react2['default'].createElement(
              'span',
              { className: 'blockquote__caption' },
              '—',
              _react2['default'].createElement(
                'span',
                { className: 'blockquote__source' },
                ' ',
                source
              )
            )
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogQuoteType;
})();

exports['default'] = EntryTlogQuoteType;
module.exports = exports['default'];

},{"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],143:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogSongType = (function () {
  function EntryTlogSongType() {
    _classCallCheck(this, EntryTlogSongType);
  }

  _createClass(EntryTlogSongType, [{
    key: 'render',
    value: function render() {
      var is_private = this.props.entry.is_private;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          this.renderTitle()
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (this.props.entry.title) {
        return _react2['default'].createElement(
          'h1',
          { className: 'post__title' },
          _react2['default'].createElement(
            'a',
            { href: this.props.entry.audio_url, target: '_blank', className: 'post__link' },
            this.props.entry.title
          )
        );
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogSongType;
})();

exports['default'] = EntryTlogSongType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],144:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogTextType = (function () {
  function EntryTlogTextType() {
    _classCallCheck(this, EntryTlogTextType);
  }

  _createClass(EntryTlogTextType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var is_private = _props$entry.is_private;
      var text = _props$entry.text;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          this.renderTitle()
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: text, withHTML: true })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (this.props.entry.title) {
        return _react2['default'].createElement(
          'h1',
          { className: 'post__title' },
          this.props.entry.title
        );
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogTextType;
})();

exports['default'] = EntryTlogTextType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],145:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogUnknownType = (function () {
  function EntryTlogUnknownType() {
    _classCallCheck(this, EntryTlogUnknownType);
  }

  _createClass(EntryTlogUnknownType, [{
    key: 'render',
    value: function render() {
      var is_private = this.props.entry.is_private;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'header',
          { className: 'post__header' },
          this.renderVoting(),
          is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
          this.renderTitle()
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: i18n.t('entry.unknown_type') })
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (this.props.entry.title) {
        return _react2['default'].createElement(
          'h1',
          { className: 'post__title' },
          this.props.title
        );
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogUnknownType;
})();

exports['default'] = EntryTlogUnknownType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],146:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonVoting = require('../../common/Voting');

var _commonVoting2 = _interopRequireDefault(_commonVoting);

var _commonPrivacyBadge = require('../../common/PrivacyBadge');

var _commonPrivacyBadge2 = _interopRequireDefault(_commonPrivacyBadge);

var _sharedReactComponentsCommonText = require('../../../../../shared/react/components/common/Text');

var _sharedReactComponentsCommonText2 = _interopRequireDefault(_sharedReactComponentsCommonText);

var _EntryTlogMetabar = require('./EntryTlogMetabar');

var _EntryTlogMetabar2 = _interopRequireDefault(_EntryTlogMetabar);

var _EntryTlogActions = require('./EntryTlogActions');

var _EntryTlogActions2 = _interopRequireDefault(_EntryTlogActions);

var _EntryTlogComments = require('./EntryTlogComments');

var _EntryTlogComments2 = _interopRequireDefault(_EntryTlogComments);

var EntryTlogVideoType = (function () {
  function EntryTlogVideoType() {
    _classCallCheck(this, EntryTlogVideoType);
  }

  _createClass(EntryTlogVideoType, [{
    key: 'render',
    value: function render() {
      var _props$entry = this.props.entry;
      var iframely = _props$entry.iframely;
      var is_private = _props$entry.is_private;
      var title = _props$entry.title;

      return _react2['default'].createElement(
        'span',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'post__content' },
          _react2['default'].createElement(EmbedComponent, {
            autoplay: false,
            frameWidth: 712,
            frameHeight: 400,
            embedHtml: iframely.html }),
          _react2['default'].createElement(
            'div',
            { className: 'video_comment' },
            this.renderVoting(),
            is_private && _react2['default'].createElement(_commonPrivacyBadge2['default'], null),
            _react2['default'].createElement(_sharedReactComponentsCommonText2['default'], { value: title, withHTML: true })
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'post__meta' },
          _react2['default'].createElement(_EntryTlogMetabar2['default'], _extends({}, this.props, { onComment: this.startComment.bind(this) }))
        ),
        this.renderActions(),
        _react2['default'].createElement(_EntryTlogComments2['default'], _extends({}, this.props, { ref: 'comments' }))
      );
    }
  }, {
    key: 'renderVoting',
    value: function renderVoting() {
      if (this.props.entry.is_voteable) {
        return _react2['default'].createElement(_commonVoting2['default'], { entryID: this.props.entry.id, rating: this.props.entry.rating });
      }
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.hasModeration) {
        return _react2['default'].createElement(_EntryTlogActions2['default'], this.props);
      }
    }
  }, {
    key: 'startComment',
    value: function startComment() {
      this.refs.comments.startComment();
    }
  }], [{
    key: 'propTypes',
    value: {
      entry: _react.PropTypes.object.isRequired,
      commentator: _react.PropTypes.object,
      hasModeration: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogVideoType;
})();

exports['default'] = EntryTlogVideoType;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Text":538,"../../common/PrivacyBadge":259,"../../common/Voting":273,"./EntryTlogActions":120,"./EntryTlogComments":131,"./EntryTlogMetabar":136,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],147:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _setQueryString = require('set-query-string');

var _setQueryString2 = _interopRequireDefault(_setQueryString);

var _servicesCustomWaypointService = require('../../services/CustomWaypointService');

var _servicesCustomWaypointService2 = _interopRequireDefault(_servicesCustomWaypointService);

var _EntryEntryBrickEntryBrick = require('../Entry/EntryBrick/EntryBrick');

var _EntryEntryBrickEntryBrick2 = _interopRequireDefault(_EntryEntryBrickEntryBrick);

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var _reactMasonryMixin = require('react-masonry-mixin');

var _reactMasonryMixin2 = _interopRequireDefault(_reactMasonryMixin);

var masonryOptions = {
  itemSelector: '.brick',
  transitionDuration: 0,
  isFitWidth: true,
  gutter: 20,
  stamp: '.navs-line'
};

var EntryBricks = _react2['default'].createClass({
  displayName: 'EntryBricks',

  mixins: [(0, _reactMasonryMixin2['default'])('masonryContainer', masonryOptions)],

  propTypes: {
    canLoad: _react.PropTypes.bool.isRequired,
    entries: _react.PropTypes.array.isRequired,
    host_tlog_id: _react.PropTypes.number,
    loading: _react.PropTypes.bool.isRequired,
    onLoadMoreEntries: _react.PropTypes.func.isRequired
  },

  componentDidMount: function componentDidMount() {
    if (this.masonry) {
      this.waypointService = (0, _servicesCustomWaypointService2['default'])('.brick', { cb: this.onWaypointTrigger.bind(this) });
      this.waypointService.attach();
      this.waypointRefresh = _lodash2['default'].debounce(this.waypointService.refresh, 100);
      this.masonry.on('layoutComplete', _lodash2['default'].debounce(this.waypointService.refresh, 100));
    }
    this.onResize = _lodash2['default'].debounce(this.restamp, 100);
    window.addEventListener('resize', this.onResize, false);
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.masonry && this.waypointService) {
      this.waypointService.detach();
      this.masonry.off('layoutComplete');
    }
    window.removeEventListener('resize', this.onRsize, false);
  },

  restamp: function restamp() {
    this.forceUpdate();
  },

  onWaypointTrigger: function onWaypointTrigger(data) {
    (0, _setQueryString2['default'])({ since_entry_id: data.id });
  },

  render: function render() {
    var _props = this.props;
    var canLoad = _props.canLoad;
    var children = _props.children;
    var entries = _props.entries;
    var host_tlog_id = _props.host_tlog_id;
    var loading = _props.loading;
    var onLoadMoreEntries = _props.onLoadMoreEntries;

    return _react2['default'].createElement(
      'div',
      { className: 'bricks-wrapper' },
      _react2['default'].createElement(
        _commonInfiniteScrollIndex2['default'],
        {
          canLoad: canLoad,
          loading: loading,
          onLoad: onLoadMoreEntries
        },
        _react2['default'].createElement(
          'section',
          { className: 'bricks', ref: 'masonryContainer' },
          children,
          entries.map(function (item) {
            return _react2['default'].createElement(_EntryEntryBrickEntryBrick2['default'], {
              entry: item.entry,
              host_tlog_id: host_tlog_id,
              key: item.entry.id,
              moderation: item.moderation
            });
          })
        )
      )
    );
  }
});

exports['default'] = EntryBricks;
module.exports = exports['default'];

},{"../../services/CustomWaypointService":501,"../Entry/EntryBrick/EntryBrick":104,"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574,"lodash":"lodash","react":"react","react-masonry-mixin":663,"set-query-string":"set-query-string"}],148:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesEntriesStore = require('../../stores/EntriesStore');

var _storesEntriesStore2 = _interopRequireDefault(_storesEntriesStore);

var _actionsEntriesActions = require('../../actions/EntriesActions');

var _actionsEntriesActions2 = _interopRequireDefault(_actionsEntriesActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _EntryBricks = require('./EntryBricks');

var _EntryBricks2 = _interopRequireDefault(_EntryBricks);

var EntryBricksContainer = (function (_Component) {
  _inherits(EntryBricksContainer, _Component);

  function EntryBricksContainer() {
    _classCallCheck(this, EntryBricksContainer);

    _get(Object.getPrototypeOf(EntryBricksContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(EntryBricksContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _actionsEntriesActions2['default'].init(this.props);
    }
  }, {
    key: 'loadMoreEntries',
    value: function loadMoreEntries() {
      _actionsEntriesActions2['default'].loadMoreEntries();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var entries = _props.entries;
      var hasMore = _props.hasMore;
      var host_tlog_id = _props.host_tlog_id;
      var isLoading = _props.isLoading;

      return _react2['default'].createElement(
        _EntryBricks2['default'],
        {
          canLoad: !isLoading && hasMore,
          entries: entries,
          host_tlog_id: host_tlog_id,
          loading: isLoading,
          onLoadMoreEntries: this.loadMoreEntries
        },
        children
      );
    }
  }]);

  return EntryBricksContainer;
})(_react.Component);

EntryBricksContainer.propTypes = {
  entries_info: _react.PropTypes.shape({
    items: _react.PropTypes.array.isRequired,
    limit: _react.PropTypes.number.isRequired,
    has_more: _react.PropTypes.bool,
    next_page: _react.PropTypes.number,
    next_since_entry_id: _react.PropTypes.number
  }).isRequired,
  host_tlog_id: _react.PropTypes.number,
  loadUrl: _react.PropTypes.string,
  nextPageFieldName: _react.PropTypes.oneOf(['next_page', 'next_since_entry_id']).isRequired,
  nextPageParamName: _react.PropTypes.oneOf(['page', 'since_entry_id']).isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(EntryBricksContainer, [_storesEntriesStore2['default']], function () {
  return {
    entries: _storesEntriesStore2['default'].getEntries(),
    hasMore: _storesEntriesStore2['default'].hasMore(),
    isLoading: _storesEntriesStore2['default'].isLoading()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/EntriesActions":6,"../../stores/EntriesStore":512,"./EntryBricks":147,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],149:[function(require,module,exports){
/*global $ */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _setQueryString = require('set-query-string');

var _setQueryString2 = _interopRequireDefault(_setQueryString);

var _EntryEntryTlogEntryTlog = require('../Entry/EntryTlog/EntryTlog');

var _EntryEntryTlogEntryTlog2 = _interopRequireDefault(_EntryEntryTlogEntryTlog);

var _servicesCustomWaypointService = require('../../services/CustomWaypointService');

var _servicesCustomWaypointService2 = _interopRequireDefault(_servicesCustomWaypointService);

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var EntryTlogs = (function () {
  function EntryTlogs() {
    _classCallCheck(this, EntryTlogs);
  }

  _createClass(EntryTlogs, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.waypointService = (0, _servicesCustomWaypointService2['default'])('.post', { cb: this.onWaypointTrigger.bind(this) });
      this.waypointService.attach();
      this.waypointRefresh = _lodash2['default'].debounce(this.waypointService.refresh, 100);
      $(document).on('domChanged', this.waypointRefresh);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.waypointService) {
        this.waypointService.detach();
        $(document).off('domChanged', this.waypointRefresh);
      }
    }
  }, {
    key: 'onWaypointTrigger',
    value: function onWaypointTrigger(data) {
      $(document).trigger('waypoint.trigger', data); //trigger calendar
      (0, _setQueryString2['default'])({ since_entry_id: data.id });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var canLoad = _props.canLoad;
      var entries = _props.entries;
      var host_tlog_id = _props.host_tlog_id;
      var loading = _props.loading;
      var onDelete = _props.onDelete;
      var onLoadMoreEntries = _props.onLoadMoreEntries;

      var entryList = entries.map(function (item) {
        return _react2['default'].createElement(_EntryEntryTlogEntryTlog2['default'], {
          commentator: item.commentator,
          entry: item.entry,
          hideCommentForm: entries.length > 1,
          host_tlog_id: host_tlog_id,
          key: item.entry.id,
          moderation: item.moderation,
          onDelete: onDelete
        });
      });

      return _react2['default'].createElement(
        _commonInfiniteScrollIndex2['default'],
        {
          canLoad: canLoad,
          loading: loading,
          onLoad: onLoadMoreEntries
        },
        _react2['default'].createElement(
          'section',
          { className: 'posts' },
          entryList
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      canLoad: _react.PropTypes.bool.isRequired,
      entries: _react.PropTypes.array.isRequired,
      host_tlog_id: _react.PropTypes.number,
      loading: _react.PropTypes.bool.isRequired,
      onDelete: _react.PropTypes.func.isRequired,
      onLoadMoreEntries: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryTlogs;
})();

exports['default'] = EntryTlogs;
module.exports = exports['default'];

},{"../../services/CustomWaypointService":501,"../Entry/EntryTlog/EntryTlog":119,"../common/infiniteScroll/index":275,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"lodash":"lodash","react":"react","set-query-string":"set-query-string"}],150:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesEntriesStore = require('../../stores/EntriesStore');

var _storesEntriesStore2 = _interopRequireDefault(_storesEntriesStore);

var _actionsEntriesActions = require('../../actions/EntriesActions');

var _actionsEntriesActions2 = _interopRequireDefault(_actionsEntriesActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _EntryTlogs = require('./EntryTlogs');

var _EntryTlogs2 = _interopRequireDefault(_EntryTlogs);

var EntryTlogsContainer = (function (_Component) {
  _inherits(EntryTlogsContainer, _Component);

  function EntryTlogsContainer() {
    _classCallCheck(this, EntryTlogsContainer);

    _get(Object.getPrototypeOf(EntryTlogsContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(EntryTlogsContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _actionsEntriesActions2['default'].init(this.props);
    }
  }, {
    key: 'loadMoreEntries',
    value: function loadMoreEntries() {
      _actionsEntriesActions2['default'].loadMoreEntries();
    }
  }, {
    key: 'deleteEntry',
    value: function deleteEntry(entryId) {
      _actionsEntriesActions2['default'].deleteEntry(entryId);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var entries = _props.entries;
      var hasMore = _props.hasMore;
      var host_tlog_id = _props.host_tlog_id;
      var isLoading = _props.isLoading;

      return _react2['default'].createElement(
        'div',
        null,
        children,
        _react2['default'].createElement(_EntryTlogs2['default'], {
          canLoad: !isLoading && hasMore,
          entries: entries,
          host_tlog_id: host_tlog_id,
          loading: isLoading,
          onDelete: this.deleteEntry,
          onLoadMoreEntries: this.loadMoreEntries
        })
      );
    }
  }]);

  return EntryTlogsContainer;
})(_react.Component);

EntryTlogsContainer.propTypes = {
  entries_info: _react.PropTypes.shape({
    items: _react.PropTypes.array.isRequired,
    limit: _react.PropTypes.number.isRequired,
    has_more: _react.PropTypes.bool,
    next_page: _react.PropTypes.number,
    next_since_entry_id: _react.PropTypes.number
  }).isRequired,
  host_tlog_id: _react.PropTypes.number,
  loadUrl: _react.PropTypes.string.isRequired,
  nextPageFieldName: _react.PropTypes.oneOf(['next_page', 'next_since_entry_id']).isRequired,
  nextPageParamName: _react.PropTypes.oneOf(['page', 'since_entry_id']).isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(EntryTlogsContainer, [_storesEntriesStore2['default']], function () {
  return {
    entries: _storesEntriesStore2['default'].getEntries(),
    hasMore: _storesEntriesStore2['default'].hasMore(),
    isLoading: _storesEntriesStore2['default'].isLoading()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/EntriesActions":6,"../../stores/EntriesStore":512,"./EntryTlogs":149,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],151:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsEntry = require('../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var _FeedBricks = require('./FeedBricks');

var _FeedBricks2 = _interopRequireDefault(_FeedBricks);

var _FeedTlog = require('./FeedTlog');

var _FeedTlog2 = _interopRequireDefault(_FeedTlog);

var _URIjs = require('URIjs');

var _URIjs2 = _interopRequireDefault(_URIjs);

var Feed = React.createClass({
  displayName: 'Feed',

  propTypes: {
    style: React.PropTypes.string.isRequired,
    feedUrl: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      feedUrl: window.location.href
      // feedUrl: 'http://taaasty.com/best'
    };
  },

  getInitialState: function getInitialState() {
    return {
      html: '',
      loading: false,
      everythingLoaded: false
    };
  },

  render: function render() {
    switch (this.props.style) {
      case 'tlog':
        return React.createElement(_FeedTlog2['default'], {
          html: this.state.html,
          loading: this.state.loading,
          canLoad: !this.state.loading && !this.state.everythingLoaded,
          onLoadNextEntries: this.loadNextEntries });
        break;
      case 'feed':
        return React.createElement(_FeedBricks2['default'], {
          html: this.state.html,
          loading: this.state.loading,
          canLoad: !this.state.loading && !this.state.everythingLoaded,
          onLoadNextEntries: this.loadNextEntries });
        break;
      default:
        return null;
    }
  },

  loadEntries: function loadEntries(entryID) {
    var _this = this;

    var _props = this.props;
    var feedUrl = _props.feedUrl;
    var style = _props.style;

    var feedUrlWithParams = (0, _URIjs2['default'])(feedUrl).setQuery({ style: style, since_entry_id: entryID });

    if (this.state.loading) {
      return;
    }
    this.setState({ loading: true });

    _actionsEntry2['default'].loadHtml(feedUrlWithParams).then(function (html) {
      html = html.trim();

      if (html === '') {
        _this.setState({ everythingLoaded: true });

        if (_this.state.html === '') {
          _this.setState({ html: i18n.t('search_results_empty') });
        }

        return;
      }

      var newHtml = _this.state.html ? _this.state.html + html : html;
      _this.setState({ html: newHtml });

      // Mount new components from html
      $(document).trigger('page:change');
    }).fail(function () {
      return _this.setState({ everythingLoaded: true });
    }).always(function () {
      return _this.setState({ loading: false });
    });
  },

  loadNextEntries: function loadNextEntries(lastEntryID) {
    this.loadEntries(lastEntryID);
  }

});

exports['default'] = Feed;
module.exports = exports['default'];

},{"../../actions/Entry":7,"./FeedBricks":152,"./FeedTlog":153,"URIjs":"URIjs","babel-runtime/helpers/interop-require-default":574}],152:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _masonryLayout = require('masonry-layout');

var _masonryLayout2 = _interopRequireDefault(_masonryLayout);

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var FeedBricks = React.createClass({
  displayName: 'FeedBricks',

  propTypes: {
    html: React.PropTypes.string.isRequired,
    loading: React.PropTypes.bool.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadNextEntries: React.PropTypes.func.isRequired
  },

  componentDidMount: function componentDidMount() {
    this.initGridManager();
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.feedHtml !== prevProps.feedHtml) {
      this.msnry.reloadItems();
      this.msnry.layout();
    }
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'bricks-wrapper' },
      React.createElement(
        _commonInfiniteScrollIndex2['default'],
        {
          loading: this.props.loading,
          canLoad: this.props.canLoad,
          onLoad: this.handleScrollLoad,
          onAfterLoad: this.initGridManager },
        React.createElement('section', {
          ref: 'container',
          className: 'bricks',
          dangerouslySetInnerHTML: { __html: this.props.html || '' } })
      )
    );
  },

  initGridManager: function initGridManager() {
    var container = this.refs.container.getDOMNode();
    this.msnry = new _masonryLayout2['default'](container, {
      itemSelector: '.brick',
      transitionDuration: '0.4s',
      isFitWidth: true,
      gutter: 20,
      hiddenStyle: {
        opacity: 0,
        transform: 'opacity(0.001)'
      },
      visibleStyle: {
        opacity: 1,
        transform: 'opacity(1)'
      }
    });
  },

  handleScrollLoad: function handleScrollLoad() {
    var $container = $(this.refs.container.getDOMNode());
    var lastEntryID = $container.children().last().data('id');

    this.props.onLoadNextEntries(lastEntryID);
  }
});

exports['default'] = FeedBricks;
module.exports = exports['default'];

},{"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574,"masonry-layout":"masonry-layout"}],153:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var FeedTlog = React.createClass({
  displayName: "FeedTlog",

  propTypes: {
    html: React.PropTypes.string.isRequired,
    loading: React.PropTypes.bool.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadNextEntries: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "content-area" },
      React.createElement("div", { className: "content-area__bg" }),
      React.createElement(
        "div",
        { className: "content-area__inner" },
        React.createElement(
          _commonInfiniteScrollIndex2["default"],
          {
            loading: this.props.loading,
            canLoad: this.props.canLoad,
            onLoad: this.handleScrollLoad },
          React.createElement("section", {
            ref: "container",
            className: "posts",
            dangerouslySetInnerHTML: { __html: this.props.html || '' } })
        )
      )
    );
  },

  handleScrollLoad: function handleScrollLoad() {
    var $container = $(this.refs.container.getDOMNode());
    var lastEntryID = $container.children().last().data('id');

    this.props.onLoadNextEntries(lastEntryID);
  }
});

exports["default"] = FeedTlog;
module.exports = exports["default"];

},{"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574}],154:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var NavFilters = (function () {
  function NavFilters() {
    _classCallCheck(this, NavFilters);
  }

  _createClass(NavFilters, [{
    key: 'render',
    value: function render() {
      var _props$navFilters = this.props.navFilters;
      var active = _props$navFilters.active;
      var items = _props$navFilters.items;

      return _react2['default'].createElement(
        'nav',
        { className: 'filter-nav' },
        _react2['default'].createElement(
          'ul',
          { className: 'filter-nav__list' },
          items.map(function (_ref, idx) {
            var href = _ref.href;
            var title = _ref.title;
            return _react2['default'].createElement(
              'li',
              { className: (0, _classnames2['default'])('filter-nav__item', { 'state--active': idx === active }) },
              _react2['default'].createElement(
                'a',
                {
                  className: 'filter-nav__link',
                  href: href,
                  title: title
                },
                title
              )
            );
          })
        )
      );
    }
  }]);

  return NavFilters;
})();

NavFilters.propTypes = {
  navFilters: _react.PropTypes.shape({
    active: _react.PropTypes.number,
    items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
      href: _react.PropTypes.string.isRequired,
      title: _react.PropTypes.string.isRequired
    })).isRequired
  }).isRequired
};

exports['default'] = NavFilters;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],155:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var NavViewMode = (function () {
  function NavViewMode() {
    _classCallCheck(this, NavViewMode);
  }

  _createClass(NavViewMode, [{
    key: 'render',
    value: function render() {
      var viewMode = this.props.viewMode;

      var feedClasses = (0, _classnames2['default'])({
        'nav-view-mode__item': true,
        'state--active': viewMode === 'feed'
      });
      var tlogClasses = (0, _classnames2['default'])({
        'nav-view-mode__item': true,
        'state--active': viewMode === 'tlog'
      });

      return _react2['default'].createElement(
        'nav',
        { className: 'nav-view-mode' },
        _react2['default'].createElement(
          'ul',
          { className: 'nav-view-mode__list' },
          _react2['default'].createElement(
            'li',
            { className: feedClasses },
            _react2['default'].createElement(
              'a',
              {
                className: 'nav-view-mode__link',
                href: '?style=feed',
                title: i18n.t('filters.show_feed')
              },
              _react2['default'].createElement('i', { className: 'icon icon--tiles' })
            )
          ),
          _react2['default'].createElement(
            'li',
            { className: tlogClasses },
            _react2['default'].createElement(
              'a',
              {
                className: 'nav-view-mode__link',
                href: '?style=tlog',
                title: i18n.t('filters.view_tlog')
              },
              _react2['default'].createElement('i', { className: 'icon icon--menu' })
            )
          )
        )
      );
    }
  }]);

  return NavViewMode;
})();

NavViewMode.propTypes = {
  viewMode: _react.PropTypes.oneOf(['tlog', 'feed']).isRequired
};

exports['default'] = NavViewMode;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],156:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _NavFilters = require('./NavFilters');

var _NavFilters2 = _interopRequireDefault(_NavFilters);

var _NavViewMode = require('./NavViewMode');

var _NavViewMode2 = _interopRequireDefault(_NavViewMode);

var FeedFilters = (function () {
  function FeedFilters() {
    _classCallCheck(this, FeedFilters);
  }

  _createClass(FeedFilters, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var navFilters = _props.navFilters;
      var navViewMode = _props.navViewMode;
      var viewMode = _props.viewMode;

      var justify = !!(navFilters.items.length && navViewMode);
      var navClasses = (0, _classnames2['default'])({
        'navs-line': true,
        'navs-centered': !justify,
        'navs-justify': justify
      });

      return _react2['default'].createElement(
        'div',
        { className: navClasses },
        navFilters.items.length > 0 && _react2['default'].createElement(_NavFilters2['default'], { navFilters: navFilters }),
        ' ',
        justify && _react2['default'].createElement(
          'div',
          null,
          children
        ),
        navViewMode && _react2['default'].createElement(_NavViewMode2['default'], { viewMode: viewMode })
      );
    }
  }]);

  return FeedFilters;
})();

FeedFilters.propTypes = {
  navFilters: _react.PropTypes.object.isRequired,
  navViewMode: _react.PropTypes.bool.isRequired,
  viewMode: _react.PropTypes.oneOf(['tlog', 'feed']).isRequired
};

exports['default'] = FeedFilters;
module.exports = exports['default'];

},{"./NavFilters":154,"./NavViewMode":155,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],157:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _actionsFeedsUpdateActions = require('../../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _commonUnreadLoadButtonContainer = require('../common/UnreadLoadButtonContainer');

var _commonUnreadLoadButtonContainer2 = _interopRequireDefault(_commonUnreadLoadButtonContainer);

var AnonymousLoadButtonContainer = (function (_Component) {
  _inherits(AnonymousLoadButtonContainer, _Component);

  function AnonymousLoadButtonContainer() {
    _classCallCheck(this, AnonymousLoadButtonContainer);

    _get(Object.getPrototypeOf(AnonymousLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AnonymousLoadButtonContainer, [{
    key: 'onLoad',
    value: function onLoad(promise) {
      promise && promise.then(FeedsUpdateActions.resetAnonymousEntries);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var limit = _props.limit;
      var unreadAnonymousCount = _props.unreadAnonymousCount;

      return _react2['default'].createElement(_commonUnreadLoadButtonContainer2['default'], {
        count: unreadAnonymousCount,
        href: _sharedRoutesRoutes2['default'].live_anonymous_feed_path(),
        limit: limit,
        onLoad: this.onLoad
      });
    }
  }]);

  return AnonymousLoadButtonContainer;
})(_react.Component);

AnonymousLoadButtonContainer.propTypes = {
  limit: _react.PropTypes.number,
  unreadAnonymousCount: _react.PropTypes.number.isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(AnonymousLoadButtonContainer, [_storesFeedsStore2['default']], function () {
  return {
    unreadAnonymousCount: _storesFeedsStore2['default'].getUnreadAnonymousCount()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/FeedsUpdateActions":8,"../../stores/FeedsStore":513,"../common/UnreadLoadButtonContainer":272,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],158:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _actionsFeedsUpdateActions = require('../../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _commonUnreadLoadButtonContainer = require('../common/UnreadLoadButtonContainer');

var _commonUnreadLoadButtonContainer2 = _interopRequireDefault(_commonUnreadLoadButtonContainer);

var BestLoadButtonContainer = (function (_Component) {
  _inherits(BestLoadButtonContainer, _Component);

  function BestLoadButtonContainer() {
    _classCallCheck(this, BestLoadButtonContainer);

    _get(Object.getPrototypeOf(BestLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BestLoadButtonContainer, [{
    key: 'onLoad',
    value: function onLoad(promise) {
      promise && promise.then(FeedsUpdateActions.resetBestEntries);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var limit = _props.limit;
      var unreadBestCount = _props.unreadBestCount;

      return _react2['default'].createElement(_commonUnreadLoadButtonContainer2['default'], {
        count: unreadBestCount,
        href: _sharedRoutesRoutes2['default'].best_feed_path(),
        limit: limit,
        onLoad: this.onLoad
      });
    }
  }]);

  return BestLoadButtonContainer;
})(_react.Component);

BestLoadButtonContainer.propTypes = {
  limit: _react.PropTypes.number,
  unreadBestCount: _react.PropTypes.number.isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(BestLoadButtonContainer, [_storesFeedsStore2['default']], function () {
  return {
    unreadBestCount: _storesFeedsStore2['default'].getUnreadBestCount()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/FeedsUpdateActions":8,"../../stores/FeedsStore":513,"../common/UnreadLoadButtonContainer":272,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],159:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LiveLoadButtonContainer = require('./LiveLoadButtonContainer');

var _LiveLoadButtonContainer2 = _interopRequireDefault(_LiveLoadButtonContainer);

var _BestLoadButtonContainer = require('./BestLoadButtonContainer');

var _BestLoadButtonContainer2 = _interopRequireDefault(_BestLoadButtonContainer);

var _FriendsLoadButtonContainer = require('./FriendsLoadButtonContainer');

var _FriendsLoadButtonContainer2 = _interopRequireDefault(_FriendsLoadButtonContainer);

var _AnonymousLoadButtonContainer = require('./AnonymousLoadButtonContainer');

var _AnonymousLoadButtonContainer2 = _interopRequireDefault(_AnonymousLoadButtonContainer);

var _LiveFlowLoadButtonContainer = require('./LiveFlowLoadButtonContainer');

var _LiveFlowLoadButtonContainer2 = _interopRequireDefault(_LiveFlowLoadButtonContainer);

var _EntryBricksEntryBricksContainer = require('../EntryBricks/EntryBricksContainer');

var _EntryBricksEntryBricksContainer2 = _interopRequireDefault(_EntryBricksEntryBricksContainer);

var _EntryTlogsEntryTlogsContainer = require('../EntryTlogs/EntryTlogsContainer');

var _EntryTlogsEntryTlogsContainer2 = _interopRequireDefault(_EntryTlogsEntryTlogsContainer);

var _FeedFilters = require('../FeedFilters');

var _FeedFilters2 = _interopRequireDefault(_FeedFilters);

var LoadButtons = {
  'live': _LiveLoadButtonContainer2['default'],
  'best': _BestLoadButtonContainer2['default'],
  'friends': _FriendsLoadButtonContainer2['default'],
  'anonymous': _AnonymousLoadButtonContainer2['default'],
  'live_flow_entries': _LiveFlowLoadButtonContainer2['default']
};

var FeedPageBody = (function (_Component) {
  _inherits(FeedPageBody, _Component);

  function FeedPageBody() {
    _classCallCheck(this, FeedPageBody);

    _get(Object.getPrototypeOf(FeedPageBody.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(FeedPageBody, [{
    key: 'renderFilters',
    value: function renderFilters() {
      var _props = this.props;
      var limit = _props.entries_info.limit;
      var feedType = _props.feedType;
      var locale = _props.locale;
      var navFilters = _props.navFilters;
      var navViewMode = _props.navViewMode;
      var viewMode = _props.viewMode;

      if (!(navFilters.items.length || navViewMode)) {
        return null;
      }

      var LoadButtonContainer = LoadButtons[feedType];

      return _react2['default'].createElement(
        _FeedFilters2['default'],
        {
          navFilters: navFilters,
          navViewMode: navViewMode,
          viewMode: viewMode
        },
        LoadButtonContainer && _react2['default'].createElement(LoadButtonContainer, { limit: limit, locale: locale })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var viewMode = this.props.viewMode;

      return _react2['default'].createElement(
        'div',
        { className: 'page-body' },
        _react2['default'].createElement(
          'div',
          { className: 'layout-outer' },
          viewMode === 'feed' ? _react2['default'].createElement(
            _EntryBricksEntryBricksContainer2['default'],
            this.props,
            this.renderFilters()
          ) : _react2['default'].createElement(
            'div',
            null,
            this.renderFilters(),
            _react2['default'].createElement(
              'div',
              { className: 'content-area' },
              _react2['default'].createElement('div', { className: 'content-area__bg' }),
              _react2['default'].createElement(
                'div',
                { className: 'content-area__inner' },
                _react2['default'].createElement(_EntryTlogsEntryTlogsContainer2['default'], this.props)
              )
            )
          )
        )
      );
    }
  }]);

  return FeedPageBody;
})(_react.Component);

FeedPageBody.propTypes = {
  entries_info: _react.PropTypes.object,
  feedType: _react.PropTypes.oneOf(['live', 'best', 'friends', 'anonymous', 'live_flow_entries']).isRequired,
  locale: _react.PropTypes.string,
  navFilters: _react.PropTypes.object,
  navViewMode: _react.PropTypes.bool.isRequired,
  viewMode: _react.PropTypes.oneOf(['feed', 'tlog']).isRequired
};

FeedPageBody.defaultProps = {
  entries_info: {},
  navFilters: { active: null, items: [] },
  navViewMode: true,
  viewMode: 'tlog'
};

exports['default'] = FeedPageBody;
module.exports = exports['default'];

},{"../EntryBricks/EntryBricksContainer":148,"../EntryTlogs/EntryTlogsContainer":150,"../FeedFilters":156,"./AnonymousLoadButtonContainer":157,"./BestLoadButtonContainer":158,"./FriendsLoadButtonContainer":160,"./LiveFlowLoadButtonContainer":161,"./LiveLoadButtonContainer":162,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],160:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _actionsFeedsUpdateActions = require('../../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _commonUnreadLoadButtonContainer = require('../common/UnreadLoadButtonContainer');

var _commonUnreadLoadButtonContainer2 = _interopRequireDefault(_commonUnreadLoadButtonContainer);

var FriendsLoadButtonContainer = (function (_Component) {
  _inherits(FriendsLoadButtonContainer, _Component);

  function FriendsLoadButtonContainer() {
    _classCallCheck(this, FriendsLoadButtonContainer);

    _get(Object.getPrototypeOf(FriendsLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(FriendsLoadButtonContainer, [{
    key: 'onLoad',
    value: function onLoad(promise) {
      promise && promise.then(FeedsUpdateActions.resetFriendsEntries);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var limit = _props.limit;
      var unreadFriendsCount = _props.unreadFriendsCount;

      return _react2['default'].createElement(_commonUnreadLoadButtonContainer2['default'], {
        count: unreadFriendsCount,
        href: _sharedRoutesRoutes2['default'].friends_feed_path(),
        limit: limit,
        onLoad: this.onLoad
      });
    }
  }]);

  return FriendsLoadButtonContainer;
})(_react.Component);

FriendsLoadButtonContainer.propTypes = {
  limit: _react.PropTypes.number,
  unreadFriendsCount: _react.PropTypes.number.isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(FriendsLoadButtonContainer, [_storesFeedsStore2['default']], function () {
  return {
    unreadFriendsCount: _storesFeedsStore2['default'].getUnreadFriendsCount()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/FeedsUpdateActions":8,"../../stores/FeedsStore":513,"../common/UnreadLoadButtonContainer":272,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],161:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _actionsFeedsUpdateActions = require('../../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _commonUnreadLoadButtonContainer = require('../common/UnreadLoadButtonContainer');

var _commonUnreadLoadButtonContainer2 = _interopRequireDefault(_commonUnreadLoadButtonContainer);

var LiveFlowLoadButtonContainer = (function (_Component) {
  _inherits(LiveFlowLoadButtonContainer, _Component);

  function LiveFlowLoadButtonContainer() {
    _classCallCheck(this, LiveFlowLoadButtonContainer);

    _get(Object.getPrototypeOf(LiveFlowLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LiveFlowLoadButtonContainer, [{
    key: 'onLoad',
    value: function onLoad(promise) {
      promise && promise.then(FeedsUpdateActions.resetLiveFlowEntries);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var limit = _props.limit;
      var unreadLiveFlowCount = _props.unreadLiveFlowCount;

      return _react2['default'].createElement(_commonUnreadLoadButtonContainer2['default'], {
        count: unreadLiveFlowCount,
        href: _sharedRoutesRoutes2['default'].live_flows_feed_path(),
        limit: limit,
        onLoad: this.onLoad
      });
    }
  }]);

  return LiveFlowLoadButtonContainer;
})(_react.Component);

LiveFlowLoadButtonContainer.propTypes = {
  limit: _react.PropTypes.number,
  unreadLiveFlowCount: _react.PropTypes.number.isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(LiveFlowLoadButtonContainer, [_storesFeedsStore2['default']], function () {
  return {
    unreadLiveFlowCount: _storesFeedsStore2['default'].getUnreadLiveFlowCount()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/FeedsUpdateActions":8,"../../stores/FeedsStore":513,"../common/UnreadLoadButtonContainer":272,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],162:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _actionsFeedsUpdateActions = require('../../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _commonUnreadLoadButtonContainer = require('../common/UnreadLoadButtonContainer');

var _commonUnreadLoadButtonContainer2 = _interopRequireDefault(_commonUnreadLoadButtonContainer);

var LiveLoadButtonContainer = (function (_Component) {
  _inherits(LiveLoadButtonContainer, _Component);

  function LiveLoadButtonContainer() {
    _classCallCheck(this, LiveLoadButtonContainer);

    _get(Object.getPrototypeOf(LiveLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LiveLoadButtonContainer, [{
    key: 'onLoad',
    value: function onLoad(promise) {
      promise && promise.then(FeedsUpdateActions.resetLiveEntries);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var limit = _props.limit;
      var unreadLiveCount = _props.unreadLiveCount;

      return _react2['default'].createElement(_commonUnreadLoadButtonContainer2['default'], {
        count: unreadLiveCount,
        href: _sharedRoutesRoutes2['default'].live_feed_path(),
        limit: limit,
        onLoad: this.onLoad
      });
    }
  }]);

  return LiveLoadButtonContainer;
})(_react.Component);

LiveLoadButtonContainer.propTypes = {
  limit: _react.PropTypes.number,
  unreadLiveCount: _react.PropTypes.number.isRequired
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(LiveLoadButtonContainer, [_storesFeedsStore2['default']], function () {
  return {
    unreadLiveCount: _storesFeedsStore2['default'].getUnreadLiveCount()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../../../shared/routes/routes":558,"../../actions/FeedsUpdateActions":8,"../../stores/FeedsStore":513,"../common/UnreadLoadButtonContainer":272,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],163:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _commonTooltip = require('../common/Tooltip');

var _commonTooltip2 = _interopRequireDefault(_commonTooltip);

var _commonRelationButtonFollowButton = require('../common/RelationButton/FollowButton');

var _commonRelationButtonFollowButton2 = _interopRequireDefault(_commonRelationButtonFollowButton);

var _FlowBrickAvatar = require('./FlowBrickAvatar');

var _FlowBrickAvatar2 = _interopRequireDefault(_FlowBrickAvatar);

var _commonRelationButtonConstants = require('../common/RelationButton/constants');

var FlowBrick = _react2['default'].createClass({
  displayName: 'FlowBrick',

  propTypes: {
    flow: _react.PropTypes.object.isRequired,
    relationship: _react.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      relState: this.props.relationship ? this.props.relationship.state : null
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return this.state.relState != nextState.relState;
  },

  render: function render() {
    var brickClasses = (0, _classnames2['default'])('brick', 'brick--flow', {
      '__subscribed': this.state.relState === 'friend'
    });

    return _react2['default'].createElement(
      'article',
      { className: brickClasses },
      _react2['default'].createElement(
        'a',
        { href: this.props.flow.tlog_url },
        _react2['default'].createElement(
          'div',
          { className: 'brick__media' },
          this.renderFollowButton(),
          _react2['default'].createElement(_FlowBrickAvatar2['default'], { flowpic: this.props.flow.flowpic })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'brick__body' },
          _react2['default'].createElement(
            'h3',
            { className: 'brick__title' },
            this.props.flow.name
          ),
          _react2['default'].createElement(
            'p',
            { className: 'brick__caption' },
            this.props.flow.title
          ),
          _react2['default'].createElement(
            'div',
            { className: 'brick__data' },
            _react2['default'].createElement(
              'div',
              { className: 'brick__data-item' },
              _react2['default'].createElement(
                _commonTooltip2['default'],
                { title: i18n.t('flow_brick.followers_count_tooltip') },
                _react2['default'].createElement('i', { className: 'icon icon--friends' }),
                _react2['default'].createElement(
                  'span',
                  null,
                  this.props.flow.followers_count
                )
              )
            ),
            _react2['default'].createElement(
              'div',
              { className: 'brick__data-item' },
              _react2['default'].createElement(
                _commonTooltip2['default'],
                { title: i18n.t('flow_brick.entries_count_tooltip') },
                _react2['default'].createElement('i', { className: 'icon icon--text-circle' }),
                _react2['default'].createElement(
                  'span',
                  null,
                  this.props.flow.public_tlog_entries_count
                )
              )
            )
          )
        )
      )
    );
  },

  renderFollowButton: function renderFollowButton() {
    if (this.state.relState && this.state.relState === _commonRelationButtonConstants.REL_NONE_STATE || this.state.relState === _commonRelationButtonConstants.REL_GUESSED_STATE) {
      return _react2['default'].createElement(_commonRelationButtonFollowButton2['default'], {
        objectID: CurrentUserStore.getUserID(),
        onStateChange: this.handleRelStateChange,
        relState: this.state.relState,
        subjectID: this.props.flow.id,
        subjectPrivacy: this.props.flow.is_privacy
      });
    }
  },

  handleRelStateChange: function handleRelStateChange(relState) {
    this.setState({ relState: relState });
  }
});

exports['default'] = FlowBrick;
module.exports = exports['default'];

},{"../common/RelationButton/FollowButton":263,"../common/RelationButton/constants":265,"../common/Tooltip":269,"./FlowBrickAvatar":164,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],164:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _sharedReactComponentsCommonLazyLoadImage = require('../../../../shared/react/components/common/LazyLoadImage');

var _sharedReactComponentsCommonLazyLoadImage2 = _interopRequireDefault(_sharedReactComponentsCommonLazyLoadImage);

var FlowBrickAvatar = React.createClass({
  displayName: 'FlowBrickAvatar',

  propTypes: {
    flowpic: React.PropTypes.object.isRequired
  },

  render: function render() {
    return React.createElement(_sharedReactComponentsCommonLazyLoadImage2['default'], { image: this.getImage() });
  },

  getImage: function getImage() {
    return {
      url: this.props.flowpic.original_url,
      geometry: {
        width: 362,
        height: 180
      }
    };
  }
});

exports['default'] = FlowBrickAvatar;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/LazyLoadImage":535,"babel-runtime/helpers/interop-require-default":574}],165:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _FlowFlowBrick = require('../Flow/FlowBrick');

var _FlowFlowBrick2 = _interopRequireDefault(_FlowFlowBrick);

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var _reactMasonryMixin = require('react-masonry-mixin');

var _reactMasonryMixin2 = _interopRequireDefault(_reactMasonryMixin);

var masonryOptions = {
  itemSelector: '.brick',
  transitionDuration: 0,
  isFitWidth: true,
  gutter: 20
};

var Bricks = React.createClass({
  displayName: 'Bricks',

  mixins: [(0, _reactMasonryMixin2['default'])('masonryContainer', masonryOptions)],

  propTypes: {
    flows: React.PropTypes.array.isRequired,
    loading: React.PropTypes.bool.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadMoreFlows: React.PropTypes.func.isRequired
  },

  render: function render() {
    var entryList = this.props.flows.map(function (item) {
      return React.createElement(_FlowFlowBrick2['default'], {
        flow: item.flow,
        relationship: item.relationship,
        key: item.flow.id });
    });

    return React.createElement(
      'div',
      { className: 'bricks-wrapper' },
      React.createElement(
        _commonInfiniteScrollIndex2['default'],
        {
          loading: this.props.loading,
          canLoad: this.props.canLoad,
          onLoad: this.props.onLoadMoreFlows },
        React.createElement(
          'section',
          { ref: 'masonryContainer', className: 'bricks' },
          entryList
        )
      )
    );
  }
});

exports['default'] = Bricks;
module.exports = exports['default'];

},{"../Flow/FlowBrick":163,"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574,"react-masonry-mixin":663}],166:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsFlow = require('../../actions/Flow');

var _actionsFlow2 = _interopRequireDefault(_actionsFlow);

var _FlowBricks = require('./FlowBricks');

var _FlowBricks2 = _interopRequireDefault(_FlowBricks);

var FlowBricksContainer = (function (_Component) {
  _inherits(FlowBricksContainer, _Component);

  function FlowBricksContainer() {
    _classCallCheck(this, FlowBricksContainer);

    _get(Object.getPrototypeOf(FlowBricksContainer.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      flows: this.props.flows_info.items,
      hasMore: this.props.flows_info.has_more,
      nextPage: this.props.flows_info.next_page,
      isLoading: false
    };
  }

  _createClass(FlowBricksContainer, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_FlowBricks2['default'], {
        flows: this.state.flows,
        loading: this.state.isLoading,
        canLoad: !this.state.isLoading && this.state.hasMore,
        onLoadMoreFlows: this.loadMoreFlows.bind(this)
      });
    }
  }, {
    key: 'loadMoreFlows',
    value: function loadMoreFlows() {
      var _this = this;

      var data = {
        page: this.state.nextPage,
        limit: this.props.flows_info.limit
      };

      this.setState({ isLoading: true });
      _actionsFlow2['default'].load(this.props.loadUrl, data).then(function (flowsInfo) {
        // Обрабатываем случай, когда передан левый урл. Если в ответе нет нужных
        // нам полей, просто прекращаем дальнейшую загрузку
        if (flowsInfo.has_more != null) {
          _this.setState({
            flows: _this.state.flows.concat(flowsInfo.items),
            hasMore: flowsInfo.has_more,
            nextPage: flowsInfo.next_page
          });
        } else {
          _this.setState({ hasMore: false });
        }
      }).fail(function () {
        return _this.setState({ hasMore: false });
      }).always(function () {
        return _this.setState({ isLoading: false });
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      flows_info: _react.PropTypes.shape({
        items: _react.PropTypes.array.isRequired,
        limit: _react.PropTypes.number.isRequired,
        has_more: _react.PropTypes.bool.isRequired,
        next_page: _react.PropTypes.number.isRequired
      }).isRequired,
      loadUrl: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return FlowBricksContainer;
})(_react.Component);

exports['default'] = FlowBricksContainer;
module.exports = exports['default'];

},{"../../actions/Flow":9,"./FlowBricks":165,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],167:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var FlowFormAddress = React.createClass({
  displayName: "FlowFormAddress",

  propTypes: {
    value: React.PropTypes.string.isRequired,
    onChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "label",
      { className: "form-field-label" },
      React.createElement(
        "div",
        { className: "form-field form-field--default form-field--binary" },
        React.createElement(
          "div",
          { className: "form-field__text" },
          "http://taaasty.com/",
          React.createElement(
            "span",
            { className: "tilde" },
            "~"
          )
        ),
        React.createElement(
          "div",
          { className: "form-field__box" },
          React.createElement("input", { type: "text",
            value: this.props.value,
            placeholder: "адрес потока",
            className: "form-field__input",
            onChange: this.handleChange })
        ),
        React.createElement("div", { className: "form-field__bg" })
      )
    );
  },

  handleChange: function handleChange(e) {
    var value = e.target.value.replace(/[^\x00-\x7F]/g, '');
    if (e.target.value == value) {
      this.props.onChange(e.target.value);
    }
  }
});

exports["default"] = FlowFormAddress;
module.exports = exports["default"];

},{}],168:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _actionsUser = require('../../actions/User');

var _actionsUser2 = _interopRequireDefault(_actionsUser);

var _FlowFormChooserResults = require('./FlowFormChooserResults');

var _FlowFormChooserResults2 = _interopRequireDefault(_FlowFormChooserResults);

var _FlowFormChooserButton = require('./FlowFormChooserButton');

var _FlowFormChooserButton2 = _interopRequireDefault(_FlowFormChooserButton);

var FlowFormChooser = React.createClass({
  displayName: 'FlowFormChooser',

  propTypes: {
    limitReached: React.PropTypes.bool,
    onChoose: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      slug: '',
      results: [],
      resultIndex: 0,
      open: false,
      loading: false
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.limitReached && this.props.limitReached != nextProps.limitReached) {
      this.setState({ open: false });
    }
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.state.open && prevState.open != this.state.open) {
      this.refs.field.getDOMNode().focus();
    }
  },

  render: function render() {
    var chooserClasses = (0, _classnames2['default'])('flow-form__chooser', {
      'state--open': this.state.open,
      'state--disabled': this.props.limitReached
    });

    return React.createElement(
      'div',
      { className: chooserClasses },
      React.createElement(_FlowFormChooserButton2['default'], {
        limitReached: this.props.limitReached,
        onClick: this.handleButtonClick }),
      React.createElement(
        'div',
        { className: 'flow-form__chooser-dropdown' },
        React.createElement('input', { ref: 'field',
          type: 'text',
          value: this.state.slug,
          className: 'flow-form__chooser-input',
          onChange: this.handleFieldChange,
          onKeyDown: this.handleFieldKeyDown,
          onBlur: this.handleFieldBlur }),
        this.renderResults()
      )
    );
  },

  renderResults: function renderResults() {
    if (this.state.loading) {
      return React.createElement(
        'div',
        { className: 'flow-form__chooser-loading' },
        React.createElement(Spinner, { size: 24 })
      );
    } else {
      return React.createElement(_FlowFormChooserResults2['default'], {
        results: this.state.results,
        selectedIndex: this.state.resultIndex,
        onResultClick: this.chooseResult });
    }
  },

  chooseResult: function chooseResult(result) {
    this.setState({
      slug: '',
      results: [],
      resultIndex: 0,
      open: false
    });
    this.props.onChoose(result);
  },

  handleButtonClick: function handleButtonClick() {
    if (!this.props.limitReached) this.setState({ open: true });
  },

  handleFieldChange: function handleFieldChange(e) {
    var _this = this;

    var value = e.target.value;

    if (value) {
      this.setState({ slug: value, resultIndex: 0, loading: true });
      _actionsUser2['default'].predict(value, 30).then(function (results) {
        return _this.setState({ results: results });
      }).always(function () {
        return _this.setState({ loading: false });
      });
    } else {
      this.setState({ slug: value, results: [], resultIndex: 0 });
    }
  },

  handleFieldKeyDown: function handleFieldKeyDown(e) {
    switch (e.key) {
      case 'Enter':
        e.preventDefault();
        if (this.state.results.length) {
          this.chooseResult(this.state.results[this.state.resultIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        this.setState({ open: false });
        break;
      case 'ArrowUp':
        e.preventDefault();
        this.moveHighlight(-1);
        break;
      case 'ArrowDown':
        e.preventDefault();
        this.moveHighlight(1);
        break;
    }
  },

  handleFieldBlur: function handleFieldBlur() {
    if (this.state.slug === '') this.setState({ open: false });
  },

  moveHighlight: function moveHighlight(delta) {
    var resultsCount = this.state.results.length,
        resultIndex = this.state.resultIndex;

    if (resultsCount) {
      if (resultIndex > 0 && delta < 0 || resultIndex < resultsCount - 1 && delta > 0) {
        this.setState({ resultIndex: resultIndex + delta });
      }
    }
  }
});

exports['default'] = FlowFormChooser;
module.exports = exports['default'];

},{"../../actions/User":13,"./FlowFormChooserButton":169,"./FlowFormChooserResults":170,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],169:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var FlowFormChooserButton = React.createClass({
  displayName: 'FlowFormChooserButton',

  propTypes: {
    limitReached: React.PropTypes.bool,
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    var text = undefined;

    if (this.props.limitReached) {
      text = 'Выбрано максимальное число модераторов';
    } else {
      text = 'Укажите модераторов (не более пяти)';
    }

    return React.createElement(
      'div',
      { className: 'flow-form__chooser-button', onTouchTap: this.props.onClick },
      React.createElement(
        'div',
        { className: 'flow-form__chooser-button-text' },
        text
      )
    );
  }
});

exports['default'] = FlowFormChooserButton;
module.exports = exports['default'];

},{}],170:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedReactComponentsCommonAvatar = require('../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var _commonScrollerScroller = require('../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var FlowFormChooserResults = React.createClass({
  displayName: 'FlowFormChooserResults',

  propTypes: {
    results: React.PropTypes.array.isRequired,
    selectedIndex: React.PropTypes.number.isRequired,
    onResultClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    var _this = this;

    var resultList = this.props.results.map(function (result, i) {
      var resultClasses = (0, _classnames2['default'])('flow-form__chooser-result', {
        'state--active': i == _this.props.selectedIndex
      });

      return React.createElement(
        'div',
        { className: resultClasses,
          key: result.id,
          onTouchTap: _this.props.onResultClick.bind(null, result) },
        React.createElement(
          'div',
          { className: 'flow-form__user' },
          React.createElement(
            'div',
            { className: 'flow-form__user-avatar' },
            React.createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: result.userpic, size: 35 })
          ),
          React.createElement(
            'div',
            { className: 'flow-form__user-name' },
            result.slug
          )
        )
      );
    });

    return React.createElement(
      _commonScrollerScroller2['default'],
      null,
      React.createElement(
        'div',
        { className: 'flow-form__chooser-results' },
        resultList
      )
    );
  }
});

exports['default'] = FlowFormChooserResults;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Avatar":532,"../common/scroller/scroller":276,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],171:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _commonEditableField = require('../common/EditableField');

var _commonEditableField2 = _interopRequireDefault(_commonEditableField);

var _FlowFormUpload = require('./FlowFormUpload');

var _FlowFormUpload2 = _interopRequireDefault(_FlowFormUpload);

var FlowFormHero = React.createClass({
  displayName: 'FlowFormHero',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    title: React.PropTypes.string,
    flowpic: React.PropTypes.object.isRequired,
    onNameChange: React.PropTypes.func.isRequired,
    onTitleChange: React.PropTypes.func.isRequired,
    onPicFileChange: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      backgroundImage: ThumborService.newImageUrl(this.props.flowpic.original_url, {
        width: 520,
        height: 286
      })
    };
  },

  render: function render() {
    var heroStyles = {
      backgroundImage: 'url("' + this.state.backgroundImage + '")'
    };

    return React.createElement(
      'div',
      { className: 'flow-form__hero', style: heroStyles },
      React.createElement(_FlowFormUpload2['default'], { onUpload: this.handleUpload }),
      React.createElement(
        'div',
        { className: 'flow-form__hero-box' },
        React.createElement(
          'div',
          { className: 'flow-form__hero-title' },
          React.createElement(_commonEditableField2['default'], {
            value: this.props.name,
            placeholder: '#Название потока',
            returnFor: 'blur',
            onChange: this.props.onNameChange })
        ),
        React.createElement(
          'div',
          { className: 'flow-form__hero-text' },
          React.createElement(_commonEditableField2['default'], {
            value: this.props.title,
            placeholder: 'Краткое описание, не более 140 символов',
            returnFor: 'blur',
            onChange: this.props.onTitleChange })
        ),
        this.renderActions()
      )
    );
  },

  renderActions: function renderActions() {
    if (this.props.onFlowCreate) {
      return React.createElement(
        'div',
        { className: 'flow-form__hero-actions' },
        React.createElement(
          'button',
          { className: 'button button--yellow button--small',
            onClick: this.props.onFlowCreate },
          'Создать поток'
        )
      );
    }
  },

  showPicFilePreview: function showPicFilePreview(file) {
    var _this = this;

    var reader = new FileReader();
    reader.onload = function (e) {
      _this.setState({ backgroundImage: e.target.result });
    };
    reader.readAsDataURL(file);
  },

  handleUpload: function handleUpload(file) {
    this.showPicFilePreview(file);
    this.props.onPicFileChange(file);
  }
});

exports['default'] = FlowFormHero;
module.exports = exports['default'];

},{"../common/EditableField":257,"./FlowFormUpload":174,"babel-runtime/helpers/interop-require-default":574}],172:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _commonSwitcher = require('../common/Switcher');

var _commonSwitcher2 = _interopRequireDefault(_commonSwitcher);

var FlowFormRadio = (function () {
  function FlowFormRadio() {
    _classCallCheck(this, FlowFormRadio);
  }

  _createClass(FlowFormRadio, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { className: 'flow-form__right' },
          React.createElement(_commonSwitcher2['default'], this.props)
        ),
        React.createElement(
          'div',
          { className: 'flow-form__left' },
          React.createElement(
            'h3',
            { className: 'flow-form__title' },
            this.props.title
          ),
          this.renderDescription()
        )
      );
    }
  }, {
    key: 'renderDescription',
    value: function renderDescription() {
      var description = this.props.description;

      return description ? React.createElement(
        'p',
        { className: 'flow-form__desc' },
        description
      ) : null;
    }
  }], [{
    key: 'propTypes',
    value: {
      id: _react.PropTypes.string.isRequired,
      title: _react.PropTypes.string.isRequired,
      description: _react.PropTypes.string,
      checked: _react.PropTypes.bool.isRequired,
      onChange: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return FlowFormRadio;
})();

exports['default'] = FlowFormRadio;
module.exports = exports['default'];

},{"../common/Switcher":268,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],173:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _sharedReactComponentsCommonAvatar = require('../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var _commonDropdownButton = require('../common/DropdownButton');

var _commonDropdownButton2 = _interopRequireDefault(_commonDropdownButton);

var _commonDropdownItem = require('../common/DropdownItem');

var _commonDropdownItem2 = _interopRequireDefault(_commonDropdownItem);

var STAFF_MODERATOR_ROLE = 'moderator',
    STAFF_ADMIN_ROLE = 'admin',
    STAFF_OWNER_ROLE = 'owner';

var FlowFormStaffs = React.createClass({
  displayName: 'FlowFormStaffs',

  propTypes: {
    staffs: React.PropTypes.array.isRequired,
    canChangeRole: React.PropTypes.bool,
    onRoleChange: React.PropTypes.func,
    onDelete: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      canChangeRole: true
    };
  },

  render: function render() {
    if (this.props.staffs.length) {
      return React.createElement(
        'div',
        { className: 'flow-form__persons' },
        React.createElement(
          'h5',
          { className: 'flow-form__subtitle' },
          'Модераторы'
        ),
        this.renderStaffList()
      );
    } else {
      return null;
    }
  },

  renderStaffList: function renderStaffList() {
    var _this = this;

    var staffList = this.props.staffs.map(function (staff, i) {
      return React.createElement(
        'li',
        { className: 'person', key: staff.user.id },
        React.createElement(
          'div',
          { className: 'person__in' },
          React.createElement(
            'div',
            { className: 'person__avatar' },
            React.createElement(
              'a',
              { href: staff.user.tlog_url, target: '_blank' },
              React.createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: staff.user.userpic, size: 48 })
            )
          ),
          React.createElement(
            'div',
            { className: 'person__desc' },
            React.createElement(
              'a',
              { href: staff.user.tlog_url, target: '_blank' },
              React.createElement(
                'p',
                { className: 'person__name' },
                staff.user.name
              )
            ),
            React.createElement(
              'div',
              { className: 'person__count' },
              i18n.t('tlog.entries_count', { count: staff.user.total_entries_count })
            )
          ),
          React.createElement(
            'div',
            { className: 'person__actions' },
            _this.renderRoleChanger(staff),
            _this.renderDeleteButton(staff)
          )
        )
      );
    });

    return React.createElement(
      'ul',
      { className: 'persons' },
      staffList
    );
  },

  renderRoleChanger: function renderRoleChanger(staff) {
    if (!this.isOwner(staff) && this.props.canChangeRole) {
      return React.createElement(
        _commonDropdownButton2['default'],
        {
          activeItem: staff.role,
          iconClassName: 'icon--cogwheel',
          buttonClassName: 'button--small button--outline button--icon',
          onChange: this.props.onRoleChange.bind(this, staff) },
        React.createElement(_commonDropdownItem2['default'], { title: 'Модератор', item: STAFF_MODERATOR_ROLE }),
        React.createElement(_commonDropdownItem2['default'], { title: 'Администратор', item: STAFF_ADMIN_ROLE })
      );
    }
  },

  renderDeleteButton: function renderDeleteButton(staff) {
    if (!this.isOwner(staff)) {
      return React.createElement(
        'button',
        { className: 'button button--small button--red',
          onTouchTap: this.props.onDelete.bind(null, staff) },
        'Удалить'
      );
    }
  },

  isOwner: function isOwner(staff) {
    return staff.role === STAFF_OWNER_ROLE;
  }
});

exports['default'] = FlowFormStaffs;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Avatar":532,"../common/DropdownButton":255,"../common/DropdownItem":256,"babel-runtime/helpers/interop-require-default":574}],174:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var FlowFormUpload = React.createClass({
  displayName: "FlowFormUpload",

  propTypes: {
    onUpload: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "span",
      { className: "form-upload form-upload--icon" },
      React.createElement("input", { type: "file",
        accept: "image/*",
        className: "form-upload__input",
        onChange: this.handleChange }),
      React.createElement(
        "span",
        { className: "form-upload__text" },
        React.createElement("i", { className: "icon icon--image-circle" })
      )
    );
  },

  handleChange: function handleChange(e) {
    this.props.onUpload(e.target.files[0]);
  }
});

exports["default"] = FlowFormUpload;
module.exports = exports["default"];

},{}],175:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FlowFormFlowFormHero = require('../FlowForm/FlowFormHero');

var _FlowFormFlowFormHero2 = _interopRequireDefault(_FlowFormFlowFormHero);

var _FlowFormFlowFormChooser = require('../FlowForm/FlowFormChooser');

var _FlowFormFlowFormChooser2 = _interopRequireDefault(_FlowFormFlowFormChooser);

var _FlowFormFlowFormStaffs = require('../FlowForm/FlowFormStaffs');

var _FlowFormFlowFormStaffs2 = _interopRequireDefault(_FlowFormFlowFormStaffs);

var _actionsFlow = require('../../actions/Flow');

var _actionsFlow2 = _interopRequireDefault(_actionsFlow);

var FlowCreator = (function (_Component) {
  _inherits(FlowCreator, _Component);

  function FlowCreator() {
    _classCallCheck(this, FlowCreator);

    _get(Object.getPrototypeOf(FlowCreator.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      name: '',
      title: '',
      picFile: null,
      staffs: []
    };
  }

  _createClass(FlowCreator, [{
    key: 'render',
    value: function render() {
      var flowpic = {
        original_url: 'http://taaasty.com/images/hero-cover.jpg'
      };

      return _react2['default'].createElement(
        'div',
        { className: 'flow-form' },
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__header' },
          _react2['default'].createElement(_FlowFormFlowFormHero2['default'], {
            name: this.state.name,
            title: this.state.title,
            flowpic: flowpic,
            onNameChange: this.updateValue.bind(this, 'name'),
            onTitleChange: this.updateValue.bind(this, 'title'),
            onPicFileChange: this.updateValue.bind(this, 'picFile'),
            onFlowCreate: this.createFlow.bind(this) })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__body' },
          _react2['default'].createElement(
            'div',
            { className: 'flow-form__item' },
            _react2['default'].createElement(
              'div',
              { className: 'flow-form__left' },
              _react2['default'].createElement(_FlowFormFlowFormChooser2['default'], {
                limitReached: this.props.staffsLimit === this.state.staffs.length,
                onChoose: this.handleUserChoose.bind(this) })
            ),
            _react2['default'].createElement(_FlowFormFlowFormStaffs2['default'], {
              staffs: this.state.staffs,
              canChangeRole: false,
              onDelete: this.handleStaffDelete.bind(this) })
          )
        )
      );
    }
  }, {
    key: 'updateValue',
    value: function updateValue(name, value) {
      this.setState(_defineProperty({}, name, value));
    }
  }, {
    key: 'handleUserChoose',
    value: function handleUserChoose(user) {
      // Check whether user already in staffs
      for (var i = 0; i < this.state.staffs.length; i++) {
        var _staff = this.state.staffs[i];
        if (_staff.user.id === user.id) return;
      }

      var staff = { user: user, role: 'moderator' };
      var newStaff = this.state.staffs.concat(staff);
      this.setState({ staffs: newStaff });
    }
  }, {
    key: 'handleStaffDelete',
    value: function handleStaffDelete(staff) {
      var newStaff = this.state.staffs.filter(function (user) {
        return staff.id !== user.id;
      });
      this.setState({ staffs: newStaff });
    }
  }, {
    key: 'createFlow',
    value: function createFlow() {
      _actionsFlow2['default'].create(this.state);
    }
  }], [{
    key: 'propTypes',
    value: {
      staffsLimit: _react.PropTypes.number
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      staffsLimit: 5
    },
    enumerable: true
  }]);

  return FlowCreator;
})(_react.Component);

exports['default'] = FlowCreator;
module.exports = exports['default'];

},{"../../actions/Flow":9,"../FlowForm/FlowFormChooser":168,"../FlowForm/FlowFormHero":171,"../FlowForm/FlowFormStaffs":173,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],176:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TabsTabbedArea = require('../Tabs/TabbedArea');

var _TabsTabbedArea2 = _interopRequireDefault(_TabsTabbedArea);

var _TabsTabPane = require('../Tabs/TabPane');

var _TabsTabPane2 = _interopRequireDefault(_TabsTabPane);

var _FlowManagerStaffs = require('./FlowManagerStaffs');

var _FlowManagerStaffs2 = _interopRequireDefault(_FlowManagerStaffs);

var _FlowManagerFollowers = require('./FlowManagerFollowers');

var _FlowManagerFollowers2 = _interopRequireDefault(_FlowManagerFollowers);

var _FlowManagerIgnored = require('./FlowManagerIgnored');

var _FlowManagerIgnored2 = _interopRequireDefault(_FlowManagerIgnored);

var _FlowManagerSettings = require('./FlowManagerSettings');

var _FlowManagerSettings2 = _interopRequireDefault(_FlowManagerSettings);

var FlowManager = (function (_Component) {
  _inherits(FlowManager, _Component);

  function FlowManager() {
    _classCallCheck(this, FlowManager);

    _get(Object.getPrototypeOf(FlowManager.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      flow: this.props.flow,
      staffsCount: this.props.flow.staffs.length,
      followersCount: null,
      ignoredCount: null
    };
  }

  _createClass(FlowManager, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        _TabsTabbedArea2['default'],
        null,
        _react2['default'].createElement(
          _TabsTabPane2['default'],
          { tab: 'Настройки' },
          _react2['default'].createElement(_FlowManagerSettings2['default'], {
            flow: this.state.flow,
            onUpdate: this.updateFlow.bind(this) })
        ),
        _react2['default'].createElement(
          _TabsTabPane2['default'],
          { tab: 'Руководство', count: this.state.staffsCount },
          _react2['default'].createElement(_FlowManagerStaffs2['default'], {
            flowID: this.state.flow.id,
            staffs: this.state.flow.staffs,
            onUpdate: this.updateStaffs.bind(this) })
        ),
        this.renderRequested(),
        _react2['default'].createElement(
          _TabsTabPane2['default'],
          { tab: 'Подписчики', count: this.state.followersCount },
          _react2['default'].createElement(_FlowManagerFollowers2['default'], {
            flow: this.state.flow,
            onCountUpdate: this.updateCount.bind(this, 'followersCount') })
        ),
        _react2['default'].createElement(
          _TabsTabPane2['default'],
          { tab: 'Заблокированные', count: this.state.ignoredCount },
          _react2['default'].createElement(_FlowManagerIgnored2['default'], {
            flow: this.state.flow,
            onCountUpdate: this.updateCount.bind(this, 'ignoredCount') })
        )
      );
    }
  }, {
    key: 'updateFlow',
    value: function updateFlow(flow) {
      this.setState({ flow: flow });
      this.props.onUpdate(flow);
    }
  }, {
    key: 'updateStaffs',
    value: function updateStaffs(staffs) {
      this.state.flow.staffs = staffs;
      this.setState({ staffsCount: staffs.length });
      this.props.onUpdate(this.state.flow);
    }
  }, {
    key: 'updateCount',
    value: function updateCount(rel, count) {
      this.setState(_defineProperty({}, rel, count));
    }
  }, {
    key: 'renderRequested',
    value: function renderRequested() {
      return false;
      // if (!this.props.flow.is_privacy) {
      //   return (
      //     <TabPane tab="Заявки" count={this.state.requestedCount}>
      //       <FlowManagerRequests flow={this.props.flow} />
      //     </TabPane>
      //   );
      // }
    }
  }], [{
    key: 'propTypes',
    value: {
      flow: _react.PropTypes.shape({
        id: _react.PropTypes.number.isRequired,
        name: _react.PropTypes.string.isRequired,
        slug: _react.PropTypes.string.isRequired,
        title: _react.PropTypes.string.isRequired,
        staffs: _react.PropTypes.array.isRequired,
        flowpic: _react.PropTypes.object.isRequired,
        tlog_url: _react.PropTypes.string.isRequired
      }).isRequired,
      onUpdate: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return FlowManager;
})(_react.Component);

exports['default'] = FlowManager;
module.exports = exports['default'];

},{"../Tabs/TabPane":232,"../Tabs/TabbedArea":233,"./FlowManagerFollowers":177,"./FlowManagerIgnored":178,"./FlowManagerSettings":179,"./FlowManagerStaffs":180,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],177:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RelationshipsRelationshipsContainer = require('../Relationships/RelationshipsContainer');

var _RelationshipsRelationshipsContainer2 = _interopRequireDefault(_RelationshipsRelationshipsContainer);

var _commonUnfollowButton = require('../common/UnfollowButton');

var _commonUnfollowButton2 = _interopRequireDefault(_commonUnfollowButton);

var FlowManagerFollowers = (function () {
  function FlowManagerFollowers() {
    _classCallCheck(this, FlowManagerFollowers);
  }

  _createClass(FlowManagerFollowers, [{
    key: 'render',
    value: function render() {
      var objectID = this.props.flow.id;

      return _react2['default'].createElement(
        _RelationshipsRelationshipsContainer2['default'],
        {
          url: ApiRoutes.tlogRelationshipsBy(objectID, 'friend'),
          onCountUpdate: this.props.onCountUpdate },
        _react2['default'].createElement(_commonUnfollowButton2['default'], { objectID: objectID })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      flow: _react.PropTypes.object.isRequired,
      onCountUpdate: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return FlowManagerFollowers;
})();

exports['default'] = FlowManagerFollowers;
module.exports = exports['default'];

},{"../Relationships/RelationshipsContainer":202,"../common/UnfollowButton":270,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],178:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RelationshipsRelationshipsContainer = require('../Relationships/RelationshipsContainer');

var _RelationshipsRelationshipsContainer2 = _interopRequireDefault(_RelationshipsRelationshipsContainer);

var _commonIgnoreButton = require('../common/IgnoreButton');

var _commonIgnoreButton2 = _interopRequireDefault(_commonIgnoreButton);

var FlowManagerIgnored = (function () {
  function FlowManagerIgnored() {
    _classCallCheck(this, FlowManagerIgnored);
  }

  _createClass(FlowManagerIgnored, [{
    key: 'render',
    value: function render() {
      var objectID = this.props.flow.id;

      return _react2['default'].createElement(
        _RelationshipsRelationshipsContainer2['default'],
        {
          url: ApiRoutes.tlogRelationshipsTo(objectID, 'ignored'),
          onCountUpdate: this.props.onCountUpdate },
        _react2['default'].createElement(_commonIgnoreButton2['default'], { objectID: objectID })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      flow: _react.PropTypes.object.isRequired,
      onCountUpdate: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return FlowManagerIgnored;
})();

exports['default'] = FlowManagerIgnored;
module.exports = exports['default'];

},{"../Relationships/RelationshipsContainer":202,"../common/IgnoreButton":258,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],179:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _actionsFlow = require('../../actions/Flow');

var _actionsFlow2 = _interopRequireDefault(_actionsFlow);

var _FlowFormFlowFormHero = require('../FlowForm/FlowFormHero');

var _FlowFormFlowFormHero2 = _interopRequireDefault(_FlowFormFlowFormHero);

var _FlowFormFlowFormAddress = require('../FlowForm/FlowFormAddress');

var _FlowFormFlowFormAddress2 = _interopRequireDefault(_FlowFormFlowFormAddress);

var _FlowFormFlowFormRadio = require('../FlowForm/FlowFormRadio');

var _FlowFormFlowFormRadio2 = _interopRequireDefault(_FlowFormFlowFormRadio);

var FlowManagerSettings = (function (_Component) {
  _inherits(FlowManagerSettings, _Component);

  function FlowManagerSettings() {
    _classCallCheck(this, FlowManagerSettings);

    _get(Object.getPrototypeOf(FlowManagerSettings.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      name: this.props.flow.name,
      slug: this.props.flow.slug,
      title: this.props.flow.title,
      flowpic: this.props.flow.flowpic,
      is_privacy: this.props.flow.is_privacy,
      has_premoderation: this.props.flow.has_premoderation,
      picFile: null
    };
  }

  _createClass(FlowManagerSettings, [{
    key: 'render',
    value: function render() {
      var formClasses = (0, _classnames2['default'])('flow-form', {
        '__has-unsaved-fields': this.hasUnsavedFields()
      });

      return _react2['default'].createElement(
        'div',
        { className: formClasses },
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__header' },
          _react2['default'].createElement(_FlowFormFlowFormHero2['default'], {
            name: this.state.name,
            title: this.state.title,
            flowpic: this.state.flowpic,
            onNameChange: this.updateValue.bind(this, 'name'),
            onTitleChange: this.updateValue.bind(this, 'title'),
            onPicFileChange: this.updateValue.bind(this, 'picFile') })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__body' },
          _react2['default'].createElement(
            'div',
            { className: 'flow-form__item' },
            _react2['default'].createElement(_FlowFormFlowFormAddress2['default'], {
              value: this.state.slug,
              onChange: this.updateValue.bind(this, 'slug') })
          ),
          _react2['default'].createElement(
            'div',
            { className: 'flow-form__item' },
            _react2['default'].createElement(_FlowFormFlowFormRadio2['default'], {
              id: 'flow-privacy',
              title: 'Закрытый поток?',
              description: 'Содержимое потока видно только подписчикам.',
              checked: this.state.is_privacy,
              onChange: this.updateValue.bind(this, 'is_privacy') })
          ),
          _react2['default'].createElement(
            'div',
            { className: 'flow-form__item' },
            _react2['default'].createElement(_FlowFormFlowFormRadio2['default'], {
              id: 'flow-has-premoderation',
              title: 'Премодерация',
              description: 'Записи появляются в потоке только после одобрения руководством потока.',
              checked: this.state.has_premoderation,
              onChange: this.updateValue.bind(this, 'has_premoderation') })
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__footer' },
          this.renderSaveButton()
        )
      );
    }
  }, {
    key: 'renderSaveButton',
    value: function renderSaveButton() {
      if (this.hasUnsavedFields()) {
        return _react2['default'].createElement(
          'button',
          { className: 'flow-form__save-button',
            onClick: this.saveFlow.bind(this) },
          'Сохранить'
        );
      }
    }
  }, {
    key: 'updateValue',
    value: function updateValue(name, value) {
      this.setState(_defineProperty({}, name, value));
    }
  }, {
    key: 'saveFlow',
    value: function saveFlow() {
      var _this = this;

      _actionsFlow2['default'].update(this.props.flow.id, this.state).then(function (flow) {
        var name = flow.name;
        var slug = flow.slug;
        var title = flow.title;
        var flowpic = flow.flowpic;
        var is_privacy = flow.is_privacy;
        var has_premoderation = flow.has_premoderation;

        _this.setState({
          name: name, slug: slug, title: title, flowpic: flowpic, is_privacy: is_privacy, has_premoderation: has_premoderation,
          picFile: null
        });

        _this.props.onUpdate(flow);
      });
    }
  }, {
    key: 'hasUnsavedFields',
    value: function hasUnsavedFields() {
      var _props$flow = this.props.flow;
      var pName = _props$flow.name;
      var pSlug = _props$flow.slug;
      var pTitle = _props$flow.title;
      var pisPrivacy = _props$flow.is_privacy;
      var phasPremoderation = _props$flow.has_premoderation;
      var _state = this.state;
      var picFile = _state.picFile;
      var sName = _state.name;
      var sSlug = _state.slug;
      var sTitle = _state.title;
      var sisPrivacy = _state.is_privacy;
      var shasPremoderation = _state.has_premoderation;

      return pName !== sName || pSlug !== sSlug || pTitle !== sTitle || pisPrivacy !== sisPrivacy || phasPremoderation !== shasPremoderation || picFile != null;
    }
  }], [{
    key: 'propTypes',
    value: {
      flow: _react.PropTypes.shape({
        id: _react.PropTypes.number.isRequired,
        name: _react.PropTypes.string.isRequired,
        slug: _react.PropTypes.string.isRequired,
        title: _react.PropTypes.string.isRequired,
        is_privacy: _react.PropTypes.bool.isRequired,
        has_premoderation: _react.PropTypes.bool.isRequired,
        flowpic: _react.PropTypes.object.isRequired
      }).isRequired,
      onUpdate: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return FlowManagerSettings;
})(_react.Component);

exports['default'] = FlowManagerSettings;
module.exports = exports['default'];

},{"../../actions/Flow":9,"../FlowForm/FlowFormAddress":167,"../FlowForm/FlowFormHero":171,"../FlowForm/FlowFormRadio":172,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],180:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsFlow = require('../../actions/Flow');

var _actionsFlow2 = _interopRequireDefault(_actionsFlow);

var _FlowFormFlowFormChooser = require('../FlowForm/FlowFormChooser');

var _FlowFormFlowFormChooser2 = _interopRequireDefault(_FlowFormFlowFormChooser);

var _FlowFormFlowFormStaffs = require('../FlowForm/FlowFormStaffs');

var _FlowFormFlowFormStaffs2 = _interopRequireDefault(_FlowFormFlowFormStaffs);

var FlowManagerStaffs = (function () {
  function FlowManagerStaffs() {
    _classCallCheck(this, FlowManagerStaffs);
  }

  _createClass(FlowManagerStaffs, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'flow-form__item' },
          _react2['default'].createElement(_FlowFormFlowFormChooser2['default'], {
            limitReached: this.props.staffsLimit === this.props.staffs.length,
            onChoose: this.handleUserChoose.bind(this) })
        ),
        _react2['default'].createElement(_FlowFormFlowFormStaffs2['default'], {
          staffs: this.props.staffs,
          onDelete: this.handleStaffDelete.bind(this),
          onRoleChange: this.handleStaffRoleChange.bind(this) })
      );
    }
  }, {
    key: 'handleUserChoose',
    value: function handleUserChoose(user) {
      var _this = this;

      _actionsFlow2['default'].addStaff(this.props.flowID, user.id).then(function (staff) {
        var newStaff = _this.props.staffs.concat(staff);
        _this.props.onUpdate(newStaff);
      });
    }
  }, {
    key: 'handleStaffDelete',
    value: function handleStaffDelete(staff) {
      var _this2 = this;

      _actionsFlow2['default'].removeStaff(this.props.flowID, staff.user.id).then(function (staff) {
        var newStaff = _this2.props.staffs.filter(function (item) {
          return item.user.id !== staff.user.id;
        });
        _this2.props.onUpdate(newStaff);
      });
    }
  }, {
    key: 'handleStaffRoleChange',
    value: function handleStaffRoleChange(staff, role) {
      var _this3 = this;

      _actionsFlow2['default'].changeStaffRole(this.props.flowID, staff.user.id, role).then(function (staff) {
        _this3.props.staffs.forEach(function (item) {
          if (item.user.id === staff.user.id) item.role = role;
        });
        _this3.props.onUpdate(_this3.props.staffs);
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      flowID: _react.PropTypes.number.isRequired,
      staffs: _react.PropTypes.array.isRequired,
      staffsLimit: _react.PropTypes.number,
      onUpdate: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      staffsLimit: 5
    },
    enumerable: true
  }]);

  return FlowManagerStaffs;
})();

exports['default'] = FlowManagerStaffs;
module.exports = exports['default'];

},{"../../actions/Flow":9,"../FlowForm/FlowFormChooser":168,"../FlowForm/FlowFormStaffs":173,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],181:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var Hero = React.createClass({
  displayName: "Hero",

  propTypes: {
    backgroundUrl: React.PropTypes.string.isRequired,
    title: React.PropTypes.node.isRequired,
    text: React.PropTypes.string,
    actions: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.arrayOf(React.PropTypes.element)]).isRequired
  },

  render: function render() {
    var heroStyles = {
      backgroundImage: "url(" + this.props.backgroundUrl + ")"
    };

    return React.createElement(
      "div",
      { className: "hero hero--cover", style: heroStyles },
      React.createElement("div", { className: "hero__overlay" }),
      React.createElement(
        "div",
        { className: "hero__box" },
        React.createElement(
          "div",
          { className: "hero__head" },
          React.createElement(
            "div",
            { className: "hero__title" },
            React.createElement(
              "span",
              null,
              this.props.title
            )
          )
        ),
        React.createElement(
          "div",
          { className: "hero__text" },
          React.createElement(
            "span",
            null,
            this.props.text
          )
        ),
        this.renderActions()
      )
    );
  },

  renderActions: function renderActions() {
    if (this.props.actions != null) {
      return React.createElement(
        "div",
        { className: "hero__actions hero__actions--visible" },
        this.props.actions
      );
    }

    return null;
  }
});

exports["default"] = Hero;
module.exports = exports["default"];

},{}],182:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var HeroDesignSettingsButton = React.createClass({
  displayName: "HeroDesignSettingsButton",

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "hero-design-settings-button", onClick: this.props.onClick },
      React.createElement("i", { className: "icon icon--drawing" })
    );
  }
});

exports["default"] = HeroDesignSettingsButton;
module.exports = exports["default"];

},{}],183:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactProjectTypes = require('../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _actionsPopup = require('../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var _Hero = require('./Hero');

var _Hero2 = _interopRequireDefault(_Hero);

var _commonRelationButton = require('../common/RelationButton');

var _commonRelationButton2 = _interopRequireDefault(_commonRelationButton);

var _HeroSettingsButton = require('./HeroSettingsButton');

var _HeroSettingsButton2 = _interopRequireDefault(_HeroSettingsButton);

var _HeroSubscriptionsButton = require('./HeroSubscriptionsButton');

var _HeroSubscriptionsButton2 = _interopRequireDefault(_HeroSubscriptionsButton);

var _HeroDesignSettingsButton = require('./HeroDesignSettingsButton');

var _HeroDesignSettingsButton2 = _interopRequireDefault(_HeroDesignSettingsButton);

var HeroFlow = (0, _react.createClass)({
  propTypes: {
    flow: ProjectTypes.flow.isRequired,
    relationship: ProjectTypes.relationship
  },

  getInitialState: function getInitialState() {
    return {
      flow: this.props.flow
    };
  },

  getText: function getText(count) {
    return count ? i18n.t('hero.flow_entries_count', { count: count }) : null;
  },

  render: function render() {
    var _state$flow = this.state.flow;
    var original_url = _state$flow.flowpic.original_url;
    var name = _state$flow.name;
    var public_tlog_entries_count = _state$flow.public_tlog_entries_count;
    var tlog_url = _state$flow.tlog_url;

    return _react2['default'].createElement(_Hero2['default'], {
      actions: this.getActions(),
      backgroundUrl: original_url,
      text: this.getText(public_tlog_entries_count),
      title: _react2['default'].createElement(
        'a',
        { href: tlog_url },
        '#' + name
      )
    });
  },

  getActions: function getActions() {
    return [this.renderWriteButton(), this.renderRelationButton(), this.renderSettingsButton()];
  },

  renderWriteButton: function renderWriteButton() {
    if (this.state.flow.can_write) {
      return _react2['default'].createElement(
        'a',
        { href: Routes.new_entry_url(this.state.flow.slug),
          className: 'button button--small button--green',
          key: 'createEntryButton' },
        i18n.t('buttons.hero_create_entry')
      );
    }
  },

  renderRelationButton: function renderRelationButton() {
    if (this.props.relationship) {
      return _react2['default'].createElement(_commonRelationButton2['default'], {
        objectID: CurrentUserStore.getUserID(),
        subjectID: this.state.flow.id,
        subjectPrivacy: this.state.flow.is_privacy,
        relState: this.props.relationship.state,
        key: 'relationButton' });
    }
  },

  renderSettingsButton: function renderSettingsButton() {
    if (this.state.flow.can_edit) {
      return _react2['default'].createElement(_HeroSettingsButton2['default'], { onClick: this.showSettings, key: 'settingsButton' });
    }
  },

  showSettings: function showSettings() {
    _actionsPopup2['default'].manageFlow(this.state.flow, this.updateFlow);
  },

  updateFlow: function updateFlow(flow) {
    this.setState({ flow: flow });
  }
});

exports['default'] = HeroFlow;
module.exports = exports['default'];

},{"../../../../shared/react/ProjectTypes":531,"../../actions/popup":17,"../common/RelationButton":266,"./Hero":181,"./HeroDesignSettingsButton":182,"./HeroSettingsButton":185,"./HeroSubscriptionsButton":186,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],184:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsPopup = require('../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var _Hero = require('./Hero');

var _Hero2 = _interopRequireDefault(_Hero);

var HeroFlows = (function (_Component) {
  _inherits(HeroFlows, _Component);

  function HeroFlows() {
    _classCallCheck(this, HeroFlows);

    _get(Object.getPrototypeOf(HeroFlows.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HeroFlows, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_Hero2['default'], { backgroundUrl: this.props.backgroundUrl,
        title: i18n.t('hero.flows'),
        text: this.getText(),
        actions: this.getActions() });
    }
  }, {
    key: 'renderCreateButton',
    value: function renderCreateButton() {
      if (this.props.canCreate) {
        return _react2['default'].createElement(
          'button',
          {
            className: 'button button--small button--green',
            onClick: this.createFlow,
            key: 'createButton' },
          i18n.t('buttons.hero_create_flow')
        );
      }
    }
  }, {
    key: 'createFlow',
    value: function createFlow() {
      _actionsPopup2['default'].createFlow();
    }
  }, {
    key: 'getText',
    value: function getText() {
      var _props = this.props;
      var flowsCount = _props.flowsCount;
      var text = _props.text;

      return text ? text : flowsCount ? i18n.t('hero.flows_count', { count: flowsCount }) : null;
    }
  }, {
    key: 'getActions',
    value: function getActions() {
      return [this.renderCreateButton()];
    }
  }], [{
    key: 'propTypes',
    value: {
      flowsCount: _react.PropTypes.number,
      backgroundUrl: _react.PropTypes.string.isRequired,
      canCreate: _react.PropTypes.bool,
      text: _react.PropTypes.string
    },
    enumerable: true
  }]);

  return HeroFlows;
})(_react.Component);

exports['default'] = HeroFlows;
module.exports = exports['default'];

},{"../../actions/popup":17,"./Hero":181,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],185:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var HeroSettingsButton = React.createClass({
  displayName: "HeroSettingsButton",

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "hero-settings-button", onClick: this.props.onClick },
      React.createElement("i", { className: "icon icon--cogwheel" })
    );
  }
});

exports["default"] = HeroSettingsButton;
module.exports = exports["default"];

},{}],186:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var HeroSubscriptionsButton = React.createClass({
  displayName: "HeroSubscriptionsButton",

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "hero-subscriptions-button", onClick: this.props.onClick },
      React.createElement("i", { className: "icon icon--friends" })
    );
  }
});

exports["default"] = HeroSubscriptionsButton;
module.exports = exports["default"];

},{}],187:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _screen_viewerScreen_viewer = require('../screen_viewer/screen_viewer');

var _screen_viewerScreen_viewer2 = _interopRequireDefault(_screen_viewerScreen_viewer);

var _EntryBricksEntryBricksContainer = require('../EntryBricks/EntryBricksContainer');

var _EntryBricksEntryBricksContainer2 = _interopRequireDefault(_EntryBricksEntryBricksContainer);

var LandingPageBody = (function () {
  function LandingPageBody() {
    _classCallCheck(this, LandingPageBody);
  }

  _createClass(LandingPageBody, [{
    key: 'renderFooter',
    value: function renderFooter(link, title) {
      return link && title && _react2['default'].createElement(
        'div',
        { className: 'layout-constrain' },
        _react2['default'].createElement(
          'nav',
          { className: 'menu menu--main' },
          _react2['default'].createElement(
            'ul',
            { className: 'menu__list' },
            _react2['default'].createElement(
              'li',
              { className: 'menu__item' },
              _react2['default'].createElement(
                'a',
                { href: link },
                _react2['default'].createElement(
                  'button',
                  { className: 'auth-button' },
                  title
                )
              )
            )
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var bottomLinkUrl = _props.bottomLinkUrl;
      var bottomLinkTitle = _props.bottomLinkTitle;
      var bricksContainer = _props.bricksContainer;
      var locale = _props.locale;
      var sourceImages = _props.sourceImages;
      var title = _props.title;

      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'page-cover' },
          _react2['default'].createElement(_screen_viewerScreen_viewer2['default'], {
            locale: locale,
            sourceImages: sourceImages
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'layout-outer' },
          _react2['default'].createElement('h1', {
            className: 'home-title',
            dangerouslySetInnerHTML: { __html: title || '' }
          }),
          _react2['default'].createElement(_EntryBricksEntryBricksContainer2['default'], bricksContainer),
          _react2['default'].createElement(
            'footer',
            { className: 'page-footer' },
            this.renderFooter(bottomLinkUrl, bottomLinkTitle)
          )
        )
      );
    }
  }]);

  return LandingPageBody;
})();

LandingPageBody.propTypes = {
  bottomLinkTitle: _react.PropTypes.string,
  bottomLinkUrl: _react.PropTypes.string,
  bricksContainer: _react.PropTypes.shape(_EntryBricksEntryBricksContainer2['default'].propTypes),
  locale: _react.PropTypes.string,
  sourceImages: _react.PropTypes.array.isRequired,
  title: _react.PropTypes.string
};

exports['default'] = LandingPageBody;
module.exports = exports['default'];

},{"../EntryBricks/EntryBricksContainer":148,"../screen_viewer/screen_viewer":379,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],188:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commonScrollerScroller = require('../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var _NotificationsNotificationList = require('./NotificationsNotificationList');

var _NotificationsNotificationList2 = _interopRequireDefault(_NotificationsNotificationList);

var _NotificationsLoadingMessage = require('./NotificationsLoadingMessage');

var _NotificationsLoadingMessage2 = _interopRequireDefault(_NotificationsLoadingMessage);

var _NotificationsErrorMessage = require('./NotificationsErrorMessage');

var _NotificationsErrorMessage2 = _interopRequireDefault(_NotificationsErrorMessage);

var _sharedReactComponentsCommonSpinner = require('../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var Notifications = (function () {
  function Notifications() {
    _classCallCheck(this, Notifications);
  }

  _createClass(Notifications, [{
    key: 'handleScroll',
    value: function handleScroll(ev) {
      var _props = this.props;
      var everythingLoaded = _props.everythingLoaded;
      var loadingMore = _props.loadingMore;
      var onLoadMore = _props.onLoadMore;

      if (everythingLoaded || loadingMore) {
        return;
      }

      var el = ev.target;
      if (el.scrollTop + el.offsetHeight > el.scrollHeight * .9) {
        onLoadMore();
      }
    }
  }, {
    key: 'onClickMarkAllButton',
    value: function onClickMarkAllButton() {
      this.props.markAllAsRead();
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _props2 = this.props;
      var loading = _props2.loading;
      var notifications = _props2.notifications;
      var error = _props2.error;
      var onNotificationRead = _props2.onNotificationRead;

      if (loading && notifications.length == 0) {
        return _react2['default'].createElement(_NotificationsLoadingMessage2['default'], null);
      } else if (error) {
        return _react2['default'].createElement(_NotificationsErrorMessage2['default'], null);
      } else {
        return _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement(_NotificationsNotificationList2['default'], {
            notifications: notifications,
            onNotificationRead: onNotificationRead
          }),
          this.renderSpinner()
        );
      }
    }
  }, {
    key: 'renderSpinner',
    value: function renderSpinner() {
      if (this.props.loadingMore) {
        return _react2['default'].createElement(
          'div',
          { className: 'loader' },
          _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 14 })
        );
      }
    }
  }, {
    key: 'renderMarkAllButton',
    value: function renderMarkAllButton() {
      return this.props.notifications.some(function (el) {
        return el.read_at === null;
      }) ? _react2['default'].createElement(
        'div',
        { className: 'notifications__mark-all-read', onClick: this.onClickMarkAllButton.bind(this) },
        _react2['default'].createElement('span', { className: 'icon icon--double-tick' }),
        i18n.t('buttons.notifications.mark_all_read')
      ) : null;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'notifications' },
        this.renderMarkAllButton(),
        _react2['default'].createElement(
          _commonScrollerScroller2['default'],
          {
            className: 'scroller--notifications',
            onScroll: this.handleScroll.bind(this)
          },
          this.renderContent()
        )
      );
    }
  }]);

  return Notifications;
})();

Notifications.propTypes = {
  error: _react.PropTypes.bool.isRequired,
  everythingLoaded: _react.PropTypes.bool.isRequired,
  loading: _react.PropTypes.bool.isRequired,
  loadingMore: _react.PropTypes.bool.isRequired,
  notifications: _react.PropTypes.array.isRequired,
  onLoadMore: _react.PropTypes.func.isRequired,
  onNotificationRead: _react.PropTypes.func.isRequired
};

exports['default'] = Notifications;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Spinner":537,"../common/scroller/scroller":276,"./NotificationsErrorMessage":190,"./NotificationsLoadingMessage":191,"./NotificationsNotificationList":192,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],189:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesNotificationStore = require('../../stores/NotificationStore');

var _storesNotificationStore2 = _interopRequireDefault(_storesNotificationStore);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _actionsNotification = require('../../actions/Notification');

var _actionsNotification2 = _interopRequireDefault(_actionsNotification);

var _Notifications = require('./Notifications');

var _Notifications2 = _interopRequireDefault(_Notifications);

var NotificationsContainer = (function () {
  function NotificationsContainer() {
    _classCallCheck(this, NotificationsContainer);
  }

  _createClass(NotificationsContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _actionsNotification2['default'].load();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.props.onUpdate != null) {
        this.props.onUpdate();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.markAllAsRead();
    }
  }, {
    key: 'markAsRead',
    value: function markAsRead(notificationID) {
      _actionsNotification2['default'].markAsRead(notificationID);
    }
  }, {
    key: 'markAllAsRead',
    value: function markAllAsRead() {
      var _this = this;

      this.props.notifications.forEach(function (notification) {
        if (notification.read_at === null) {
          _this.markAsRead(notification.id);
        }
      });
    }
  }, {
    key: 'loadMore',
    value: function loadMore() {
      var notifications = this.props.notifications;

      var sinceID = notifications[notifications.length - 1].id;

      _actionsNotification2['default'].loadMore(sinceID);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_Notifications2['default'], _extends({}, this.props, {
        markAllAsRead: this.markAllAsRead.bind(this),
        onLoadMore: this.loadMore.bind(this),
        onNotificationRead: this.markAsRead.bind(this)
      }));
    }
  }]);

  return NotificationsContainer;
})();

NotificationsContainer.propTypes = {
  error: _react.PropTypes.bool.isRequired,
  everythingLoaded: _react.PropTypes.bool.isRequired,
  loading: _react.PropTypes.bool.isRequired,
  loadingMore: _react.PropTypes.bool.isRequired,
  notifications: _react.PropTypes.array.isRequired,
  onUpdate: _react.PropTypes.func
};

var ConnectedNotificationsContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(NotificationsContainer, [_storesNotificationStore2['default']], function () {
  return {
    notifications: _storesNotificationStore2['default'].getAllChrono(),
    loading: _storesNotificationStore2['default'].isLoading(),
    loadingMore: _storesNotificationStore2['default'].isLoadingMore(),
    error: _storesNotificationStore2['default'].isError(),
    everythingLoaded: _storesNotificationStore2['default'].isEverythingLoaded()
  };
});

exports['default'] = ConnectedNotificationsContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/Notification":10,"../../stores/NotificationStore":514,"./Notifications":188,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],190:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var NotificationsErrorMessage = React.createClass({
  displayName: "NotificationsErrorMessage",

  render: function render() {
    return React.createElement(
      "div",
      { className: "notifications__empty" },
      i18n.t('notifications_loading_error')
    );
  }
});

exports["default"] = NotificationsErrorMessage;
module.exports = exports["default"];

},{}],191:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var NotificationsLoadingMessage = React.createClass({
  displayName: "NotificationsLoadingMessage",

  render: function render() {
    return React.createElement(
      "div",
      { className: "notifications__empty" },
      React.createElement(Spinner, { size: 24 })
    );
  }
});

exports["default"] = NotificationsLoadingMessage;
module.exports = exports["default"];

},{}],192:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _NotificationsNotificationListItem = require('./NotificationsNotificationListItem');

var _NotificationsNotificationListItem2 = _interopRequireDefault(_NotificationsNotificationListItem);

var _NotificationsNotificationListEmpty = require('./NotificationsNotificationListEmpty');

var _NotificationsNotificationListEmpty2 = _interopRequireDefault(_NotificationsNotificationListEmpty);

var NotificationsNotificationList = React.createClass({
  displayName: 'NotificationsNotificationList',

  propTypes: {
    notifications: React.PropTypes.array.isRequired,
    onNotificationRead: React.PropTypes.func.isRequired
  },

  render: function render() {
    var _this = this;

    if (this.props.notifications.length) {
      var notifications = this.props.notifications.map(function (item) {
        return React.createElement(_NotificationsNotificationListItem2['default'], {
          notification: item,
          onNotificationRead: _this.props.onNotificationRead.bind(null, item.id),
          key: item.id });
      });

      return React.createElement(
        'ul',
        { className: 'notifications__list' },
        notifications
      );
    } else {
      return React.createElement(_NotificationsNotificationListEmpty2['default'], null);
    }
  }
});

exports['default'] = NotificationsNotificationList;
module.exports = exports['default'];

},{"./NotificationsNotificationListEmpty":193,"./NotificationsNotificationListItem":194,"babel-runtime/helpers/interop-require-default":574}],193:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var NotificationsNotificationListEmpty = React.createClass({
  displayName: "NotificationsNotificationListEmpty",

  render: function render() {
    return React.createElement(
      "div",
      { className: "notifications__empty" },
      i18n.t('notifications_empty_list')
    );
  }
});

exports["default"] = NotificationsNotificationListEmpty;
module.exports = exports["default"];

},{}],194:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedReactComponentsCommonImage = require('../../../../shared/react/components/common/Image');

var _sharedReactComponentsCommonImage2 = _interopRequireDefault(_sharedReactComponentsCommonImage);

var NotificationsNotificationListItem = React.createClass({
  displayName: 'NotificationsNotificationListItem',

  propTypes: {
    notification: React.PropTypes.object.isRequired,
    onNotificationRead: React.PropTypes.func.isRequired
  },

  render: function render() {
    var notificationClasses = (0, _classnames2['default'])('notification', {
      'state--unread': this.props.notification.read_at == null
    });

    return React.createElement(
      'li',
      { className: notificationClasses, onTouchTap: this.handleClick },
      React.createElement(
        'a',
        { href: this.props.notification.entity_url,
          target: '_blank',
          className: 'notification__link' },
        React.createElement(
          'div',
          { className: 'notification__inner' },
          React.createElement('div', { className: 'notification__read-state' }),
          React.createElement(
            'div',
            { className: 'notification__user-avatar' },
            React.createElement(UserAvatar, { user: this.props.notification.sender, size: 35 })
          ),
          this.renderImage(),
          React.createElement(
            'div',
            { className: 'notification__desc' },
            React.createElement(
              'span',
              { className: 'notification__user' },
              this.props.notification.sender.slug
            ),
            React.createElement(
              'span',
              { className: 'notification__action-text' },
              ' ',
              this.props.notification.action_text,
              ' '
            ),
            React.createElement(
              'span',
              { className: 'notification__text' },
              this.props.notification.text
            )
          )
        )
      )
    );
  },

  renderImage: function renderImage() {
    if (this.props.notification.image != null) {
      return React.createElement(_sharedReactComponentsCommonImage2['default'], {
        image: this.props.notification.image,
        maxWidth: 70,
        className: 'notification__image' });
    }
  },

  handleClick: function handleClick() {
    if (this.props.notification.read_at == null) {
      this.props.onNotificationRead();
    }
  }
});

exports['default'] = NotificationsNotificationListItem;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Image":534,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],195:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var OFFSET_TOP = 10,
    OFFSET_BOTTOM = 10;

var Pad = React.createClass({
  displayName: 'Pad',

  propTypes: {
    placement: React.PropTypes.string.isRequired,
    actSelector: React.PropTypes.string.isRequired
  },

  componentDidMount: function componentDidMount() {
    $(document).on('DOMMouseScroll mousewheel', this.calculatePositions);
    $(window).on('resize', this.calculatePositions);
    this.calculatePositions();
  },

  componentWillUnmount: function componentWillUnmount() {
    $(document).off('DOMMouseScroll mousewheel', this.calculatePositions);
    $(window).off('resize', this.calculatePositions);
  },

  render: function render() {
    var _this = this;

    var children = React.Children.map(this.props.children, function (child) {
      return React.cloneElement(child, { onUpdate: _this.calculatePositions });
    });

    return React.createElement(
      'div',
      { className: 'popup popup--notifications popup--dark front-layer' },
      React.createElement('div', { ref: 'arrow',
        className: 'popup__arrow popup__arrow--' + this.props.placement }),
      React.createElement(
        'div',
        { className: 'popup__content' },
        React.createElement(
          'div',
          { className: 'popup__body' },
          children
        )
      )
    );
  },

  calculatePositions: function calculatePositions() {
    // TODO: Придумать альтернативный вариант позиционирования
    var actNode = document.querySelector(this.props.actSelector),
        padNode = this.getDOMNode(),
        arrowNode = this.refs.arrow.getDOMNode(),
        actRect = actNode.getBoundingClientRect(),
        padRect = padNode.getBoundingClientRect(),
        arrowRect = arrowNode.getBoundingClientRect(),
        viewHeight = getViewportWH().height;

    var padTop = parseInt(actRect.top + actRect.height / 2 - padRect.height / 2);
    if (padTop < OFFSET_TOP) padTop = OFFSET_TOP;

    var arrowTop = parseInt(actRect.top - padTop + actRect.height / 2 - arrowRect.height / 2);

    if (arrowTop > OFFSET_TOP) {
      arrowNode.style.top = arrowTop + 'px';
      arrowNode.style.opacity = 1;
    } else {
      arrowNode.style.opacity = 0;
    }
    padNode.style.top = padTop + 'px';
  }
});

function getViewportWH() {
  var w = window,
      d = document,
      e = d.documentElement,
      g = document.body,
      x = w.innerWidth || e.clientWidth || g.clientWidth,
      y = w.innerHeight || e.clientHeight || g.clientHeight;

  return {
    height: y,
    width: x
  };
}

exports['default'] = Pad;
module.exports = exports['default'];

},{}],196:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Pad = require('./Pad');

var _Pad2 = _interopRequireDefault(_Pad);

function closest(el, target) {
  while (target.parentNode) {
    if (target === el) return true;
    target = target.parentNode;
  }
  return false;
}

var PadContainer = React.createClass({
  displayName: 'PadContainer',

  propTypes: {
    placement: React.PropTypes.string,
    actSelector: React.PropTypes.string.isRequired,
    onClose: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      placement: 'left'
    };
  },

  componentDidMount: function componentDidMount() {
    document.addEventListener('click', this.onDocumentClick, false);
    document.addEventListener('scroll', this.onDocumentScroll, false);
  },

  componentWillUnmount: function componentWillUnmount() {
    document.removeEventListener('click', this.onDocumentClick, false);
    document.removeEventListener('scroll', this.onDocumentScroll, false);
  },

  render: function render() {
    return React.createElement(_Pad2['default'], this.props);
  },

  onDocumentClick: function onDocumentClick(e) {
    var isClickInside = closest(this.getDOMNode(), e.target);
    if (!isClickInside) this.props.onClose();
  },

  onDocumentScroll: function onDocumentScroll() {
    this.props.onClose();
  }
});

exports['default'] = PadContainer;
module.exports = exports['default'];

},{"./Pad":195,"babel-runtime/helpers/interop-require-default":574}],197:[function(require,module,exports){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _sharedReactComponentsHigherOrderManagePositions = require('../../../../shared/react/components/higherOrder/managePositions');

var _sharedReactComponentsHigherOrderManagePositions2 = _interopRequireDefault(_sharedReactComponentsHigherOrderManagePositions);

var _PopupHeader = require('./PopupHeader');

var _PopupHeader2 = _interopRequireDefault(_PopupHeader);

var Popup = React.createClass({
  displayName: 'Popup',

  mixins: ['ReactActivitiesMixin'],

  propTypes: {
    title: React.PropTypes.string.isRequired,
    position: React.PropTypes.object.isRequired,
    className: React.PropTypes.string,
    draggable: React.PropTypes.bool,
    onClose: React.PropTypes.func.isRequired,
    onPositionChange: React.PropTypes.func.isRequired,
    children: React.PropTypes.element.isRequired
  },

  componentDidMount: function componentDidMount() {
    if (this.props.draggable) {
      this.makeDraggable();
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    // FIXME: Почему-то стили которые указаны в style не применяются при перерендере
    // Устанавливаем их принудительно при обновлении
    $(this.getDOMNode()).css(nextProps.position);
  },

  render: function render() {
    var _this = this;

    var popupClasses = ['popup', this.props.className].join(' ');
    var children = React.Children.map(this.props.children, function (child) {
      return React.cloneElement(child, { activitiesHandler: _this.activitiesHandler });
    });

    return React.createElement(
      'div',
      { className: popupClasses,
        style: this.props.position,
        onMouseDown: this.handleClick,
        onTouchStart: this.handleClick },
      React.createElement(_PopupHeader2['default'], {
        ref: 'header',
        title: this.props.title,
        hasActivities: this.hasActivities(),
        draggable: this.props.draggable,
        onClose: this.props.onClose }),
      React.createElement(
        'div',
        { className: 'popup__body' },
        children
      )
    );
  },

  makeDraggable: function makeDraggable() {
    var _this2 = this;

    var $popup = $(this.getDOMNode()),
        $header = $(this.refs.header.getDOMNode());

    $popup.draggable({
      handle: $header,
      drag: function drag() {
        return $popup.addClass('no--transition');
      },
      stop: function stop(event, ui) {
        _this2.props.onPositionChange(ui.position);
        $popup.removeClass('no--transition');
      }
    });
  },

  handleClick: function handleClick(e) {
    var popups = [].slice.call(document.querySelectorAll('.popup')),
        currentNode = this.getDOMNode();

    _Object$keys(popups).forEach(function (key) {
      var node = popups[key];

      if (node == currentNode) {
        node.classList.add('front-layer');
        node.classList.remove('back-layer');
      } else {
        node.classList.add('back-layer');
        node.classList.remove('front-layer');
      }
    });
  }
});

Popup = (0, _sharedReactComponentsHigherOrderManagePositions2['default'])(Popup);

exports['default'] = Popup;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/managePositions":549,"./PopupHeader":199,"babel-runtime/core-js/object/keys":565,"babel-runtime/helpers/interop-require-default":574}],198:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var PopupArea = React.createClass({
  displayName: "PopupArea",

  propTypes: {
    onClose: React.PropTypes.func,
    children: React.PropTypes.element.isRequired
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "popup-container" },
      React.createElement(
        "div",
        { className: "popup-container__main" },
        React.createElement(
          "div",
          { className: "popup-container__cell", onClick: this.handleClick },
          this.props.children
        )
      )
    );
  },

  handleClick: function handleClick(e) {
    if ($(e.target).hasClass('popup-container__cell')) {
      e.preventDefault();
      if (typeof this.props.onClose === 'function') {
        this.props.onClose();
      }
    }
  }
});

exports["default"] = PopupArea;
module.exports = exports["default"];

},{}],199:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _PopupSpinner = require('./PopupSpinner');

var _PopupSpinner2 = _interopRequireDefault(_PopupSpinner);

var PopupHeader = React.createClass({
  displayName: 'PopupHeader',

  propTypes: {
    title: React.PropTypes.string.isRequired,
    draggable: React.PropTypes.bool,
    hasActivities: React.PropTypes.bool.isRequired,
    onClose: React.PropTypes.func.isRequired
  },

  render: function render() {
    var headerClasses = (0, _classnames2['default'])('popup__header', {
      'cursor--move': this.props.draggable
    });

    return React.createElement(
      'div',
      { className: headerClasses },
      React.createElement(
        'div',
        { className: 'popup__headbox' },
        React.createElement(
          'h3',
          { className: 'popup__title' },
          this.props.title
        )
      ),
      this.renderSpinner(),
      React.createElement(
        'div',
        { className: 'popup__close', onClick: this.handleClick },
        React.createElement('i', { className: 'icon icon--cross' })
      )
    );
  },

  renderSpinner: function renderSpinner() {
    if (this.props.hasActivities) {
      return React.createElement(_PopupSpinner2['default'], null);
    }
  },

  handleClick: function handleClick() {
    this.props.onClose();
  }
});

exports['default'] = PopupHeader;
module.exports = exports['default'];

},{"./PopupSpinner":200,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],200:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var PopupSpinner = React.createClass({
  displayName: "PopupSpinner",

  render: function render() {
    return React.createElement(
      "div",
      { className: "popup__loader" },
      React.createElement(Spinner, { size: 8 })
    );
  }
});

exports["default"] = PopupSpinner;
module.exports = exports["default"];

},{}],201:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _commonScrollerScroller = require('../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var _RelationshipsList = require('./RelationshipsList');

var _RelationshipsList2 = _interopRequireDefault(_RelationshipsList);

var ERROR_STATE = 'error',
    LOADED_STATE = 'loaded',
    LOADING_STATE = 'loading';

var Relationships = React.createClass({
  displayName: 'Relationships',

  propTypes: {
    relationships: React.PropTypes.array.isRequired,
    actions: React.PropTypes.array,
    state: React.PropTypes.string.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadMore: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      _commonScrollerScroller2['default'],
      { className: 'scroller--relationships', onScroll: this.handleScroll },
      this.renderContent()
    );
  },

  renderContent: function renderContent() {
    var message = undefined;

    if (this.props.state === LOADING_STATE && this.props.relationships.length === 0) {
      message = React.createElement(Spinner, { size: 14 });
    } else if (this.props.state === ERROR_STATE) {
      message = 'Ошибка загрузки';
    } else {
      return [React.createElement(
        _RelationshipsList2['default'],
        {
          relationships: this.props.relationships,
          actions: this.props.actions,
          key: 'relList' },
        this.props.children
      ), this.renderSpinner()];
    }

    return React.createElement(
      'div',
      { className: 'grid-full' },
      React.createElement(
        'div',
        { className: 'grid-full__middle' },
        React.createElement(
          'div',
          { className: 'popup__text' },
          message
        )
      )
    );
  },

  renderSpinner: function renderSpinner() {
    if (this.props.state === LOADING_STATE) {
      return React.createElement(
        'div',
        { className: 'loader', key: 'loader' },
        React.createElement(Spinner, { size: 14 })
      );
    }
  },

  handleScroll: function handleScroll(e) {
    if (!this.props.canLoad || this.props.loading) return;

    var el = e.target;
    if (el.scrollTop + el.offsetHeight > el.scrollHeight * .9) {
      this.props.onLoadMore();
    }
  }
});

exports['default'] = Relationships;
module.exports = exports['default'];

},{"../common/scroller/scroller":276,"./RelationshipsList":203,"babel-runtime/helpers/interop-require-default":574}],202:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsRelationship = require('../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var _Relationships = require('./Relationships');

var _Relationships2 = _interopRequireDefault(_Relationships);

var ERROR_STATE = 'error',
    LOADED_STATE = 'loaded',
    LOADING_STATE = 'loading';

var RelationshipsContainer = React.createClass({
  displayName: 'RelationshipsContainer',

  propTypes: {
    url: React.PropTypes.string.isRequired,
    onCountUpdate: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      relationships: [],
      sincePosition: null,
      hasMore: true,
      currentState: LOADING_STATE
    };
  },

  componentDidMount: function componentDidMount() {
    this.loadRelationships();
  },

  render: function render() {
    return React.createElement(
      _Relationships2['default'],
      {
        state: this.state.currentState,
        relationships: this.state.relationships,
        canLoad: this.state.currentState === LOADED_STATE && this.state.hasMore,
        onLoadMore: this.loadRelationships },
      this.props.children
    );
  },

  loadRelationships: function loadRelationships() {
    var _this = this;

    var url = this.props.url;
    var sincePosition = this.state.sincePosition;

    this.setState({ currentState: LOADING_STATE });

    _actionsRelationship2['default'].load(url, sincePosition, 10).then(function (relationships) {
      if (_this.isMounted()) {
        var _sincePosition = null,
            hasMore = false;

        if (relationships.relationships.length) {
          _sincePosition = relationships.relationships[relationships.relationships.length - 1].position;
          hasMore = relationships.relationships.length == 10;
        }

        if (_this.props.onCountUpdate) {
          _this.props.onCountUpdate(relationships.total_count);
        }

        _this.setState({
          sincePosition: _sincePosition, hasMore: hasMore,
          relationships: _this.state.relationships.concat(relationships.relationships),
          currentState: LOADED_STATE
        });
      }
    }).fail(function () {
      if (_this.isMounted()) {
        _this.setState({ hasMore: false, currentState: ERROR_STATE });
      }
    });
  }
});

exports['default'] = RelationshipsContainer;
module.exports = exports['default'];

},{"../../actions/Relationship":11,"./Relationships":201,"babel-runtime/helpers/interop-require-default":574}],203:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _RelationshipsListItem = require('./RelationshipsListItem');

var _RelationshipsListItem2 = _interopRequireDefault(_RelationshipsListItem);

var RelationshipsList = React.createClass({
  displayName: "RelationshipsList",

  propTypes: {
    relationships: React.PropTypes.array.isRequired,
    actions: React.PropTypes.array
  },

  render: function render() {
    var _this = this;

    if (this.props.relationships.length) {
      var relationshipList = this.props.relationships.map(function (item) {
        return React.createElement(
          _RelationshipsListItem2["default"],
          { relationship: item, key: item.id },
          React.Children.map(_this.props.children, _this.renderAction.bind(_this, item))
        );
      });

      return React.createElement(
        "ul",
        { className: "persons" },
        relationshipList
      );
    } else {
      return React.createElement(
        "div",
        { className: "grid-full" },
        React.createElement(
          "div",
          { className: "grid-full__middle" },
          React.createElement(
            "div",
            { className: "popup__text" },
            "Список пуст"
          )
        )
      );
    }
  },

  renderAction: function renderAction(relationship, action) {
    var subject = relationship.reader || relationship.user;

    return React.cloneElement(action, {
      relState: relationship.state,
      subjectID: subject.id,
      subjectPrivacy: subject.is_privacy,
      key: relationship.id
    });
  }
});

exports["default"] = RelationshipsList;
module.exports = exports["default"];

},{"./RelationshipsListItem":204,"babel-runtime/helpers/interop-require-default":574}],204:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sharedReactComponentsCommonAvatar = require('../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var RelationshipsListItem = React.createClass({
  displayName: "RelationshipsListItem",

  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return false;
  },

  render: function render() {
    var user = this.props.relationship.reader || this.props.relationship.user;

    return React.createElement(
      "li",
      { className: "person" },
      React.createElement(
        "div",
        { className: "person__in" },
        React.createElement(
          "div",
          { className: "person__avatar" },
          React.createElement(
            "a",
            { href: user.tlog_url },
            React.createElement(_sharedReactComponentsCommonAvatar2["default"], { userpic: user.userpic, size: 48 })
          )
        ),
        React.createElement(
          "div",
          { className: "person__desc" },
          React.createElement(
            "a",
            { href: user.tlog_url },
            React.createElement(
              "p",
              { className: "person__name" },
              user.name
            )
          ),
          React.createElement(
            "div",
            { className: "person__count" },
            i18n.t('tlog.entries_count', { count: user.public_entries_count })
          )
        ),
        React.createElement(
          "div",
          { className: "person__actions" },
          this.props.children
        )
      )
    );
  }
});

exports["default"] = RelationshipsListItem;
module.exports = exports["default"];

},{"../../../../shared/react/components/common/Avatar":532,"babel-runtime/helpers/interop-require-default":574}],205:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsSearch = require('../../actions/search');

var _actionsSearch2 = _interopRequireDefault(_actionsSearch);

var _SearchResultsTlog = require('./SearchResultsTlog');

var _SearchResultsTlog2 = _interopRequireDefault(_SearchResultsTlog);

var _SearchResultsFeed = require('./SearchResultsFeed');

var _SearchResultsFeed2 = _interopRequireDefault(_SearchResultsFeed);

var _URIjs = require('URIjs');

var _URIjs2 = _interopRequireDefault(_URIjs);

var SearchResults = React.createClass({
  displayName: 'SearchResults',

  propTypes: {
    q: React.PropTypes.string.isRequired,
    style: React.PropTypes.string.isRequired,
    searchUrl: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      searchUrl: window.location.href
      // searchUrl: 'http://taaasty.com/live'
    };
  },

  getInitialState: function getInitialState() {
    return {
      html: '',
      page: 1,
      loading: false,
      everythingLoaded: false
    };
  },

  componentDidMount: function componentDidMount() {
    this.loadPage(this.state.page);
  },

  render: function render() {
    switch (this.props.style) {
      case 'tlog':
        return React.createElement(_SearchResultsTlog2['default'], {
          html: this.state.html,
          loading: this.state.loading,
          canLoad: !this.state.loading && !this.state.everythingLoaded,
          onLoadNextPage: this.loadNextPage });
        break;
      case 'feed':
        return React.createElement(_SearchResultsFeed2['default'], {
          html: this.state.html,
          loading: this.state.loading,
          canLoad: !this.state.loading && !this.state.everythingLoaded,
          onLoadNextPage: this.loadNextPage });
        break;
      default:
        return null;
    }
  },

  loadPage: function loadPage(page) {
    var _this = this;

    var _props = this.props;
    var q = _props.q;
    var searchUrl = _props.searchUrl;
    var style = _props.style;

    if (this.state.loading) {
      return;
    }

    this.setState({ loading: true });

    var searchUrlWithParams = (0, _URIjs2['default'])(searchUrl).setQuery({
      q: q,
      page: page,
      style: style
    });

    _actionsSearch2['default'].loadNextPage(searchUrlWithParams).then(function (html) {
      html = html.trim();

      if (html === '' && _this.state.html === '') {
        _this.setState({ html: i18n.t('search_results_empty') });
      }

      if (html === '') {
        _this.setState({ everythingLoaded: true });
        return;
      }

      var newHtml = _this.state.html ? _this.state.html + html : html;
      _this.setState({
        html: newHtml,
        page: page
      });

      // Mount new components from html
      $(document).trigger('page:change');
    }).fail(function () {
      return _this.setState({ everythingLoaded: true });
    }).always(function () {
      return _this.setState({ loading: false });
    });
  },

  loadNextPage: function loadNextPage() {
    var nextPage = this.state.page + 1;
    this.loadPage(nextPage);
  }
});

exports['default'] = SearchResults;
module.exports = exports['default'];

},{"../../actions/search":18,"./SearchResultsFeed":206,"./SearchResultsTlog":207,"URIjs":"URIjs","babel-runtime/helpers/interop-require-default":574}],206:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _masonryLayout = require('masonry-layout');

var _masonryLayout2 = _interopRequireDefault(_masonryLayout);

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var SearchResultsFeed = React.createClass({
  displayName: 'SearchResultsFeed',

  propTypes: {
    html: React.PropTypes.string.isRequired,
    loading: React.PropTypes.bool.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadNextPage: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'bricks-wrapper' },
      React.createElement(
        _commonInfiniteScrollIndex2['default'],
        {
          loading: this.props.loading,
          canLoad: this.props.canLoad,
          onLoad: this.props.onLoadNextPage,
          onAfterLoad: this.initGridManager },
        React.createElement('section', {
          ref: 'container',
          className: 'bricks',
          dangerouslySetInnerHTML: { __html: this.props.html || '' } })
      )
    );
  },

  initGridManager: function initGridManager() {
    var container = this.refs.container.getDOMNode();
    var msnry = new _masonryLayout2['default'](container, {
      itemSelector: '.brick',
      transitionDuration: '0.4s',
      isFitWidth: true,
      gutter: 20,
      hiddenStyle: {
        opacity: 0,
        transform: 'opacity(0.001)'
      },
      visibleStyle: {
        opacity: 1,
        transform: 'opacity(1)'
      }
    });
  }
});

exports['default'] = SearchResultsFeed;
module.exports = exports['default'];

},{"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574,"masonry-layout":"masonry-layout"}],207:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _commonInfiniteScrollIndex = require('../common/infiniteScroll/index');

var _commonInfiniteScrollIndex2 = _interopRequireDefault(_commonInfiniteScrollIndex);

var SearchResultsTlog = React.createClass({
  displayName: "SearchResultsTlog",

  propTypes: {
    html: React.PropTypes.string.isRequired,
    loading: React.PropTypes.bool.isRequired,
    canLoad: React.PropTypes.bool.isRequired,
    onLoadNextPage: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "content-area" },
      React.createElement("div", { className: "content-area__bg" }),
      React.createElement(
        "div",
        { className: "content-area__inner" },
        React.createElement(
          _commonInfiniteScrollIndex2["default"],
          {
            loading: this.props.loading,
            canLoad: this.props.canLoad,
            onLoad: this.props.onLoadNextPage },
          React.createElement("section", {
            className: "posts",
            dangerouslySetInnerHTML: { __html: this.props.html || '' } })
        )
      )
    );
  }
});

exports["default"] = SearchResultsTlog;
module.exports = exports["default"];

},{"../common/infiniteScroll/index":275,"babel-runtime/helpers/interop-require-default":574}],208:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Searchbox = React.createClass({
  displayName: 'Searchbox',

  propTypes: {
    searchUrl: React.PropTypes.string.isRequired,
    searchTitleI18nKey: React.PropTypes.string.isRequired,
    searchParam: React.PropTypes.string,
    onClose: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      searchParam: 'q'
    };
  },

  componentDidMount: function componentDidMount() {
    Mousetrap.bind('esc', this.close);
  },

  componentWillUnmount: function componentWillUnmount() {
    Mousetrap.unbind('esc', this.close);
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'searchbox' },
      React.createElement(
        'div',
        { className: 'searchbox__close', onClick: this.close },
        React.createElement('i', { className: 'icon icon--cross' })
      ),
      React.createElement(
        'form',
        { action: this.props.searchUrl, className: 'searchbox__form' },
        React.createElement(
          'h5',
          { className: 'searchbox__title' },
          i18n.t('searchbox_titles.' + this.props.searchTitleI18nKey)
        ),
        React.createElement('input', { type: 'text',
          name: this.props.searchParam,
          placeholder: i18n.t('searchbox_placeholder'),
          autoFocus: 'true',
          className: 'searchbox__input',
          onKeyDown: this.handleKeyDown })
      )
    );
  },

  close: function close() {
    this.props.onClose();
  },

  handleKeyDown: function handleKeyDown(e) {
    if (e.key === 'Escape') {
      this.close();
    }
  }
});

exports['default'] = Searchbox;
module.exports = exports['default'];

},{}],209:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _commonSelectBoxSelectBox = require('../common/SelectBox/SelectBox');

var _commonSelectBoxSelectBox2 = _interopRequireDefault(_commonSelectBoxSelectBox);

var SettingsLanguage = React.createClass({
  displayName: "SettingsLanguage",

  propTypes: {
    title: React.PropTypes.string.isRequired,
    value: React.PropTypes.string.isRequired,
    languages: React.PropTypes.array.isRequired,
    onChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "settings__item" },
      React.createElement(
        "div",
        { className: "settings__right" },
        React.createElement(_commonSelectBoxSelectBox2["default"], {
          value: this.props.value,
          options: this.props.languages,
          withSearchBox: false,
          onSelect: this.handleChange })
      ),
      React.createElement(
        "div",
        { className: "settings__left" },
        React.createElement(
          "h3",
          { className: "settings__title" },
          this.props.title
        )
      )
    );
  },

  handleChange: function handleChange(language) {
    this.props.onChange(language);
  }
});

exports["default"] = SettingsLanguage;
module.exports = exports["default"];

},{"../common/SelectBox/SelectBox":267,"babel-runtime/helpers/interop-require-default":574}],210:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var SettingsPhoneEdit = (function (_Component) {
  _inherits(SettingsPhoneEdit, _Component);

  function SettingsPhoneEdit() {
    _classCallCheck(this, SettingsPhoneEdit);

    _get(Object.getPrototypeOf(SettingsPhoneEdit.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      isUpdatable: false
    };
  }

  _createClass(SettingsPhoneEdit, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.phoneInput = (0, _react.findDOMNode)(this.refs.phone);
    }
  }, {
    key: 'isUpdatable',
    value: function isUpdatable() {
      return this.phoneInput.value.length && this.phoneInput.value !== this.props.phone;
    }
  }, {
    key: 'onChange',
    value: function onChange() {
      this.setState({ isUpdatable: this.isUpdatable() });
    }
  }, {
    key: 'onClick',
    value: function onClick(ev) {
      var _props = this.props;
      var onEditCancel = _props.onEditCancel;
      var onUpdate = _props.onUpdate;

      ev.preventDefault();
      if (this.state.isUpdatable) {
        onUpdate(this.phoneInput.value);
      } else {
        onEditCancel();
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(ev) {
      var _props2 = this.props;
      var onEditCancel = _props2.onEditCancel;
      var onUpdate = _props2.onUpdate;

      if (ev.key === 'Enter') {
        ev.preventDefault();
        onUpdate(ev.target.value);
      } else if (ev.key === 'Escape') {
        ev.preventDefault();
        onEditCancel();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props;
      var onEditCancel = _props3.onEditCancel;
      var phone = _props3.phone;
      var isUpdatable = this.state.isUpdatable;

      var buttonClasses = (0, _classnames2['default'])({
        'button': true,
        'button--outline': !isUpdatable,
        'button--yellow': isUpdatable
      });

      return _react2['default'].createElement(
        'div',
        { className: 'settings__item settings__item--full' },
        _react2['default'].createElement(
          'div',
          { className: 'settings__right' },
          _react2['default'].createElement(
            'button',
            { className: buttonClasses, onClick: this.onClick.bind(this) },
            _react2['default'].createElement(
              'span',
              { className: 'button__text' },
              i18n.t('settings_phone_button', { context: isUpdatable ? 'update' : 'cancel' })
            )
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'settings__left' },
          _react2['default'].createElement(
            'h3',
            { className: 'settings__title' },
            i18n.t('settings_phone')
          ),
          _react2['default'].createElement(
            'div',
            { className: 'form-field form-field--default' },
            _react2['default'].createElement('input', {
              className: 'form-field__input',
              defaultValue: phone,
              onChange: this.onChange.bind(this),
              onKeyDown: this.onKeyDown.bind(this),
              placeholder: i18n.t('settings_phone_placeholder'),
              ref: 'phone',
              type: 'tel'
            }),
            _react2['default'].createElement('div', { className: 'form-field__bg' })
          )
        )
      );
    }
  }]);

  return SettingsPhoneEdit;
})(_react.Component);

SettingsPhoneEdit.propTypes = {
  onEditCancel: _react.PropTypes.func.isRequired,
  onUpdate: _react.PropTypes.func.isRequired,
  phone: _react.PropTypes.string
};

exports['default'] = SettingsPhoneEdit;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],211:[function(require,module,exports){
/*global i18n */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var SettingsPhoneShow = (function () {
  function SettingsPhoneShow() {
    _classCallCheck(this, SettingsPhoneShow);
  }

  _createClass(SettingsPhoneShow, [{
    key: "render",
    value: function render() {
      var _props = this.props;
      var onEditStart = _props.onEditStart;
      var phone = _props.phone;

      return _react2["default"].createElement(
        "div",
        { className: "settings__item settings__item--full" },
        _react2["default"].createElement(
          "div",
          { className: "settings__right" },
          _react2["default"].createElement(
            "button",
            { className: "button button--outline", onClick: onEditStart },
            _react2["default"].createElement(
              "span",
              { className: "button__text" },
              i18n.t('settings_phone_button', { context: phone ? 'edit' : 'add' })
            )
          )
        ),
        _react2["default"].createElement(
          "div",
          { className: "settings__left" },
          _react2["default"].createElement(
            "h3",
            { className: "settings__title" },
            i18n.t('settings_phone')
          ),
          _react2["default"].createElement(
            "p",
            { className: "settings__desc" },
            phone || ''
          )
        )
      );
    }
  }]);

  return SettingsPhoneShow;
})();

SettingsPhoneShow.propTypes = {
  onEditStart: _react.PropTypes.func.isRequired,
  phone: _react.PropTypes.string
};

exports["default"] = SettingsPhoneShow;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],212:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SettingsPhoneEdit = require('./SettingsPhoneEdit');

var _SettingsPhoneEdit2 = _interopRequireDefault(_SettingsPhoneEdit);

var _SettingsPhoneShow = require('./SettingsPhoneShow');

var _SettingsPhoneShow2 = _interopRequireDefault(_SettingsPhoneShow);

var SHOW_STATE = 'show';
var EDIT_STATE = 'edit';

var SettingsPhone = (function (_Component) {
  _inherits(SettingsPhone, _Component);

  function SettingsPhone() {
    _classCallCheck(this, SettingsPhone);

    _get(Object.getPrototypeOf(SettingsPhone.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      state: SHOW_STATE
    };
  }

  _createClass(SettingsPhone, [{
    key: 'onEditCancel',
    value: function onEditCancel() {
      this.setState({ state: SHOW_STATE });
    }
  }, {
    key: 'onEditStart',
    value: function onEditStart() {
      this.setState({ state: EDIT_STATE });
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(phone) {
      this.props.onUpdate({
        phone: phone,
        success: this.onEditCancel.bind(this)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var phone = this.props.phone;

      return this.state.state === EDIT_STATE ? _react2['default'].createElement(_SettingsPhoneEdit2['default'], {
        onEditCancel: this.onEditCancel.bind(this),
        onUpdate: this.onUpdate.bind(this),
        phone: phone
      }) : _react2['default'].createElement(_SettingsPhoneShow2['default'], { onEditStart: this.onEditStart.bind(this), phone: phone });
    }
  }]);

  return SettingsPhone;
})(_react.Component);

SettingsPhone.propTypes = {
  onUpdate: _react.PropTypes.func.isRequired,
  phone: _react.PropTypes.string
};

exports['default'] = SettingsPhone;
module.exports = exports['default'];

},{"./SettingsPhoneEdit":210,"./SettingsPhoneShow":211,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],213:[function(require,module,exports){
/*global i18n */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var SettingsRadioItem = (function () {
  function SettingsRadioItem() {
    _classCallCheck(this, SettingsRadioItem);
  }

  _createClass(SettingsRadioItem, [{
    key: "handleChange",
    value: function handleChange(ev) {
      this.props.onChange(ev.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props;
      var checked = _props.checked;
      var description = _props.description;
      var id = _props.id;
      var title = _props.title;

      return _react2["default"].createElement(
        "div",
        { className: "settings__item" },
        _react2["default"].createElement(
          "div",
          { className: "settings__right" },
          _react2["default"].createElement(
            "div",
            { className: "switcher" },
            _react2["default"].createElement("input", {
              checked: checked,
              className: "switcher__input",
              id: id,
              onChange: this.handleChange.bind(this),
              type: "checkbox"
            }),
            _react2["default"].createElement(
              "label",
              { className: "switcher__label", htmlFor: id },
              _react2["default"].createElement(
                "span",
                { className: "switcher__btn switcher__btn--on" },
                i18n.t('settings_radio_button_on')
              ),
              _react2["default"].createElement(
                "span",
                { className: "switcher__btn switcher__btn--off" },
                i18n.t('settings_radio_button_off')
              )
            )
          )
        ),
        _react2["default"].createElement(
          "div",
          { className: "settings__left" },
          _react2["default"].createElement(
            "h3",
            { className: "settings__title" },
            title
          ),
          _react2["default"].createElement(
            "p",
            { className: "settings__desc" },
            description
          )
        )
      );
    }
  }]);

  return SettingsRadioItem;
})();

SettingsRadioItem.propTypes = {
  checked: _react.PropTypes.bool,
  description: _react.PropTypes.string.isRequired,
  id: _react.PropTypes.string.isRequired,
  onChange: _react.PropTypes.func.isRequired,
  title: _react.PropTypes.string.isRequired
};

SettingsRadioItem.defaultProps = {
  checked: true
};

exports["default"] = SettingsRadioItem;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],214:[function(require,module,exports){
/*global i18n, EditableField */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _servicesNotice = require('../../services/Notice');

var _servicesNotice2 = _interopRequireDefault(_servicesNotice);

var SettingsSlug = (function (_Component) {
  _inherits(SettingsSlug, _Component);

  function SettingsSlug() {
    _classCallCheck(this, SettingsSlug);

    _get(Object.getPrototypeOf(SettingsSlug.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      slug: this.props.slug
    };
  }

  _createClass(SettingsSlug, [{
    key: 'handleEditEnd',
    value: function handleEditEnd(slug) {
      if (slug) {
        if (slug !== this.state.slug) {
          this.setState({ slug: slug });
          this.props.onChange(slug);
        }
      } else {
        _servicesNotice2['default'].notifyError(i18n.t('settings_empty_slug_error'), 2000);
        //TODO: removed this.forceUpdate(), check if was necessary
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'settings__hero__name' },
        _react2['default'].createElement(EditableField, {
          defaultValue: this.state.slug,
          maxLength: 20,
          onEditEnd: this.handleEditEnd.bind(this),
          placeholder: i18n.t('settings_slug_placeholder')
        })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      onChange: _react.PropTypes.func.isRequired,
      slug: _react.PropTypes.string.isRequired
    },
    enumerable: true
  }]);

  return SettingsSlug;
})(_react.Component);

exports['default'] = SettingsSlug;
module.exports = exports['default'];

},{"../../services/Notice":503,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],215:[function(require,module,exports){
var SettingsAccounts;

SettingsAccounts = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired,
    accounts: React.PropTypes.array.isRequired
  },
  render: function() {
    var anotherAccounts;
    anotherAccounts = null;
    return React.createElement("div", {
      "className": "settings__item"
    }, React.createElement("div", {
      "className": "accounts"
    }, React.createElement("div", {
      "className": "account state--active"
    }, React.createElement("div", {
      "className": "account__actions"
    }, React.createElement("a", {
      "href": Routes.logout_path(),
      "data-method": 'delete'
    }, React.createElement("button", {
      "className": "button button--outline"
    }, React.createElement("span", {
      "className": "button__text"
    }, i18n.t('settings_accounts_logout_button'))))), React.createElement("div", {
      "className": "account__info"
    }, React.createElement("div", {
      "className": "account__avatar"
    }, React.createElement(Avatar, {
      "userpic": this.props.user.userpic,
      "name": this.props.user.name
    })), React.createElement("div", {
      "className": "account__desc"
    }, React.createElement("div", {
      "className": "account__name"
    }, this.props.user.name), React.createElement("div", {
      "className": "account__status"
    }, i18n.t('settings_accounts_account_status'))))), anotherAccounts));
  }
});

module.exports = SettingsAccounts;


},{}],216:[function(require,module,exports){
var CurrentUserServerActions, PropTypes, SettingsAvatar;

CurrentUserServerActions = require('../../actions/server/current_user');

PropTypes = React.PropTypes;

SettingsAvatar = React.createClass({
  mixins: ['ReactActivitiesUser'],
  propTypes: {
    user: PropTypes.object.isRequired,
    activitiesHandler: PropTypes.object.isRequired
  },
  componentDidMount: function() {
    return $(this.refs.avatarInput.getDOMNode()).fileupload({
      url: ApiRoutes.userpic_url(),
      replaceFileInput: false,
      start: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      fail: (function(_this) {
        return function(e, data) {
          return NoticeService.errorResponse(data);
        };
      })(this),
      done: (function(_this) {
        return function(e, data) {
          var userpic;
          userpic = data.response().jqXHR.responseJSON;
          return CurrentUserServerActions.updateUserpic(userpic);
        };
      })(this),
      always: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  componentWillUnmount: function() {
    return $(this.refs.avatarInput.getDOMNode()).fileupload('destroy');
  },
  render: function() {
    return React.createElement("div", {
      "className": "settings__hero__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.user,
      "size": 110.
    }), React.createElement("span", {
      "className": "settings__hero__avatar-overlay"
    }, React.createElement("input", {
      "ref": "avatarInput",
      "type": "file",
      "name": "file",
      "accept": "image/*",
      "className": "form-upload__input"
    }), React.createElement("span", {
      "className": "form-upload form-upload--icon"
    }, React.createElement("span", {
      "className": "form-upload__text"
    }, React.createElement("i", {
      "className": "icon icon--pencil"
    })))));
  }
});

module.exports = SettingsAvatar;


},{"../../actions/server/current_user":19}],217:[function(require,module,exports){
var ERROR_STATE, SENDING_STATE, SENT_STATE, SHOW_STATE, SettingsEmailConfirmation;

SHOW_STATE = 'show';

SENT_STATE = 'sent';

SENDING_STATE = 'sending';

ERROR_STATE = 'error';

SettingsEmailConfirmation = React.createClass({
  propTypes: {
    email: React.PropTypes.any.isRequired,
    confirmationEmail: React.PropTypes.any,
    onResend: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: SHOW_STATE,
      errorMessage: ''
    };
  },
  render: function() {
    var message;
    message = (function() {
      switch (this.state.currentState) {
        case SHOW_STATE:
          return React.createElement("span", null, i18n.t('settings_email_not_confirmed'), " ", React.createElement("a", {
            "title": i18n.t('settings_email_resend_mail'),
            "onClick": this.handleClick
          }, i18n.t('settings_email_resend_mail')), " ", i18n.t('settings_email_check_spam'));
        case SENDING_STATE:
          return i18n.t('settings_email_confirmation_process');
        case SENT_STATE:
          return i18n.t('settings_email_confirmation_sent');
        case ERROR_STATE:
          return i18n.t('settings_email_confirmation_error', {
            errorMessage: this.state.errorMessage
          });
        default:
          return console.warn('Unknown currentState of SettingsEmailConfirmation component', this.state.currentState);
      }
    }).call(this);
    return React.createElement("p", {
      "className": "settings__error"
    }, message);
  },
  isConfirmation: function() {
    return (this.props.confirmationEmail != null) && this.props.confirmationEmail !== this.props.email;
  },
  activateSendingState: function() {
    return this.setState({
      currentState: SENDING_STATE
    });
  },
  activateSentState: function() {
    return this.setState({
      currentState: SENT_STATE
    });
  },
  activateErrorState: function() {
    return this.setState({
      currentState: ERROR_STATE
    });
  },
  handleClick: function() {
    return this.props.onResend({
      beforeSend: this.activateSendingState,
      success: this.activateSentState,
      error: (function(_this) {
        return function(data) {
          return _this.setState({
            currentState: ERROR_STATE,
            errorMessage: data.responseJSON.error
          });
        };
      })(this)
    });
  }
});

module.exports = SettingsEmailConfirmation;


},{}],218:[function(require,module,exports){
var SettingsEmailEdit, classnames;

classnames = require('classnames');

SettingsEmailEdit = React.createClass({
  propTypes: {
    email: React.PropTypes.any.isRequired,
    onSubmit: React.PropTypes.func.isRequired,
    onEditCancel: React.PropTypes.func.isRequired
  },
  componentDidMount: function() {
    var emailField;
    emailField = this.refs.email.getDOMNode();
    return emailField.focus();
  },
  getInitialState: function() {
    return {
      hasInput: this.props.email.length >= 5
    };
  },
  render: function() {
    var buttonClasses;
    buttonClasses = classnames('button', {
      'button--yellow': this.state.hasInput,
      'button--outline': !this.state.hasInput
    });
    return React.createElement("div", {
      "className": "settings__item settings__item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, React.createElement("button", {
      "ref": "saveButton",
      "className": buttonClasses,
      "onMouseDown": this.handleButtonMouseDown,
      "onClick": this.handleButtonClick
    }, React.createElement("span", {
      "className": "button__text"
    }, this.getButtonTitle()))), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, i18n.t('settings_email')), React.createElement("div", {
      "className": "form-field form-field--default"
    }, React.createElement("input", {
      "ref": "email",
      "defaultValue": this.props.email,
      "onChange": this.handleInputChange,
      "onKeyDown": this.handleInputKeyDown,
      "onFocus": this.handleFocus,
      "onBlur": this.props.onEditCancel,
      "className": "form-field__input"
    }), React.createElement("div", {
      "className": "form-field__bg"
    }))));
  },
  getButtonTitle: function() {
    if (this.state.hasInput) {
      return i18n.t('settings_email_edit_save');
    } else {
      return i18n.t('settings_email_edit_cancel');
    }
  },
  handleButtonMouseDown: function(e) {
    var emailField, newEmail;
    emailField = this.refs.email.getDOMNode();
    newEmail = emailField.value;
    if (this.state.hasInput && this.props.email !== newEmail) {
      return this.props.onSubmit(newEmail);
    } else {
      return this.props.onEditCancel();
    }
  },
  handleButtonClick: function(e) {
    return e.preventDefault();
  },
  handleInputChange: function(e) {
    var hasInput, newEmail;
    newEmail = e.target.value;
    hasInput = newEmail.length >= 5;
    return this.setState({
      hasInput: hasInput
    });
  },
  handleInputKeyDown: function(e) {
    var newEmail;
    newEmail = e.target.value;
    switch (e.key) {
      case 'Enter':
        e.preventDefault();
        return this.props.onSubmit(newEmail);
      case 'Escape':
        e.preventDefault();
        return this.props.onEditCancel();
    }
  },
  handleFocus: function(e) {
    var emailField;
    emailField = e.target;
    return AppHelpers.selectAllText(emailField);
  }
});

module.exports = SettingsEmailEdit;


},{"classnames":647}],219:[function(require,module,exports){
var EDIT_STATE, ESTABLISH_STATE, SHOW_STATE, SettingsEmail, SettingsEmailEdit, SettingsEmailEstablish, SettingsEmailShow;

SettingsEmailShow = require('./show');

SettingsEmailEdit = require('./edit');

SettingsEmailEstablish = require('./establish/establish');

SHOW_STATE = 'show';

EDIT_STATE = 'edit';

ESTABLISH_STATE = 'establish';

SettingsEmail = React.createClass({
  propTypes: {
    email: React.PropTypes.any.isRequired,
    confirmationEmail: React.PropTypes.any,
    onUpdate: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired,
    onResend: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: this.getCurrentStateFromProps(this.props)
    };
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setState({
      currentState: this.getCurrentStateFromProps(nextProps)
    });
  },
  render: function() {
    switch (this.state.currentState) {
      case SHOW_STATE:
        return React.createElement(SettingsEmailShow, {
          "email": this.props.email,
          "confirmationEmail": this.props.confirmationEmail,
          "onEditStart": this.activateEditState,
          "onCancel": this.handleCancel,
          "onResend": this.props.onResend
        });
      case ESTABLISH_STATE:
        return React.createElement(SettingsEmailEstablish, {
          "onSubmit": this.handleSubmit
        });
      case EDIT_STATE:
        return React.createElement(SettingsEmailEdit, {
          "email": this.props.email,
          "onEditCancel": this.activateShowState,
          "onSubmit": this.handleSubmit
        });
      default:
        return console.warn('Unknown currentState of SettingsEmail component', this.state.currentState);
    }
  },
  activateEditState: function() {
    return this.setState({
      currentState: EDIT_STATE
    });
  },
  activateShowState: function() {
    return this.setState({
      currentState: SHOW_STATE
    });
  },
  getCurrentStateFromProps: function(props) {
    if ((props.email != null) || (props.confirmationEmail != null)) {
      return SHOW_STATE;
    } else {
      return ESTABLISH_STATE;
    }
  },
  handleSubmit: function(newEmail) {
    return this.props.onUpdate({
      email: newEmail,
      success: this.activateShowState
    });
  },
  handleCancel: function() {
    return this.props.onCancel({
      success: this.activateShowState
    });
  }
});

module.exports = SettingsEmail;


},{"./edit":218,"./establish/establish":221,"./show":223}],220:[function(require,module,exports){
var SettingsEmailEstablishEdit, classnames;

classnames = require('classnames');

SettingsEmailEstablishEdit = React.createClass({
  propTypes: {
    onSubmit: React.PropTypes.func.isRequired,
    onEditCancel: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      hasInput: false
    };
  },
  componentDidMount: function() {
    var emailField;
    emailField = this.refs.email.getDOMNode();
    return emailField.focus();
  },
  render: function() {
    var buttonClasses;
    buttonClasses = classnames('button', {
      'button--yellow': this.state.hasInput,
      'button--outline': !this.state.hasInput
    });
    return React.createElement("div", {
      "className": "settings__item settings__item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, React.createElement("button", {
      "ref": "establishButton",
      "className": buttonClasses,
      "onMouseDown": this.handleButtonMouseDown,
      "onClick": this.handleButtonClick
    }, React.createElement("span", {
      "className": "button__text"
    }, this.getButtonTitle()))), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, "Емейл"), React.createElement("div", {
      "className": "form-field form-field--default"
    }, React.createElement("input", {
      "ref": "email",
      "onChange": this.handleInputChange,
      "onKeyDown": this.handleInputKeyDown,
      "onBlur": this.props.onEditCancel,
      "className": "form-field__input"
    }), React.createElement("div", {
      "className": "form-field__bg"
    }))));
  },
  getButtonTitle: function() {
    if (this.state.hasInput) {
      return i18n.t('settings_email_establish_approve');
    } else {
      return i18n.t('settings_email_establish_disapprove');
    }
  },
  handleButtonClick: function(e) {
    return e.preventDefault();
  },
  handleButtonMouseDown: function(e) {
    var emailField, newEmail;
    emailField = this.refs.email.getDOMNode();
    newEmail = emailField.value;
    if (this.state.hasInput) {
      return this.props.onSubmit(newEmail);
    } else {
      return this.props.onEditCancel();
    }
  },
  handleInputChange: function(e) {
    var hasInput, newEmail;
    newEmail = e.target.value;
    hasInput = newEmail.length >= 5;
    return this.setState({
      hasInput: hasInput
    });
  },
  handleInputKeyDown: function(e) {
    var newEmail;
    newEmail = e.target.value;
    switch (e.key) {
      case 'Enter':
        e.preventDefault();
        return this.props.onSubmit(newEmail);
      case 'Escape':
        e.preventDefault();
        return this.props.onEditCancel();
    }
  }
});

module.exports = SettingsEmailEstablishEdit;


},{"classnames":647}],221:[function(require,module,exports){
var EDIT_STATE, SHOW_STATE, SettingsEmailEstablish, SettingsEmailEstablishEdit, SettingsEmailEstablishShow;

SettingsEmailEstablishShow = require('./show');

SettingsEmailEstablishEdit = require('./edit');

SHOW_STATE = 'show';

EDIT_STATE = 'edit';

SettingsEmailEstablish = React.createClass({
  propTypes: {
    onSubmit: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: SHOW_STATE
    };
  },
  render: function() {
    switch (this.state.currentState) {
      case SHOW_STATE:
        return React.createElement(SettingsEmailEstablishShow, {
          "onEditStart": this.activateEditState
        });
      case EDIT_STATE:
        return React.createElement(SettingsEmailEstablishEdit, {
          "onSubmit": this.props.onSubmit,
          "onEditCancel": this.activateShowState
        });
      default:
        return console.warn('Unknown currentState of SettingsEmailEstablish component', this.state.currentState);
    }
  },
  activateShowState: function() {
    return this.setState({
      currentState: SHOW_STATE
    });
  },
  activateEditState: function() {
    return this.setState({
      currentState: EDIT_STATE
    });
  }
});

module.exports = SettingsEmailEstablish;


},{"./edit":220,"./show":222}],222:[function(require,module,exports){
var SettingsEmailEstablishShow;

SettingsEmailEstablishShow = React.createClass({
  propTypes: {
    onEditStart: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "settings__item settings__item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, React.createElement("button", {
      "onClick": this.props.onEditStart,
      "className": "button button--outline"
    }, React.createElement("span", {
      "className": "button__text"
    }, i18n.t('settings_email_establish')))), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, i18n.t('settings_email')), React.createElement("p", {
      "className": "settings__desc"
    }, i18n.t('settings_email_description'))));
  }
});

module.exports = SettingsEmailEstablishShow;


},{}],223:[function(require,module,exports){
var SettingsEmailConfirmation, SettingsEmailShow;

SettingsEmailConfirmation = require('./confirmation');

SettingsEmailShow = React.createClass({
  mixins: [ReactShakeMixin],
  propTypes: {
    email: React.PropTypes.any.isRequired,
    confirmationEmail: React.PropTypes.any,
    onEditStart: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired,
    onResend: React.PropTypes.func.isRequired
  },
  render: function() {
    var button, confirmation, email;
    if (this.isConfirmation()) {
      email = this.props.confirmationEmail;
      button = React.createElement("button", {
        "className": "button button--outline",
        "onClick": this.handleCancelClick
      }, React.createElement("span", {
        "className": "button__text"
      }, i18n.t('settings_email_cancel_button')));
      confirmation = React.createElement(SettingsEmailConfirmation, {
        "email": email,
        "confirmationEmail": this.props.confirmationEmail,
        "onResend": this.props.onResend
      });
    } else {
      email = this.props.email;
      button = React.createElement("button", {
        "className": "button button--outline",
        "onClick": this.handleEditClick
      }, React.createElement("span", {
        "className": "button__text"
      }, i18n.t('settings_email_edit_button')));
    }
    return React.createElement("div", {
      "className": "settings__item settings__item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, button), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, i18n.t('settings_email')), React.createElement("p", {
      "className": "settings__desc"
    }, email), confirmation));
  },
  isConfirmation: function() {
    return this.props.confirmationEmail != null;
  },
  handleEditClick: function(e) {
    e.preventDefault();
    return this.props.onEditStart();
  },
  handleCancelClick: function(e) {
    e.preventDefault();
    return this.props.onCancel();
  }
});

module.exports = SettingsEmailShow;


},{"./confirmation":217}],224:[function(require,module,exports){
var SettingsAvatar, SettingsHeader, SettingsSlug, SettingsTitle;

SettingsAvatar = require('./avatar');

SettingsSlug = require('./SettingsSlug');

SettingsTitle = require('./title');

SettingsHeader = React.createClass({
  displayName: 'SettingsHeader',
  propTypes: {
    user: React.PropTypes.object.isRequired,
    activitiesHandler: React.PropTypes.object.isRequired,
    onSlugChange: React.PropTypes.func.isRequired,
    onTitleChange: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      isEditing: false
    };
  },
  render: function() {
    return React.createElement("div", {
      "className": "settings__header"
    }, React.createElement("div", {
      "style": this._getHeroStyles(),
      "className": "settings__hero"
    }, React.createElement("div", {
      "className": "settings__hero__overlay"
    }), React.createElement("div", {
      "className": "settings__hero__box"
    }, React.createElement(SettingsAvatar, {
      "user": this.props.user,
      "activitiesHandler": this.props.activitiesHandler
    }), React.createElement(SettingsSlug, {
      "slug": this.props.user.slug,
      "onChange": this.props.onSlugChange
    }), React.createElement(SettingsTitle, {
      "title": this.props.user.title,
      "onChange": this.props.onTitleChange
    }))));
  },
  _getHeroStyles: function() {
    var backgroundUrl;
    backgroundUrl = this.props.user.design.backgroundImageUrl;
    return {
      backgroundImage: "url(" + backgroundUrl + ")"
    };
  }
});

module.exports = SettingsHeader;


},{"./SettingsSlug":214,"./avatar":216,"./title":230}],225:[function(require,module,exports){
/*global i18n, gon */
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _header = require('./header');

var _header2 = _interopRequireDefault(_header);

var _SettingsRadioItem = require('./SettingsRadioItem');

var _SettingsRadioItem2 = _interopRequireDefault(_SettingsRadioItem);

var _SettingsPhone = require('./SettingsPhone');

var _SettingsPhone2 = _interopRequireDefault(_SettingsPhone);

var _emailEmail = require('./email/email');

var _emailEmail2 = _interopRequireDefault(_emailEmail);

var _passwordPassword = require('./password/password');

var _passwordPassword2 = _interopRequireDefault(_passwordPassword);

var _SettingsLanguage = require('./SettingsLanguage');

var _SettingsLanguage2 = _interopRequireDefault(_SettingsLanguage);

var _accounts = require('./accounts');

var _accounts2 = _interopRequireDefault(_accounts);

var _mixinsSettings = require('./mixins/settings');

var _mixinsSettings2 = _interopRequireDefault(_mixinsSettings);

var _reactLibLinkedStateMixin = require('react/lib/LinkedStateMixin');

var _reactLibLinkedStateMixin2 = _interopRequireDefault(_reactLibLinkedStateMixin);

var _constantsCrosspostConstants = require('../../constants/CrosspostConstants');

var Settings = (0, _react.createClass)({
  displayName: 'Settings',
  mixins: [_mixinsSettings2['default'], 'ReactActivitiesUser', ReactShakeMixin, RequesterMixin, ComponentManipulationsMixin, _reactLibLinkedStateMixin2['default']],

  getInitialState: function getInitialState() {
    return this.getStateFromStore();
  },

  componentDidMount: function componentDidMount() {
    CurrentUserStore.addChangeListener(this._onStoreChange);
  },

  componentWillUnmount: function componentWillUnmount() {
    CurrentUserStore.removeChangeListener(this._onStoreChange);
  },

  render: function render() {
    var user = this.state.user;

    var crossposts = (user.authentications || []).reduce(function (acc, el) {
      if (el.provider) {
        acc[el.provider] = el;
      }

      return acc;
    }, {});

    return _react2['default'].createElement(
      'div',
      { className: 'settings' },
      _react2['default'].createElement(
        'form',
        null,
        _react2['default'].createElement(_header2['default'], {
          activitiesHandler: this.props.activitiesHandler,
          onSlugChange: this.updateSlug,
          onTitleChange: this.updateTitle,
          user: user
        }),
        _react2['default'].createElement(
          'div',
          { className: 'settings__body' },
          _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: user.is_privacy,
            description: i18n.t('settings_privacy_description'),
            id: 'isPrivacy',
            onChange: this.updatePrivacy,
            title: i18n.t('settings_privacy')
          }),
          _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: user.is_daylog,
            description: i18n.t('settings_daylog_description'),
            id: 'isDaylog',
            onChange: this.updateDaylog,
            title: i18n.t('settings_daylog')
          }),
          _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: user.is_female,
            description: i18n.t('settings_gender_description'),
            id: 'isFemale',
            onChange: this.updateFemale,
            title: i18n.t('settings_gender')
          }),
          _react2['default'].createElement(_SettingsPhone2['default'], {
            onUpdate: this.updatePhone,
            phone: user.phone
          }),
          _react2['default'].createElement(_emailEmail2['default'], {
            confirmationEmail: user.confirmation_email,
            email: user.email,
            onCancel: this.cancelEmailConfirmation,
            onResend: this.resendEmailConfirmation,
            onUpdate: this.updateEmail
          }),
          _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: user.available_notifications,
            description: i18n.t('settings_notifications_description'),
            id: 'availableNotifications',
            onChange: this.updateAvailableNotifications,
            title: i18n.t('settings_notifications')
          }),
          crossposts.facebook && _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: crossposts.facebook.crossposting_cd === _constantsCrosspostConstants.CROSSPOST_OUT,
            description: i18n.t('settings_crosspost_description', { context: 'facebook' }),
            id: 'fbCrosspost',
            onChange: this.updateFbCrosspost,
            title: i18n.t('settings_crosspost', { context: 'facebook' })
          }),
          crossposts.twitter && _react2['default'].createElement(_SettingsRadioItem2['default'], {
            checked: crossposts.twitter.crossposting_cd === _constantsCrosspostConstants.CROSSPOST_OUT,
            description: i18n.t('settings_crosspost_description', { context: 'twitter' }),
            id: 'twitterCrosspost',
            onChange: this.updateTwitterCrosspost,
            title: i18n.t('settings_crosspost', { context: 'twitter' })
          }),
          _react2['default'].createElement(_passwordPassword2['default'], { onUpdate: this.updatePassword }),
          this.renderLanguage(),
          _react2['default'].createElement(_accounts2['default'], {
            accounts: [],
            user: user
          })
        )
      )
    );
  },

  renderLanguage: function renderLanguage() {
    return gon.languages && gon.languages.length > 1 && _react2['default'].createElement(_SettingsLanguage2['default'], {
      languages: gon.languages,
      onChange: this.updateLanguage,
      title: i18n.t('settings_language_title'),
      value: this.state.user.locale
    });
  },

  getStateFromStore: function getStateFromStore() {
    return { user: CurrentUserStore.getUser() };
  },

  _onStoreChange: function _onStoreChange() {
    this.setState(this.getStateFromStore());
  }
});

exports['default'] = Settings;
module.exports = exports['default'];

},{"../../constants/CrosspostConstants":402,"./SettingsLanguage":209,"./SettingsPhone":212,"./SettingsRadioItem":213,"./accounts":215,"./email/email":219,"./header":224,"./mixins/settings":226,"./password/password":228,"babel-runtime/helpers/interop-require-default":574,"react":"react","react/lib/LinkedStateMixin":705}],226:[function(require,module,exports){
var CurrentUserViewActions, ErrorService, NoticeService, SettingsMixin;

ErrorService = require('../../../../../shared/react/services/Error');

NoticeService = require('../../..//services/Notice');

CurrentUserViewActions = require('../../../actions/view/current_user');

SettingsMixin = {
  updateSlug: function(slug) {
    return CurrentUserViewActions.updateSlug({
      slug: slug,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: function(data) {
        return TastyLockingAlertController.show({
          title: i18n.t('settings_alert_header'),
          message: i18n.t('settings_redirect', {
            tlogUrl: data.tlog_url
          }),
          action: function() {
            return window.location = data.tlog_url;
          }
        });
      },
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateTitle: function(title) {
    return CurrentUserViewActions.updateTitle({
      title: title,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_description_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updatePrivacy: function(privacy) {
    return CurrentUserViewActions.updatePrivacy({
      privacy: privacy,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_privacy_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateDaylog: function(daylog) {
    return CurrentUserViewActions.updateDaylog({
      daylog: daylog,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_daylog_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateFemale: function(female) {
    return CurrentUserViewActions.updateFemale({
      female: female,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_gender_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updatePassword: function(arg) {
    var password, success;
    password = arg.password, success = arg.success;
    return CurrentUserViewActions.updatePassword({
      password: password,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          NoticeService.notifySuccess(i18n.t('settings_change_password_success'), 2000);
          return typeof success === "function" ? success() : void 0;
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateAvailableNotifications: function(availableNotifications) {
    return CurrentUserViewActions.updateAvailableNotifications({
      availableNotifications: availableNotifications,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_notifications_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateFbCrosspost: function(allow) {
    var href;
    if (allow) {
      href = CurrentUserStore.getOmniauthEnableUrl('facebook');
      if (href) {
        return TastyLockingAlertController.show({
          title: i18n.t('settings_alert_header'),
          message: i18n.t('settings_alert_redirect', {
            context: 'facebook'
          }),
          action: (function(_this) {
            return function() {
              return window.location.href = href;
            };
          })(this)
        });
      } else {
        ErrorService.notifyError('Отсутствует URL для соц. авторизации', {
          componentName: this.constructor.displayName,
          method: 'updateFbCrosspost',
          userId: CurrentUserStore.getUserID(),
          social: 'facebook'
        });
        return NoticeService.notifyError(i18n.t('settings_change_crosspost_error', {
          context: 'facebook'
        }), 2000);
      }
    } else {
      return CurrentUserViewActions.stopFbCrosspost({
        beforeSend: (function(_this) {
          return function() {
            return _this.incrementActivities();
          };
        })(this),
        success: (function(_this) {
          return function() {
            return NoticeService.notifySuccess(i18n.t('settings_change_crosspost_success', {
              context: 'facebook'
            }), 2000);
          };
        })(this),
        complete: (function(_this) {
          return function() {
            return _this.decrementActivities();
          };
        })(this)
      });
    }
  },
  updateTwitterCrosspost: function(allow) {
    var href;
    if (allow) {
      href = CurrentUserStore.getOmniauthEnableUrl('twitter');
      if (href) {
        return TastyLockingAlertController.show({
          title: i18n.t('settings_alert_header'),
          message: i18n.t('settings_alert_redirect', {
            context: 'twitter'
          }),
          action: (function(_this) {
            return function() {
              return window.location.href = href;
            };
          })(this)
        });
      } else {
        ErrorService.notifyError('Отсутствует URL для соц. авторизации', {
          componentName: this.constructor.displayName,
          method: 'updateTwitterCrosspost',
          userId: CurrentUserStore.getUserID(),
          social: 'twitter'
        });
        return NoticeService.notifyError(i18n.t('settings_change_crosspost_error', {
          context: 'twitter'
        }), 2000);
      }
    } else {
      return CurrentUserViewActions.stopTwitterCrosspost({
        beforeSend: (function(_this) {
          return function() {
            return _this.incrementActivities();
          };
        })(this),
        success: (function(_this) {
          return function() {
            return NoticeService.notifySuccess(i18n.t('settings_change_crosspost_success', {
              context: 'twitter'
            }), 2000);
          };
        })(this),
        complete: (function(_this) {
          return function() {
            return _this.decrementActivities();
          };
        })(this)
      });
    }
  },
  updatePhone: function(arg) {
    var phone, success;
    phone = arg.phone, success = arg.success;
    return CurrentUserViewActions.updatePhone({
      phone: phone,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          if (typeof success === "function") {
            success();
          }
          return NoticeService.notifySuccess(i18n.t('settings_phone_change_success'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateEmail: function(arg) {
    var email, success;
    email = arg.email, success = arg.success;
    return CurrentUserViewActions.updateEmail({
      email: email,
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          if (typeof success === "function") {
            success();
          }
          return NoticeService.notifySuccess(i18n.t('settings_change_email_mail_sent'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  updateLanguage: function(language) {
    this.incrementActivities();
    return CurrentUserViewActions.updateLanguage(language).then((function() {
      NoticeService.notifySuccess(i18n.t('settings_change_language_success'), 2000);
      return setTimeout((function() {
        return window.location.reload();
      }), 1000);
    })).always(this.decrementActivities);
  },
  cancelEmailConfirmation: function() {
    return CurrentUserViewActions.cancelEmailConfirmation({
      beforeSend: (function(_this) {
        return function() {
          return _this.incrementActivities();
        };
      })(this),
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('settings_change_email_canceled'), 2000);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  },
  resendEmailConfirmation: function(arg) {
    var beforeSend, error, success;
    beforeSend = arg.beforeSend, error = arg.error, success = arg.success;
    return CurrentUserViewActions.resendEmailConfirmation({
      beforeSend: (function(_this) {
        return function() {
          _this.incrementActivities();
          return typeof beforeSend === "function" ? beforeSend() : void 0;
        };
      })(this),
      error: error,
      success: function() {
        NoticeService.notifySuccess(i18n.t('settings_change_email_mail_resent'), 2000);
        return typeof success === "function" ? success() : void 0;
      },
      complete: (function(_this) {
        return function() {
          return _this.decrementActivities();
        };
      })(this)
    });
  }
};

module.exports = SettingsMixin;


},{"../../../../../shared/react/services/Error":552,"../../..//services/Notice":503,"../../../actions/view/current_user":20}],227:[function(require,module,exports){
var CANCEL_TIMEOUT, SettingsPasswordEdit, classnames;

classnames = require('classnames');

CANCEL_TIMEOUT = 500;

SettingsPasswordEdit = React.createClass({
  propTypes: {
    onSubmit: React.PropTypes.func.isRequired,
    onEditCancel: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      hasInput: false
    };
  },
  componentWillUnmount: function() {
    return this.cancelTimeout = null;
  },
  render: function() {
    var buttonClasses;
    buttonClasses = classnames('button', {
      'button--yellow': this.state.hasInput,
      'button--outline': !this.state.hasInput
    });
    return React.createElement("div", {
      "className": "settings__item setting_item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, React.createElement("button", {
      "className": buttonClasses,
      "onClick": this.handleButtonClick
    }, React.createElement("span", {
      "className": "button__text"
    }, this.getButtonTitle()))), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, i18n.t('settings_password')), React.createElement("div", {
      "className": "form-field form-field--default"
    }, React.createElement("input", {
      "ref": "password",
      "autoFocus": true,
      "type": "password",
      "placeholder": i18n.t('settings_password_new'),
      "className": "form-field__input",
      "onKeyDown": this.handleInputKeyDown,
      "onBlur": this.handleInputBlur,
      "onChange": this.handleInputChange,
      "onFocus": this.handleInputFocus
    }), React.createElement("div", {
      "className": "form-field__bg"
    })), React.createElement("div", {
      "className": "form-field form-field--default"
    }, React.createElement("input", {
      "ref": "password_confirm",
      "type": "password",
      "placeholder": i18n.t('settings_password_new_repeat'),
      "className": "form-field__input",
      "onKeyDown": this.handleInputKeyDown,
      "onBlur": this.handleInputBlur,
      "onChange": this.handleInputChange,
      "onFocus": this.handleInputFocus
    }), React.createElement("div", {
      "className": "form-field__bg"
    }))));
  },
  isValid: function() {
    var password, passwordConfirm;
    password = this.refs.password.getDOMNode().value;
    passwordConfirm = this.refs.password_confirm.getDOMNode().value;
    switch (false) {
      case password.length !== 0:
      case passwordConfirm.length !== 0:
        NoticeService.notifyError(i18n.t('settings_password_empty_error'));
        return false;
      case password === passwordConfirm:
        NoticeService.notifyError(i18n.t('settings_password_arent_equals'));
        return false;
      default:
        return true;
    }
  },
  hasInput: function() {
    var passwordConfirmLength, passwordLength;
    passwordLength = this.refs.password.getDOMNode().value.length;
    passwordConfirmLength = this.refs.password_confirm.getDOMNode().value.length;
    return passwordLength > 0 && passwordConfirmLength > 0;
  },
  getButtonTitle: function() {
    if (this.state.hasInput) {
      return i18n.t('settings_password_save');
    } else {
      return i18n.t('settings_password_cancel');
    }
  },
  setCancelTimeout: function() {
    return this.cancelTimeout = setTimeout(this.props.onEditCancel, CANCEL_TIMEOUT);
  },
  clearCancelTimeout: function() {
    if (this.cancelTimeout) {
      return clearTimeout(this.cancelTimeout);
    }
  },
  handleButtonClick: function(e) {
    var newPassword;
    newPassword = this.refs.password.getDOMNode().value;
    e.preventDefault();
    this.clearCancelTimeout();
    if (this.state.hasInput && this.isValid()) {
      return this.props.onSubmit(newPassword);
    }
  },
  handleInputBlur: function() {
    return this.setCancelTimeout();
  },
  handleInputFocus: function() {
    return this.clearCancelTimeout();
  },
  handleInputChange: function(e) {
    return this.setState({
      hasInput: this.hasInput()
    });
  },
  handleInputKeyDown: function(e) {
    var newPassword;
    newPassword = e.target.value;
    switch (e.key) {
      case 'Enter':
        e.preventDefault();
        if (this.isValid()) {
          return this.props.onSubmit(newPassword);
        }
        break;
      case 'Escape':
        e.preventDefault();
        return this.props.onEditCancel();
    }
  }
});

module.exports = SettingsPasswordEdit;


},{"classnames":647}],228:[function(require,module,exports){
var EDIT_STATE, SHOW_STATE, SettingsPassword, SettingsPasswordEdit, SettingsPasswordShow;

SettingsPasswordShow = require('./show');

SettingsPasswordEdit = require('./edit');

SHOW_STATE = 'show';

EDIT_STATE = 'edit';

SettingsPassword = React.createClass({
  propTypes: {
    onUpdate: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: SHOW_STATE
    };
  },
  render: function() {
    switch (this.state.currentState) {
      case SHOW_STATE:
        return React.createElement(SettingsPasswordShow, {
          "onEditStart": this.activateEditState
        });
      case EDIT_STATE:
        return React.createElement(SettingsPasswordEdit, {
          "onSubmit": this.handleSubmit,
          "onEditCancel": this.activateShowState
        });
      default:
        return console.warn('Unknown currentState of SettingsPassword component', this.state.currentState);
    }
  },
  activateShowState: function() {
    return this.setState({
      currentState: SHOW_STATE
    });
  },
  activateEditState: function() {
    return this.setState({
      currentState: EDIT_STATE
    });
  },
  handleSubmit: function(newPassword) {
    return this.props.onUpdate({
      password: newPassword,
      success: this.activateShowState
    });
  }
});

module.exports = SettingsPassword;


},{"./edit":227,"./show":229}],229:[function(require,module,exports){
var SettingsPasswordShow;

SettingsPasswordShow = React.createClass({
  propTypes: {
    onEditStart: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "settings__item settings__item--full"
    }, React.createElement("div", {
      "className": "settings__right"
    }, React.createElement("button", {
      "className": "button button--outline",
      "onClick": this.handleButtonClick
    }, React.createElement("span", {
      "className": "button__text"
    }, i18n.t('settings_password_edit_button')))), React.createElement("div", {
      "className": "settings__left"
    }, React.createElement("h3", {
      "className": "settings__title"
    }, i18n.t('settings_password')), React.createElement("p", {
      "className": "settings__desc"
    }, i18n.t('settings_password_description'))));
  },
  handleButtonClick: function(e) {
    e.preventDefault();
    return this.props.onEditStart();
  }
});

module.exports = SettingsPasswordShow;


},{}],230:[function(require,module,exports){
var SettingsTitle;

SettingsTitle = React.createClass({
  displayName: 'SettingsTitle',
  propTypes: {
    title: React.PropTypes.string,
    onChange: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      title: this.props.title || ''
    };
  },
  render: function() {
    return React.createElement("div", {
      "className": "settings__hero__text"
    }, React.createElement(EditableField, {
      "defaultValue": this.state.title,
      "placeholder": i18n.t('settings_description_placeholder'),
      "onEditEnd": this.handleEditEnd
    }));
  },
  handleEditEnd: function(title) {
    if (title !== this.props.title) {
      this.setState({
        title: title
      });
      return this.props.onChange(title);
    } else {
      return this.forceUpdate();
    }
  }
});

module.exports = SettingsTitle;


},{}],231:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Tab = React.createClass({
  displayName: 'Tab',

  propTypes: {
    count: React.PropTypes.number,
    active: React.PropTypes.bool,
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    var linkClasses = (0, _classnames2['default'])('tabs-nav__link', {
      'state--active': this.props.active
    });

    return React.createElement(
      'li',
      { className: 'tabs-nav__item', onTouchTap: this.props.onClick },
      React.createElement(
        'a',
        { className: linkClasses },
        this.props.children,
        ' ',
        this.renderCount()
      )
    );
  },

  renderCount: function renderCount() {
    if (this.props.count != null) {
      return React.createElement(
        'span',
        { className: 'tabs-nav__count' },
        this.props.count
      );
    }
  }
});

exports['default'] = Tab;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"classnames":647}],232:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var TabPane = React.createClass({
  displayName: 'TabPane',

  propTypes: {
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool
  },

  render: function render() {
    var classes = (0, _classnames2['default'])('tabs-panel', {
      'state--active': this.props.active
    });

    return React.createElement(
      'div',
      { className: classes },
      this.props.children
    );
  }
});

exports['default'] = TabPane;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"classnames":647}],233:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tab = require('./Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var TabbedArea = React.createClass({
  displayName: "TabbedArea",

  getInitialState: function getInitialState() {
    return {
      activeKey: 0
    };
  },

  render: function render() {
    var validChildren = [];

    React.Children.forEach(this.props.children, function (child) {
      if (React.isValidElement(child)) validChildren.push(child);
    });

    function renderTabIfSet(child, index) {
      return child.props.tab != null ? this.renderTab(child, index) : null;
    };

    var nav = React.createElement(
      "nav",
      { className: "tabs-nav tabs-nav--white" },
      React.createElement(
        "ul",
        { className: "tabs-nav__list" },
        validChildren.map(renderTabIfSet.bind(this))
      )
    );

    return React.createElement(
      "div",
      null,
      nav,
      React.createElement(
        "div",
        { className: "tabs-content", ref: "panes" },
        validChildren.map(this.renderPane)
      )
    );
  },

  renderTab: function renderTab(child, index) {
    var _child$props = child.props;
    var tab = _child$props.tab;
    var count = _child$props.count;
    var disabled = _child$props.disabled;

    return React.createElement(
      _Tab2["default"],
      { ref: 'tab' + index,
        active: this.state.activeKey === index,
        count: count,
        disabled: disabled,
        onClick: this.handleTabClick.bind(null, index),
        key: index },
      tab
    );
  },

  renderPane: function renderPane(child, index) {
    return React.cloneElement(child, {
      active: this.state.activeKey === index,
      key: child.key ? child.key : index
    });
  },

  handleTabClick: function handleTabClick(index) {
    this.setState({ activeKey: index });
  }
});

exports["default"] = TabbedArea;
module.exports = exports["default"];

},{"./Tab":231,"babel-runtime/helpers/interop-require-default":574}],234:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var TlogAlert = _react2["default"].createClass({
  displayName: "TlogAlert",

  propTypes: {
    text: _react2["default"].PropTypes.string.isRequired
  },

  render: function render() {
    return _react2["default"].createElement(
      "div",
      { className: "alert" },
      _react2["default"].createElement(
        "div",
        { className: "alert__text" },
        this.props.text
      )
    );
  }
});

exports["default"] = TlogAlert;
module.exports = exports["default"];

},{"babel-runtime/helpers/interop-require-default":574,"react":"react"}],235:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _TlogAlert = require('./TlogAlert');

var _TlogAlert2 = _interopRequireDefault(_TlogAlert);

var TYPES = ['owner_private_tlog', 'tlog_private', 'tlog_favorites', 'tlog_my_favorites'];

var TlogAlertContainer = React.createClass({
  displayName: 'TlogAlertContainer',

  propTypes: {
    type: React.PropTypes.oneOf(TYPES).isRequired,
    userPrivate: React.PropTypes.bool.isRequired
  },

  render: function render() {
    var _props = this.props;
    var type = _props.type;
    var userPrivate = _props.userPrivate;

    if (type != null && TYPES.indexOf(type) != -1) {
      if (type != 'owner_private_tlog' || type == 'owner_private_tlog' && userPrivate) {
        return React.createElement(_TlogAlert2['default'], { text: i18n.t('tlog_alert.' + type) });
      }
    }

    return null;
  }
});

TlogAlertContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(TlogAlertContainer, [_storesCurrent_user2['default']], function (props) {
  return {
    userPrivate: _storesCurrent_user2['default'].isPrivate()
  };
});

exports['default'] = TlogAlertContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../stores/current_user":517,"./TlogAlert":234,"babel-runtime/helpers/interop-require-default":574}],236:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var PreviousEntriesButton = (function (_Component) {
  _inherits(PreviousEntriesButton, _Component);

  function PreviousEntriesButton() {
    _classCallCheck(this, PreviousEntriesButton);

    _get(Object.getPrototypeOf(PreviousEntriesButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      visible: false
    };
  }

  _createClass(PreviousEntriesButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var queryHash = _queryString2['default'].parse(window.location.search);
      this.setState({ visible: queryHash.since_entry_id });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.state.visible ? _react2['default'].createElement(
        'div',
        { className: 'previous-entries-button-container' },
        _react2['default'].createElement(
          'div',
          { className: 'previous-entries-button' },
          _react2['default'].createElement(
            'a',
            { href: this.props.href },
            i18n.t('buttons.load_previous_entries')
          )
        )
      ) : null;
    }
  }]);

  return PreviousEntriesButton;
})(_react.Component);

PreviousEntriesButton.propTypes = {
  href: _react.PropTypes.string.isRequired
};

exports['default'] = PreviousEntriesButton;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"query-string":661,"react":"react"}],237:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EntryTlogsEntryTlogsContainer = require('../EntryTlogs/EntryTlogsContainer');

var _EntryTlogsEntryTlogsContainer2 = _interopRequireDefault(_EntryTlogsEntryTlogsContainer);

var _PreviousEntriesButton = require('./PreviousEntriesButton');

var _PreviousEntriesButton2 = _interopRequireDefault(_PreviousEntriesButton);

var TlogPageBody = (function () {
  function TlogPageBody() {
    _classCallCheck(this, TlogPageBody);
  }

  _createClass(TlogPageBody, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var bgStyle = _props.bgStyle;
      var host_tlog_id = _props.host_tlog_id;
      var hostTlogUrl = _props.hostTlogUrl;

      return _react2['default'].createElement(
        'div',
        { className: 'page-body' },
        host_tlog_id && _react2['default'].createElement(_PreviousEntriesButton2['default'], { href: hostTlogUrl }),
        _react2['default'].createElement(
          'div',
          { className: 'content-area' },
          _react2['default'].createElement('div', { className: 'content-area__bg', style: bgStyle }),
          _react2['default'].createElement(
            'div',
            { className: 'content-area__inner' },
            _react2['default'].createElement(_EntryTlogsEntryTlogsContainer2['default'], this.props)
          )
        )
      );
    }
  }]);

  return TlogPageBody;
})();

TlogPageBody.propTypes = {
  entries_info: _react.PropTypes.object,
  bgStyle: _react.PropTypes.object,
  hostTlogUrl: _react.PropTypes.string
};

TlogPageBody.defaultProps = {
  bgStyle: { opacity: '1.0' },
  hostTlogUrl: 'http://ya.ru'
};

exports['default'] = TlogPageBody;
module.exports = exports['default'];

},{"../EntryTlogs/EntryTlogsContainer":150,"./PreviousEntriesButton":236,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],238:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _UserOnboardingListItem = require('./UserOnboardingListItem');

var _UserOnboardingListItem2 = _interopRequireDefault(_UserOnboardingListItem);

var _sharedReactComponentsCommonSpinner = require('../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var _commonScrollerScroller = require('../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var UserOnboardingList = (function () {
  function UserOnboardingList() {
    _classCallCheck(this, UserOnboardingList);
  }

  _createClass(UserOnboardingList, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var hasMore = _props.hasMore;
      var isLoading = _props.isLoading;
      var rels = _props.relationships;

      var containerClasses = (0, _classnames2['default'])({
        'user-onboarding__list': true,
        '--has-more': hasMore
      });

      return _react2['default'].createElement(
        'div',
        { className: containerClasses },
        _react2['default'].createElement(
          _commonScrollerScroller2['default'],
          { className: 'scroller--persons' },
          rels.length === 0 ? _react2['default'].createElement(
            'div',
            { className: 'grid-full' },
            _react2['default'].createElement(
              'div',
              { className: 'grid-full__middle' },
              isLoading ? _react2['default'].createElement(
                'div',
                { className: 'user-onboarding__spinner-container' },
                _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 30 })
              ) : _react2['default'].createElement(
                'div',
                { className: 'popup__text' },
                i18n.t('user_onboarding_empty_list')
              )
            )
          ) : _react2['default'].createElement(
            'ul',
            { className: 'persons' },
            rels.map(function (rel) {
              return _react2['default'].createElement(_UserOnboardingListItem2['default'], { key: rel.id, relationship: rel });
            })
          )
        )
      );
    }
  }]);

  return UserOnboardingList;
})();

UserOnboardingList.propTypes = {
  isLoading: _react.PropTypes.bool.isRequired,
  relationships: _react.PropTypes.array.isRequired
};

UserOnboardingList.defaultProps = {
  relationships: []
};

exports['default'] = UserOnboardingList;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Spinner":537,"../common/scroller/scroller":276,"./UserOnboardingListItem":239,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],239:[function(require,module,exports){
/*global FollowButton */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var UserOnboardingListItem = (function () {
  function UserOnboardingListItem() {
    _classCallCheck(this, UserOnboardingListItem);
  }

  _createClass(UserOnboardingListItem, [{
    key: "render",
    value: function render() {
      var user = this.props.relationship.user;

      return _react2["default"].createElement(
        "li",
        { className: "person" },
        _react2["default"].createElement(
          "div",
          { className: "person__in" },
          _react2["default"].createElement(
            "div",
            { className: "person__avatar" },
            _react2["default"].createElement(
              "a",
              { href: user.tlog_url },
              _react2["default"].createElement(UserAvatar, { size: 48, user: user })
            )
          ),
          _react2["default"].createElement(
            "div",
            { className: "person__desc" },
            _react2["default"].createElement(
              "a",
              { href: user.tlog_url },
              _react2["default"].createElement(
                "p",
                { className: "person__name" },
                user.name
              )
            ),
            _react2["default"].createElement(
              "div",
              { className: "person__count" },
              user.title
            )
          ),
          _react2["default"].createElement(
            "div",
            { className: "person__actions" },
            _react2["default"].createElement(FollowButton, { relationship: this.props.relationship })
          )
        )
      );
    }
  }]);

  return UserOnboardingListItem;
})();

UserOnboardingListItem.propTypes = {
  relationship: _react.PropTypes.object.isRequired
};

UserOnboardingListItem.defaultProps = {
  relationship: {
    user: {}
  }
};

exports["default"] = UserOnboardingListItem;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],240:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonSpinner = require('../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var UserOnboardingMoreButton = (function () {
  function UserOnboardingMoreButton() {
    _classCallCheck(this, UserOnboardingMoreButton);
  }

  _createClass(UserOnboardingMoreButton, [{
    key: 'showMore',
    value: function showMore() {
      var _props = this.props;
      var isLoading = _props.isLoading;
      var showMore = _props.showMore;

      !isLoading && showMore();
    }
  }, {
    key: 'render',
    value: function render() {
      var isLoading = this.props.isLoading;

      return _react2['default'].createElement(
        'div',
        { className: 'popup__more' },
        _react2['default'].createElement(
          'button',
          { className: 'more-button', onClick: this.showMore.bind(this) },
          isLoading ? _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 24 }) : i18n.t('load_more_button')
        )
      );
    }
  }]);

  return UserOnboardingMoreButton;
})();

UserOnboardingMoreButton.propTypes = {
  isLoading: _react.PropTypes.bool.isRequired,
  showMore: _react.PropTypes.func.isRequired
};

exports['default'] = UserOnboardingMoreButton;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Spinner":537,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],241:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _UserOnboardingList = require('./UserOnboardingList');

var _UserOnboardingList2 = _interopRequireDefault(_UserOnboardingList);

var _UserOnboardingMoreButton = require('./UserOnboardingMoreButton');

var _UserOnboardingMoreButton2 = _interopRequireDefault(_UserOnboardingMoreButton);

var _storesUserOnboardingStore = require('../../stores/UserOnboardingStore');

var _storesUserOnboardingStore2 = _interopRequireDefault(_storesUserOnboardingStore);

var _actionsUserOnboardingActions = require('../../actions/UserOnboardingActions');

var UserOnboardingActions = _interopRequireWildcard(_actionsUserOnboardingActions);

var RELS_PER_PAGE = 6;

var UserOnboarding = (function (_Component) {
  _inherits(UserOnboarding, _Component);

  function UserOnboarding() {
    _classCallCheck(this, UserOnboarding);

    _get(Object.getPrototypeOf(UserOnboarding.prototype), 'constructor', this).apply(this, arguments);

    this.state = _Object$assign({}, this.getStoreState(), { page: 0 });
  }

  _createClass(UserOnboarding, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _state = this.state;
      var isLoading = _state.isLoading;
      var rels = _state.relationships;

      this.sync = this._syncWithStore.bind(this);
      _storesUserOnboardingStore2['default'].addChangeListener(this.sync);
      if (rels.length === 0 && !isLoading) {
        UserOnboardingActions.load();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _storesUserOnboardingStore2['default'].removeChangeListener(this.sync);
    }
  }, {
    key: 'getStoreState',
    value: function getStoreState() {
      return _storesUserOnboardingStore2['default'].getState();
    }
  }, {
    key: '_syncWithStore',
    value: function _syncWithStore() {
      this.setState(this.getStoreState());
    }
  }, {
    key: 'showMore',
    value: function showMore() {
      this.setState({ page: this.state.page + 1 });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state2 = this.state;
      var isLoading = _state2.isLoading;
      var page = _state2.page;
      var relationships = _state2.relationships;

      var relationshipsPage = relationships.slice(0, (page + 1) * RELS_PER_PAGE);
      var hasMore = (page + 1) * RELS_PER_PAGE < relationships.length;

      return _react2['default'].createElement(
        'div',
        { className: 'user-onboarding' },
        _react2['default'].createElement(
          'div',
          { className: 'user-onboarding__header' },
          i18n.t('user_onboarding_header')
        ),
        _react2['default'].createElement(
          'div',
          { className: 'user-onboarding__body' },
          _react2['default'].createElement(_UserOnboardingList2['default'], {
            hasMore: hasMore,
            isLoading: isLoading,
            relationships: relationshipsPage
          }),
          hasMore && _react2['default'].createElement(_UserOnboardingMoreButton2['default'], { isLoading: isLoading, showMore: this.showMore.bind(this) })
        )
      );
    }
  }]);

  return UserOnboarding;
})(_react.Component);

exports['default'] = UserOnboarding;
module.exports = exports['default'];

},{"../../actions/UserOnboardingActions":14,"../../stores/UserOnboardingStore":515,"./UserOnboardingList":238,"./UserOnboardingMoreButton":240,"babel-runtime/core-js/object/assign":561,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],242:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _entitiesTimer = require('../../entities/Timer');

var _entitiesTimer2 = _interopRequireDefault(_entitiesTimer);

var Notice = React.createClass({
  displayName: 'Notice',

  propTypes: {
    text: React.PropTypes.string.isRequired,
    type: React.PropTypes.string.isRequired,
    timeout: React.PropTypes.number.isRequired,
    onClose: React.PropTypes.func.isRequired
  },

  componentDidMount: function componentDidMount() {
    this.calculateStyles();
    this.timer = new _entitiesTimer2['default'](this.close, this.props.timeout);
  },

  componentWillUnmount: function componentWillUnmount() {
    this.pause();
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'notice notice--' + this.props.type,
        onClick: this.close,
        onMouseEnter: this.pause,
        onMouseLeave: this.resume },
      React.createElement(
        'div',
        { className: 'notice__inner' },
        this.props.text
      )
    );
  },

  calculateStyles: function calculateStyles() {
    var node = this.getDOMNode();
    node.style.marginLeft = node.offsetWidth / -2 + 'px';
  },

  close: function close() {
    var $node = $(this.getDOMNode());
    $node.fadeOut('fast', this.props.onClose);
  },

  pause: function pause() {
    this.timer.pause();
  },

  resume: function resume() {
    this.timer.resume();
  }
});

exports['default'] = Notice;
module.exports = exports['default'];

},{"../../entities/Timer":428,"babel-runtime/helpers/interop-require-default":574}],243:[function(require,module,exports){
var FADE_DURATION;

FADE_DURATION = 300;

window.TastyAlert = React.createClass({
  mixins: [ReactUnmountMixin],
  propTypes: {
    title: React.PropTypes.string,
    message: React.PropTypes.string.isRequired,
    buttonText: React.PropTypes.string,
    buttonColor: React.PropTypes.string,
    onAccept: React.PropTypes.func
  },
  getDefaultProps: function() {
    return {
      buttonText: 'OK',
      buttonColor: 'red'
    };
  },
  componentDidMount: function() {
    this.open();
    return $('body').addClass('no-scroll confirmation-enabled');
  },
  componentWillUnmount: function() {
    return $('body').removeClass('no-scroll confirmation-enabled');
  },
  render: function() {
    var title;
    if (this.props.title) {
      title = React.createElement("b", null, this.props.title);
    }
    return React.createElement("div", {
      "className": "confirmation"
    }, React.createElement("div", {
      "className": "confirmation__main"
    }, React.createElement("div", {
      "className": "confirmation__cell"
    }, React.createElement("div", {
      "className": "confirmation__box"
    }, title, React.createElement("div", {
      "dangerouslySetInnerHTML": {
        __html: this.props.message || ''
      },
      "className": "confirmation__text"
    }), React.createElement("div", {
      "className": "confirmation__buttons"
    }, React.createElement("button", {
      "onClick": this.onAccept,
      "className": "button button--" + this.props.buttonColor + " button--small"
    }, this.props.buttonText))))));
  },
  open: function() {
    return $(this.getDOMNode()).css('display', 'none').fadeIn(FADE_DURATION);
  },
  close: function() {
    return $(this.getDOMNode()).fadeOut(FADE_DURATION, this.unmount);
  },
  onAccept: function() {
    this.close();
    if (this.props.onAccept != null) {
      return this.props.onAccept();
    }
  }
});


},{}],244:[function(require,module,exports){
var FADE_DURATION;

FADE_DURATION = 300;

window.TastyConfirm = React.createClass({
  mixins: [ReactUnmountMixin],
  propTypes: {
    message: React.PropTypes.string.isRequired,
    onAccept: React.PropTypes.func.isRequired,
    acceptButtonText: React.PropTypes.string,
    rejectButtonText: React.PropTypes.string,
    acceptButtonColor: React.PropTypes.string
  },
  getDefaultProps: function() {
    return {
      acceptButtonText: 'OK',
      rejectButtonText: 'Отмена',
      acceptButtonColor: 'red'
    };
  },
  componentDidMount: function() {
    this.open();
    $('body').addClass('no-scroll confirmation-enabled');
    return Mousetrap.bind('esc', this.close);
  },
  componentWillUnmount: function() {
    $('body').removeClass('no-scroll confirmation-enabled');
    return Mousetrap.unbind('esc', this.close);
  },
  render: function() {
    return React.createElement("div", {
      "className": "confirmation"
    }, React.createElement("div", {
      "className": "confirmation__main"
    }, React.createElement("div", {
      "className": "confirmation__cell"
    }, React.createElement("div", {
      "onClick": this.close,
      "className": "confirmation__close"
    }, React.createElement("i", {
      "className": "icon icon--cross"
    })), React.createElement("div", {
      "className": "confirmation__box"
    }, React.createElement("div", {
      "dangerouslySetInnerHTML": {
        __html: this.props.message || ''
      },
      "className": "confirmation__text"
    }), React.createElement("div", {
      "className": "confirmation__buttons"
    }, React.createElement("button", {
      "onClick": this.onAccept,
      "className": "button button--" + this.props.acceptButtonColor + " button--small"
    }, this.props.acceptButtonText))))));
  },
  open: function() {
    return $(this.getDOMNode()).css('display', 'none').fadeIn(FADE_DURATION);
  },
  close: function() {
    return $(this.getDOMNode()).fadeOut(FADE_DURATION, this.unmount);
  },
  onAccept: function() {
    this.close();
    return this.props.onAccept.call();
  }
});


},{}],245:[function(require,module,exports){
var FADE_DURATION, START_TIMEOUT;

FADE_DURATION = 300;

START_TIMEOUT = 3000;

window.TastyLockingAlert = React.createClass({
  propTypes: {
    title: React.PropTypes.string,
    message: React.PropTypes.string.isRequired,
    action: React.PropTypes.func.isRequired
  },
  componentDidMount: function() {
    this.open();
    setTimeout(((function(_this) {
      return function() {
        return _this.props.action();
      };
    })(this)), START_TIMEOUT);
    return $('body').addClass('no-scroll confirmation-enabled');
  },
  componentWillUnmount: function() {
    return $('body').removeClass('no-scroll confirmation-enabled');
  },
  render: function() {
    var title;
    if (this.props.title) {
      title = React.createElement("b", null, this.props.title);
    }
    return React.createElement("div", {
      "className": "confirmation"
    }, React.createElement("div", {
      "className": "confirmation__main"
    }, React.createElement("div", {
      "className": "confirmation__cell"
    }, React.createElement("div", {
      "className": "confirmation__box"
    }, title, React.createElement("div", {
      "dangerouslySetInnerHTML": {
        __html: this.props.message || ''
      },
      "className": "confirmation__text"
    }), React.createElement("div", {
      "className": "confirmation__buttons"
    }, React.createElement(Spinner, {
      "size": 30.
    }))))));
  },
  open: function() {
    return $(this.getDOMNode()).css('display', 'none').fadeIn(FADE_DURATION);
  }
});


},{}],246:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var UserAvatar = (function (_Component) {
  _inherits(UserAvatar, _Component);

  function UserAvatar() {
    _classCallCheck(this, UserAvatar);

    _get(Object.getPrototypeOf(UserAvatar.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      user: this.props.user
    };
  }

  _createClass(UserAvatar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateUserpic = this._updateUserpic.bind(this);
      TastyEvents.on(TastyEvents.keys.user_property_changed('avatar', this.props.user.id), this.updateUserpic);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      TastyEvents.off(TastyEvents.keys.user_property_changed('avatar', this.props.user.id), this.updateUserpic);
    }
  }, {
    key: '_updateUserpic',
    value: function _updateUserpic(userpic) {
      this.setState(_extends({}, this.state.user, { userpic: userpic }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _state$user = this.state.user;
      var name = _state$user.name;
      var tag = _state$user.tag;
      var userpic = _state$user.userpic;

      return _react2['default'].createElement(Avatar, {
        name: tag || name,
        size: this.props.size,
        userpic: userpic
      });
    }
  }]);

  return UserAvatar;
})(_react.Component);

UserAvatar.propTypes = {
  user: _react.PropTypes.object.isRequired,
  size: _react.PropTypes.number
};

exports['default'] = UserAvatar;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],247:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.Avatar = React.createClass({
  displayName: 'Avatar',
  propTypes: {
    name: React.PropTypes.string.isRequired,
    userpic: React.PropTypes.object.isRequired,
    size: React.PropTypes.number
  },
  getDefaultProps: function() {
    return {
      size: 220
    };
  },
  render: function() {
    var avatarClasses, avatarStyles, avatarSymbol, avatarUrl;
    avatarUrl = this.props.userpic.original_url || this.props.userpic.large_url;
    avatarSymbol = this.props.userpic.symbol;
    avatarClasses = classnames('avatar', {
      'anonymous_char': this.isAnonymous()
    });
    if (avatarUrl != null) {
      avatarUrl = ThumborService.imageUrl({
        url: avatarUrl,
        path: this.props.userpic.thumbor_path,
        size: this.props.size + 'x' + this.props.size
      });
      avatarStyles = {
        backgroundImage: "url('" + avatarUrl + "')"
      };
      return React.createElement("span", {
        "style": avatarStyles,
        "className": avatarClasses
      }, React.createElement("img", {
        "src": avatarUrl,
        "alt": this.props.name,
        "className": "avatar__img"
      }));
    } else {
      avatarStyles = {
        backgroundColor: this.props.userpic.default_colors.background,
        color: this.props.userpic.default_colors.name
      };
      return React.createElement("span", {
        "style": avatarStyles,
        "className": avatarClasses,
        "title": this.props.name
      }, React.createElement("span", {
        "className": "avatar__text"
      }, avatarSymbol));
    }
  },
  isAnonymous: function() {
    return this.props.userpic.kind === 'anonymous';
  },
  isUser: function() {
    return this.props.userpic.kind === 'user';
  }
});


},{"classnames":647}],248:[function(require,module,exports){
window.LoadMoreButton = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "popup__more"
    }, React.createElement("button", {
      "onClick": this.props.onClick,
      "className": "more-button"
    }, i18n.t('load_more_button')));
  }
});


},{}],249:[function(require,module,exports){
var CALENDAR_CLOSED, CALENDAR_OPENED_BY_CLICK, CALENDAR_OPENED_BY_HOVER, MOUSE_LEAVE_TIMEOUT, TARGET_POST_CLASS, TARGET_POST_PARENT_CLASS, classnames;

classnames = require('classnames');

MOUSE_LEAVE_TIMEOUT = 300;

CALENDAR_CLOSED = 'closed';

CALENDAR_OPENED_BY_HOVER = 'openedByHover';

CALENDAR_OPENED_BY_CLICK = 'openedByClick';

TARGET_POST_CLASS = '.post';

TARGET_POST_PARENT_CLASS = '.posts';

window.Calendar = React.createClass({
  mixins: [RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number,
    entryCreatedAt: React.PropTypes.string,
    tlogId: React.PropTypes.number.isRequired
  },
  getInitialState: function() {
    return {
      calendar: null,
      currentState: CALENDAR_CLOSED,
      headerDate: this.headerDate(),
      selectedEntryId: this.props.entryId,
      visibleMarkers: null
    };
  },
  componentDidMount: function() {
    var $post;
    this.getCalendarFromServer(this.props.tlogId);
    this.setVisibleMarkers();
    $post = $(TARGET_POST_CLASS);
    if ($post.closest(TARGET_POST_PARENT_CLASS)) {
      return $(document).on('waypoint.trigger', (function(_this) {
        return function(ev, arg) {
          var id, time;
          id = arg.id, time = arg.time;
          return _this.updateSelectedEntry(id, time);
        };
      })(this));
    }
  },
  componentWillUnmount: function() {
    if (this.timeout) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    var calendarClasses, children, message, ref, ref1, ref2, ref3;
    calendarClasses = classnames('calendar', {
      'calendar--open': this.isOpen(),
      'calendar--closed': !this.isOpen(),
      'calendar--opened-by-click': this.isOpenedByClick()
    });
    children = React.createElement(CalendarHeader, {
      "date": this.state.headerDate
    });
    if (this.isOpen()) {
      if (((ref = this.state.calendar) != null ? (ref1 = ref.periods) != null ? ref1.length : void 0 : void 0) > 0) {
        children = React.createElement(CalendarTimeline, {
          "visibleMarkers": this.state.visibleMarkers,
          "selectedEntryId": this.state.selectedEntryId,
          "periods": this.state.calendar.periods
        });
      } else {
        if (((ref2 = this.state.calendar) != null ? (ref3 = ref2.periods) != null ? ref3.length : void 0 : void 0) === 0) {
          message = React.createElement("div", null, i18n.t('calendar_empty'));
        } else {
          message = React.createElement("span", {
            "className": "spinner spinner--24x24"
          }, React.createElement("span", {
            "className": "spinner__icon"
          }));
        }
        children = React.createElement("div", {
          "className": "grid-full text--center"
        }, React.createElement("div", {
          "className": "grid-full__middle"
        }, message));
      }
    }
    return React.createElement("nav", {
      "onClick": this.onClick,
      "onMouseEnter": this.onMouseEnter,
      "onMouseLeave": this.onMouseLeave,
      "className": calendarClasses
    }, children);
  },
  getCalendarFromServer: function(tlogId) {
    return this.createRequest({
      url: ApiRoutes.calendar_url(tlogId),
      success: (function(_this) {
        return function(calendar) {
          return _this.safeUpdateState({
            calendar: calendar
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this)
    });
  },
  updateSelectedEntry: function(id, time) {
    var date;
    date = moment(time);
    return this.setState({
      headerDate: date,
      selectedEntryId: id
    });
  },
  setVisibleMarkers: function() {
    var $post, markers;
    $post = $(TARGET_POST_CLASS);
    markers = [];
    $post.each(function() {
      return markers.push(parseInt(this.dataset.id));
    });
    return this.setState({
      visibleMarkers: markers
    });
  },
  onMouseEnter: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (this.state.currentState === CALENDAR_CLOSED) {
      return this.setState({
        currentState: CALENDAR_OPENED_BY_HOVER
      });
    }
  },
  onMouseLeave: function() {
    if (this.state.currentState === CALENDAR_OPENED_BY_HOVER) {
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          return _this.safeUpdateState({
            currentState: CALENDAR_CLOSED
          });
        };
      })(this)), MOUSE_LEAVE_TIMEOUT);
    }
  },
  onClick: function() {
    switch (this.state.currentState) {
      case CALENDAR_CLOSED:
        return this.setState({
          currentState: CALENDAR_OPENED_BY_CLICK
        });
      case CALENDAR_OPENED_BY_CLICK:
        return this.setState({
          currentState: CALENDAR_CLOSED
        });
      case CALENDAR_OPENED_BY_HOVER:
        return this.setState({
          currentState: CALENDAR_OPENED_BY_CLICK
        });
      default:
        return typeof console.error === "function" ? console.error("Unknown state.currentState", this.state.currentState) : void 0;
    }
  },
  isOpen: function() {
    return this.state.currentState !== CALENDAR_CLOSED;
  },
  isOpenedByClick: function() {
    return this.state.currentState === CALENDAR_OPENED_BY_CLICK;
  },
  headerDate: function() {
    var ref;
    return moment((ref = this.props.entryCreatedAt) != null ? ref : this.firstPostDate());
  },
  firstPostDate: function() {
    var error, error1;
    try {
      return $(TARGET_POST_CLASS).get(0).dataset.time;
    } catch (error1) {
      error = error1;
      return typeof console.error === "function" ? console.error(error) : void 0;
    }
  }
});


},{"classnames":647}],250:[function(require,module,exports){
window.CalendarHeader = React.createClass({
  propTypes: {
    date: React.PropTypes.object.isRequired
  },
  render: function() {
    var day, info;
    day = this.props.date.format('D');
    info = this.props.date.format('D MMMM <br/> dddd<br/> HH:mm').slice(2);
    if (moment().year() !== this.props.date.year()) {
      info = this.props.date.format('D MMMM <br/> dddd<br/> YYYY').slice(2);
    }
    return React.createElement("div", {
      "className": "calendar__date"
    }, React.createElement("div", {
      "className": "calendar__date-day"
    }, day), React.createElement("div", {
      "className": "calendar__date-info",
      "dangerouslySetInnerHTML": {
        __html: info || ''
      }
    }));
  }
});


},{}],251:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.CalendarMarker = React.createClass({
  mixins: [ReactGrammarMixin],
  propTypes: {
    marker: React.PropTypes.object.isRequired,
    selected: React.PropTypes.bool.isRequired,
    highlighted: React.PropTypes.bool.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    return nextProps.selected !== this.props.selected || nextProps.marker.entry_id !== this.props.marker.entry_id;
  },
  render: function() {
    var createdAt, date, leftIndent, markerClasses, records;
    records = this.getNumberOfRecords(this.props.marker.comments_count);
    date = moment(this.props.marker.created_at);
    createdAt = date.format('D MMMM');
    leftIndent = this.getPercentValueOfDay(date.dayOfYear());
    markerClasses = classnames('calendar__period-marker', {
      'calendar__period-marker--current': this.props.selected,
      'calendar__period-marker--highlighted': this.props.highlighted
    });
    return React.createElement("li", null, React.createElement("a", {
      "href": this.props.marker.entry_url,
      "data-target": "#" + this.props.marker.entry_id,
      "data-marker-date": createdAt,
      "data-marker-rows": records,
      "className": markerClasses,
      "style": {
        left: leftIndent
      }
    }));
  },
  getPercentValueOfDay: function(day) {
    return (day * parseInt(100, 10) / parseInt(365, 10)).toFixed(2) + '%';
  },
  getNumberOfRecords: function(number) {
    if (number > 0) {
      return i18n.t('marker_comments_count', {
        count: number
      });
    } else {
      return i18n.t('marker_no_comments');
    }
  }
});


},{"classnames":647}],252:[function(require,module,exports){
window.CalendarPeriod = React.createClass({
  propTypes: {
    period: React.PropTypes.object.isRequired,
    selectedEntryId: React.PropTypes.number,
    visibleMarkers: React.PropTypes.array
  },
  render: function() {
    var markerNodes, that;
    that = this;
    markerNodes = this.props.period.markers.map(function(marker, i) {
      var highlighted, selected;
      selected = that.props.selectedEntryId === marker.entry_id;
      highlighted = (_.indexOf(that.props.visibleMarkers, marker.entry_id)) > -1;
      return React.createElement(CalendarMarker, {
        "selected": selected,
        "highlighted": highlighted,
        "marker": marker,
        "key": i
      });
    });
    return React.createElement("li", {
      "className": "calendar__period"
    }, React.createElement("div", {
      "className": "calendar__period-date"
    }, this.props.period.title), React.createElement("ul", {
      "className": "calendar__period-line"
    }, markerNodes));
  }
});


},{}],253:[function(require,module,exports){
window.CalendarTimeline = React.createClass({
  propTypes: {
    periods: React.PropTypes.array.isRequired,
    selectedEntryId: React.PropTypes.number,
    visibleMarkers: React.PropTypes.array
  },
  render: function() {
    var periodNodes, that;
    that = this;
    periodNodes = this.props.periods.map(function(period, i) {
      return React.createElement(CalendarPeriod, {
        "period": period,
        "activePost": that.props.activePost,
        "selectedEntryId": that.props.selectedEntryId,
        "visibleMarkers": that.props.visibleMarkers,
        "key": i
      });
    });
    return React.createElement("div", {
      "className": "calendar__timeline-viewport calendar__timeline-viewport--active"
    }, React.createElement("div", {
      "className": "calendar__timeline",
      "ref": "timeline"
    }, React.createElement("ul", {
      "className": "calendar__periods nav",
      "ref": "periodsList"
    }, periodNodes)));
  }
});


},{}],254:[function(require,module,exports){
var DropZone, PropTypes;

PropTypes = React.PropTypes;

DropZone = React.createClass({
  displayName: 'DropZone',
  propTypes: {
    global: PropTypes.bool,
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired,
    onDragOver: PropTypes.func,
    onDragLeave: PropTypes.func,
    onDrop: PropTypes.func
  },
  getDefaultProps: function() {
    return {
      global: false
    };
  },
  componentDidMount: function() {
    if (this.props.global) {
      $(document).on('dragover', this.handleDragOver);
      $(document).on('dragleave', this.handleDragLeave);
      return $(document).on('drop', this.handleDrop);
    }
  },
  componentWillUnmount: function() {
    if (this.props.global) {
      $(document).off('dragover', this.handleDragOver);
      $(document).off('dragleave', this.handleDragLeave);
      return $(document).off('drop', this.handleDrop);
    }
  },
  handleDragOver: function(e) {
    var base;
    e.preventDefault();
    return typeof (base = this.props).onDragOver === "function" ? base.onDragOver() : void 0;
  },
  handleDragLeave: function(e) {
    var base;
    e.preventDefault();
    return typeof (base = this.props).onDragLeave === "function" ? base.onDragLeave() : void 0;
  },
  handleDrop: function(e) {
    var base, files;
    e.preventDefault();
    files = e.originalEvent.dataTransfer.files;
    return typeof (base = this.props).onDrop === "function" ? base.onDrop(files) : void 0;
  },
  render: function() {
    return React.createElement("div", null, this.props.children);
  }
});

module.exports = DropZone;


},{}],255:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var DropdownButton = (function (_Component) {
  _inherits(DropdownButton, _Component);

  function DropdownButton() {
    _classCallCheck(this, DropdownButton);

    _get(Object.getPrototypeOf(DropdownButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      activeItem: this.props.activeItem || '',
      open: false
    };
  }

  _createClass(DropdownButton, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.activeItem !== nextProps.activeItem) {
        this.setState({ activeItem: nextProps.activeItem });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'person__dropdown-container',
          onMouseEnter: this.handleMouseEnter.bind(this),
          onMouseLeave: this.handleMouseLeave.bind(this) },
        _react2['default'].createElement(
          'button',
          { className: (0, _classnames2['default'])('button', this.props.buttonClassName) },
          _react2['default'].createElement('i', { className: (0, _classnames2['default'])('icon', this.props.iconClassName) })
        ),
        this.renderMenu()
      );
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu() {
      var menuClasses = (0, _classnames2['default'])('person__dropdown', {
        'state--open': this.state.open
      });

      return _react2['default'].createElement(
        'div',
        { className: menuClasses },
        _react2['default'].Children.map(this.props.children, this.renderMenuItem.bind(this))
      );
    }
  }, {
    key: 'renderMenuItem',
    value: function renderMenuItem(child, idx) {
      return (0, _react.cloneElement)(child, {
        active: this.props.activeItem === child.props.item,
        onClick: this.handleItemClick.bind(this)
      });
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      this.setState({ open: true });
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      this.setState({ open: false });
    }
  }, {
    key: 'handleItemClick',
    value: function handleItemClick(item) {
      if (this.state.activeItem !== item) {
        this.setState({ activeItem: item });
        this.props.onChange(item);
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      activeItem: _react.PropTypes.string,
      iconClassName: _react.PropTypes.string,
      buttonClassName: _react.PropTypes.string,
      onChange: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return DropdownButton;
})(_react.Component);

exports['default'] = DropdownButton;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],256:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var DropdownItem = (function () {
  function DropdownItem() {
    _classCallCheck(this, DropdownItem);
  }

  _createClass(DropdownItem, [{
    key: 'render',
    value: function render() {
      var itemClasses = (0, _classnames2['default'])('person__dropdown-item', {
        'state--active': this.props.active
      });

      return React.createElement(
        'a',
        { className: itemClasses, onClick: this.handleClick.bind(this) },
        this.props.title
      );
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      e.preventDefault();
      this.props.onClick(this.props.item);
    }
  }], [{
    key: 'propTypes',
    value: {
      item: _react.PropTypes.string.isRequired,
      title: _react.PropTypes.string.isRequired,
      active: _react.PropTypes.bool,
      onClick: _react.PropTypes.func
    },
    enumerable: true
  }]);

  return DropdownItem;
})();

exports['default'] = DropdownItem;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],257:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactTextareaAutosize = require('react-textarea-autosize');

var _reactTextareaAutosize2 = _interopRequireDefault(_reactTextareaAutosize);

var EditableField = React.createClass({
  displayName: 'EditableField',

  propTypes: {
    maxLength: React.PropTypes.number,
    value: React.PropTypes.string,
    defaultValue: React.PropTypes.string,
    returnFor: React.PropTypes.oneOf(['blur', 'nextLine']),
    onChange: React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      maxLength: 140,
      returnFor: 'nextLine'
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.value || this.props.defaultValue || '',
      focused: false
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.state.focused && prevState.focused != this.state.focused) {
      // Ставим курсор в конец
      var field = React.findDOMNode(this.refs.field);
      if (field.setSelectionRange) {
        var len = field.value.length * 2;
        field.setSelectionRange(len, len);
        field.focus();
      } else {
        field.value = field.value;
        field.focus();
      }
    }
  },

  render: function render() {
    var fieldClasses = (0, _classnames2['default'])('editable-field', {
      'state--empty': this.state.value.trim() === '',
      'state--focus': this.state.focused
    });

    return React.createElement(
      'div',
      { className: fieldClasses, onClick: this.handleClick },
      React.createElement(
        'div',
        { className: 'editable-field__control-wrap' },
        React.createElement(_reactTextareaAutosize2['default'], {
          ref: 'field',
          maxLength: this.props.maxLength,
          value: this.state.value,
          placeholder: this.props.placeholder,
          className: 'editable-field__control',
          onBlur: this.handleBlur,
          onChange: this.handleChange,
          onKeyDown: this.handleKeyDown })
      ),
      React.createElement(
        'div',
        { className: 'editable-field__content' },
        React.createElement(
          'span',
          { className: 'editable-field__placeholder' },
          this.props.placeholder
        ),
        React.createElement(
          'span',
          { className: 'editable-field__value' },
          this.state.value
        )
      )
    );
  },

  handleClick: function handleClick() {
    this.setState({ focused: true });
  },

  handleBlur: function handleBlur() {
    this.setState({ focused: false });
  },

  handleChange: function handleChange(e) {
    var value = e.target.value;

    this.setState({ value: value });
    if (this.props.onChange) this.props.onChange(value);
  },

  handleKeyDown: function handleKeyDown(e) {
    if (e.key === 'Enter' && this.props.returnFor === 'blur') {
      e.preventDefault();
      React.findDOMNode(this.refs.field).blur();
      if (this.props.onChange) this.props.onChange(e.target.value);
    }
  }
});

exports['default'] = EditableField;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react-textarea-autosize":681}],258:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionsRelationship = require('../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var BUTTON_SHOW_STATE = 'show',
    BUTTON_ERROR_STATE = 'error',
    BUTTON_PROCESS_STATE = 'process';

var IgnoreButton = React.createClass({
  displayName: 'IgnoreButton',

  propTypes: {
    objectID: React.PropTypes.number.isRequired,
    subjectID: React.PropTypes.number,
    relState: React.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {
      currentState: BUTTON_SHOW_STATE,
      relState: this.props.relState,
      hover: false
    };
  },

  render: function render() {
    return React.createElement(
      'button',
      { className: 'follow-button',
        style: { display: 'inline-block!important' },
        onTouchTap: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave },
      this.getTitle()
    );
  },

  getTitle: function getTitle() {
    switch (this.state.currentState) {
      case BUTTON_ERROR_STATE:
        return i18n.t('follow_button_error');
      case BUTTON_PROCESS_STATE:
        return i18n.t('follow_button_process');
      default:
        if (this.state.relState === 'ignored') {
          return this.state.hover ? i18n.t('follow_button_unblock') : i18n.t('follow_button_ignored');
        } else {
          return i18n.t('follow_button_block');
        }
    }
  },

  cancel: function cancel() {
    var _this = this;

    this.setState({ currentState: BUTTON_PROCESS_STATE });

    var _props = this.props;
    var objectID = _props.objectID;
    var subjectID = _props.subjectID;

    _actionsRelationship2['default'].cancel(objectID, subjectID).then(function (relationship) {
      _this.setState({
        currentState: BUTTON_SHOW_STATE,
        relState: relationship.state
      });
    }).fail(function () {
      _this.setState({ currentState: BUTTON_ERROR_STATE });
      _this.errorTimeout = setTimeout(function () {
        _this.setState({ currentState: BUTTON_SHOW_STATE });
      }, 1000);
    });
  },

  ignore: function ignore() {
    var _this2 = this;

    this.setState({ currentState: BUTTON_PROCESS_STATE });

    var _props2 = this.props;
    var objectID = _props2.objectID;
    var subjectID = _props2.subjectID;

    _actionsRelationship2['default'].ignore(objectID, subjectID).then(function (relationship) {
      _this2.setState({
        currentState: BUTTON_SHOW_STATE,
        relState: relationship.state
      });
    }).fail(function () {
      _this2.setState({ currentState: BUTTON_ERROR_STATE });
      _this2.errorTimeout = setTimeout(function () {
        _this2.setState({ currentState: BUTTON_SHOW_STATE });
      }, 1000);
    });
  },

  handleClick: function handleClick() {
    if (this.state.currentState === BUTTON_SHOW_STATE) {
      return this.state.relState === 'ignored' ? this.cancel() : this.ignore();
    }
  },

  handleMouseEnter: function handleMouseEnter() {
    this.setState({ hover: true });
  },

  handleMouseLeave: function handleMouseLeave() {
    this.setState({ hover: false });
  }
});

exports['default'] = IgnoreButton;
module.exports = exports['default'];

},{"../../actions/Relationship":11,"babel-runtime/helpers/interop-require-default":574}],259:[function(require,module,exports){
/*global i18n, $ */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var PrivacyBadge = (function () {
  function PrivacyBadge() {
    _classCallCheck(this, PrivacyBadge);
  }

  _createClass(PrivacyBadge, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      $((0, _react.findDOMNode)(this)).tooltip({
        container: 'body',
        html: true,
        placement: 'bottom',
        title: i18n.t('entry.privacy_badge')
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      $((0, _react.findDOMNode)(this)).tooltip('destroy');
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'span',
        { className: 'privacy-badge' },
        _react2['default'].createElement('i', { className: 'icon icon--locks' })
      );
    }
  }]);

  return PrivacyBadge;
})();

PrivacyBadge.propTypes = {};

exports['default'] = PrivacyBadge;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],260:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _DumbRelationButton = require('./DumbRelationButton');

var _DumbRelationButton2 = _interopRequireDefault(_DumbRelationButton);

var BaseRelationButton = (function (_Component) {
  _inherits(BaseRelationButton, _Component);

  function BaseRelationButton() {
    _classCallCheck(this, BaseRelationButton);

    _get(Object.getPrototypeOf(BaseRelationButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      buttonState: constants.BUTTON_SHOW_STATE
    };
  }

  _createClass(BaseRelationButton, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.errorTimeout) window.clearTimeout(this.errorTimeout);
    }
  }, {
    key: 'onTouchTap',
    value: function onTouchTap() {}
  }, {
    key: 'isActive',
    value: function isActive() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_DumbRelationButton2['default'], {
        active: this.isActive(),
        buttonState: this.state.buttonState,
        onTouchTap: this.onTouchTap.bind(this),
        relState: this.props.relState,
        subjectPrivacy: this.props.subjectPrivacy
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      objectID: _react.PropTypes.number.isRequired,
      onStateChange: _react.PropTypes.func.isRequired,
      relState: _react.PropTypes.string,
      subjectID: _react.PropTypes.number,
      subjectPrivacy: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return BaseRelationButton;
})(_react.Component);

exports['default'] = BaseRelationButton;
module.exports = exports['default'];

},{"./DumbRelationButton":262,"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],261:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _actionsRelationship = require('../../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var _BaseRelationButton2 = require('./BaseRelationButton');

var _BaseRelationButton3 = _interopRequireDefault(_BaseRelationButton2);

var CancelButton = (function (_BaseRelationButton) {
  _inherits(CancelButton, _BaseRelationButton);

  function CancelButton() {
    _classCallCheck(this, CancelButton);

    _get(Object.getPrototypeOf(CancelButton.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(CancelButton, [{
    key: 'onTouchTap',
    value: function onTouchTap() {
      var _this = this;

      var _props = this.props;
      var objectID = _props.objectID;
      var subjectID = _props.subjectID;

      this.setState({ buttonState: constants.BUTTON_PROCESS_STATE });
      _actionsRelationship2['default'].cancel(objectID, subjectID).then(function (relationship) {
        _this.setState({ buttonState: constants.BUTTON_SHOW_STATE });
        _this.props.onStateChange(relationship.state);
      }).fail(function () {
        _this.setState({ buttonState: constants.BUTTON_ERROR_STATE });
        _this.errorTimeout = window.setTimeout(function () {
          _this.setState({ buttonState: constants.BUTTON_SHOW_STATE });
        }, 1000);
      });
    }
  }]);

  return CancelButton;
})(_BaseRelationButton3['default']);

exports['default'] = CancelButton;
module.exports = exports['default'];

},{"../../../actions/Relationship":11,"./BaseRelationButton":260,"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575}],262:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var DumbRelationButton = (function (_Component) {
  _inherits(DumbRelationButton, _Component);

  function DumbRelationButton() {
    _classCallCheck(this, DumbRelationButton);

    _get(Object.getPrototypeOf(DumbRelationButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      hover: false
    };
  }

  _createClass(DumbRelationButton, [{
    key: 'onMouseEnter',
    value: function onMouseEnter() {
      this.setState({ hover: true });
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      this.setState({ hover: false });
    }
  }, {
    key: 'onTouchTap',
    value: function onTouchTap(ev) {
      ev.stopPropagation();
      if (this.props.buttonState === constants.BUTTON_SHOW_STATE) {
        this.props.onTouchTap();
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle(_ref) {
      var buttonState = _ref.buttonState;
      var hover = _ref.hover;
      var relState = _ref.relState;
      var subjectPrivacy = _ref.subjectPrivacy;

      switch (buttonState) {
        case constants.BUTTON_ERROR_STATE:
          return i18n.t('follow_button_error');
        case constants.BUTTON_PROCESS_STATE:
          return i18n.t('follow_button_process');
        default:
          switch (relState) {
            case constants.REL_FRIEND_STATE:
              return hover ? i18n.t('follow_button_unsubscribe') : i18n.t('follow_button_subscribed');
            case constants.REL_REQUESTED_STATE:
              return hover ? i18n.t('follow_button_cancel') : i18n.t('follow_button_requested');
            case constants.REL_IGNORED_STATE:
              return hover ? i18n.t('follow_button_unblock') : i18n.t('follow_button_ignored');
            case constants.REL_GUESSED_STATE:
            case constants.REL_NONE_STATE:
              return i18n.t(subjectPrivacy ? 'follow_button_send_request' : 'follow_button_subscribe');
            default:
              return i18n.t('follow_button_unknown_state');
          }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var buttonState = _props.buttonState;
      var relState = _props.relState;
      var subjectPrivacy = _props.subjectPrivacy;

      var buttonClasses = (0, _classnames2['default'])('follow-button', {
        'state--active': this.props.active
      });

      // Inline-block needed for prevent AdBlock social buttons hiding
      return _react2['default'].createElement(
        'button',
        {
          className: buttonClasses,
          onMouseEnter: this.onMouseEnter.bind(this),
          onMouseLeave: this.onMouseLeave.bind(this),
          onTouchTap: this.onTouchTap.bind(this),
          style: { display: 'inline-block!important' }
        },
        this.renderTitle({
          buttonState: buttonState,
          relState: relState,
          subjectPrivacy: subjectPrivacy,
          hover: this.state.hover
        })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      active: _react.PropTypes.bool,
      buttonState: _react.PropTypes.string.isRequired,
      onTouchTap: _react.PropTypes.func.isRequired,
      relState: _react.PropTypes.string,
      subjectPrivacy: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return DumbRelationButton;
})(_react.Component);

exports['default'] = DumbRelationButton;
module.exports = exports['default'];

},{"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"classnames":647,"react":"react"}],263:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _actionsRelationship = require('../../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var _BaseRelationButton2 = require('./BaseRelationButton');

var _BaseRelationButton3 = _interopRequireDefault(_BaseRelationButton2);

var FollowButton = (function (_BaseRelationButton) {
  _inherits(FollowButton, _BaseRelationButton);

  function FollowButton() {
    _classCallCheck(this, FollowButton);

    _get(Object.getPrototypeOf(FollowButton.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(FollowButton, [{
    key: 'onTouchTap',
    value: function onTouchTap() {
      var _this = this;

      var _props = this.props;
      var objectID = _props.objectID;
      var subjectID = _props.subjectID;

      this.setState({ buttonState: constants.BUTTON_PROCESS_STATE });
      _actionsRelationship2['default'].follow(objectID, subjectID).then(function (relationship) {
        _this.setState({ buttonState: constants.BUTTON_SHOW_STATE });
        _this.props.onStateChange(relationship.state);
      }).fail(function () {
        _this.setState({ currentState: constants.BUTTON_ERROR_STATE });
        _this.errorTimeout = window.setTimeout(function () {
          _this.setState({ currentState: constants.BUTTON_SHOW_STATE });
        }, 1000);
      });
    }
  }]);

  return FollowButton;
})(_BaseRelationButton3['default']);

exports['default'] = FollowButton;
module.exports = exports['default'];

},{"../../../actions/Relationship":11,"./BaseRelationButton":260,"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575}],264:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _actionsRelationship = require('../../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var _BaseRelationButton2 = require('./BaseRelationButton');

var _BaseRelationButton3 = _interopRequireDefault(_BaseRelationButton2);

var UnfollowButton = (function (_BaseRelationButton) {
  _inherits(UnfollowButton, _BaseRelationButton);

  function UnfollowButton() {
    _classCallCheck(this, UnfollowButton);

    _get(Object.getPrototypeOf(UnfollowButton.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(UnfollowButton, [{
    key: 'onTouchTap',
    value: function onTouchTap() {
      var _this = this;

      var _props = this.props;
      var objectID = _props.objectID;
      var subjectID = _props.subjectID;

      this.setState({ buttonState: constants.BUTTON_PROCESS_STATE });
      _actionsRelationship2['default'].unfollow(objectID, subjectID).then(function (relationship) {
        _this.setState({ buttonState: constants.BUTTON_SHOW_STATE });
        _this.props.onStateChange(relationship.state);
      }).fail(function () {
        _this.setState({ buttonState: constants.BUTTON_ERROR_STATE });
        _this.errorTimeout = window.setTimeout(function () {
          _this.setState({ buttonState: constants.BUTTON_SHOW_STATE });
        }, 1000);
      });
    }
  }, {
    key: 'isActive',
    value: function isActive() {
      return this.props.relState === constants.REL_FRIEND_STATE && this.state.buttonState === constants.BUTTON_SHOW_STATE;
    }
  }]);

  return UnfollowButton;
})(_BaseRelationButton3['default']);

exports['default'] = UnfollowButton;
module.exports = exports['default'];

},{"../../../actions/Relationship":11,"./BaseRelationButton":260,"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575}],265:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var REL_FRIEND_STATE = 'friend';
exports.REL_FRIEND_STATE = REL_FRIEND_STATE;
var REL_REQUESTED_STATE = 'requested';
exports.REL_REQUESTED_STATE = REL_REQUESTED_STATE;
var REL_IGNORED_STATE = 'ignored';
exports.REL_IGNORED_STATE = REL_IGNORED_STATE;
var REL_GUESSED_STATE = 'guessed';
exports.REL_GUESSED_STATE = REL_GUESSED_STATE;
var REL_NONE_STATE = 'none';

exports.REL_NONE_STATE = REL_NONE_STATE;
var BUTTON_SHOW_STATE = 'show';
exports.BUTTON_SHOW_STATE = BUTTON_SHOW_STATE;
var BUTTON_ERROR_STATE = 'error';
exports.BUTTON_ERROR_STATE = BUTTON_ERROR_STATE;
var BUTTON_PROCESS_STATE = 'process';
exports.BUTTON_PROCESS_STATE = BUTTON_PROCESS_STATE;

},{}],266:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactServicesError = require('../../../../../shared/react/services/Error');

var _sharedReactServicesError2 = _interopRequireDefault(_sharedReactServicesError);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _FollowButton = require('./FollowButton');

var _FollowButton2 = _interopRequireDefault(_FollowButton);

var _UnfollowButton = require('./UnfollowButton');

var _UnfollowButton2 = _interopRequireDefault(_UnfollowButton);

var _CancelButton = require('./CancelButton');

var _CancelButton2 = _interopRequireDefault(_CancelButton);

var _BaseRelationButton = require('./BaseRelationButton');

var _BaseRelationButton2 = _interopRequireDefault(_BaseRelationButton);

var RelationButton = (function (_Component) {
  _inherits(RelationButton, _Component);

  function RelationButton() {
    _classCallCheck(this, RelationButton);

    _get(Object.getPrototypeOf(RelationButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      relState: this.props.relState
    };
  }

  _createClass(RelationButton, [{
    key: 'onStateChange',
    value: function onStateChange(newRelState) {
      this.setState({ relState: newRelState });
      if (this.props.onChange) {
        this.props.onChange(newRelState);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var objectID = _props.objectID;
      var subjectID = _props.subjectID;
      var subjectPrivacy = _props.subjectPrivacy;

      var props = {
        objectID: objectID,
        subjectID: subjectID,
        subjectPrivacy: subjectPrivacy,
        onStateChange: this.onStateChange.bind(this),
        relState: this.state.relState
      };

      switch (this.state.relState) {
        case constants.REL_FRIEND_STATE:
          return _react2['default'].createElement(_UnfollowButton2['default'], props);
        case constants.REL_REQUESTED_STATE:
        case constants.REL_IGNORED_STATE:
          return _react2['default'].createElement(_CancelButton2['default'], props);
        case constants.REL_GUESSED_STATE:
        case constants.REL_NONE_STATE:
          return _react2['default'].createElement(_FollowButton2['default'], props);
        default:
          _sharedReactServicesError2['default'].notifyError('Неизвестное состояние отношений', {
            componentName: this.constructor.displayName,
            method: 'handleClick',
            relState: this.state.relState
          });
          return _react2['default'].createElement(_BaseRelationButton2['default'], props);
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      objectID: _react.PropTypes.number.isRequired,
      onChange: _react.PropTypes.func,
      relState: _react.PropTypes.string,
      subjectID: _react.PropTypes.number,
      subjectPrivacy: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return RelationButton;
})(_react.Component);

exports['default'] = RelationButton;
module.exports = exports['default'];

},{"../../../../../shared/react/services/Error":552,"./BaseRelationButton":260,"./CancelButton":261,"./FollowButton":263,"./UnfollowButton":264,"./constants":265,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],267:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var SelectBox = React.createClass({
  displayName: 'SelectBox',

  propTypes: {
    value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),
    options: React.PropTypes.array.isRequired,
    withSearchBox: React.PropTypes.bool,
    onSelect: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      withSearchBox: true
    };
  },

  componentDidMount: function componentDidMount() {
    var initOptions = this.getInitOptions(),
        $select = $(this.getDOMNode()).select2(initOptions);
    $select.on('select2:select', this.handleSelect);
  },

  componentWillUnmount: function componentWillUnmount() {
    var $select = $(this.getDOMNode());
    $select.off('select2:select', this.handleSelect);
    $select.select2('destroy');
  },

  render: function render() {
    var optionList = this.props.options.map(function (option) {
      return React.createElement(
        'option',
        { value: option.value, key: option.value },
        option.text
      );
    });

    return React.createElement(
      'select',
      { value: this.props.value },
      optionList
    );
  },

  getInitOptions: function getInitOptions() {
    var initOptions = {};

    if (!this.props.withSearchBox) {
      initOptions.minimumResultsForSearch = Infinity;
    }

    return initOptions;
  },

  handleSelect: function handleSelect(e) {
    this.props.onSelect(e.target.value);
  }
});

exports['default'] = SelectBox;
module.exports = exports['default'];

},{}],268:[function(require,module,exports){
"use strict";

var _get = require("babel-runtime/helpers/get")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var Switcher = (function (_Component) {
  _inherits(Switcher, _Component);

  function Switcher() {
    _classCallCheck(this, Switcher);

    _get(Object.getPrototypeOf(Switcher.prototype), "constructor", this).apply(this, arguments);
  }

  _createClass(Switcher, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { className: "switcher" },
        React.createElement("input", { type: "checkbox",
          checked: this.props.checked,
          id: this.props.id,
          className: "switcher__input",
          onChange: this.handleChange.bind(this) }),
        React.createElement(
          "label",
          { htmlFor: this.props.id, className: "switcher__label" },
          React.createElement(
            "span",
            { className: "switcher__btn switcher__btn--on" },
            this.props.labelOn || i18n.t('switcher.label_on')
          ),
          React.createElement(
            "span",
            { className: "switcher__btn switcher__btn--off" },
            this.props.labelOff || i18n.t('switcher.label_off')
          )
        )
      );
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      this.props.onChange(e.target.checked);
    }
  }], [{
    key: "propTypes",
    value: {
      id: _react.PropTypes.string.isRequired,
      title: _react.PropTypes.string.isRequired,
      description: _react.PropTypes.string,
      checked: _react.PropTypes.bool.isRequired,
      labelOn: _react.PropTypes.string,
      labelOff: _react.PropTypes.string,
      onChange: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return Switcher;
})(_react.Component);

exports["default"] = Switcher;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"react":"react"}],269:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Tooltip = React.createClass({
  displayName: 'Tooltip',

  propTypes: {
    title: React.PropTypes.string.isRequired,
    placement: React.PropTypes.string,
    container: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      placement: 'top',
      container: 'body'
    };
  },

  componentDidMount: function componentDidMount() {
    $(this.getDOMNode()).tooltip({
      placement: this.props.placement,
      container: this.props.container
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    $(this.getDOMNode()).tooltip('destroy');
  },

  render: function render() {
    return React.createElement(
      'span',
      { title: this.props.title },
      this.props.children
    );
  }
});

exports['default'] = Tooltip;
module.exports = exports['default'];

},{}],270:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _actionsRelationship = require('../../actions/Relationship');

var _actionsRelationship2 = _interopRequireDefault(_actionsRelationship);

var UnfollowButton = React.createClass({
  displayName: "UnfollowButton",

  propTypes: {
    objectID: React.PropTypes.number.isRequired,
    subjectID: React.PropTypes.number
  },

  render: function render() {
    return React.createElement(
      "button",
      {
        className: "button button--small button--outline-light-white button--icon",
        onTouchTap: this.handleClick },
      React.createElement("i", { className: "icon icon--cross" })
    );
  },

  handleClick: function handleClick() {
    var _props = this.props;
    var objectID = _props.objectID;
    var subjectID = _props.subjectID;

    _actionsRelationship2["default"].unfollowFromYourself(objectID, subjectID);
  }
});

exports["default"] = UnfollowButton;
module.exports = exports["default"];

},{"../../actions/Relationship":11,"babel-runtime/helpers/interop-require-default":574}],271:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedReactComponentsCommonSpinner = require('../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var propTypes = {
  count: _react.PropTypes.number.isRequired,
  href: _react.PropTypes.string.isRequired,
  onClick: _react.PropTypes.func
};

var UnreadLoadButton = (function (_Component) {
  _inherits(UnreadLoadButton, _Component);

  function UnreadLoadButton() {
    _classCallCheck(this, UnreadLoadButton);

    _get(Object.getPrototypeOf(UnreadLoadButton.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      offScreen: false
    };
  }

  _createClass(UnreadLoadButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.container = (0, _react.findDOMNode)(this.refs.container);
      if (this.container) {
        this.onScrollFn = this.updateOffScreenState.bind(this);
        this.offsetTop = this.container.getBoundingClientRect().top;
        document.addEventListener('scroll', this.onScrollFn, false);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.onScrollFn) {
        document.removeEventListener('scroll', this.onScrollFn);
      };
    }
  }, {
    key: 'updateOffScreenState',
    value: function updateOffScreenState() {
      var scrollTop = document.body.scrollTop || // safary, chrome
      document.documentElement.scrollTop; // ie, mozilla
      this.setState({
        offScreen: this.offsetTop && scrollTop > this.offsetTop
      });
    }
  }, {
    key: 'onClick',
    value: function onClick(ev) {
      var onClick = this.props.onClick;

      if (onClick) {
        ev.preventDefault();
        return onClick();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var count = _props.count;
      var href = _props.href;
      var isLoading = _props.isLoading;

      var containerClasses = (0, _classnames2['default'])({
        'unread-load-button-container': true,
        'unread-load-button-container--fixed': this.state.offScreen,
        'unread-load-button-container--hidden': (count || 0) < 1
      });

      return _react2['default'].createElement(
        'div',
        { className: containerClasses, ref: 'container' },
        _react2['default'].createElement(
          'div',
          { className: 'unread-load-button' },
          isLoading ? _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 14 }) : _react2['default'].createElement(
            'span',
            null,
            i18n.t('buttons.unread_load.unread_entries_count', { count: count }),
            _react2['default'].createElement(
              'a',
              { href: href, onClick: this.onClick.bind(this) },
              i18n.t('buttons.unread_load.show_unread')
            )
          )
        )
      );
    }
  }]);

  return UnreadLoadButton;
})(_react.Component);

UnreadLoadButton.propTypes = propTypes;

exports['default'] = UnreadLoadButton;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Spinner":537,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],272:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesEntriesStore = require('../../stores/EntriesStore');

var _storesEntriesStore2 = _interopRequireDefault(_storesEntriesStore);

var _actionsEntriesActions = require('../../actions/EntriesActions');

var _actionsEntriesActions2 = _interopRequireDefault(_actionsEntriesActions);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _commonUnreadLoadButton = require('../common/UnreadLoadButton');

var _commonUnreadLoadButton2 = _interopRequireDefault(_commonUnreadLoadButton);

//magic number
var ENTRIES_LIMIT = 60;

var UnreadLoadButtonContainer = (function (_Component) {
  _inherits(UnreadLoadButtonContainer, _Component);

  function UnreadLoadButtonContainer() {
    _classCallCheck(this, UnreadLoadButtonContainer);

    _get(Object.getPrototypeOf(UnreadLoadButtonContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(UnreadLoadButtonContainer, [{
    key: 'loadNewEntries',
    value: function loadNewEntries() {
      var _props = this.props;
      var firstEntryId = _props.firstEntryId;
      var count = _props.count;
      var onLoad = _props.onLoad;

      var load = _actionsEntriesActions2['default'].loadNewEntries(firstEntryId, count);

      onLoad && onLoad(load);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var count = _props2.count;
      var href = _props2.href;
      var isLoading = _props2.isLoading;

      return _react2['default'].createElement(_commonUnreadLoadButton2['default'], {
        count: count,
        href: href,
        isLoading: isLoading,
        onClick: count > ENTRIES_LIMIT ? void 0 : this.loadNewEntries.bind(this)
      });
    }
  }]);

  return UnreadLoadButtonContainer;
})(_react.Component);

UnreadLoadButtonContainer.propTypes = {
  count: _react.PropTypes.number.isRequired,
  firstEntryId: _react.PropTypes.number,
  href: _react.PropTypes.string,
  isLoading: _react.PropTypes.bool.isRequired,
  limit: _react.PropTypes.number,
  onLoad: _react.PropTypes.func
};

UnreadLoadButtonContainer.defaultProps = {
  limit: ENTRIES_LIMIT
};

exports['default'] = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(UnreadLoadButtonContainer, [_storesEntriesStore2['default']], function () {
  return {
    firstEntryId: _storesEntriesStore2['default'].getFirstEntryId(),
    isLoading: _storesEntriesStore2['default'].isLoading()
  };
});
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/EntriesActions":6,"../../stores/EntriesStore":512,"../common/UnreadLoadButton":271,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],273:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _actionsEntry = require('../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var Voting = (function (_Component) {
  _inherits(Voting, _Component);

  function Voting() {
    _classCallCheck(this, Voting);

    _get(Object.getPrototypeOf(Voting.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      votes: this.props.rating.votes,
      rating: this.props.rating.rating,
      reasons: this.props.rating.reasons,
      canVote: this.props.rating.is_voteable,
      isVoted: this.props.rating.is_voted,
      isProcess: false
    };
  }

  _createClass(Voting, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      $((0, _react.findDOMNode)(this)).tooltip({
        html: true,
        placement: 'top',
        container: 'body'
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      $((0, _react.findDOMNode)(this)).tooltip('destroy');
    }
  }, {
    key: 'render',
    value: function render() {
      var votingClasses = (0, _classnames2['default'])('voting', {
        'votable': this.state.canVote,
        'unvotable': !this.state.canVote,
        'voted': this.state.isVoted
      });

      return _react2['default'].createElement(
        'span',
        {
          'data-original-title': this.getTitle.call(this),
          className: votingClasses,
          onClick: this.handleClick.bind(this)
        },
        this.state.isProcess ? _react2['default'].createElement(Spinner, { size: 8 }) : this.state.votes
      );
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      if (this.state.canVote && !this.state.isVoted) {
        return i18n.t('vote');
      } else if (this.state.isVoted) {
        return i18n.t('voted');
      } else if (this.state.reasons.length) {
        return this.state.reasons.join('<br />');
      } else {
        return i18n.t('cant_vote');
      }
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      var _this = this;

      if (this.state.isVoted || !this.state.canVote) {
        return;
      }

      this.setState({ isProcess: true });
      _actionsEntry2['default'].vote(this.props.entryID).then(function (rating) {
        _this.setState({
          votes: rating.votes,
          rating: rating.rating,
          reasons: rating.reasons,
          isVoted: rating.is_voted,
          canVote: rating.is_voteable
        });
      }).always(function () {
        return _this.setState({ isProcess: false });
      });
    }
  }], [{
    key: 'propTypes',
    value: {
      rating: _react.PropTypes.shape({
        votes: _react.PropTypes.number.isRequired,
        rating: _react.PropTypes.number.isRequired,
        reasons: _react.PropTypes.array,
        is_voted: _react.PropTypes.bool.isRequired,
        is_voteable: _react.PropTypes.bool.isRequired
      }).isRequired,
      entryID: _react.PropTypes.number.isRequired
    },
    enumerable: true
  }]);

  return Voting;
})(_react.Component);

exports['default'] = Voting;
module.exports = exports['default'];

},{"../../actions/Entry":7,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],274:[function(require,module,exports){
window.AdaptiveInput = React.createClass({
  propTypes: {
    type: React.PropTypes.string,
    value: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    required: React.PropTypes.bool,
    checked: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    autoFocus: React.PropTypes.bool,
    id: React.PropTypes.string,
    className: React.PropTypes.string,
    onChange: React.PropTypes.func.isRequired
  },
  getDefaultProps: function() {
    return {
      type: 'text'
    };
  },
  render: function() {
    return React.createElement("input", {
      "type": this.props.type,
      "value": this.props.value,
      "placeholder": this.props.placeholder,
      "required": this.props.required,
      "checked": this.props.checked,
      "disabled": this.props.disabled,
      "autoFocus": this.props.autoFocus,
      "id": this.props.id,
      "className": this.props.className,
      "onChange": this.handleChange
    });
  },
  getValue: function() {
    return this.getDOMNode().value;
  },
  handleChange: function() {
    return this.props.onChange(this.getDOMNode().value);
  }
});


},{}],275:[function(require,module,exports){
var InfiniteScroll, PropTypes, THRESHOLD, windowHeight;

PropTypes = React.PropTypes;

windowHeight = $(window).height();

THRESHOLD = windowHeight * 2;

InfiniteScroll = React.createClass({
  displayName: 'InfiniteScroll',
  propTypes: {
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired,
    loading: PropTypes.bool.isRequired,
    canLoad: PropTypes.bool.isRequired,
    onLoad: PropTypes.func.isRequired,
    onAfterLoad: PropTypes.func
  },
  componentDidMount: function() {
    this._prefill();
    return $(window).on('scroll', this.handleScroll);
  },
  componentDidUpdate: function() {
    var base;
    this._prefill();
    $(document).trigger('domChanged');
    return typeof (base = this.props).onAfterLoad === "function" ? base.onAfterLoad() : void 0;
  },
  componentWillUnmount: function() {
    return $(window).off('scroll', this.handleScroll);
  },
  render: function() {
    var spinner;
    if (this.props.loading) {
      spinner = React.createElement("div", {
        "className": "page-loader"
      }, React.createElement(Spinner, {
        "size": 24.
      }));
    }
    return React.createElement("div", null, this.props.children, spinner);
  },
  _prefill: function() {
    var $node, $window, needsPrefill;
    $node = $(this.getDOMNode());
    $window = $(window);
    needsPrefill = function() {
      return $node.height() <= $window.height();
    };
    this._prefill = function() {
      if (this.props.canLoad && needsPrefill()) {
        return this.props.onLoad();
      }
    };
    return this._prefill();
  },
  handleScroll: function() {
    var nearBottom;
    if (this.props.canLoad) {
      nearBottom = $(window).scrollTop() + $(window).height() > $(document).height() - THRESHOLD;
      if (nearBottom) {
        return this.props.onLoad();
      }
    }
  }
});

module.exports = InfiniteScroll;


},{}],276:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Scroller = React.createClass({
  displayName: 'Scroller',

  propTypes: {
    customScroller: React.PropTypes.bool,
    className: React.PropTypes.string,
    onScroll: React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      customScroller: true
    };
  },

  componentDidMount: function componentDidMount() {
    var scroller = this.getDOMNode();
    var scrollerPane = this.refs.scrollerPane.getDOMNode();

    $(scrollerPane).on('DOMMouseScroll mousewheel', this.handleMouseWheel);

    if (this.props.customScroller) {
      this.scroller = $(scroller).baron({
        scroller: '.scroller__pane',
        bar: '.scroller__bar',
        track: '.scroller__track',
        barOnCls: 'scroller--tracked',
        pause: 0
      });
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    if (this.scroller) {
      this.scroller.update();
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    var scrollerPane = this.refs.scrollerPane.getDOMNode();

    $(scrollerPane).off('DOMMouseScroll mousewheel', this.handleMouseWheel);

    if (this.scroller) {
      this.scroller.dispose();
      this.scroller = null;
    }
  },

  render: function render() {
    var scrollerClasses = ['scroller', 'scroller--dark', this.props.className].join(' ');

    return React.createElement(
      'div',
      { className: scrollerClasses, onScroll: this.handleScroll },
      React.createElement(
        'div',
        { ref: 'scrollerPane', className: 'scroller__pane' },
        this.props.children
      ),
      React.createElement(
        'div',
        { className: 'scroller__track' },
        React.createElement('div', { className: 'scroller__bar' })
      )
    );
  },

  handleMouseWheel: function handleMouseWheel(e) {
    var el = e.currentTarget,
        scrollTop = el.scrollTop,
        scrollHeight = el.scrollHeight,
        height = $(el).height(),
        delta = e.type === 'DOMMouseScroll' ? e.originalEvent.detail * -40 : e.originalEvent.wheelDelta,
        up = delta > 0;

    function prevent() {
      e.stopPropagation();
      e.preventDefault();
      e.returnValue = false;
      return false;
    }

    if (!up && -delta > scrollHeight - height - scrollTop) {
      $(el).scrollTop(scrollHeight);
      return prevent();
    } else if (up && delta > scrollTop) {
      $(el).scrollTop(0);
      return prevent();
    }
  },

  handleScroll: function handleScroll(e) {
    if (this.props.onScroll) {
      this.props.onScroll(e);
    }
  }
});

exports['default'] = Scroller;
module.exports = exports['default'];

},{}],277:[function(require,module,exports){
var KEYCODE_ENTER, LinkedStateMixin, autosize, classnames;

autosize = require('autosize');

classnames = require('classnames');

LinkedStateMixin = require('react/lib/LinkedStateMixin');

KEYCODE_ENTER = 13;

window.EditableField = React.createClass({
  mixins: [LinkedStateMixin],
  propTypes: {
    maxLength: React.PropTypes.number,
    defaultValue: React.PropTypes.string,
    placeholder: React.PropTypes.string.isRequired,
    onEditEnd: React.PropTypes.func.isRequired
  },
  getDefaultProps: function() {
    return {
      maxLength: 140,
      defaultValue: ''
    };
  },
  getInitialState: function() {
    return {
      value: this.props.defaultValue,
      isFocus: false
    };
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setState({
      value: nextProps.defaultValue
    });
  },
  componentDidMount: function() {
    var field;
    field = this.refs.textarea.getDOMNode();
    return autosize(field, {
      append: ''
    });
  },
  render: function() {
    var editableFieldClasses;
    editableFieldClasses = classnames('editable-field', {
      'state--empty': this.isEmpty(),
      'state--focus': this.state.isFocus
    });
    return React.createElement("div", {
      "className": editableFieldClasses
    }, React.createElement("div", {
      "className": "editable-field__control-wrap"
    }, React.createElement("input", {
      "ref": "textarea",
      "maxLength": this.props.maxLength,
      "valueLink": this.linkState('value'),
      "className": "editable-field__control",
      "onBlur": this.onBlur,
      "onKeyDown": this.onChange,
      "onPaste": this.onChange
    })), React.createElement("div", {
      "className": "editable-field__content"
    }, React.createElement("span", {
      "className": "editable-field__placeholder"
    }, this.props.placeholder), React.createElement("span", {
      "ref": "value",
      "className": "editable-field__value"
    }, this.state.value), React.createElement("span", {
      "className": "editable-field__button",
      "onClick": this.onFocus
    }, React.createElement("i", {
      "className": "icon icon--pencil"
    }))));
  },
  onFocus: function() {
    this.setState({
      isFocus: true
    });
    return _.defer((function(_this) {
      return function() {
        var field, textareaValue;
        textareaValue = _this.getValue();
        field = _this.refs.textarea.getDOMNode();
        field.value = '';
        field.focus();
        return field.value = textareaValue;
      };
    })(this));
  },
  onBlur: function() {
    return this.setState({
      value: this.props.defaultValue,
      isFocus: false
    });
  },
  onChange: function(e) {
    if (e.which === KEYCODE_ENTER) {
      this.props.onEditEnd(this.getValue());
      e.target.blur();
      e.preventDefault();
    }
    return _.defer((function(_this) {
      return function() {
        var evt, field, value;
        value = _this.refs.value.getDOMNode();
        $(value).text(_this.getValue());
        field = _this.refs.textarea.getDOMNode();
        evt = document.createEvent('Event');
        evt.initEvent('autosize:update', true, false);
        return field.dispatchEvent(evt);
      };
    })(this));
  },
  isEmpty: function() {
    return this.props.defaultValue.trim() === '';
  },
  getValue: function() {
    var textarea, textareaValue;
    textarea = this.refs.textarea.getDOMNode();
    textareaValue = textarea.value.replace(/\n/g, '');
    return textareaValue.trim();
  }
});


},{"autosize":"autosize","classnames":647,"react/lib/LinkedStateMixin":705}],278:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var EmbedComponent = React.createClass({
  displayName: 'EmbedComponent',

  propTypes: {
    autoplay: React.PropTypes.bool.isRequired,
    coverImageUrl: React.PropTypes.string,
    frameWidth: React.PropTypes.number.isRequired,
    frameHeight: React.PropTypes.number.isRequired,
    embedHtml: React.PropTypes.string.isRequired
  },

  render: function render() {
    if (this.props.coverImageUrl != null && !this.props.autoplay) {
      return React.createElement(EmbedComponentWithCover, this.props);
    } else {
      return React.createElement(EmbedComponentNoCover, this.props);
    }
  }
});

var EmbedComponentNoCover = React.createClass({
  displayName: 'EmbedComponentNoCover',

  propTypes: {
    frameWidth: React.PropTypes.number.isRequired,
    frameHeight: React.PropTypes.number.isRequired,
    embedHtml: React.PropTypes.string.isRequired
  },

  componentDidMount: function componentDidMount() {
    var $container = $(this.getDOMNode()),
        $iframe = $container.find('iframe');
    $container.height($iframe.height());
  },

  render: function render() {
    var _props = this.props;
    var embedHtml = _props.embedHtml;
    var width = _props.frameWidth;
    var height = _props.frameHeight;

    return React.createElement('figure', {
      className: 'video video-without-cover',
      style: { width: width, height: height },
      dangerouslySetInnerHTML: { __html: embedHtml || '' } });
  }
});

var EmbedComponentWithCover = React.createClass({
  displayName: 'EmbedComponentWithCover',

  propTypes: {
    coverImageUrl: React.PropTypes.string.isRequired,
    frameWidth: React.PropTypes.number.isRequired,
    frameHeight: React.PropTypes.number.isRequired,
    embedHtml: React.PropTypes.string.isRequired
  },

  render: function render() {
    var _props2 = this.props;
    var width = _props2.frameWidth;
    var height = _props2.frameHeight;

    var coverStyle = { backgroundImage: 'url(\'' + this.props.coverImageUrl + '\')' };

    return React.createElement(
      'figure',
      { className: 'video', style: { width: width, height: height } },
      React.createElement(
        'div',
        { className: 'video__cover', style: coverStyle },
        React.createElement('div', { className: 'video__overlay', onClick: this.play }),
        React.createElement('div', { className: 'video__embed', ref: 'embedContainer' })
      )
    );
  },

  play: function play() {
    var $embed = $(this.refs.embedContainer.getDOMNode()),
        $container = $(this.getDOMNode());

    $embed.show().append(this.props.embedHtml);
    $embed.width('100%');
    $embed.height('100%');

    $iframe = $embed.find('iframe');
    $iframe.attr({ width: $embed.data('width') || $embed.width() });
    $iframe.attr({ height: $embed.data('height') || $embed.height() });

    $embed.height($iframe.height());
    $container.height($iframe.height());
  }
});

exports['default'] = EmbedComponent;
module.exports = exports['default'];

},{}],279:[function(require,module,exports){
window.EntryCommentBox_CommentFormSubmit = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired,
    visible: React.PropTypes.bool.isRequired
  },
  render: function() {
    if (this.props.visible) {
      return React.createElement("button", {
        "ref": "commentFormSubmit",
        "className": "comment-form__submit",
        "onClick": this.props.onClick
      }, i18n.t('comment_form_submit'));
    } else {
      return React.createElement("span", null);
    }
  }
});


},{}],280:[function(require,module,exports){
var FORM_STATE, HIDDEN_STATE, LINK_STATE;

HIDDEN_STATE = 'hidden';

FORM_STATE = 'form';

LINK_STATE = 'link';

window.EntryCommentBox_CommentCreateFormManager = React.createClass({
  mixins: [RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    user: React.PropTypes.object.isRequired,
    isEntryPage: React.PropTypes.bool,
    totalCommentsCount: React.PropTypes.number.isRequired,
    onCommentAdded: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: HIDDEN_STATE,
      isPostLoading: false
    };
  },
  componentDidMount: function() {
    window.commentsMediator.registerForm(this);
    if (this.isCurrentlyOpen()) {
      return this.setState({
        currentState: FORM_STATE
      });
    } else if (this.props.totalCommentsCount === 0) {
      return this.setState({
        currentState: HIDDEN_STATE
      });
    } else {
      return this.setState({
        currentState: LINK_STATE
      });
    }
  },
  componentWillUnmount: function() {
    return window.commentsMediator.unregisterForm(this);
  },
  render: function() {
    var form;
    switch (this.state.currentState) {
      case FORM_STATE:
        form = React.createElement(EntryCommentBox_CommentForm, {
          "ref": "commentForm",
          "user": this.props.user,
          "isLoading": this.state.isPostLoading,
          "onSubmit": this.onSubmit,
          "onCancel": this.onCancel
        });
        break;
      case HIDDEN_STATE:
        form = React.createElement("div", null);
        break;
      case LINK_STATE:
        form = React.createElement("div", {
          "className": "comments__more"
        }, React.createElement("a", {
          "onClick": this.onClick,
          "className": "comments__more-link"
        }, i18n.t('comment_more_link')));
        break;
      default:
        console.warn('Неизвестное состояние формы ввода комментария', this.state.currentState);
    }
    return form;
  },
  isCurrentlyOpen: function() {
    return this.props.isEntryPage;
  },
  isClosed: function() {
    return this.state.currentState !== FORM_STATE;
  },
  openAndReply: function(name) {
    if (this.isClosed()) {
      this.openForm();
    }
    return _.defer((function(_this) {
      return function() {
        return _this.refs.commentForm.addReply(name);
      };
    })(this));
  },
  openForm: function() {
    this.setState({
      currentState: FORM_STATE
    });
    return _.defer((function(_this) {
      return function() {
        return _this.refs.commentForm.refs.commentFormField.getDOMNode().focus();
      };
    })(this));
  },
  closeForm: function() {
    if (this.props.totalCommentsCount === 0) {
      return this.setState({
        currentState: HIDDEN_STATE
      });
    } else {
      return this.setState({
        currentState: LINK_STATE
      });
    }
  },
  clearForm: function() {
    return this.refs.commentForm.refs.commentFormField.getDOMNode().value = '';
  },
  onClick: function() {
    return window.commentsMediator.doCommentClicked(this.props.entryId);
  },
  onSubmit: function(text) {
    this.setState({
      isPostError: false,
      isPostLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.comments_url(),
      method: 'POST',
      data: {
        entry_id: this.props.entryId,
        text: text
      },
      success: (function(_this) {
        return function(comment) {
          _this.props.onCommentAdded(comment);
          if (_this.isCurrentlyOpen()) {
            return _this.clearForm();
          } else {
            return window.commentsMediator.doFormClosed(_this);
          }
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isPostError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isPostLoading: false
          });
        };
      })(this)
    });
  },
  onCancel: function() {
    return window.commentsMediator.doFormClosed();
  }
});


},{}],281:[function(require,module,exports){
window.EntryCommentBox_CommentEditFormManager = React.createClass({
  mixins: [RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    comment: React.PropTypes.object.isRequired,
    user: React.PropTypes.object.isRequired,
    onEditEnd: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      isEditError: false,
      isEditLoading: false
    };
  },
  render: function() {
    return React.createElement(EntryCommentBox_CommentForm, {
      "ref": "commentForm",
      "text": this.props.comment.comment_html,
      "user": this.props.user,
      "isLoading": this.state.isEditLoading,
      "onSubmit": this.onSubmit,
      "onCancel": this.props.onCancel
    });
  },
  onSubmit: function(text) {
    this.setState({
      isEditError: false,
      isEditLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.comments_edit_delete_url(this.props.comment.id),
      method: 'POST',
      data: {
        _method: 'PUT',
        text: text
      },
      success: (function(_this) {
        return function(comment) {
          return _this.props.onEditEnd(comment);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isEditError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isEditLoading: false
          });
        };
      })(this)
    });
  }
});


},{}],282:[function(require,module,exports){
var REPLIES_LIMIT, autosize;

autosize = require('autosize');

REPLIES_LIMIT = 5;

window.EntryCommentBox_CommentForm = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired,
    text: React.PropTypes.string,
    onSubmit: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired,
    isLoading: React.PropTypes.bool
  },
  getInitialState: function() {
    return {
      visibleSubmit: (this.props.text != null) && typeof this.props.text !== "undefined" && this.props.text !== ""
    };
  },
  getDefaultProps: function() {
    return {
      disabled: false
    };
  },
  componentDidMount: function() {
    var field;
    field = this.refs.commentFormField.getDOMNode();
    return autosize(field, {
      append: ''
    });
  },
  componentDidUpdate: function() {
    var evt, field;
    field = this.refs.commentFormField.getDOMNode();
    evt = document.createEvent('Event');
    evt.initEvent('autosize:update', true, false);
    return field.dispatchEvent(evt);
  },
  componentWillUnmount: function() {
    var evt, field;
    field = this.refs.commentFormField.getDOMNode();
    evt = document.createEvent('Event');
    evt.initEvent('autosize:destroy', true, false);
    return field.dispatchEvent(evt);
  },
  render: function() {
    var avatar;
    if (this.props.isLoading) {
      avatar = React.createElement("span", {
        "className": "spinner spinner--31x31"
      }, React.createElement("span", {
        "className": "spinner__icon"
      }));
    } else {
      avatar = React.createElement(UserAvatar, {
        "user": this.props.user,
        "size": 64.
      });
    }
    return React.createElement("div", {
      "className": "comment-form"
    }, React.createElement("div", {
      "className": "comment-form__table"
    }, React.createElement("div", {
      "className": "comment-form__table-cell"
    }, React.createElement("form", null, React.createElement("span", {
      "className": "comment-form__avatar"
    }, avatar), React.createElement(EntryCommentBox_CommentFormSubmit, {
      "visible": this.state.visibleSubmit,
      "onClick": this.onSubmit
    }), React.createElement("span", {
      "className": "comment-form__field"
    }, React.createElement("textarea", {
      "ref": "commentFormField",
      "placeholder": i18n.t('comment_form_placeholder'),
      "defaultValue": this.props.text,
      "disabled": this.props.isLoading,
      "className": "comment-form__field-textarea",
      "onFocus": this.onFocus,
      "onBlur": this.onBlur,
      "onKeyDown": this.onKeyDown
    }))))));
  },
  getValue: function() {
    return this.refs.commentFormField.getDOMNode().value;
  },
  isEmpty: function() {
    return this.getValue().trim() === '';
  },
  addReply: function(name) {
    var field, newText, postfix, replies;
    name = '@' + name;
    postfix = /^@/.exec(this.getValue()) ? ', ' : ' ';
    newText = this.getValue();
    replies = this._getReplies();
    if (replies.length > REPLIES_LIMIT) {
      newText = this._removeLastReply();
    }
    if (!RegExp(name).exec(newText)) {
      newText = name + postfix + newText;
    }
    field = this.refs.commentFormField.getDOMNode();
    field.value = newText;
    return field.focus();
  },
  _getReplies: function() {
    var found, regExp, replies, text;
    replies = [];
    text = this.getValue();
    regExp = /@[^, ]{1,}/g;
    return replies = ((function() {
      var results;
      results = [];
      while (found = regExp.exec(text)) {
        results.push(found[0]);
      }
      return results;
    })());
  },
  _removeLastReply: function() {
    var regExp, text;
    text = this.getValue();
    regExp = /, @\w+(?=\s)/g;
    return text.replace(regExp, '');
  },
  _submitComment: function() {
    return this.props.onSubmit(this.getValue());
  },
  onFocus: function() {
    var field, valueLength;
    field = this.refs.commentFormField.getDOMNode();
    valueLength = field.value.length;
    if (field.setSelectionRange !== void 0) {
      field.setSelectionRange(valueLength, valueLength);
    } else {
      field.value = field.value;
    }
    return this.setState({
      visibleSubmit: true
    });
  },
  onBlur: function() {
    return this.setState({
      visibleSubmit: !this.isEmpty()
    });
  },
  onKeyDown: function(e) {
    if (e.which === 13 && this.getValue().match(/./) && !e.shiftKey && !e.ctrlKey && !e.altKey) {
      e.preventDefault();
      this._submitComment();
    }
    if (e.which === 27) {
      return this.props.onCancel();
    }
  },
  onSubmit: function(e) {
    e.preventDefault();
    return this._submitComment();
  }
});


},{"autosize":"autosize"}],283:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.EntryCommentBox_Comment = React.createClass({
  propTypes: {
    comment: React.PropTypes.object.isRequired,
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    isShared: React.PropTypes.bool,
    onDelete: React.PropTypes.func
  },
  componentDidMount: function() {
    if (this.props.isShared) {
      return this._scrollToComment();
    }
  },
  render: function() {
    var commentClasses;
    commentClasses = classnames('comment', {
      'state--highlighted': this.props.isShared
    });
    return React.createElement("article", {
      "className": commentClasses
    }, React.createElement("div", {
      "className": "comment__table"
    }, React.createElement("div", {
      "className": "comment__table-cell"
    }, React.createElement("a", {
      "href": this.props.comment.user.tlog_url,
      "title": this.props.comment.user.name,
      "target": "_blank",
      "className": "comment__user"
    }, React.createElement("span", {
      "className": "comment__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.comment.user,
      "size": 64.
    })), React.createElement("span", {
      "className": "comment__username comment__username--bold"
    }, this.props.comment.user.name, " ")), React.createElement("span", {
      "dangerouslySetInnerHTML": {
        __html: this.props.comment.comment_html || ''
      }
    }), React.createElement(EntryCommentBox_CommentMetaBar, {
      "name": this.props.comment.user.name,
      "commentId": this.props.comment.id,
      "commentCreatedAt": this.props.comment.created_at,
      "canReport": this.props.comment.can_report,
      "canDelete": this.props.comment.can_delete,
      "canEdit": this.props.comment.can_edit,
      "entryId": this.props.entryId,
      "entryUrl": this.props.entryUrl,
      "onDelete": this.props.onDelete
    }))));
  },
  _scrollToComment: function() {
    var $comment;
    $comment = $(this.getDOMNode());
    $(window).one('load', (function(_this) {
      return function() {
        return TastyUtils.scrollToElement(_this.getDOMNode());
      };
    })(this));
    if ($(window).scrollTop() !== $comment.offset().top) {
      return TastyUtils.scrollToElement(this.getDOMNode());
    }
  }
});


},{"classnames":647}],284:[function(require,module,exports){
window.EntryCommentBox_CommentList = React.createClass({
  propTypes: {
    comments: React.PropTypes.array.isRequired,
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    sharedCommentId: React.PropTypes.number,
    user: React.PropTypes.object,
    onDelete: React.PropTypes.func
  },
  componentDidMount: function() {
    if (this.props.sharedCommentId != null) {
      if (!this._isSharedCommentExists()) {
        return alert(i18n.t('shared_comment_doesnt_exist'));
      }
    }
  },
  render: function() {
    var commentList, onDelete, that;
    that = this;
    onDelete = (function(_this) {
      return function() {
        return _this.props.onDelete.apply(_this, arguments);
      };
    })(this);
    commentList = this.props.comments.map(function(comment) {
      return React.createElement(EntryCommentBox_CommentManager, {
        "comment": comment,
        "commentId": comment.id,
        "entryId": that.props.entryId,
        "entryUrl": that.props.entryUrl,
        "isShared": that.props.sharedCommentId === comment.id,
        "onDelete": onDelete.bind(this, comment),
        "key": comment.id
      });
    });
    return React.createElement("div", {
      "className": "comments__list"
    }, commentList, " ");
  },
  _isSharedCommentExists: function() {
    var result;
    result = this.props.comments.filter((function(_this) {
      return function(comment) {
        return comment.id === _this.props.sharedCommentId;
      };
    })(this));
    return result.length > 0;
  }
});


},{}],285:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.EntryCommentBox_CommentManager = React.createClass({
  propTypes: {
    comment: React.PropTypes.object.isRequired,
    commentId: React.PropTypes.number.isRequired,
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    isShared: React.PropTypes.bool,
    onDelete: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      comment: this.props.comment,
      isEdit: false
    };
  },
  componentDidMount: function() {
    return window.commentsMediator.registerForm(this);
  },
  componentWillUnmount: function() {
    return window.commentsMediator.unregisterForm(this);
  },
  render: function() {
    var comment, commentClasses;
    if (this.state.isEdit) {
      return comment = React.createElement(EntryCommentBox_CommentEditFormManager, {
        "comment": this.state.comment,
        "user": this.state.comment.user,
        "onEditEnd": this.onEditEnd,
        "onCancel": this.onCancel
      });
    } else {
      commentClasses = classnames('comment', {
        'state--highlighted': this.props.isShared
      });
      comment = React.createElement(EntryCommentBox_Comment, {
        "comment": this.state.comment,
        "entryId": this.props.entryId,
        "entryUrl": this.props.entryUrl,
        "isShared": this.props.isShared,
        "onEditStart": this.onEditStart,
        "onDelete": this.props.onDelete
      });
      return comment;
    }
  },
  openForm: function() {
    return this.setState({
      isEdit: true
    });
  },
  closeForm: function() {
    return this.setState({
      isEdit: false
    });
  },
  onEditEnd: function(comment) {
    this.setState({
      comment: comment
    });
    return window.commentsMediator.doFormClosed();
  },
  onCancel: function() {
    return window.commentsMediator.doFormClosed();
  }
});


},{"classnames":647}],286:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBar = React.createClass({
  propTypes: {
    name: React.PropTypes.string.isRequired,
    commentId: React.PropTypes.number.isRequired,
    commentCreatedAt: React.PropTypes.string.isRequired,
    canReport: React.PropTypes.bool,
    canDelete: React.PropTypes.bool,
    canEdit: React.PropTypes.bool,
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    onDelete: React.PropTypes.func
  },
  render: function() {
    return React.createElement("span", {
      "className": "comment__meta"
    }, React.createElement(EntryCommentBox_CommentMetaBarReply, {
      "name": this.props.name,
      "entryId": this.props.entryId
    }), React.createElement("span", {
      "className": "comment__dot"
    }, "·"), React.createElement(EntryCommentBox_CommentMetaBarDate, {
      "entryUrl": this.props.entryUrl,
      "commentId": this.props.commentId,
      "time": this.props.commentCreatedAt
    }), React.createElement("span", {
      "className": "comment__dot"
    }, "·"), React.createElement(EntryCommentBox_CommentMetaBarDropdownMenu, {
      "commentId": this.props.commentId,
      "entryId": this.props.entryId,
      "entryUrl": this.props.entryUrl,
      "canReport": this.props.canReport,
      "canDelete": this.props.canDelete,
      "canEdit": this.props.canEdit,
      "onDelete": this.props.onDelete
    }));
  }
});


},{}],287:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarDate = React.createClass({
  propTypes: {
    time: React.PropTypes.string.isRequired,
    commentId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired
  },
  render: function() {
    var createdAt, date, now;
    now = moment();
    createdAt = moment(this.props.time);
    if (now.diff(createdAt, 'seconds') < 5) {
      date = createdAt.subtract(5, 's').fromNow();
    } else if (now.diff(createdAt, 'minutes') < 180) {
      date = createdAt.fromNow();
    } else if (now.diff(createdAt, 'days') < 1) {
      date = createdAt.calendar();
    } else {
      if (now.year() !== createdAt.year()) {
        date = createdAt.format('D MMMM YYYY');
      } else {
        date = createdAt.format('D MMMM');
      }
    }
    return React.createElement("a", {
      "className": "comment__date-link",
      "href": this._getCommentUrl()
    }, React.createElement("span", {
      "className": "comment__date"
    }, date));
  },
  _getCommentUrl: function() {
    return this.props.entryUrl + '#comment-' + this.props.commentId;
  }
});


},{}],288:[function(require,module,exports){
var DROPDOWN_CLOSED, DROPDOWN_OPENED_BY_CLICK, DROPDOWN_OPENED_BY_HOVER, MOUSE_LEAVE_TIMEOUT, classnames;

classnames = require('classnames');

MOUSE_LEAVE_TIMEOUT = 300;

DROPDOWN_CLOSED = 'closed';

DROPDOWN_OPENED_BY_HOVER = 'openedByHover';

DROPDOWN_OPENED_BY_CLICK = 'openedByClick';

window.EntryCommentBox_CommentMetaBarDropdownMenu = React.createClass({
  mixins: [ComponentManipulationsMixin],
  propTypes: {
    commentId: React.PropTypes.number.isRequired,
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    canReport: React.PropTypes.bool,
    canDelete: React.PropTypes.bool,
    canEdit: React.PropTypes.bool,
    onEditStart: React.PropTypes.func,
    onDelete: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: DROPDOWN_CLOSED
    };
  },
  componentWillUnmount: function() {
    if (this.timeout) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    var actionList, menuClasses;
    actionList = [];
    menuClasses = classnames('comment__dropdown', {
      'state--open': this.isOpen()
    });
    actionList.push(React.createElement(EntryCommentBox_CommentMetaBarDropdownMenuLinkItem, {
      "commentId": this.props.commentId,
      "entryUrl": this.props.entryUrl,
      "key": "link"
    }));
    if (this.props.canReport) {
      actionList.push(React.createElement(EntryCommentBox_CommentMetaBarDropdownMenuReportItem, {
        "commentId": this.props.commentId,
        "key": "report"
      }));
    }
    if (this.props.canEdit) {
      actionList.push(React.createElement(EntryCommentBox_CommentMetaBarDropdownMenuEditItem, {
        "entryId": this.props.entryId,
        "commentId": this.props.commentId,
        "key": "report"
      }));
    }
    if (this.props.canDelete) {
      actionList.push(React.createElement(EntryCommentBox_CommentMetaBarDropdownMenuDeleteItem, {
        "commentId": this.props.commentId,
        "onDelete": this.props.onDelete,
        "key": "delete"
      }));
    }
    return React.createElement("span", {
      "onMouseEnter": this.onMouseEnter,
      "onMouseLeave": this.onMouseLeave,
      "onClick": this.onClick,
      "className": "comment__actions"
    }, React.createElement("i", {
      "className": "icon icon--dots"
    }), React.createElement("span", {
      "className": menuClasses
    }, actionList));
  },
  onMouseEnter: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (this.state.currentState === DROPDOWN_CLOSED) {
      return this.setState({
        currentState: DROPDOWN_OPENED_BY_HOVER
      });
    }
  },
  onMouseLeave: function() {
    if (this.state.currentState === DROPDOWN_OPENED_BY_HOVER) {
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          return _this.safeUpdateState({
            currentState: DROPDOWN_CLOSED
          });
        };
      })(this)), MOUSE_LEAVE_TIMEOUT);
    }
  },
  onClick: function() {
    switch (this.state.currentState) {
      case DROPDOWN_CLOSED:
        return this.setState({
          currentState: DROPDOWN_OPENED_BY_CLICK
        });
      case DROPDOWN_OPENED_BY_CLICK:
        return this.setState({
          currentState: DROPDOWN_CLOSED
        });
      case DROPDOWN_OPENED_BY_HOVER:
        return this.setState({
          currentState: DROPDOWN_CLOSED
        });
      default:
        return typeof console.error === "function" ? console.error("Unknown state.currentState", this.state.currentState) : void 0;
    }
  },
  isOpen: function() {
    return this.state.currentState !== DROPDOWN_CLOSED;
  }
});


},{"classnames":647}],289:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarDropdownMenuDeleteItem = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    commentId: React.PropTypes.number.isRequired,
    onDelete: React.PropTypes.func
  },
  render: function() {
    return React.createElement("a", {
      "onClick": this.onClick,
      "title": i18n.t('delete_comment_item'),
      "className": "comment__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--basket"
    }), i18n.t('delete_comment_item'));
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    return TastyConfirmController.show({
      message: i18n.t('delete_comment_confirm'),
      acceptButtonText: i18n.t('delete_comment_button'),
      onAccept: this.deleteComment
    });
  },
  deleteComment: function() {
    return this.createRequest({
      url: ApiRoutes.comments_edit_delete_url(this.props.commentId),
      method: 'POST',
      data: {
        _method: 'DELETE'
      },
      success: (function(_this) {
        return function() {
          NoticeService.notifySuccess(i18n.t('delete_comment_success'));
          if (_this.props.onDelete != null) {
            return _this.props.onDelete();
          }
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  }
});


},{}],290:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarDropdownMenuEditItem = React.createClass({
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    commentId: React.PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "onClick": this.onClick,
      "title": i18n.t('edit_comment_item'),
      "className": "comment__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--pencil"
    }), i18n.t('edit_comment_item'));
  },
  onClick: function() {
    return window.commentsMediator.doEdit(this.props.entryId, this.props.commentId);
  }
});


},{}],291:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarDropdownMenuLinkItem = React.createClass({
  propTypes: {
    commentId: React.PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "href": this._getCommentUrl(),
      "title": i18n.t('link_comment_item'),
      "className": "comment__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--hyperlink"
    }), i18n.t('link_comment_item'));
  },
  _getCommentUrl: function() {
    return this.props.entryUrl + '#comment-' + this.props.commentId;
  }
});


},{}],292:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarDropdownMenuReportItem = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    commentId: React.PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "onClick": this.onClick,
      "title": i18n.t('report_comment_item'),
      "className": "comment__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--exclamation-mark"
    }), i18n.t('report_comment_item'));
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    return TastyConfirmController.show({
      message: i18n.t('report_comment_confirm'),
      acceptButtonText: i18n.t('report_comment_button'),
      onAccept: this.createReport
    });
  },
  createReport: function() {
    return this.createRequest({
      url: ApiRoutes.comments_report_url(this.props.commentId),
      method: 'POST',
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('report_comment_success'));
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  }
});


},{}],293:[function(require,module,exports){
window.EntryCommentBox_CommentMetaBarReply = React.createClass({
  propTypes: {
    name: React.PropTypes.string.isRequired,
    entryId: React.PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("span", {
      "className": "comment__reply",
      "onClick": this.onClick
    }, "Ответить");
  },
  onClick: function() {
    return window.commentsMediator.doReplyClicked(this.props.entryId, this.props.name);
  }
});


},{}],294:[function(require,module,exports){
var MORE_COMMENTS_LIMIT;

MORE_COMMENTS_LIMIT = 50;

window.EntryCommentBox = React.createClass({
  mixins: ['CommentsMixin'],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    user: React.PropTypes.object,
    limit: React.PropTypes.number,
    isEntryPage: React.PropTypes.bool.isRequired,
    totalCommentsCount: React.PropTypes.number.isRequired
  },
  getDefaultProps: function() {
    return {
      limit: MORE_COMMENTS_LIMIT
    };
  },
  render: function() {
    var commentForm, commentList, loadMoreButton;
    if (this.props.user) {
      commentForm = React.createElement(EntryCommentBox_CommentCreateFormManager, {
        "user": this.props.user,
        "isEntryPage": this.props.isEntryPage,
        "totalCommentsCount": this.props.totalCommentsCount,
        "entryId": this.props.entryId,
        "onCommentAdded": this.onCommentAdded
      });
    }
    if (this.state.comments.length > 0) {
      commentList = React.createElement(EntryCommentBox_CommentList, {
        "comments": this.state.comments,
        "entryId": this.props.entryId,
        "entryUrl": this.props.entryUrl,
        "sharedCommentId": this.state.sharedCommentId,
        "user": this.props.user,
        "onDelete": this.removeComment
      });
      if (this.state.totalCount > this.state.comments.length) {
        loadMoreButton = React.createElement(EntryCommentBox_LoadMore, {
          "totalCount": this.state.totalCount,
          "loadedCount": this.state.comments.length,
          "limit": this.props.limit,
          "onClick": this.loadMoreComments
        });
      }
    } else {
      if (this.state.isLoadError || this.state.isLoadMoreError || this.state.isPostError) {
        commentList = React.createElement("div", null, i18n.t('load_comments_error'));
      } else if (this.state.isLoadLoading || this.state.isLoadMoreLoading) {
        commentList = React.createElement(Spinner, {
          "size": 14.
        });
      }
    }
    return React.createElement("section", {
      "className": "comments"
    }, loadMoreButton, commentList, commentForm);
  },
  onCommentAdded: function(comment) {
    return this.safeUpdate((function(_this) {
      return function() {
        _this.setState({
          comments: _this.state.comments.concat(comment),
          totalCount: _this.state.totalCount + 1
        });
        return $(document).trigger('domChanged');
      };
    })(this));
  }
});


},{}],295:[function(require,module,exports){
window.EntryCommentBox_LoadMore = React.createClass({
  propTypes: {
    totalCount: React.PropTypes.number.isRequired,
    loadedCount: React.PropTypes.number.isRequired,
    limit: React.PropTypes.number.isRequired,
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "onClick": this.props.onClick,
      "className": "comments__more"
    }, React.createElement("a", {
      "title": this._getTitle(),
      "className": "comments__more-link"
    }, this._getTitle()));
  },
  _getTitle: function() {
    var possibleCount, remainingCount;
    remainingCount = this.props.totalCount - this.props.loadedCount;
    possibleCount = this.props.loadedCount + this.props.limit;
    if (possibleCount < this.props.totalCount) {
      return i18n.t('load_more_comments', {
        count: this.props.limit
      });
    } else {
      return i18n.t('load_more_comments_remaining', {
        count: remainingCount
      });
    }
  }
});


},{}],296:[function(require,module,exports){
var CommentsMixin;

CommentsMixin = {
  getInitialState: function() {
    return {
      comments: [],
      totalCount: null,
      sharedCommentId: null,
      isPostError: false,
      isLoadError: false,
      isLoadMoreError: false,
      isPostLoading: false,
      isLoadLoading: false,
      isLoadMoreLoading: false
    };
  },
  componentDidMount: function() {
    var fromId;
    if (fromId = this._getCommentIdFromHash()) {
      return this.loadCommentListFromCommentId(fromId);
    } else if (this._getFirstLoadLimit() > 0) {
      return this.loadCommentList();
    }
  },
  loadCommentList: function() {
    this.setState({
      isLoadError: false,
      isLoadLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.comments_url(),
      data: {
        entry_id: this.props.entryId,
        limit: this._getFirstLoadLimit()
      },
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdate(function() {
            _this.setState({
              comments: data.comments,
              totalCount: data.total_count
            });
            return $(document).trigger('domChanged');
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isLoadError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isLoadLoading: false
          });
        };
      })(this)
    });
  },
  loadCommentListFromCommentId: function(id) {
    this.setState({
      isLoadError: false,
      isLoadLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.comments_url(),
      data: {
        entry_id: this.props.entryId,
        limit: 999
      },
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdate(function() {
            _this.setState({
              comments: data.comments,
              totalCount: data.total_count,
              sharedCommentId: id
            });
            return $(document).trigger('domChanged');
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isLoadError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isLoadLoading: false
          });
        };
      })(this)
    });
  },
  loadMoreComments: function() {
    this.setState({
      isLoadMoreError: false,
      isLoadMoreLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.comments_url(),
      data: {
        entry_id: this.props.entryId,
        limit: this.props.limit,
        to_comment_id: this.state.comments[0].id
      },
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdate(function() {
            var newComments;
            newComments = data.comments.concat(_this.state.comments);
            _this.setState({
              comments: newComments,
              totalCount: data.total_count
            });
            return $(document).trigger('domChanged');
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isLoadMoreError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isLoadMoreLoading: false
          });
        };
      })(this)
    });
  },
  removeComment: function(comment) {
    var newComments;
    newComments = _.without(this.state.comments, comment);
    return this.setState({
      comments: newComments,
      totalCount: this.state.totalCount - 1
    });
  },
  _getFirstLoadLimit: function() {
    if (!this.props.isEntryPage) {
      if (this.props.totalCommentsCount > 5) {
        return 3;
      } else {
        return this.props.totalCommentsCount;
      }
    } else {
      return 50;
    }
  },
  _getCommentIdFromHash: function() {
    var hash, ref;
    hash = window.location.hash;
    return parseInt((ref = hash.match(/^#comment-(\d+)/)) != null ? ref[1] : void 0);
  }
};

React.mixins.add('CommentsMixin', [CommentsMixin, RequesterMixin, ComponentManipulationsMixin]);


},{}],297:[function(require,module,exports){
window.EntryMetabarAuthor = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement("span", {
      "className": "meta-item meta-item--user state--visible"
    }, React.createElement("span", {
      "className": "meta-item__content"
    }, React.createElement("a", {
      "href": this.props.user.tlog_url,
      "title": this.props.user.name,
      "className": "meta-item__common meta-item__link"
    }, React.createElement("span", {
      "className": "meta-item__ava"
    }, React.createElement(UserAvatar, {
      "user": this.props.user,
      "size": 64.
    })), ' ' + this.props.user.name)));
  }
});


},{}],298:[function(require,module,exports){
window.EntryMetabarComment = React.createClass({
  mixins: [ReactGrammarMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    entryUrl: React.PropTypes.string.isRequired,
    isLogged: React.PropTypes.bool.isRequired,
    totalCommentsCount: React.PropTypes.number.isRequired
  },
  render: function() {
    var commentText;
    if (this.props.isLogged) {
      commentText = React.createElement("a", {
        "className": "meta-item__common meta__link",
        "title": i18n.t('entry_meta_comment_link'),
        "onClick": this.onClick
      }, i18n.t('entry_meta_comment_link'));
    } else {
      commentText = React.createElement("a", {
        "className": "meta-item__common meta__link",
        "href": this.props.entryUrl,
        "title": this._getNumberOfComments()
      }, this._getNumberOfComments());
    }
    return React.createElement("span", {
      "className": "meta-item meta-item_comments"
    }, React.createElement("span", {
      "className": "meta__content"
    }, commentText));
  },
  onClick: function() {
    return window.commentsMediator.doCommentClicked(this.props.entryId);
  },
  _getNumberOfComments: function() {
    if (this.props.totalCommentsCount) {
      return i18n.t('comments_count', {
        count: this.props.totalCommentsCount
      });
    }
  }
});


},{}],299:[function(require,module,exports){
window.EntryMetabarDate = React.createClass({
  propTypes: {
    time: React.PropTypes.string.isRequired,
    entryUrl: React.PropTypes.string.isRequired
  },
  render: function() {
    var createdAt, date, now;
    now = moment();
    createdAt = moment(this.props.time);
    if (now.diff(createdAt, 'days') < 1) {
      date = createdAt.calendar();
    } else {
      if (now.year() !== createdAt.year()) {
        date = createdAt.format('D MMMM YYYY');
      } else {
        date = createdAt.format('D MMMM');
      }
    }
    return React.createElement("span", {
      "className": "meta-item meta-item--date"
    }, React.createElement("span", {
      "className": "meta-item__content"
    }, React.createElement("a", {
      "href": this.props.entryUrl
    }, React.createElement("span", {
      "className": "meta-item__common"
    }, date))));
  }
});


},{}],300:[function(require,module,exports){
var DROPDOWN_CLOSED, DROPDOWN_OPENED_BY_CLICK, DROPDOWN_OPENED_BY_HOVER, MARGIN_BETWEEN_TOGGLER_AND_MENU, MOUSE_LEAVE_TIMEOUT, classnames;

classnames = require('classnames');

MOUSE_LEAVE_TIMEOUT = 300;

DROPDOWN_CLOSED = 'closed';

DROPDOWN_OPENED_BY_HOVER = 'openedByHover';

DROPDOWN_OPENED_BY_CLICK = 'openedByClick';

MARGIN_BETWEEN_TOGGLER_AND_MENU = 20;

window.EntryMetabarDropdownMenu = React.createClass({
  mixins: [ReactUnmountMixin, 'ReactActivitiesMixin', ComponentManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    isFavorited: React.PropTypes.bool.isRequired,
    isWatching: React.PropTypes.bool.isRequired,
    shouldRemoveFavoriteNode: React.PropTypes.bool,
    entryUrl: React.PropTypes.string.isRequired,
    editUrl: React.PropTypes.string,
    successDeleteUrl: React.PropTypes.string,
    canEdit: React.PropTypes.bool,
    canFavorite: React.PropTypes.bool,
    canWatch: React.PropTypes.bool,
    canReport: React.PropTypes.bool,
    canDelete: React.PropTypes.bool
  },
  getInitialState: function() {
    return {
      currentState: DROPDOWN_CLOSED
    };
  },
  componentDidMount: function() {
    return this.$dropdownMenu = $(this.refs.dropdownMenu.getDOMNode());
  },
  componentWillUnmount: function() {
    if (this.timeout) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    var actionList, menuClasses, menuStyles;
    actionList = [];
    menuClasses = classnames('meta-item__dropdown', {
      'state--open': this.isOpen() || this.hasActivities(),
      'position-top': this.isPositionTop()
    });
    menuStyles = {
      marginTop: this._getTopPosition()
    };
    if (this.props.canEdit) {
      actionList.push(React.createElement(EntryMetabarDropdownMenuItem, {
        "title": i18n.t('edit_entry_item'),
        "icon": "icon--pencil",
        "href": this.props.editUrl,
        "key": "edit"
      }));
    }
    actionList.push(React.createElement(EntryMetabarDropdownMenuItem, {
      "title": i18n.t('link_entry_item'),
      "icon": "icon--hyperlink",
      "href": this.props.entryUrl,
      "key": "link"
    }));
    if (this.props.canFavorite) {
      actionList.push(React.createElement(EntryMetabarDropdownMenuFavoriteItem, {
        "entryId": this.props.entryId,
        "isFavorited": this.props.isFavorited,
        "shouldRemoveFavoriteNode": this.props.shouldRemoveFavoriteNode,
        "key": "favorite"
      }));
    }
    if (this.props.canWatch) {
      actionList.push(React.createElement(EntryMetabarDropdownMenuWatchItem, {
        "entryId": this.props.entryId,
        "isWatching": this.props.isWatching,
        "key": "watch"
      }));
    }
    if (this.props.canReport) {
      actionList.push(React.createElement(EntryMetabarDropdownMenuReportItem, {
        "entryId": this.props.entryId,
        "key": "report"
      }));
    }
    if (this.props.canDelete) {
      actionList.push(React.createElement(EntryMetabarDropdownMenuDeleteItem, {
        "entryId": this.props.entryId,
        "successDeleteUrl": this.props.successDeleteUrl,
        "onDelete": this.onDelete,
        "activitiesHandler": this.activitiesHandler,
        "key": "delete"
      }));
    }
    return React.createElement("span", {
      "className": "meta-item meta-item--actions"
    }, React.createElement("span", {
      "onMouseEnter": this.onMouseEnter,
      "onMouseLeave": this.onMouseLeave,
      "onClick": this.onClick,
      "className": "meta-item__content"
    }, React.createElement("i", {
      "className": "meta-item__common icon icon--dots"
    }), React.createElement("span", {
      "ref": "dropdownMenu",
      "className": menuClasses,
      "style": menuStyles
    }, actionList)));
  },
  isOpen: function() {
    return this.state.currentState !== DROPDOWN_CLOSED;
  },
  isPositionTop: function() {
    return this._getTopPosition() != null;
  },
  _getTopPosition: function() {
    var menuHeight, menuMarginTop, menuOffset, menuScrollTopWindow, windowHeight, windowScrollTop;
    if (!this.$dropdownMenu) {
      return;
    }
    windowHeight = $(window).height();
    windowScrollTop = $(window).scrollTop();
    menuHeight = this.$dropdownMenu.innerHeight();
    menuOffset = this.$dropdownMenu.offset();
    menuScrollTopWindow = menuOffset.top - windowScrollTop;
    menuMarginTop = parseInt(this.$dropdownMenu.css('margin-top'));
    if (menuMarginTop) {
      menuScrollTopWindow -= menuMarginTop;
    }
    if ((menuScrollTopWindow + menuHeight) > windowHeight) {
      return (menuHeight + MARGIN_BETWEEN_TOGGLER_AND_MENU) * -1;
    }
  },
  onMouseEnter: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (this.state.currentState === DROPDOWN_CLOSED) {
      return this.setState({
        currentState: DROPDOWN_OPENED_BY_HOVER
      });
    }
  },
  onMouseLeave: function() {
    if (this.state.currentState === DROPDOWN_OPENED_BY_HOVER) {
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          return _this.safeUpdateState({
            currentState: DROPDOWN_CLOSED
          });
        };
      })(this)), MOUSE_LEAVE_TIMEOUT);
    }
  },
  onDelete: function() {
    if (this.isMounted()) {
      return this.unmount();
    }
  },
  onClick: function() {
    switch (this.state.currentState) {
      case DROPDOWN_CLOSED:
        return this.setState({
          currentState: DROPDOWN_OPENED_BY_CLICK
        });
      case DROPDOWN_OPENED_BY_CLICK:
        return this.setState({
          currentState: DROPDOWN_CLOSED
        });
      case DROPDOWN_OPENED_BY_HOVER:
        return this.setState({
          currentState: DROPDOWN_CLOSED
        });
      default:
        return typeof console.error === "function" ? console.error("Unknown state.currentState", this.state.currentState) : void 0;
    }
  }
});


},{"classnames":647}],301:[function(require,module,exports){
window.EntryMetabarDropdownMenuDeleteItem = React.createClass({
  mixins: [RequesterMixin, 'ReactActivitiesUser', DOMManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    successDeleteUrl: React.PropTypes.string,
    onDelete: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      isProcess: false
    };
  },
  render: function() {
    var icon;
    if (this.state.isProcess) {
      icon = React.createElement("span", {
        "className": "spinner spinner--15x15"
      }, React.createElement("span", {
        "className": "spinner__icon"
      }));
    } else {
      icon = React.createElement("i", {
        "className": "icon icon--basket"
      });
    }
    return React.createElement("a", {
      "onClick": this.onClick,
      "className": "meta-item__dropdown-item"
    }, icon, i18n.t('delete_entry_item'));
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    return TastyConfirmController.show({
      message: i18n.t('delete_entry_confirm'),
      acceptButtonText: i18n.t('delete_entry_button'),
      onAccept: this.deleteEntry
    });
  },
  deleteEntry: function() {
    this.setState({
      isProcess: true
    });
    this.incrementActivities();
    return this.createRequest({
      url: ApiRoutes.entry_url(this.props.entryId),
      method: 'POST',
      data: {
        _method: 'DELETE'
      },
      success: (function(_this) {
        return function() {
          if (_this.props.successDeleteUrl != null) {
            return window.location = _this.props.successDeleteUrl;
          } else {
            return _this.removeEntryFromDOM(_this.props.entryId);
          }
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          _this.setState({
            isProcess: false
          });
          return _this.decrementActivities();
        };
      })(this)
    });
  }
});


},{}],302:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.EntryMetabarDropdownMenuFavoriteItem = React.createClass({
  mixins: [RequesterMixin, DOMManipulationsMixin, ComponentManipulationsMixin],
  propTypes: {
    isFavorited: React.PropTypes.bool.isRequired,
    entryId: React.PropTypes.number.isRequired,
    shouldRemoveFavoriteNode: React.PropTypes.bool
  },
  getInitialState: function() {
    return {
      isFavorited: this.props.isFavorited,
      isHover: false
    };
  },
  render: function() {
    var iconClasses;
    iconClasses = classnames('icon', 'icon--star', {
      'icon--star-fill': this.state.isFavorited
    });
    return React.createElement("a", {
      "onClick": this.onClick,
      "onMouseEnter": this.onMouseEnter,
      "onMouseLeave": this.onMouseLeave,
      "className": "meta-item__dropdown-item"
    }, React.createElement("i", {
      "className": iconClasses
    }), this.getTitle());
  },
  getTitle: function() {
    if (this.state.isFavorited) {
      if (this.state.isHover) {
        return i18n.t('remove_from_favorites_entry_item');
      } else {
        return i18n.t('entry_in_favorites');
      }
    } else {
      return i18n.t('add_to_favorites_entry_item');
    }
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    if (this.state.isFavorited) {
      return this.removeFromFavorites();
    } else {
      return this.addToFavorites();
    }
  },
  addToFavorites: function() {
    return this.createRequest({
      url: ApiRoutes.favorites_url(),
      method: 'POST',
      data: {
        entry_id: this.props.entryId
      },
      success: (function(_this) {
        return function() {
          _this.safeUpdateState({
            isFavorited: true
          });
          return console.info("Пост " + _this.props.entryId + " добавлен в избранное");
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  },
  removeFromFavorites: function() {
    return this.createRequest({
      url: ApiRoutes.favorites_url(),
      method: 'POST',
      data: {
        _method: 'DELETE',
        entry_id: this.props.entryId
      },
      success: (function(_this) {
        return function() {
          if (_this.props.shouldRemoveFavoriteNode) {
            _this.removeEntryFromDOM(_this.props.entryId);
          } else {
            _this.safeUpdateState({
              isFavorited: false
            });
          }
          return console.info("Пост " + _this.props.entryId + " удалён из избранного");
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  },
  onMouseEnter: function() {
    return this.setState({
      isHover: true
    });
  },
  onMouseLeave: function() {
    return this.setState({
      isHover: false
    });
  }
});


},{"classnames":647}],303:[function(require,module,exports){
window.EntryMetabarDropdownMenuItem = React.createClass({
  propTypes: {
    href: React.PropTypes.string.isRequired,
    icon: React.PropTypes.string.isRequired,
    title: React.PropTypes.string.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "href": this.props.href,
      "className": "meta-item__dropdown-item"
    }, React.createElement("i", {
      "className": "icon " + this.props.icon
    }), this.props.title);
  }
});


},{}],304:[function(require,module,exports){
window.EntryMetabarDropdownMenuReportItem = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "onClick": this.onClick,
      "className": "meta-item__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--exclamation-mark"
    }), i18n.t('report_entry_item'));
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    return TastyConfirmController.show({
      message: i18n.t('report_entry_confirm'),
      acceptButtonText: i18n.t('report_entry_button'),
      onAccept: this.createReport
    });
  },
  createReport: function() {
    return this.createRequest({
      url: ApiRoutes.report_url(this.props.entryId),
      method: 'POST',
      success: (function(_this) {
        return function() {
          return NoticeService.notifySuccess(i18n.t('report_entry_success'));
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  }
});


},{}],305:[function(require,module,exports){
window.EntryMetabarDropdownMenuWatchItem = React.createClass({
  mixins: [RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    isWatching: React.PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return {
      isWatching: this.props.isWatching,
      isHover: false
    };
  },
  render: function() {
    return React.createElement("a", {
      "onClick": this.onClick,
      "onMouseEnter": this.onMouseEnter,
      "onMouseLeave": this.onMouseLeave,
      "className": "meta-item__dropdown-item"
    }, React.createElement("i", {
      "className": "icon icon--comments-subscribe"
    }), this.getTitle());
  },
  getTitle: function() {
    if (this.state.isWatching) {
      if (this.state.isHover) {
        return i18n.t('stop_watch_entry_item');
      } else {
        return i18n.t('watching_entry_item');
      }
    } else {
      return i18n.t('start_watch_entry_item');
    }
  },
  onClick: function(e) {
    e.stopPropagation();
    e.preventDefault();
    if (this.state.isWatching) {
      return this.removeFromWatching();
    } else {
      return this.addToWatching();
    }
  },
  addToWatching: function() {
    return this.createRequest({
      url: ApiRoutes.watching_url(),
      method: 'POST',
      data: {
        entry_id: this.props.entryId
      },
      success: (function(_this) {
        return function() {
          _this.safeUpdateState({
            isWatching: true
          });
          return console.info("Оформлена подписка на комментарии поста " + _this.props.entryId);
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  },
  removeFromWatching: function() {
    return this.createRequest({
      url: ApiRoutes.watching_url(),
      method: 'POST',
      data: {
        _method: 'DELETE',
        entry_id: this.props.entryId
      },
      success: (function(_this) {
        return function() {
          _this.safeUpdateState({
            isWatching: false
          });
          return console.info("Отменена подписка на комментарии поста " + _this.props.entryId);
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  },
  onMouseEnter: function() {
    return this.setState({
      isHover: true
    });
  },
  onMouseLeave: function() {
    return this.setState({
      isHover: false
    });
  }
});


},{}],306:[function(require,module,exports){
var EntryMetabarTags;

EntryMetabarTags = require('./tags');

window.EntryMetabar = React.createClass({
  propTypes: {
    userSlug: React.PropTypes.string.isRequired,
    entryId: React.PropTypes.number.isRequired,
    author: React.PropTypes.object,
    isFavorited: React.PropTypes.bool.isRequired,
    isWatching: React.PropTypes.bool.isRequired,
    shouldRemoveFavoriteNode: React.PropTypes.bool,
    entryUrl: React.PropTypes.string.isRequired,
    editUrl: React.PropTypes.string,
    successDeleteUrl: React.PropTypes.string,
    canEdit: React.PropTypes.bool,
    canFavorite: React.PropTypes.bool,
    canWatch: React.PropTypes.bool,
    canReport: React.PropTypes.bool,
    canDelete: React.PropTypes.bool,
    tags: React.PropTypes.array.isRequired,
    createdAt: React.PropTypes.string.isRequired,
    entryCommentsUrl: React.PropTypes.string.isRequired,
    totalCommentsCount: React.PropTypes.number.isRequired,
    isLogged: React.PropTypes.bool.isRequired,
    isEntryPage: React.PropTypes.bool.isRequired
  },
  getDefaultProps: function() {
    return {
      tags: []
    };
  },
  render: function() {
    var entryAuthor, entryComment;
    if (this.props.author) {
      entryAuthor = React.createElement(EntryMetabarAuthor, {
        "user": this.props.author
      });
    }
    if (!(this.props.totalCommentsCount === 0 && this.props.isLogged === false || this.props.isEntryPage === true)) {
      entryComment = React.createElement(EntryMetabarComment, {
        "entryId": this.props.entryId,
        "isLogged": this.props.isLogged,
        "entryUrl": this.props.entryUrl,
        "totalCommentsCount": this.props.totalCommentsCount
      });
    }
    return React.createElement("span", {
      "className": "meta-bar"
    }, entryAuthor, entryComment, React.createElement(EntryMetabarDate, {
      "time": this.props.createdAt,
      "entryUrl": this.props.entryUrl
    }), React.createElement(EntryMetabarTags, {
      "tags": this.props.tags,
      "userSlug": this.props.userSlug
    }), React.createElement(EntryMetabarDropdownMenu, {
      "entryId": this.props.entryId,
      "isFavorited": this.props.isFavorited,
      "isWatching": this.props.isWatching,
      "shouldRemoveFavoriteNode": this.props.shouldRemoveFavoriteNode,
      "entryUrl": this.props.entryUrl,
      "editUrl": this.props.editUrl,
      "successDeleteUrl": this.props.successDeleteUrl,
      "canEdit": this.props.canEdit,
      "canFavorite": this.props.canFavorite,
      "canWatch": this.props.canWatch,
      "canReport": this.props.canReport,
      "canDelete": this.props.canDelete
    }));
  }
});


},{"./tags":308}],307:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var EntryMetabarTag = React.createClass({
  displayName: "EntryMetabarTag",

  propTypes: {
    tag: React.PropTypes.string.isRequired,
    userSlug: React.PropTypes.string.isRequired
  },

  render: function render() {
    var _props = this.props;
    var userSlug = _props.userSlug;
    var tag = _props.tag;

    return React.createElement(
      "a",
      { href: Routes.userTag(userSlug, tag),
        target: "_blank",
        title: "#" + tag,
        className: "meta-item__common meta-item__link" },
      "#" + tag
    );
  }
});

exports["default"] = EntryMetabarTag;
module.exports = exports["default"];

},{}],308:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tag = require('./tag');

var _tag2 = _interopRequireDefault(_tag);

var EntryMetabarTags = React.createClass({
  displayName: "EntryMetabarTags",

  propTypes: {
    tags: React.PropTypes.array.isRequired,
    userSlug: React.PropTypes.string.isRequired
  },

  render: function render() {
    var _this = this;

    if (this.props.tags.length) {
      var tagList = this.props.tags.map(function (tag, i) {
        if (i !== _this.props.tags.length - 1) {
          return React.createElement(
            "span",
            { key: i },
            React.createElement(_tag2["default"], { tag: tag, userSlug: _this.props.userSlug }),
            React.createElement(
              "span",
              { className: "meta-item__common", key: i + " comma" },
              ", "
            )
          );
        } else {
          return React.createElement(_tag2["default"], {
            tag: tag,
            userSlug: _this.props.userSlug,
            key: i });
        }
      });

      return React.createElement(
        "span",
        { className: "meta-item meta-item--tags" },
        React.createElement(
          "span",
          { className: "meta-item__content" },
          tagList
        )
      );
    } else {
      return null;
    }
  }
});

exports["default"] = EntryMetabarTags;
module.exports = exports["default"];

},{"./tag":307,"babel-runtime/helpers/interop-require-default":574}],309:[function(require,module,exports){
var CLASS_PREFIX_STATE, STATE_ERROR, STATE_FRIEND, STATE_GUESSED, STATE_IGNORED, STATE_NONE, STATE_PROCESS, STATE_REQUESTED;

CLASS_PREFIX_STATE = 'state--';

STATE_NONE = 'none';

STATE_FRIEND = 'friend';

STATE_IGNORED = 'ignored';

STATE_GUESSED = 'guessed';

STATE_REQUESTED = 'requested';

STATE_ERROR = 'error';

STATE_PROCESS = 'process';

window.FollowStatus = React.createClass({
  propTypes: {
    status: React.PropTypes.string.isRequired,
    error: React.PropTypes.bool,
    process: React.PropTypes.bool,
    onClick: React.PropTypes.func
  },
  componentDidMount: function() {
    var $followStatus;
    $followStatus = $(this.getDOMNode());
    return $followStatus.tooltip({
      placement: 'bottom',
      trigger: 'click hover'
    });
  },
  componentWillUnmount: function() {
    var $followStatus;
    $followStatus = $(this.getDOMNode());
    return $followStatus.tooltip('destroy');
  },
  render: function() {
    var content, stateClass, tooltipText;
    tooltipText = (function() {
      switch (this.props.status) {
        case STATE_NONE:
          return i18n.t('follow_status_none');
        case STATE_FRIEND:
          return i18n.t('follow_status_friend');
        case STATE_IGNORED:
          return i18n.t('follow_status_ignored');
        case STATE_GUESSED:
          return i18n.t('follow_status_guessed');
        case STATE_REQUESTED:
          return i18n.t('follow_status_requested');
        default:
          return console.warn('Неизвестный статус', this.props.status);
      }
    }).call(this);
    content = React.createElement("i", {
      "className": 'icon'
    });
    if (this.props.process) {
      content = React.createElement(Spinner, {
        "size": 14.
      });
    }
    stateClass = this.props.status;
    if (this.props.error) {
      stateClass = STATE_ERROR;
    }
    if (this.props.process) {
      stateClass = STATE_PROCESS;
    }
    stateClass = CLASS_PREFIX_STATE + stateClass;
    return React.createElement("span", {
      "data-original-title": tooltipText,
      "className": 'follow-status ' + stateClass,
      "onClick": this.props.onClick
    }, content);
  }
});


},{}],310:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedConstantsTlog = require('../../../../../shared/constants/Tlog');

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _WriteMessageButton = require('./WriteMessageButton');

var _WriteMessageButton2 = _interopRequireDefault(_WriteMessageButton);

var HeroProfileActions = (function () {
  function HeroProfileActions() {
    _classCallCheck(this, HeroProfileActions);
  }

  _createClass(HeroProfileActions, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var relationship = _props.relationship;
      var user = _props.user;

      var isAnonymousTlog = user.slug === _sharedConstantsTlog.TLOG_SLUG_ANONYMOUS;

      return _react2['default'].createElement(
        'div',
        { className: 'hero__actions hero__actions--visible' },
        _react2['default'].createElement(FollowButton, { relationship: relationship }),
        !isAnonymousTlog && [_react2['default'].createElement(_WriteMessageButton2['default'], {
          key: 'write-message-button',
          user: user
        }), _react2['default'].createElement(HeroProfile_DropdownMenu, {
          key: 'ellipsis-button',
          status: relationship.state,
          userId: user.id
        })]
      );
    }
  }]);

  return HeroProfileActions;
})();

HeroProfileActions.propTypes = {
  relationship: ProjectTypes.relationship,
  user: ProjectTypes.heroUser
};

exports['default'] = HeroProfileActions;
module.exports = exports['default'];

},{"../../../../../shared/constants/Tlog":526,"../../../../../shared/react/ProjectTypes":531,"./WriteMessageButton":313,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"react":"react"}],311:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _sharedReactProjectTypes = require('../../../../../shared/react/ProjectTypes');

var ProjectTypes = _interopRequireWildcard(_sharedReactProjectTypes);

var _HeroProfileActions = require('./HeroProfileActions');

var _HeroProfileActions2 = _interopRequireDefault(_HeroProfileActions);

var _HeroProfileSelfActions = require('./HeroProfileSelfActions');

var _HeroProfileSelfActions2 = _interopRequireDefault(_HeroProfileSelfActions);

var HeroProfileActionsContainer = (function (_Component) {
  _inherits(HeroProfileActionsContainer, _Component);

  function HeroProfileActionsContainer() {
    _classCallCheck(this, HeroProfileActionsContainer);

    _get(Object.getPrototypeOf(HeroProfileActionsContainer.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      extraStyles: ''
    };
  }

  _createClass(HeroProfileActionsContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var container = (0, _react.findDOMNode)(this.refs.container);
      if (container) {
        var currentColor = window.getComputedStyle(container).getPropertyValue('color');
        var contrastColor = (0, _color2['default'])(currentColor).luminosity() > 0.5 ? 'black' : 'white';

        var extraStyles = '\n        .hero__actions button {\n           background-color: ' + currentColor + '; \n           opacity: 0.6;\n        }\n        .hero__actions button:before {\n          border: none;\n        }\n        .hero__actions button:hover { opacity: 1; }\n        .hero__actions,\n        .hero__actions button.button--outline {\n          color: ' + contrastColor + '!important;\n        }\n      ';
        this.setState({ extraStyles: extraStyles });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var isCurrentUser = _props.isCurrentUser;
      var relationship = _props.relationship;
      var user = _props.user;

      return _react2['default'].createElement(
        'div',
        { ref: 'container' },
        _react2['default'].createElement(
          'style',
          null,
          this.state.extraStyles
        ),
        isCurrentUser ? _react2['default'].createElement(_HeroProfileSelfActions2['default'], null) : relationship && _react2['default'].createElement(_HeroProfileActions2['default'], {
          relationship: relationship,
          user: user
        })
      );
    }
  }]);

  return HeroProfileActionsContainer;
})(_react.Component);

HeroProfileActionsContainer.propTypes = {
  isCurrentUser: _react.PropTypes.bool.isRequired,
  relationship: ProjectTypes.relationship,
  user: ProjectTypes.heroUser
};

exports['default'] = HeroProfileActionsContainer;
module.exports = exports['default'];

},{"../../../../../shared/react/ProjectTypes":531,"./HeroProfileActions":310,"./HeroProfileSelfActions":312,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"color":"color","react":"react"}],312:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _buttonsSettings = require('./buttons/Settings');

var _buttonsSettings2 = _interopRequireDefault(_buttonsSettings);

var _actionsPopup = require('../../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var HeroProfileSelfActions = (function () {
  function HeroProfileSelfActions() {
    _classCallCheck(this, HeroProfileSelfActions);
  }

  _createClass(HeroProfileSelfActions, [{
    key: 'showSettings',
    value: function showSettings() {
      _actionsPopup2['default'].showSettings();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'hero__actions' },
        _react2['default'].createElement(
          'button',
          { className: 'button button--small button--outline' },
          i18n.t('buttons.actions.thats_you')
        ),
        _react2['default'].createElement(_buttonsSettings2['default'], { onClick: this.showSettings })
      );
    }
  }]);

  return HeroProfileSelfActions;
})();

HeroProfileSelfActions.propTypes = {};

exports['default'] = HeroProfileSelfActions;
module.exports = exports['default'];

},{"../../../actions/popup":17,"./buttons/Settings":314,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],313:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _messagingActionsConversationActions = require('../../../messaging/actions/ConversationActions');

var _messagingActionsConversationActions2 = _interopRequireDefault(_messagingActionsConversationActions);

var WriteMessageButton = (function () {
  function WriteMessageButton() {
    _classCallCheck(this, WriteMessageButton);
  }

  _createClass(WriteMessageButton, [{
    key: 'handleClick',
    value: function handleClick() {
      _messagingActionsConversationActions2['default'].openConversation(this.props.user.id);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'button',
        {
          className: 'write-message-button',
          onClick: this.handleClick.bind(this)
        },
        _react2['default'].createElement('i', { className: 'icon icon--messages' })
      );
    }
  }]);

  return WriteMessageButton;
})();

WriteMessageButton.propTypes = {
  user: _react.PropTypes.object.isRequired
};

exports['default'] = WriteMessageButton;
module.exports = exports['default'];

},{"../../../messaging/actions/ConversationActions":435,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],314:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var HeroProfile_SettingsButton = React.createClass({
  displayName: "HeroProfile_SettingsButton",

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "button",
      { className: "profile-settings-button", onClick: this.handleClick },
      React.createElement("i", { className: "icon icon--cogwheel" })
    );
  },

  handleClick: function handleClick() {
    this.props.onClick();
  }
});

exports["default"] = HeroProfile_SettingsButton;
module.exports = exports["default"];

},{}],315:[function(require,module,exports){
var DROPDOWN_CLOSED, DROPDOWN_OPENED, MOUSE_LEAVE_TIMEOUT, classnames;

classnames = require('classnames');

MOUSE_LEAVE_TIMEOUT = 300;

DROPDOWN_CLOSED = 'closed';

DROPDOWN_OPENED = 'opened';

window.HeroProfile_DropdownMenu = React.createClass({
  mixins: [ComponentManipulationsMixin],
  propTypes: {
    userId: React.PropTypes.number.isRequired,
    status: React.PropTypes.string.isRequired
  },
  getInitialState: function() {
    return {
      currentState: DROPDOWN_CLOSED,
      status: this.props.status
    };
  },
  componentDidMount: function() {
    return TastyEvents.on(TastyEvents.keys.follow_status_changed(this.props.userId), this.updateFollowStatus);
  },
  componentWillUnmount: function() {
    if (this.timeout) {
      return clearTimeout(this.timeout);
    }
  },
  render: function() {
    var actionList, dropdownMenuClasses;
    actionList = [];
    dropdownMenuClasses = classnames('action-dropdown', 'position-top', {
      'state--open': !this.isClosedState()
    });
    if (this.state.status !== 'ignored') {
      actionList.push(React.createElement(HeroProfile_DropdownMenuIgnoreItem, {
        "userId": this.props.userId,
        "onRequestEnd": this.activateClosedState,
        "key": "ignore"
      }));
    }
    actionList.push(React.createElement(HeroProfile_DropdownMenuReportItem, {
      "userId": this.props.userId,
      "onRequestEnd": this.activateClosedState,
      "key": "report"
    }));
    return React.createElement("div", {
      "className": "dropdown-container",
      "onMouseEnter": this.handleMouseEnter,
      "onMouseLeave": this.handleMouseLeave
    }, React.createElement("button", {
      "className": "action-menu-button"
    }, React.createElement("i", {
      "className": "icon icon--dots"
    })), React.createElement("span", {
      "className": dropdownMenuClasses
    }, actionList));
  },
  activateClosedState: function() {
    return this.safeUpdateState({
      currentState: DROPDOWN_CLOSED
    });
  },
  activateOpenedState: function() {
    return this.safeUpdateState({
      currentState: DROPDOWN_OPENED
    });
  },
  isClosedState: function() {
    return this.state.currentState === DROPDOWN_CLOSED;
  },
  isOpenedState: function() {
    return this.state.currentState === DROPDOWN_OPENED;
  },
  updateFollowStatus: function(newStatus) {
    return this.safeUpdateState({
      status: newStatus
    });
  },
  handleMouseEnter: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (this.isClosedState()) {
      return this.activateOpenedState();
    }
  },
  handleMouseLeave: function() {
    if (this.isOpenedState()) {
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          return _this.activateClosedState();
        };
      })(this)), MOUSE_LEAVE_TIMEOUT);
    }
  }
});


},{"classnames":647}],316:[function(require,module,exports){
window.HeroProfile_DropdownMenuIgnoreItem = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    userId: React.PropTypes.number.isRequired,
    onRequestEnd: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "className": "action-dropdown-item",
      "onClick": this.ignore
    }, React.createElement("i", {
      "className": "icon icon--not-allowed"
    }), i18n.t('ignore_tlog_item'));
  },
  ignore: function() {
    return this.createRequest({
      url: ApiRoutes.change_my_relationship_url(this.props.userId, 'ignore'),
      method: 'POST',
      success: (function(_this) {
        return function(relationship) {
          TastyEvents.emit(TastyEvents.keys.follow_status_changed(_this.props.userId), relationship.state);
          return _this.props.onRequestEnd();
        };
      })(this),
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    }, {
      progressBar: true
    });
  }
});


},{}],317:[function(require,module,exports){
window.HeroProfile_DropdownMenuReportItem = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    userId: React.PropTypes.number.isRequired,
    onRequestEnd: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "className": "action-dropdown-item",
      "onClick": this.report
    }, React.createElement("i", {
      "className": "icon icon--exclamation-mark"
    }), i18n.t('report_tlog_item'));
  },
  report: function() {
    return this.createRequest({
      url: ApiRoutes.tlog_report(this.props.userId),
      method: 'POST',
      success: function() {
        NoticeService.notifySuccess(i18n.t('report_user_success'));
        return this.props.onRequestEnd();
      },
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    }, {
      progressBar: true
    });
  }
});


},{}],318:[function(require,module,exports){
window.HeroProfileStats_FollowersPopup = React.createClass({
  mixins: ['ReactActivitiesUser', ReactUnmountMixin, RequesterMixin, ScrollerMixin, ComponentManipulationsMixin],
  propTypes: {
    tlogId: React.PropTypes.number.isRequired,
    onClose: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      relationships: null,
      isError: false,
      isLoading: false
    };
  },
  componentDidMount: function() {
    return this.loadFollowers();
  },
  render: function() {
    var followerList, message, ref, relationships;
    if (((ref = this.state.relationships) != null ? ref.length : void 0) > 0) {
      relationships = this.state.relationships.map((function(_this) {
        return function(relationship, i) {
          return React.createElement(HeroProfileStats_FollowerItem, {
            "relationship": relationship,
            "key": i
          });
        };
      })(this));
      followerList = React.createElement("section", {
        "className": "users"
      }, relationships);
    } else {
      if (this.state.isError) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_error'));
      } else if (this.state.isLoading) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_loading'));
      } else {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_empty'));
      }
      followerList = React.createElement("div", {
        "className": "grid-full"
      }, React.createElement("div", {
        "className": "grid-full__middle"
      }, message));
    }
    return React.createElement("div", {
      "className": "scroller scroller--users",
      "ref": "scroller"
    }, React.createElement("div", {
      "className": "scroller__pane js-scroller-pane"
    }, followerList), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })));
  },
  loadFollowers: function() {
    this.safeUpdate((function(_this) {
      return function() {
        return _this.incrementActivities();
      };
    })(this));
    this.setState({
      isError: false,
      isLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.tlog_followers(this.props.tlogId),
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdateState({
            relationships: data.relationships
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          _this.safeUpdate(function() {
            return _this.decrementActivities();
          });
          return _this.safeUpdateState({
            isLoading: false
          });
        };
      })(this)
    });
  }
});


},{}],319:[function(require,module,exports){
window.HeroProfileStats_FollowingsPopup = React.createClass({
  mixins: ['ReactActivitiesUser', ReactUnmountMixin, RequesterMixin, ScrollerMixin, ComponentManipulationsMixin],
  propTypes: {
    tlogId: React.PropTypes.number.isRequired,
    onClose: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      relationships: null,
      isError: false,
      isLoading: false
    };
  },
  componentDidMount: function() {
    return this.loadFollowings();
  },
  render: function() {
    var followingList, message, ref, relationships;
    if (((ref = this.state.relationships) != null ? ref.length : void 0) > 0) {
      relationships = this.state.relationships.map((function(_this) {
        return function(relationship, i) {
          return React.createElement(HeroProfileStats_FollowingItem, {
            "relationship": relationship,
            "key": i
          });
        };
      })(this));
      followingList = React.createElement("section", {
        "className": "users"
      }, relationships);
    } else {
      if (this.state.isError) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_error'));
      } else if (this.state.isLoading) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_loading'));
      } else {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_empty'));
      }
      followingList = React.createElement("div", {
        "className": "grid-full"
      }, React.createElement("div", {
        "className": "grid-full__middle"
      }, message));
    }
    return React.createElement("div", {
      "className": "scroller scroller--users",
      "ref": "scroller"
    }, React.createElement("div", {
      "className": "scroller__pane js-scroller-pane"
    }, followingList), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })));
  },
  loadFollowings: function() {
    this.safeUpdate((function(_this) {
      return function() {
        return _this.incrementActivities();
      };
    })(this));
    this.setState({
      isError: false,
      isLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.tlog_followings(this.props.tlogId),
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdateState({
            relationships: data.relationships
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          _this.safeUpdate(function() {
            return _this.decrementActivities();
          });
          return _this.safeUpdateState({
            isLoading: false
          });
        };
      })(this)
    });
  }
});


},{}],320:[function(require,module,exports){
window.HeroProfileStats_FollowerItem = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement("article", {
      "className": "user__item"
    }, React.createElement("a", {
      "className": "user__link",
      "href": this.props.relationship.reader.tlog_url,
      "title": this.props.relationship.reader.name
    }, React.createElement("span", {
      "className": "user__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.relationship.reader,
      "size": 64.
    })), React.createElement("span", {
      "className": "user__desc"
    }, React.createElement("span", {
      "className": "user__name"
    }, this.props.relationship.reader.name))));
  }
});


},{}],321:[function(require,module,exports){
window.HeroProfileStats_FollowingItem = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement("article", {
      "className": "user__item"
    }, React.createElement("a", {
      "className": "user__link",
      "href": this.props.relationship.user.tlog_url,
      "title": this.props.relationship.user.name
    }, React.createElement("span", {
      "className": "user__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.relationship.user,
      "size": 64.
    })), React.createElement("span", {
      "className": "user__desc"
    }, React.createElement("span", {
      "className": "user__name"
    }, this.props.relationship.user.name))));
  }
});


},{}],322:[function(require,module,exports){
"use strict";

window.HeroProfileStats_TagItem = React.createClass({
  displayName: "HeroProfileStats_TagItem",

  propTypes: {
    tag: React.PropTypes.object.isRequired,
    userSlug: React.PropTypes.string.isRequired
  },

  render: function render() {
    var _props = this.props;
    var userSlug = _props.userSlug;
    var tag = _props.tag;

    return React.createElement(
      "article",
      { className: "tag" },
      React.createElement(
        "a",
        { href: Routes.userTag(userSlug, tag.name),
          title: "#" + tag.name,
          className: "tag__link" },
        React.createElement(
          "span",
          { className: "tag__count" },
          tag.taggings_count
        ),
        React.createElement(
          "span",
          { className: "tag__text" },
          "#" + tag.name
        )
      )
    );
  }
});

},{}],323:[function(require,module,exports){
var FADE_DURATION, MARGIN;

MARGIN = 10;

FADE_DURATION = 300;

window.HeroProfileStats_Popup = React.createClass({
  mixins: ['ReactActivitiesMixin', ReactUnmountMixin, ComponentManipulationsMixin],
  propTypes: {
    title: React.PropTypes.string.isRequired,
    toggle: React.PropTypes.object.isRequired,
    onClose: React.PropTypes.func
  },
  componentDidMount: function() {
    this.alignPopup();
    this.open();
    TastyEvents.on(TastyEvents.keys.hero_closed(), this.close);
    return $(window).one('resize', this.close);
  },
  componentWillUnmount: function() {
    return $(window).off('resize', this.close);
  },
  componentDidUpdate: function() {
    return this.alignPopup();
  },
  render: function() {
    React.Children.map(this.props.children, (function(_this) {
      return function(context) {
        return context.props.activitiesHandler = _this.activitiesHandler;
      };
    })(this));
    return React.createElement("div", {
      "className": "popup popup--dark"
    }, React.createElement("div", {
      "className": "popup__arrow popup__arrow--down"
    }), React.createElement(PopupHeader, {
      "hasActivities": this.hasActivities(),
      "title": this.props.title,
      "isDraggable": this.props.isDraggable,
      "onClickClose": this.close
    }), React.createElement("div", {
      "className": "popup__body"
    }, this.props.children));
  },
  getPopupOffset: function() {
    var getCenterLeft, heightPopup, heightToggle, offsetLeft, offsetTop, widthPopup, widthToggle;
    widthPopup = this.$popup.width();
    heightPopup = this.$popup.height();
    widthToggle = this.$toggle.outerWidth();
    heightToggle = this.$toggle.outerHeight();
    offsetTop = this.$toggle.offset().top;
    offsetLeft = this.$toggle.offset().left;
    getCenterLeft = function() {
      return offsetLeft - (widthPopup - widthToggle) / 2;
    };
    return {
      top: offsetTop - heightPopup - MARGIN,
      left: getCenterLeft()
    };
  },
  alignPopup: function() {
    this.$popup = $(this.getDOMNode());
    this.$toggle = this.props.toggle;
    return this.$popup.css({
      left: this.getPopupOffset().left,
      top: this.getPopupOffset().top
    });
  },
  open: function() {
    return this.$popup.css('display', 'none').fadeIn(FADE_DURATION);
  },
  close: function() {
    return this.safeUpdate((function(_this) {
      return function() {
        return _this.$popup.fadeOut(FADE_DURATION, _this.unmount);
      };
    })(this));
  }
});


},{}],324:[function(require,module,exports){
window.HeroProfileStats_TagsPopup = React.createClass({
  mixins: ['ReactActivitiesUser', ReactUnmountMixin, RequesterMixin, ScrollerMixin, ComponentManipulationsMixin],
  propTypes: {
    userID: React.PropTypes.number.isRequired,
    userSlug: React.PropTypes.string.isRequired,
    onClose: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      tags: null,
      isError: false,
      isLoading: false
    };
  },
  componentDidMount: function() {
    return this.loadTags();
  },
  render: function() {
    var message, ref, tagList, tags;
    if (((ref = this.state.tags) != null ? ref.length : void 0) > 0) {
      tags = this.state.tags.map((function(_this) {
        return function(tag, i) {
          return React.createElement(HeroProfileStats_TagItem, {
            "tag": tag,
            "userSlug": _this.props.userSlug,
            "key": i
          });
        };
      })(this));
      tagList = React.createElement("section", {
        "className": "users"
      }, tags);
    } else {
      if (this.state.isError) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_error'));
      } else if (this.state.isLoading) {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_loading'));
      } else {
        message = React.createElement("div", {
          "className": "popup__text"
        }, i18n.t('hero_stats_popup_empty'));
      }
      tagList = React.createElement("div", {
        "className": "grid-full"
      }, React.createElement("div", {
        "className": "grid-full__middle"
      }, message));
    }
    return React.createElement("div", {
      "className": "scroller scroller--tags",
      "ref": "scroller"
    }, React.createElement("div", {
      "className": "scroller__pane js-scroller-pane"
    }, tagList), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })));
  },
  loadTags: function() {
    this.safeUpdate((function(_this) {
      return function() {
        return _this.incrementActivities();
      };
    })(this));
    this.setState({
      isError: false,
      isLoading: true
    });
    return this.createRequest({
      url: ApiRoutes.tlog_tags(this.props.userID),
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdateState({
            tags: data
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          _this.safeUpdate(function() {
            return _this.decrementActivities();
          });
          return _this.safeUpdateState({
            isLoading: false
          });
        };
      })(this)
    });
  }
});


},{}],325:[function(require,module,exports){
var HERO_CLOSED, HERO_OPENED, HERO_OPENED_CLASS, HeroProfileActionsContainer;

HeroProfileActionsContainer = require('./HeroProfileActionsContainer');

HERO_CLOSED = 'closed';

HERO_OPENED = 'opened';

HERO_OPENED_CLASS = 'hero-enabled';

window.HeroProfile = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired,
    stats: React.PropTypes.object.isRequired,
    relationship: React.PropTypes.object
  },
  getInitialState: function() {
    return {
      currentState: HERO_CLOSED
    };
  },
  componentDidMount: function() {
    this.$hero = $(this.getDOMNode());
    this.heroClosedHeight = this.$hero.height();
    $(window).on('resize', this.onResize);
    $(window).on('scroll', this.scrollFade);
    TastyEvents.on(TastyEvents.keys.command_hero_open(), this.open);
    return TastyEvents.on(TastyEvents.keys.command_hero_close(), this.close);
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    return this.state.currentState !== nextState.currentState;
  },
  componentWillUnmount: function() {
    $(window).off('resize', this.onResize);
    $(window).off('scroll', this.scrollFade);
    TastyEvents.off(TastyEvents.keys.command_hero_open(), this.open);
    return TastyEvents.off(TastyEvents.keys.command_hero_close(), this.close);
  },
  render: function() {
    var followButtonVisible;
    followButtonVisible = !this.isCurrentUser() && (this.props.relationship != null);
    return React.createElement("div", {
      "className": "hero hero-profile"
    }, React.createElement(CloseToolbar, {
      "onClick": this.close
    }), React.createElement("div", {
      "className": "hero__overlay"
    }), React.createElement("div", {
      "className": "hero__gradient"
    }), React.createElement("div", {
      "className": "hero__box",
      "ref": "heroBox"
    }, React.createElement(HeroProfileAvatar, {
      "user": this.props.user,
      "onClick": this.handleAvatarClick
    }), followButtonVisible && React.createElement(SmartFollowStatus, {
      "tlogId": this.props.user.id,
      "status": this.props.relationship.state
    }), React.createElement(HeroProfileHead, {
      "user": this.props.user
    }), React.createElement(HeroProfileActionsContainer, {
      "isCurrentUser": this.isCurrentUser(),
      "relationship": this.props.relationship,
      "user": this.props.user
    })), React.createElement(HeroProfileStats, {
      "user": this.props.user,
      "stats": this.props.stats
    }));
  },
  isCurrentUser: function() {
    if (CurrentUserStore.isLogged()) {
      return CurrentUserStore.getUser().id === this.props.user.id;
    }
  },
  open: function() {
    var transitionEnd;
    transitionEnd = 'webkitTransitionEnd otransitionend oTransitionEnd' + 'msTransitionEnd transitionend';
    Mousetrap.bind('esc', this.close);
    this.setHeroWindowHeight();
    $('body').addClass(HERO_OPENED_CLASS).scrollTop(0);
    return this.$hero.on(transitionEnd, (function(_this) {
      return function() {
        _this.setState({
          currentState: HERO_OPENED
        });
        $(window).on('scroll.hero', _this.close);
        return _this.$hero.off(transitionEnd);
      };
    })(this));
  },
  close: function() {
    if (this.isOpen()) {
      this.setState({
        currentState: HERO_CLOSED
      });
      Mousetrap.unbind('esc', this.close);
      $(window).off('scroll.hero');
      this.restoreInitialHeroHeight();
      setTimeout(this.unsetHeroHeight, 1500);
      $('body').removeClass(HERO_OPENED_CLASS);
      return TastyEvents.trigger(TastyEvents.keys.hero_closed());
    }
  },
  setInitialHeroHeight: function() {
    var transitionEnd;
    transitionEnd = 'webkitTransitionEnd otransitionend oTransitionEnd' + 'msTransitionEnd transitionend';
    this.$hero.on(transitionEnd, (function(_this) {
      return function() {
        $(document).trigger('domChanged');
        return _this.$hero.off(transitionEnd);
      };
    })(this));
    this.initialHeroHeight = this.$hero.height();
    return this.$hero.css('height', this.heroClosedHeight);
  },
  unsetHeroHeight: function() {
    return this.$hero.css('height', '');
  },
  restoreInitialHeroHeight: function() {
    return this.$hero.css('height', this.heroClosedHeight);
  },
  setHeroWindowHeight: function() {
    return this.$hero.css('height', $(window).height());
  },
  scrollFade: function() {
    var $heroBox, height, scrollTop;
    $heroBox = $(this.refs.heroBox.getDOMNode());
    height = $heroBox.outerHeight() / 1.5;
    scrollTop = $(window).scrollTop();
    if (scrollTop < this.heroClosedHeight) {
      if (scrollTop < 0) {
        scrollTop = 0;
      }
      return $heroBox.css({
        'transform': 'translateY(' + scrollTop + 'px)',
        '-ms-transform': 'translateY(' + scrollTop + 'px)',
        '-webkit-transform': 'translateY(' + scrollTop + 'px)',
        'opacity': Math.max(1 - scrollTop / height, 0)
      });
    }
  },
  onResize: function() {
    if (this.isOpen()) {
      return this.setHeroWindowHeight();
    }
  },
  isOpen: function() {
    return this.state.currentState !== HERO_CLOSED;
  },
  handleAvatarClick: function(e) {
    if (!this.isOpen()) {
      this.setInitialHeroHeight();
      e.preventDefault();
      return this.open();
    }
  }
});


},{"./HeroProfileActionsContainer":311}],326:[function(require,module,exports){
var HERO_AVATAR_SIZE;

HERO_AVATAR_SIZE = 220;

window.HeroProfileAvatar = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired,
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("a", {
      "href": this.props.user.tlog_url,
      "onClick": this.props.onClick
    }, React.createElement("div", {
      "className": "hero__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.user,
      "size": HERO_AVATAR_SIZE
    })));
  }
});


},{}],327:[function(require,module,exports){
window.HeroProfileHead = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return {
      user: this.props.user
    };
  },
  componentDidMount: function() {
    TastyEvents.on(TastyEvents.keys.user_property_changed('title', this.state.user.id), this._updateTitle);
    return TastyEvents.on(TastyEvents.keys.user_property_changed('slug', this.state.user.id), this._updateSlug);
  },
  componentWillUnmount: function() {
    TastyEvents.off(TastyEvents.keys.user_property_changed('title', this.state.user.id), this._updateTitle);
    return TastyEvents.off(TastyEvents.keys.user_property_changed('slug', this.state.user.id), this._updateSlug);
  },
  render: function() {
    return React.createElement(HeroProfileHeadStatic, {
      "user": this.state.user
    });
  },
  _updateTitle: function(value) {
    var newUser;
    newUser = this.state.user;
    newUser.title = value;
    return this.setState({
      user: newUser
    });
  },
  _updateSlug: function(value) {
    var newUser;
    newUser = this.state.user;
    newUser.slug = value;
    return this.setState({
      user: newUser
    });
  }
});

window.HeroProfileHeadStatic = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "hero__head"
    }, React.createElement("div", {
      "className": "hero__mask"
    }), React.createElement("div", {
      "className": "hero__title"
    }, React.createElement("span", null, React.createElement("a", {
      "href": this.props.user.tlog_url
    }, this.props.user.slug))), React.createElement("div", {
      "className": "hero__text"
    }, React.createElement("span", {
      "dangerouslySetInnerHTML": {
        __html: this.props.user.title || ''
      }
    })));
  }
});


},{}],328:[function(require,module,exports){
window.HeroProfileStats = React.createClass({
  mixins: [ReactGrammarMixin],
  propTypes: {
    stats: React.PropTypes.object.isRequired,
    user: React.PropTypes.object.isRequired
  },
  componentDidMount: function() {
    this.container = document.querySelectorAll('[popup-hero-stats-container]')[0];
    if (!this.container) {
      return this.container = $('<\div>', {
        'popup-hero-stats-container': ''
      }).appendTo('body').get(0);
    }
  },
  render: function() {
    var heroStats, onClick, url;
    onClick = function(type, $el) {
      switch (type) {
        case 'followers':
          return this.handleFollowersClick($el);
        case 'followings':
          return this.handleFollowingsClick($el);
        case 'tags':
          return this.handleTagsClick($el);
        default:
          return console.log("Неизвестный тип статистики профиля " + type);
      }
    };
    heroStats = [];
    if (this.props.stats.followers_count != null) {
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "count": this.props.stats.followers_count,
        "title": i18n.t('stats_followers_count', {
          count: this.props.stats.followers_count
        }),
        "onClick": onClick.bind(this, 'followers'),
        "key": "followers"
      }));
    }
    if (this.props.stats.followings_count != null) {
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "count": this.props.stats.followings_count,
        "title": i18n.t('stats_followings_count', {
          count: this.props.stats.followings_count
        }),
        "onClick": onClick.bind(this, 'followings'),
        "key": "followings"
      }));
    }
    if (this.props.stats.favorites_count != null) {
      if (!this._isPrivate()) {
        url = Routes.tlog_favorite_entries_path(this.props.user.slug);
      }
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "href": url,
        "count": this.props.stats.favorites_count,
        "title": i18n.t('stats_favorites_count'),
        "key": "favorites"
      }));
    }
    if (this.props.stats.entries_count != null) {
      if (!this._isPrivate()) {
        url = this.props.user.tlog_url;
      }
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "href": url,
        "count": this.props.stats.entries_count,
        "title": i18n.t('stats_entries_count', {
          count: this.props.stats.entries_count
        }),
        "key": "entries"
      }));
    }
    if (this.props.stats.comments_count != null) {
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "count": this.props.stats.comments_count,
        "title": i18n.t('stats_comments_count', {
          counts: this.props.stats.comments_count
        }),
        "key": "comments"
      }));
    }
    if (this.props.stats.days_count != null) {
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "count": this.props.stats.days_count,
        "title": i18n.t('stats_days_count', {
          count: this.props.stats.days_count
        }),
        "key": "days"
      }));
    }
    if (this.props.stats.tags_count != null) {
      heroStats.push(React.createElement(HeroProfileStatsItem, {
        "count": this.props.stats.tags_count,
        "title": i18n.t('stats_tags_count', {
          count: this.props.stats.tags_count
        }),
        "onClick": onClick.bind(this, 'tags'),
        "key": "tags"
      }));
    }
    return React.createElement("div", {
      "className": "hero__stats"
    }, React.createElement("div", {
      "className": "hero__stats-list"
    }, heroStats));
  },
  handleFollowersClick: function($el) {
    return React.render(React.createElement(HeroProfileStats_Popup, {
      "title": i18n.t('followers'),
      "toggle": $el
    }, React.createElement(HeroProfileStats_FollowersPopup, {
      "tlogId": this.props.user.id
    })), this.container);
  },
  handleFollowingsClick: function($el) {
    return React.render(React.createElement(HeroProfileStats_Popup, {
      "title": i18n.t('followings'),
      "toggle": $el
    }, React.createElement(HeroProfileStats_FollowingsPopup, {
      "tlogId": this.props.user.id
    })), this.container);
  },
  handleTagsClick: function($el) {
    return React.render(React.createElement(HeroProfileStats_Popup, {
      "title": i18n.t('tags'),
      "toggle": $el
    }, React.createElement(HeroProfileStats_TagsPopup, {
      "userID": this.props.user.id,
      "userSlug": this.props.user.slug
    })), this.container);
  },
  _isPrivate: function() {
    return this.props.user.is_privacy;
  }
});


},{}],329:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.HeroProfileStatsItem = React.createClass({
  propTypes: {
    count: React.PropTypes.number.isRequired,
    title: React.PropTypes.string.isRequired,
    href: React.PropTypes.string,
    onClick: React.PropTypes.func
  },
  render: function() {
    var link, statsItemClasses;
    statsItemClasses = classnames('hero__stats-item', {
      'hero__stats-item-handler': this.props.onClick != null
    });
    if (this.props.href != null) {
      link = React.createElement("a", {
        "href": this.props.href,
        "title": this.props.count + ' ' + this.props.title,
        "className": "hero__stats-link"
      }, React.createElement("strong", null, this.props.count), this.props.title);
    } else {
      link = React.createElement("span", null, React.createElement("strong", null, this.props.count), this.props.title);
    }
    return React.createElement("div", {
      "onClick": this.handleClick,
      "className": statsItemClasses
    }, link);
  },
  handleClick: function(e) {
    if (this.props.onClick != null) {
      e.preventDefault();
      return this.props.onClick($(e.currentTarget));
    }
  }
});


},{"classnames":647}],330:[function(require,module,exports){
window.PeopleItem = React.createClass({
  propTypes: {
    title: React.PropTypes.string,
    user: React.PropTypes.object.isRequired,
    relationship: React.PropTypes.object
  },
  getInitialState: function() {
    var ref;
    return {
      title: (ref = this.props.title) != null ? ref : this.props.user.title
    };
  },
  render: function() {
    var followStatus;
    if ((this.props.relationship != null) && this.props.relationship.state !== 'none') {
      followStatus = React.createElement(FollowStatus, {
        "status": this.props.relationship.state
      });
    }
    return React.createElement("article", {
      "className": "people-item"
    }, React.createElement("div", {
      "className": "people-item__inner"
    }, React.createElement("a", {
      "className": "people-item__link",
      "href": this.props.user.tlog_url
    }, React.createElement("div", {
      "className": "people-item__avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.user
    }), followStatus), React.createElement("h3", {
      "className": "people-item__name"
    }, this.props.user.slug), React.createElement("p", {
      "dangerouslySetInnerHTML": {
        __html: this.state.title || ''
      },
      "className": "people-item__desc"
    }))));
  }
});


},{}],331:[function(require,module,exports){
window.PersonsPopup_FollowerRelationship = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.relationship.state !== nextProps.relationship.state) {
      true;
    }
    return false;
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.relationship.reader
    }, React.createElement(RelationshipFollowerButton, {
      "relationship": this.props.relationship
    }));
  }
});


},{}],332:[function(require,module,exports){
window.PersonsPopup_FollowingRelationship = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.relationship.state !== nextProps.relationship.state) {
      true;
    }
    return false;
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.relationship.user
    }, React.createElement(FollowButton, {
      "relationship": this.props.relationship
    }));
  }
});


},{}],333:[function(require,module,exports){
window.PersonsPopup_GuessRelationship = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.relationship.state !== nextProps.relationship.state) {
      true;
    }
    return false;
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.relationship.user
    }, React.createElement(RelationshipGuessButton, {
      "relationship": this.props.relationship,
      "onRequestEnd": this.props.onRequestEnd,
      "key": this.props.key
    }));
  }
});


},{}],334:[function(require,module,exports){
window.PersonsPopup_IgnoredRelationship = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.relationship.state !== nextProps.relationship.state) {
      true;
    }
    return false;
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.relationship.user
    }, React.createElement(RelationshipIgnoreButton, {
      "relationship": this.props.relationship
    }));
  }
});


},{}],335:[function(require,module,exports){
window.PersonsPopup_PersonItem = React.createClass({
  propTypes: {
    user: React.PropTypes.object.isRequired,
    children: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.array]).isRequired
  },
  render: function() {
    return React.createElement("li", {
      "className": "person"
    }, React.createElement("div", {
      "className": "person__in"
    }, React.createElement("div", {
      "className": "person__avatar"
    }, React.createElement("a", {
      "href": this.props.user.tlog_url
    }, React.createElement(UserAvatar, {
      "user": this.props.user,
      "size": 48.
    }))), React.createElement("div", {
      "className": "person__desc"
    }, React.createElement("a", {
      "href": this.props.user.tlog_url
    }, React.createElement("p", {
      "className": "person__name"
    }, this.props.user.name)), React.createElement("div", {
      "className": "person__count"
    }, this.renderEntriesCount())), React.createElement("div", {
      "className": "person__actions"
    }, this.props.children)));
  },
  renderEntriesCount: function() {
    var count;
    count = this.props.user.public_entries_count;
    return React.createElement("span", null, count, " ", i18n.t('entries_count', {
      count: this.props.user.public_entries_count
    }));
  }
});


},{}],336:[function(require,module,exports){
window.PersonsPopup_RequestedRelationship = React.createClass({
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  shouldComponentUpdate: function(nextProps) {
    if (this.props.relationship.state !== nextProps.relationship.state) {
      true;
    }
    return false;
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.relationship.reader
    }, React.createElement(RelationshipRequestButton, {
      "relationship": this.props.relationship,
      "key": this.props.key
    }));
  }
});


},{}],337:[function(require,module,exports){
window.PersonsPopup_Menu = React.createClass({
  displayName: 'PersonsPopup_Menu',
  mixins: [RequesterMixin],
  propTypes: {
    user: React.PropTypes.object.isRequired,
    currentTab: React.PropTypes.string.isRequired,
    onSelect: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentWillMount: function() {
    if (!this.isSummaryLoaded()) {
      return this.loadSummary();
    }
  },
  componentDidMount: function() {
    return RelationshipsStore.addSummaryChangeListener(this.onStoreChange);
  },
  componentWillUnmount: function() {
    return RelationshipsStore.removeSummaryChangeListener(this.onStoreChange);
  },
  render: function() {
    var requestedMenuItem;
    if (this.isProfilePrivate()) {
      requestedMenuItem = React.createElement(PersonsPopup_MenuItem, {
        "isActive": this.props.currentTab === 'requested',
        "totalCount": this.state.requestedTotalCount,
        "title": i18n.t('persons_popup_menu_requested'),
        "onClick": this.props.onSelect.bind(null, 'requested')
      });
    }
    return React.createElement("nav", {
      "className": "tabs-nav tabs-nav--white"
    }, React.createElement("ul", {
      "className": "tabs-nav__list"
    }, React.createElement(PersonsPopup_MenuItem, {
      "isActive": this.props.currentTab === 'followings',
      "totalCount": this.state.followingsTotalCount,
      "title": i18n.t('persons_popup_menu_followings'),
      "onClick": this.props.onSelect.bind(null, 'followings')
    }), React.createElement(PersonsPopup_MenuItem, {
      "isActive": this.props.currentTab === 'followers',
      "totalCount": this.state.followersTotalCount,
      "title": i18n.t('persons_popup_menu_followers'),
      "onClick": this.props.onSelect.bind(null, 'followers')
    }), requestedMenuItem, React.createElement(PersonsPopup_MenuItem, {
      "isActive": this.props.currentTab === 'ignored',
      "totalCount": this.state.ignoredTotalCount,
      "title": i18n.t('persons_popup_menu_ignored'),
      "onClick": this.props.onSelect.bind(null, 'ignored')
    }), React.createElement(PersonsPopup_MenuItem, {
      "isActive": this.props.currentTab === 'vkontakte',
      "title": i18n.t('persons_popup_menu_vkontakte'),
      "onClick": this.props.onSelect.bind(null, 'vkontakte')
    }), React.createElement(PersonsPopup_MenuItem, {
      "isActive": this.props.currentTab === 'facebook',
      "title": i18n.t('persons_popup_menu_facebook'),
      "onClick": this.props.onSelect.bind(null, 'facebook')
    })));
  },
  isProfilePrivate: function() {
    return this.props.user.is_privacy === true;
  },
  isSummaryLoaded: function() {
    return RelationshipsStore.isSummaryLoaded();
  },
  loadSummary: function() {
    return this.createRequest({
      url: ApiRoutes.relationships_summary_url(),
      success: function(summary) {
        return RelationshipsDispatcher.handleServerAction({
          type: 'summaryLoaded',
          summary: summary
        });
      },
      error: function(data) {
        return NoticeService.errorResponse(data);
      }
    });
  },
  getStateFromStore: function() {
    return {
      followersTotalCount: RelationshipsStore.getFollowersTotalCount(),
      followingsTotalCount: RelationshipsStore.getFollowingsTotalCount(),
      guessedTotalCount: RelationshipsStore.getGuessedTotalCount(),
      ignoredTotalCount: RelationshipsStore.getIgnoredTotalCount(),
      requestedTotalCount: RelationshipsStore.getRequestedTotalCount()
    };
  },
  onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{}],338:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.PersonsPopup_MenuItem = React.createClass({
  displayName: 'PersonsPopup_MenuItem',
  propTypes: {
    title: React.PropTypes.string.isRequired,
    isActive: React.PropTypes.bool.isRequired,
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    var menuItemClasses;
    menuItemClasses = classnames('tabs-nav__link', {
      'state--active': this.props.isActive
    });
    return React.createElement("li", {
      "className": "tabs-nav__item"
    }, React.createElement("a", {
      "title": this.props.title,
      "className": menuItemClasses,
      "onClick": this.props.onClick
    }, this.props.title, React.createElement("span", {
      "className": "tabs-nav__count"
    }, " ", this.props.totalCount)));
  }
});


},{"classnames":647}],339:[function(require,module,exports){
var ERROR_STATE, LOADED_STATE, LOADING_STATE;

ERROR_STATE = 'error';

LOADED_STATE = 'loaded';

LOADING_STATE = 'loading';

window.PersonsPopup_PanelMixin = {
  getInitialState: function() {
    return _.extend(this.getStateFromStore(), {
      currentState: LOADING_STATE
    });
  },
  componentWillMount: function() {
    return this.loadPanelData();
  },
  componentDidMount: function() {
    return RelationshipsStore.addChangeListener(this.onStoreChange);
  },
  componentWillUnmount: function() {
    return RelationshipsStore.removeChangeListener(this.onStoreChange);
  },
  render: function() {
    var Item, loadMoreButton, messageText, panelContent, relationships;
    Item = this.itemClass();
    if (this.hasRelationships()) {
      relationships = this.state.relationships.map((function(_this) {
        return function(relationship) {
          return React.createElement(Item, {
            "relationship": relationship,
            "key": relationship.id
          });
        };
      })(this));
      panelContent = React.createElement("ul", {
        "className": "persons"
      }, relationships);
    } else {
      switch (this.state.currentState) {
        case ERROR_STATE:
          messageText = i18n.t('persons_popup_error');
          break;
        case LOADING_STATE:
          messageText = i18n.t('persons_popup_loading');
          break;
        case LOADED_STATE:
          messageText = i18n.t('persons_popup_empty');
          break;
        default:
          console.warn('Unknown currentState', this.state.currentState);
      }
      panelContent = React.createElement("div", {
        "className": "grid-full"
      }, React.createElement("div", {
        "className": "grid-full__middle"
      }, React.createElement("div", {
        "className": "popup__text"
      }, messageText)));
    }
    if (!this.isAllRelationshipsLoaded()) {
      loadMoreButton = React.createElement(LoadMoreButton, {
        "onClick": this.loadMoreData
      });
    }
    return React.createElement("div", {
      "className": "tabs-panel"
    }, React.createElement("div", {
      "className": "scroller scroller--persons",
      "ref": "scroller"
    }, React.createElement("div", {
      "className": "scroller__pane js-scroller-pane"
    }, panelContent, loadMoreButton), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    }))));
  },
  hasRelationships: function() {
    var ref;
    return ((ref = this.state.relationships) != null ? ref.length : void 0) > 0;
  },
  isPanelDataLoaded: function() {
    return this.state.relationships != null;
  },
  isAllRelationshipsLoaded: function() {
    var ref;
    return ((ref = this.state.relationships) != null ? ref.length : void 0) === this.state.totalCount;
  },
  isLoadingState: function() {
    return this.state.currentState === LOADING_STATE;
  },
  activateLoadedState: function() {
    return this.safeUpdateState({
      currentState: LOADED_STATE
    });
  },
  activateLoadingState: function() {
    return this.safeUpdateState({
      currentState: LOADING_STATE
    });
  },
  activateErrorState: function() {
    return this.safeUpdateState({
      currentState: ERROR_STATE
    });
  },
  loadPanelData: function(sincePosition, options) {
    this.safeUpdate((function(_this) {
      return function() {
        return _this.incrementActivities();
      };
    })(this));
    this.activateLoadingState();
    return this.createRequest({
      url: this.relationUrl(),
      data: {
        since_position: sincePosition,
        expose_reverse: 1
      },
      success: (function(_this) {
        return function(data) {
          if (options != null ? options.success : void 0) {
            return options.success(data);
          } else {
            return RelationshipsDispatcher.handleServerAction({
              type: 'relationshipsLoaded',
              relationship: _this.relationshipType,
              items: data.relationships
            });
          }
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.activateErrorState();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          _this.activateLoadedState();
          return _this.safeUpdate(function() {
            return _this.decrementActivities();
          });
        };
      })(this)
    });
  },
  loadMoreData: function() {
    var lastLoadedPosition;
    if (this.isLoadingState()) {
      return;
    }
    lastLoadedPosition = this.state.relationships[this.state.relationships.length - 1].position;
    return this.loadPanelData(lastLoadedPosition, {
      success: (function(_this) {
        return function(data) {
          return RelationshipsDispatcher.handleServerAction({
            type: 'moreRelationshipsLoaded',
            relationship: _this.relationshipType,
            items: data.relationships
          });
        };
      })(this)
    });
  },
  onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
};

React.mixins.add('PersonsPopup_PanelMixin', [PersonsPopup_PanelMixin, window.RequesterMixin, 'ReactActivitiesUser', ComponentManipulationsMixin, ScrollerMixin]);


},{}],340:[function(require,module,exports){
window.PersonsPopup_FollowersPanel = React.createClass({
  mixins: ['PersonsPopup_PanelMixin'],
  relationshipType: 'followers',
  itemClass: function() {
    return PersonsPopup_FollowerRelationship;
  },
  relationUrl: function() {
    return ApiRoutes.relationships_by_url('friend');
  },
  getStateFromStore: function() {
    return {
      relationships: RelationshipsStore.getFollowers(),
      totalCount: RelationshipsStore.getFollowersTotalCount()
    };
  }
});


},{}],341:[function(require,module,exports){
window.PersonsPopup_FollowingsPanel = React.createClass({
  mixins: ['PersonsPopup_PanelMixin'],
  relationshipType: 'followings',
  itemClass: function() {
    return PersonsPopup_FollowingRelationship;
  },
  relationUrl: function() {
    return ApiRoutes.relationships_to_url('friend');
  },
  getStateFromStore: function() {
    return {
      relationships: RelationshipsStore.getFollowings(),
      totalCount: RelationshipsStore.getFollowingsTotalCount()
    };
  }
});


},{}],342:[function(require,module,exports){
window.PersonsPopup_GuessedPanel = React.createClass({
  mixins: ['PersonsPopup_PanelMixin'],
  relationshipType: 'guessed',
  itemClass: function() {
    return PersonsPopup_GuessRelationship;
  },
  relationUrl: function() {
    return ApiRoutes.relationships_to_url('guessed');
  },
  getStateFromStore: function() {
    return {
      relationships: RelationshipsStore.getGuessed(),
      totalCount: RelationshipsStore.getGuessedTotalCount()
    };
  }
});


},{}],343:[function(require,module,exports){
window.PersonsPopup_IgnoredPanel = React.createClass({
  mixins: ['PersonsPopup_PanelMixin'],
  relationshipType: 'ignored',
  itemClass: function() {
    return PersonsPopup_IgnoredRelationship;
  },
  relationUrl: function() {
    return ApiRoutes.relationships_to_url('ignored');
  },
  getStateFromStore: function() {
    return {
      relationships: RelationshipsStore.getIgnored(),
      totalCount: RelationshipsStore.getIgnoredTotalCount()
    };
  }
});


},{}],344:[function(require,module,exports){
window.PersonsPopup_RequestedPanel = React.createClass({
  mixins: ['PersonsPopup_PanelMixin'],
  relationshipType: 'requested',
  itemClass: function() {
    return PersonsPopup_RequestedRelationship;
  },
  relationUrl: function() {
    return ApiRoutes.relationships_by_url('requested');
  },
  getStateFromStore: function() {
    return {
      relationships: RelationshipsStore.getRequested(),
      totalCount: RelationshipsStore.getRequestedTotalCount()
    };
  }
});


},{}],345:[function(require,module,exports){
var FacebookSignIn, FacebookSuggestions, SocialNetworkPanelMixin;

SocialNetworkPanelMixin = require('./mixins/socialNetwork');

FacebookSuggestions = require('./facebook/suggestions');

FacebookSignIn = require('./facebook/signIn');

window.PersonsPopup_FacebookPanel = React.createClass({
  displayName: 'PersonsPopup_FacebookPanel',
  mixins: [SocialNetworkPanelMixin, window.RequesterMixin],
  renderContent: function() {
    if (this.isAuthorized()) {
      return React.createElement(FacebookSuggestions, {
        "suggestions": this.state.suggestions,
        "suggestionsCount": this.state.suggestionsCount
      });
    } else {
      return React.createElement(FacebookSignIn, null);
    }
  },
  isAuthorized: function() {
    return CurrentUserStore.hasFacebookAuth();
  },
  loadPanelData: function() {
    this.activateLoadingState();
    return this.createRequest({
      url: ApiRoutes.suggestions_facebook(),
      success: (function(_this) {
        return function(suggestions) {
          return RelationshipsDispatcher.handleServerAction({
            type: 'suggestionsLoaded',
            source: 'facebook',
            suggestions: suggestions
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.activateErrorState();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.activateLoadedState();
        };
      })(this)
    });
  },
  getStateFromStore: function() {
    return {
      suggestions: RelationshipsStore.getFacebookSuggestions(),
      suggestionsCount: RelationshipsStore.getFacebookSuggestionsTotalCount()
    };
  }
});


},{"./facebook/signIn":346,"./facebook/suggestions":347,"./mixins/socialNetwork":352}],346:[function(require,module,exports){
var VkontakteSignIn;

VkontakteSignIn = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "popup__text popup__text--soc"
    }, React.createElement("span", null, i18n.t('facebook_suggestions_not_signedin'), " "), React.createElement("button", {
      "className": "fb-auth-button",
      "onClick": this.handleClick
    }, i18n.t('facebook_suggestions_signin_button')))));
  },
  handleClick: function() {
    return window.location = ApiRoutes.omniauth_url('facebook');
  }
});

module.exports = VkontakteSignIn;


},{}],347:[function(require,module,exports){
var FacebookSuggestions, FacebookSuggestionsEmpty, FacebookSuggestionsList, PropTypes, SuggestionsMixin;

SuggestionsMixin = require('../mixins/suggestions');

FacebookSuggestionsList = require('./suggestions/list');

FacebookSuggestionsEmpty = require('./suggestions/empty');

PropTypes = React.PropTypes;

FacebookSuggestions = React.createClass({
  displayName: 'FacebookSuggestions',
  mixins: [SuggestionsMixin],
  listComponent: function() {
    return FacebookSuggestionsList;
  },
  emptyComponent: function() {
    return FacebookSuggestionsEmpty;
  }
});

module.exports = FacebookSuggestions;


},{"../mixins/suggestions":354,"./suggestions/empty":349,"./suggestions/list":350}],348:[function(require,module,exports){
var FacebookSubscribeAllButton;

FacebookSubscribeAllButton = React.createClass({
  mixins: [window.RequesterMixin],
  render: function() {
    return React.createElement("button", {
      "className": "manage-persons-button",
      "onClick": this.subscribeAll
    }, i18n.t('facebook_subscribe_all_button'));
  },
  subscribeAll: function() {
    return this.createRequest({
      url: ApiRoutes.suggestions_facebook(),
      method: 'POST',
      success: function() {
        RelationshipsDispatcher.handleServerAction({
          type: 'suggestionsSubscribed',
          source: 'facebook'
        });
        return NoticeService.notifySuccess(i18n.t('facebook_subscribe_all_success'));
      },
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this)
    });
  }
});

module.exports = FacebookSubscribeAllButton;


},{}],349:[function(require,module,exports){
var FacebookSuggestionsEmpty, PropTypes;

PropTypes = React.PropTypes;

FacebookSuggestionsEmpty = React.createClass({
  displayName: 'FacebookSuggestionsEmpty',
  render: function() {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "popup__text"
    }, i18n.t('facebook_suggestions_empty'))));
  }
});

module.exports = FacebookSuggestionsEmpty;


},{}],350:[function(require,module,exports){
var FacebookSubscribeAllButton, FacebookSuggestionsItem, FacebookSuggestionsList, SuggestionListMixin;

SuggestionListMixin = require('../../mixins/suggestionList');

FacebookSuggestionsItem = require('./listItem');

FacebookSubscribeAllButton = require('./buttons/subscribeAll');

FacebookSuggestionsList = React.createClass({
  displayName: 'FacebookSuggestionsList',
  mixins: [SuggestionListMixin],
  listItem: function() {
    return FacebookSuggestionsItem;
  },
  subscribeAllButton: function() {
    return FacebookSubscribeAllButton;
  }
});

module.exports = FacebookSuggestionsList;


},{"../../mixins/suggestionList":353,"./buttons/subscribeAll":348,"./listItem":351}],351:[function(require,module,exports){
var FacebookSuggestionsItem, PropTypes;

PropTypes = React.PropTypes;

FacebookSuggestionsItem = React.createClass({
  propTypes: {
    suggestion: PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.suggestion.user
    }, React.createElement(FollowButton, {
      "relationship": this.props.suggestion
    }));
  }
});

module.exports = FacebookSuggestionsItem;


},{}],352:[function(require,module,exports){
var ConnectStoreMixin, ERROR_STATE, LOADED_STATE, LOADING_STATE, SocialNetworkPanelMixin;

ConnectStoreMixin = require('../../../../../../../shared/react/mixins/connectStore');

ERROR_STATE = 'error';

LOADED_STATE = 'loaded';

LOADING_STATE = 'loading';

SocialNetworkPanelMixin = {
  mixins: [ConnectStoreMixin(RelationshipsStore), ComponentManipulationsMixin],
  getInitialState: function() {
    return {
      currentState: LOADED_STATE
    };
  },
  componentWillMount: function() {
    if (this.isAuthorized()) {
      return this.loadPanelData();
    }
  },
  render: function() {
    var content;
    content = (function() {
      switch (this.state.currentState) {
        case ERROR_STATE:
          return this.renderMessage(i18n.t('persons_popup_error'));
        case LOADING_STATE:
          return this.renderMessage(i18n.t('persons_popup_loading'));
        case LOADED_STATE:
          return this.renderContent();
        default:
          return typeof console.warn === "function" ? console.warn("Unknown state of " + this._currentElement.type.displayName + " component", this.state.currentState) : void 0;
      }
    }).call(this);
    return React.createElement("div", {
      "className": "tabs-panel"
    }, content);
  },
  renderMessage: function(message) {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "popup__text"
    }, message)));
  },
  activateLoadingState: function() {
    return this.safeUpdateState({
      currentState: LOADING_STATE
    });
  },
  activateLoadedState: function() {
    return this.safeUpdateState({
      currentState: LOADED_STATE
    });
  },
  activateErrorState: function() {
    return this.safeUpdateState({
      currentState: ERROR_STATE
    });
  }
};

module.exports = SocialNetworkPanelMixin;


},{"../../../../../../../shared/react/mixins/connectStore":550}],353:[function(require,module,exports){
var PropTypes, SuggestionListMixin;

PropTypes = React.PropTypes;

SuggestionListMixin = {
  mixins: [ReactGrammarMixin, ScrollerMixin],
  propTypes: {
    suggestions: PropTypes.array.isRequired,
    suggestionsCount: PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "scroller scroller--persons",
      "ref": "scroller"
    }, React.createElement("div", {
      "className": "scroller__pane js-scroller-pane"
    }, React.createElement("div", {
      "className": "persons-headline"
    }, this.renderSubscribeAllButton(), React.createElement("div", {
      "className": "persons-headline__left"
    }, this.getSuggestionsCountMessage())), React.createElement("ul", {
      "className": "persons"
    }, this.renderSuggestionsList())), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })));
  },
  renderSuggestionsList: function() {
    var ListItem;
    ListItem = this.listItem();
    return this.props.suggestions.map((function(_this) {
      return function(suggestion) {
        return React.createElement(ListItem, {
          "suggestion": suggestion,
          "key": suggestion.user.id
        });
      };
    })(this));
  },
  renderSubscribeAllButton: function() {
    var SubscribeAllButton;
    SubscribeAllButton = this.subscribeAllButton();
    if (this.props.suggestions.length > 1) {
      return React.createElement("div", {
        "className": "persons-headline__right"
      }, React.createElement(SubscribeAllButton, null));
    }
  },
  getSuggestionsCountMessage: function() {
    return i18n.t('suggestions_found', {
      count: this.props.suggestionsCount
    });
  }
};

module.exports = SuggestionListMixin;


},{}],354:[function(require,module,exports){
var PropTypes, SuggestionsMixin;

PropTypes = React.PropTypes;

SuggestionsMixin = {
  propTypes: {
    suggestions: PropTypes.array,
    suggestionsCount: PropTypes.number
  },
  render: function() {
    var EmptyComponent, ListComponent;
    ListComponent = this.listComponent();
    EmptyComponent = this.emptyComponent();
    if (this.hasSuggestions()) {
      return React.createElement(ListComponent, {
        "suggestions": this.props.suggestions,
        "suggestionsCount": this.props.suggestionsCount
      });
    } else {
      return React.createElement(EmptyComponent, null);
    }
  },
  hasSuggestions: function() {
    return this.props.suggestionsCount > 0;
  }
};

module.exports = SuggestionsMixin;


},{}],355:[function(require,module,exports){
var SocialNetworkPanelMixin, VkontakteSignIn, VkontakteSuggestions;

SocialNetworkPanelMixin = require('./mixins/socialNetwork');

VkontakteSuggestions = require('./vkontakte/suggestions');

VkontakteSignIn = require('./vkontakte/signIn');

window.PersonsPopup_VkontaktePanel = React.createClass({
  displayName: 'PersonsPopup_VkontaktePanel',
  mixins: [SocialNetworkPanelMixin, window.RequesterMixin],
  renderContent: function() {
    if (this.isAuthorized()) {
      return React.createElement(VkontakteSuggestions, {
        "suggestions": this.state.suggestions,
        "suggestionsCount": this.state.suggestionsCount
      });
    } else {
      return React.createElement(VkontakteSignIn, null);
    }
  },
  isAuthorized: function() {
    return CurrentUserStore.hasVkontakteAuth();
  },
  loadPanelData: function() {
    this.activateLoadingState();
    return this.createRequest({
      url: ApiRoutes.suggestions_vkontakte(),
      success: (function(_this) {
        return function(suggestions) {
          return RelationshipsDispatcher.handleServerAction({
            type: 'suggestionsLoaded',
            source: 'vkontakte',
            suggestions: suggestions
          });
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.activateErrorState();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.activateLoadedState();
        };
      })(this)
    });
  },
  getStateFromStore: function() {
    return {
      suggestions: RelationshipsStore.getVkontakteSuggestions(),
      suggestionsCount: RelationshipsStore.getVkontakteSuggestionsTotalCount()
    };
  }
});


},{"./mixins/socialNetwork":352,"./vkontakte/signIn":356,"./vkontakte/suggestions":357}],356:[function(require,module,exports){
var VkontakteSignIn;

VkontakteSignIn = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "popup__text popup__text--soc"
    }, React.createElement("span", null, i18n.t('vkontakte_suggestions_not_signedin'), " "), React.createElement("button", {
      "className": "vk-auth-button",
      "onClick": this.handleClick
    }, i18n.t('vkontakte_suggestions_signin_button')))));
  },
  handleClick: function() {
    return window.location = ApiRoutes.omniauth_url('vkontakte');
  }
});

module.exports = VkontakteSignIn;


},{}],357:[function(require,module,exports){
var PropTypes, SuggestionsMixin, VkontakteSuggestions, VkontakteSuggestionsEmpty, VkontakteSuggestionsList;

SuggestionsMixin = require('../mixins/suggestions');

VkontakteSuggestionsList = require('./suggestions/list');

VkontakteSuggestionsEmpty = require('./suggestions/empty');

PropTypes = React.PropTypes;

VkontakteSuggestions = React.createClass({
  displayName: 'VkontakteSuggestions',
  mixins: [SuggestionsMixin],
  listComponent: function() {
    return VkontakteSuggestionsList;
  },
  emptyComponent: function() {
    return VkontakteSuggestionsEmpty;
  }
});

module.exports = VkontakteSuggestions;


},{"../mixins/suggestions":354,"./suggestions/empty":359,"./suggestions/list":360}],358:[function(require,module,exports){
var VkontakteSubscribeAllButton;

VkontakteSubscribeAllButton = React.createClass({
  mixins: [window.RequesterMixin],
  render: function() {
    return React.createElement("button", {
      "className": "manage-persons-button",
      "onClick": this.subscribeAll
    }, i18n.t('vkontakte_subscribe_all_button'));
  },
  subscribeAll: function() {
    return this.createRequest({
      url: ApiRoutes.suggestions_vkontakte(),
      method: 'POST',
      success: function() {
        RelationshipsDispatcher.handleServerAction({
          type: 'suggestionsSubscribed',
          source: 'vkontakte'
        });
        return NoticeService.notifySuccess(i18n.t('vkontakte_subscribe_all_success'));
      },
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this)
    });
  }
});

module.exports = VkontakteSubscribeAllButton;


},{}],359:[function(require,module,exports){
var PropTypes, VkontakteSuggestionsEmpty;

PropTypes = React.PropTypes;

VkontakteSuggestionsEmpty = React.createClass({
  displayName: 'VkontakteSuggestionsEmpty',
  render: function() {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "popup__text"
    }, i18n.t('vkontakte_suggestions_empty'))));
  }
});

module.exports = VkontakteSuggestionsEmpty;


},{}],360:[function(require,module,exports){
var SuggestionListMixin, VkontakteSubscribeAllButton, VkontakteSuggestionsItem, VkontakteSuggestionsList;

SuggestionListMixin = require('../../mixins/suggestionList');

VkontakteSuggestionsItem = require('./listItem');

VkontakteSubscribeAllButton = require('./buttons/subscribeAll');

VkontakteSuggestionsList = React.createClass({
  displayName: 'VkontakteSuggestionsList',
  mixins: [SuggestionListMixin],
  listItem: function() {
    return VkontakteSuggestionsItem;
  },
  subscribeAllButton: function() {
    return VkontakteSubscribeAllButton;
  }
});

module.exports = VkontakteSuggestionsList;


},{"../../mixins/suggestionList":353,"./buttons/subscribeAll":358,"./listItem":361}],361:[function(require,module,exports){
var PropTypes, VkontakteSuggestionsItem;

PropTypes = React.PropTypes;

VkontakteSuggestionsItem = React.createClass({
  propTypes: {
    suggestion: PropTypes.object.isRequired
  },
  render: function() {
    return React.createElement(PersonsPopup_PersonItem, {
      "user": this.props.suggestion.user
    }, React.createElement(FollowButton, {
      "relationship": this.props.suggestion
    }));
  }
});

module.exports = VkontakteSuggestionsItem;


},{}],362:[function(require,module,exports){
var DEFAULT_PANEL;

DEFAULT_PANEL = 'followings';

window.PersonsPopup = React.createClass({
  displayName: 'PersonsPopup',
  mixins: ['ReactActivitiesMixin', RequesterMixin],
  propTypes: {
    panelName: React.PropTypes.string
  },
  getDefaultProps: function() {
    return {
      panelName: DEFAULT_PANEL
    };
  },
  getInitialState: function() {
    return _.extend(this.getStateFromStores(), {
      currentTab: this.props.panelName
    });
  },
  componentDidMount: function() {
    CurrentUserStore.addChangeListener(this.onStoresChange);
    return RelationshipsStore.addChangeListener(this.onStoresChange);
  },
  componentWillUnmount: function() {
    CurrentUserStore.removeChangeListener(this.onStoresChange);
    return RelationshipsStore.removeChangeListener(this.onStoresChange);
  },
  render: function() {
    return React.createElement(Popup, {
      "hasActivities": this.hasActivities(),
      "title": i18n.t('persons_popup_header'),
      "isDraggable": true,
      "colorScheme": "dark",
      "className": "popup--persons"
    }, React.createElement(PersonsPopup_Menu, {
      "user": this.state.user,
      "currentTab": this.state.currentTab,
      "onSelect": this.selectTab
    }), this.renderCurrentPanel());
  },
  renderCurrentPanel: function() {
    var CurrentPanel;
    CurrentPanel = (function() {
      switch (this.state.currentTab) {
        case 'requested':
          return PersonsPopup_RequestedPanel;
        case 'followings':
          return PersonsPopup_FollowingsPanel;
        case 'followers':
          return PersonsPopup_FollowersPanel;
        case 'ignored':
          return PersonsPopup_IgnoredPanel;
        case 'vkontakte':
          return PersonsPopup_VkontaktePanel;
        case 'facebook':
          return PersonsPopup_FacebookPanel;
        default:
          return typeof console.debug === "function" ? console.debug('Unknown type of current tab', this.state.currentTab) : void 0;
      }
    }).call(this);
    return React.createElement(CurrentPanel, {
      "activitiesHandler": this.activitiesHandler
    });
  },
  isProfilePrivate: function() {
    return this.state.user.is_privacy === true;
  },
  selectTab: function(type) {
    return this.setState({
      currentTab: type
    });
  },
  getStateFromStores: function() {
    return {
      user: CurrentUserStore.getUser(),
      relationships: RelationshipsStore.getRelationships()
    };
  },
  onStoresChange: function() {
    return this.setState(this.getStateFromStores());
  }
});


},{}],363:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.PopupHeader = React.createClass({
  propTypes: {
    title: React.PropTypes.string.isRequired,
    onClickClose: React.PropTypes.func.isRequired,
    hasActivities: React.PropTypes.bool,
    isDraggable: React.PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      hasActivities: false,
      isDraggable: false
    };
  },
  render: function() {
    var headBoxClasses;
    headBoxClasses = classnames('popup__headbox', {
      'cursor--move': this.props.isDraggable
    });
    return React.createElement("div", {
      "className": "popup__header"
    }, React.createElement("div", {
      "className": headBoxClasses
    }, React.createElement("h3", {
      "className": "popup__title"
    }, this.props.title)), React.createElement(PopupSpinner, {
      "hasActivities": this.props.hasActivities
    }), React.createElement("div", {
      "className": "popup__close",
      "onClick": this.props.onClickClose
    }, React.createElement("div", {
      "className": "icon icon--cross"
    })));
  }
});


},{"classnames":647}],364:[function(require,module,exports){
window.PopupLayout = React.createClass({
  mixins: [ReactUnmountMixin],
  propTypes: {
    onClose: React.PropTypes.func
  },
  handleClick: function(e) {
    if ($(e.target).hasClass('popup-container__cell')) {
      e.preventDefault();
      return this.close();
    }
  },
  close: function() {
    if (this.props.onClose != null) {
      return this.props.onClose();
    } else {
      return this.unmount();
    }
  },
  render: function() {
    return React.createElement("div", {
      "className": 'popup-container'
    }, React.createElement("div", {
      "className": 'popup-container__main'
    }, React.createElement("div", {
      "className": 'popup-container__cell',
      "onClick": this.handleClick
    }, this.props.children)));
  }
});


},{}],365:[function(require,module,exports){
var NO_TRANSITION_CLASS, classnames;

classnames = require('classnames');

NO_TRANSITION_CLASS = "no--transition";

window.Popup = React.createClass({
  mixins: [ReactUnmountMixin, ReactPositionsMixin],
  propTypes: {
    title: React.PropTypes.string.isRequired,
    type: React.PropTypes.string,
    hasActivities: React.PropTypes.bool,
    onClose: React.PropTypes.func,
    colorScheme: React.PropTypes.oneOf(['dark', 'light']),
    isDraggable: React.PropTypes.bool,
    position: React.PropTypes.object,
    className: React.PropTypes.string
  },
  getDefaultProps: function() {
    return {
      hasActivities: false,
      isDark: false,
      isLight: false,
      isDraggable: false
    };
  },
  componentDidMount: function() {
    if (this.props.isDraggable) {
      this.makeDraggable();
    }
    return Mousetrap.bind('esc', this.close);
  },
  componentWillUnmount: function() {
    return Mousetrap.unbind('esc', this.close);
  },
  render: function() {
    var popupClasses;
    popupClasses = classnames('popup', 'popup--center', this.props.className, {
      'popup--dark': this.props.colorScheme === 'dark',
      'popup--light': this.props.colorScheme === 'light'
    });
    return React.createElement("div", {
      "className": popupClasses,
      "style": this.initialPositionStyle(),
      "onMouseDown": this.handleClick,
      "onTouchStart": this.handleClick
    }, React.createElement(PopupHeader, {
      "title": this.props.title,
      "ref": "header",
      "isDraggable": this.props.isDraggable,
      "hasActivities": this.props.hasActivities,
      "onClickClose": this.close
    }), React.createElement("div", {
      "className": "popup__body"
    }, this.props.children));
  },
  makeDraggable: function() {
    var $popupNode, headboxNode;
    $popupNode = $(this.getDOMNode());
    headboxNode = this.refs.header.getDOMNode();
    return $popupNode.draggable({
      handle: headboxNode,
      drag: function() {
        return $popupNode.addClass(NO_TRANSITION_CLASS);
      },
      stop: (function(_this) {
        return function(event, ui) {
          _this.checkPosition();
          _this.savePosition(ui.position);
          return $popupNode.removeClass(NO_TRANSITION_CLASS);
        };
      })(this)
    });
  },
  close: function() {
    if (this.props.onClose != null) {
      return this.props.onClose();
    } else {
      return this.unmount();
    }
  },
  handleClick: function(e) {
    var currentNode, popups;
    popups = [].slice.call(document.querySelectorAll('.popup'));
    currentNode = this.getDOMNode();
    return Object.keys(popups).forEach(function(key) {
      var node;
      node = popups[key];
      if (node === currentNode) {
        currentNode.classList.add('front-layer');
        return currentNode.classList.remove('back-layer');
      } else {
        node.classList.add('back-layer');
        return node.classList.remove('front-layer');
      }
    });
  }
});


},{"classnames":647}],366:[function(require,module,exports){
window.PopupSpinner = React.createClass({
  propTypes: {
    hasActivities: React.PropTypes.bool.isRequired
  },
  render: function() {
    if (this.props.hasActivities) {
      return React.createElement("div", {
        "className": "popup__loader"
      }, React.createElement("span", {
        "className": "spinner spinner--8x8"
      }, React.createElement("span", {
        "className": "spinner__icon"
      })));
    } else {
      return null;
    }
  }
});


},{}],367:[function(require,module,exports){
var LinkedStateMixin;

LinkedStateMixin = require('react/lib/LinkedStateMixin');

window.PopupBox = React.createClass({
  mixins: [ReactUnmountMixin, LinkedStateMixin, 'ReactActivitiesMixin'],
  propTypes: {
    title: React.PropTypes.string.isRequired
  },
  componentWillMount: function() {
    return Mousetrap.bind('esc', this.unmount);
  },
  componentWillUnmount: function() {
    return Mousetrap.unbind('esc', this.unmount);
  },
  render: function() {
    React.Children.map(this.props.children, (function(_this) {
      return function(context) {
        return context.props.activitiesHandler = _this.activitiesHandler;
      };
    })(this));
    return React.createElement("div", {
      "className": 'popup-container'
    }, React.createElement("div", {
      "className": 'popup-container__main'
    }, React.createElement("div", {
      "className": 'popup-container__cell',
      "onClick": this.handleClick
    }, React.createElement("div", {
      "className": "popup popup--settings popup--dark"
    }, React.createElement(PopupHeader, {
      "title": this.props.title,
      "hasActivities": this.hasActivities(),
      "onClickClose": this.close
    }), React.createElement("div", {
      "className": "popup__body"
    }, this.props.children)))));
  },
  handleClick: function(e) {
    if ($(e.target).hasClass('popup-container__cell')) {
      e.preventDefault();
      return this.close();
    }
  },
  close: function() {
    if (this.props.onClose != null) {
      return this.props.onClose();
    } else {
      return this.unmount();
    }
  }
});


},{"react/lib/LinkedStateMixin":705}],368:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedReactComponentsCommonAvatar = require('../../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var EntryRepostTargetItem = (function () {
  function EntryRepostTargetItem() {
    _classCallCheck(this, EntryRepostTargetItem);
  }

  _createClass(EntryRepostTargetItem, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'article',
        { className: 'user__item' },
        _react2['default'].createElement(
          'a',
          {
            href: this.props.target.tlog_url,
            title: this.props.target.name,
            className: 'user__link',
            onClick: this.handleClick.bind(this)
          },
          _react2['default'].createElement(
            'span',
            { className: 'user__avatar' },
            _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], {
              userpic: this.props.target.flowpic || this.props.target.userpic,
              size: 40
            })
          ),
          _react2['default'].createElement(
            'span',
            { className: 'user__desc' },
            _react2['default'].createElement(
              'span',
              { className: 'user__name' },
              this.props.target.name
            )
          )
        )
      );
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      e.preventDefault();
      this.props.onSelect();
    }
  }], [{
    key: 'propTypes',
    value: {
      target: _react.PropTypes.object.isRequired,
      onSelect: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryRepostTargetItem;
})();

exports['default'] = EntryRepostTargetItem;
module.exports = exports['default'];

},{"../../../../../shared/react/components/common/Avatar":532,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],369:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var EntryRepostTargetSearch = (function () {
  function EntryRepostTargetSearch() {
    _classCallCheck(this, EntryRepostTargetSearch);
  }

  _createClass(EntryRepostTargetSearch, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement("input", {
        type: "text",
        defaultValue: this.props.value,
        placeholder: "Поиск..",
        className: "user__search",
        onChange: this.handleChange.bind(this)
      });
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      this.props.onChange(e.target.value);
    }
  }], [{
    key: "propTypes",
    value: {
      value: _react.PropTypes.string,
      onChange: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return EntryRepostTargetSearch;
})();

exports["default"] = EntryRepostTargetSearch;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],370:[function(require,module,exports){
/*global Routes, i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fuzzy = require('fuzzy');

var _fuzzy2 = _interopRequireDefault(_fuzzy);

var _actionsEntry = require('../../../actions/Entry');

var _actionsEntry2 = _interopRequireDefault(_actionsEntry);

var _actionsFlow = require('../../../actions/Flow');

var _actionsFlow2 = _interopRequireDefault(_actionsFlow);

var _commonScrollerScroller = require('../../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var _RelativePopup = require('../RelativePopup');

var _RelativePopup2 = _interopRequireDefault(_RelativePopup);

var _EntryRepostTargetItem = require('./EntryRepostTargetItem');

var _EntryRepostTargetItem2 = _interopRequireDefault(_EntryRepostTargetItem);

var _EntryRepostTargetSearch = require('./EntryRepostTargetSearch');

var _EntryRepostTargetSearch2 = _interopRequireDefault(_EntryRepostTargetSearch);

var EntryRepostPopup = (function (_Component) {
  _inherits(EntryRepostPopup, _Component);

  function EntryRepostPopup() {
    _classCallCheck(this, EntryRepostPopup);

    _get(Object.getPrototypeOf(EntryRepostPopup.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      targetList: [CurrentUserStore.getUser()],
      visibleList: [CurrentUserStore.getUser()],
      nextPage: 1,
      pattern: '',
      isLoading: true,
      isLoadingMore: false,
      isError: false
    };
  }

  _createClass(EntryRepostPopup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.loadTargets.call(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        _RelativePopup2['default'],
        _extends({}, this.props, {
          title: i18n.t('entry_repost_header'),
          className: 'popup--dark popup--repost',
          hasActivities: this.state.isLoading || this.state.isLoadingMore
        }),
        this.renderSearch.call(this),
        _react2['default'].createElement(
          _commonScrollerScroller2['default'],
          {
            className: 'scroller--users',
            onScroll: this.handleScroll.bind(this)
          },
          this.state.visibleList.length && !this.state.isLoading ? this.renderTargetList.call(this) : this.renderListStateMessage.call(this)
        )
      );
    }
  }, {
    key: 'renderMessage',
    value: function renderMessage(message) {
      return _react2['default'].createElement(
        'div',
        { className: 'grid-full' },
        _react2['default'].createElement(
          'div',
          { className: 'grid-full__middle' },
          _react2['default'].createElement('div', { className: 'popup__text',
            dangerouslySetInnerHTML: { __html: message }
          })
        )
      );
    }
  }, {
    key: 'renderAddFlowMessage',
    value: function renderAddFlowMessage() {
      return this.state.targetList.length <= 1 && this.renderMessage(i18n.t('entry.repost.no_flows', { flowsLink: Routes.flows }));
    }
  }, {
    key: 'renderSearch',
    value: function renderSearch() {
      if (this.state.targetList.length && !this.state.isLoading) {
        return _react2['default'].createElement(_EntryRepostTargetSearch2['default'], {
          targetList: this.state.targetList,
          onChange: this.handleSearchChange.bind(this)
        });
      }
    }
  }, {
    key: 'renderTargetList',
    value: function renderTargetList() {
      var _this = this;

      var items = this.state.visibleList.map(function (target) {
        return _react2['default'].createElement(_EntryRepostTargetItem2['default'], {
          key: target.id,
          target: target,
          onSelect: _this.handleTargetSelect.bind(_this, target) });
      });

      return [_react2['default'].createElement(
        'section',
        { className: 'users' },
        items
      ), this.renderAddFlowMessage()];
    }
  }, {
    key: 'renderListStateMessage',
    value: function renderListStateMessage() {
      var message = '';

      if (this.state.isError) {
        message = i18n.t('entry_repost_error');
      } else if (this.state.isLoading) {
        message = i18n.t('entry_repost_loading');
      } else if (this.state.visibleList.length === 0) {
        message = i18n.t('entry_repost_empty');
      }

      return this.renderMessage(message);
    }
  }, {
    key: 'loadTargets',
    value: function loadTargets() {
      var _setState,
          _this2 = this;

      var loadingState = this.state.nextPage > 1 ? 'isLoadingMore' : 'isLoading';
      var data = { page: this.state.nextPage };

      this.setState((_setState = {}, _defineProperty(_setState, loadingState, true), _defineProperty(_setState, 'isError', false), _setState));
      _actionsFlow2['default'].loadAvailable(data).then(function (flowsInfo) {
        var list = _this2.state.targetList.concat(flowsInfo.items.map(function (item) {
          return item.flow;
        }));

        _this2.setState({
          targetList: list,
          visibleList: _this2.getVisibleList(list, _this2.state.pattern),
          hasMore: flowsInfo.has_more,
          nextPage: flowsInfo.next_page
        });
      }).fail(function () {
        return _this2.setState({ hasMore: false, isError: true });
      }).always(function () {
        return _this2.setState(_defineProperty({}, loadingState, false));
      });
    }
  }, {
    key: 'getVisibleList',
    value: function getVisibleList(list, pattern) {
      var options = {
        extract: function extract(target) {
          return target.name;
        }
      };

      return _fuzzy2['default'].filter(pattern, list, options).map(function (res) {
        return list[res.index];
      });
    }
  }, {
    key: 'handleSearchChange',
    value: function handleSearchChange(pattern) {
      this.setState({
        pattern: pattern,
        visibleList: this.getVisibleList(this.state.targetList, pattern)
      });
    }
  }, {
    key: 'handleTargetSelect',
    value: function handleTargetSelect(target) {
      _actionsEntry2['default'].repost(this.props.entryID, target.id).then(this.props.onClose);
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(e) {
      if (!this.state.hasMore || this.state.isLoading || this.state.isLoadingMore) {
        return;
      }

      var el = e.target;
      if (el.scrollTop + el.offsetHeight > el.scrollHeight * .9) {
        this.loadTargets();
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      entryID: _react.PropTypes.number.isRequired
    },
    enumerable: true
  }]);

  return EntryRepostPopup;
})(_react.Component);

exports['default'] = EntryRepostPopup;
module.exports = exports['default'];

},{"../../../actions/Entry":7,"../../../actions/Flow":9,"../../common/scroller/scroller":276,"../RelativePopup":371,"./EntryRepostTargetItem":368,"./EntryRepostTargetSearch":369,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"fuzzy":651,"react":"react"}],371:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _tether = require('tether');

var _tether2 = _interopRequireDefault(_tether);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _RelativePopupHeader = require('./RelativePopupHeader');

var _RelativePopupHeader2 = _interopRequireDefault(_RelativePopupHeader);

function isNodeInRoot(node, root) {
  while (node) {
    if (node === root) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}

var RelativePopup = (function () {
  _createClass(RelativePopup, null, [{
    key: 'propTypes',
    value: {
      title: _react.PropTypes.string.isRequired,
      targetRef: _react.PropTypes.any,
      className: _react.PropTypes.string,
      offset: _react.PropTypes.string,
      hasActivities: _react.PropTypes.bool,
      closeOnOutsideClick: _react.PropTypes.bool,
      onClose: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      closeOnOutsideClick: true
    },
    enumerable: true
  }]);

  function RelativePopup() {
    _classCallCheck(this, RelativePopup);

    this.handleOutsideMouseClick = this.handleOutsideMouseClick.bind(this);
  }

  _createClass(RelativePopup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.closeOnOutsideClick) {
        document.addEventListener('mousedown', this.handleOutsideMouseClick);
        document.addEventListener('touchstart', this.handleOutsideMouseClick);
      }
      this.justifyPopup((0, _react.findDOMNode)(this), (0, _react.findDOMNode)(this.props.targetRef));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.closeOnOutsideClick) {
        document.removeEventListener('mousedown', this.handleOutsideMouseClick);
        document.removeEventListener('touchstart', this.handleOutsideMouseClick);
      }
      this.tether.destroy();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: (0, _classnames2['default'])('popup', this.props.className) },
        _react2['default'].createElement('div', { className: 'popup__arrow popup__arrow--down' }),
        _react2['default'].createElement(_RelativePopupHeader2['default'], this.props),
        _react2['default'].createElement(
          'div',
          { className: 'popup__body' },
          this.props.children
        )
      );
    }
  }, {
    key: 'justifyPopup',
    value: function justifyPopup(element, target) {
      // TODO: make some options via props
      this.tether = new _tether2['default']({
        element: element,
        target: target,
        attachment: 'bottom center',
        targetAttachment: 'top center',
        offset: '10px 0'
      });
    }
  }, {
    key: 'handleOutsideMouseClick',
    value: function handleOutsideMouseClick(e) {
      if (isNodeInRoot(e.target, (0, _react.findDOMNode)(this))) {
        return;
      }
      if (isNodeInRoot(e.target, (0, _react.findDOMNode)(this.props.targetRef))) {
        return;
      }
      e.stopPropagation();
      this.props.onClose();
    }
  }]);

  return RelativePopup;
})();

var RelativePopupContainer = (function () {
  function RelativePopupContainer() {
    _classCallCheck(this, RelativePopupContainer);
  }

  _createClass(RelativePopupContainer, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        _reactPortal2['default'],
        this.props,
        _react2['default'].createElement(RelativePopup, this.props)
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      isOpened: _react.PropTypes.bool.isRequired,
      onClose: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return RelativePopupContainer;
})();

exports['default'] = RelativePopupContainer;
module.exports = exports['default'];

},{"./RelativePopupHeader":372,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react","react-portal":680,"tether":845}],372:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var RelativePopupHeader = (function () {
  function RelativePopupHeader() {
    _classCallCheck(this, RelativePopupHeader);
  }

  _createClass(RelativePopupHeader, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "div",
        { className: "popup__header" },
        _react2["default"].createElement(
          "div",
          { className: "popup__headbox" },
          _react2["default"].createElement(
            "h3",
            { className: "popup__title" },
            this.props.title
          )
        ),
        this.renderSpinner(this.props.hasActivities),
        _react2["default"].createElement(
          "div",
          { className: "popup__close", onClick: this.props.onClose },
          _react2["default"].createElement("div", { className: "icon icon--cross" })
        )
      );
    }
  }, {
    key: "renderSpinner",
    value: function renderSpinner(hasActivities) {
      if (hasActivities) {
        return _react2["default"].createElement(
          "div",
          { className: "popup__loader" },
          _react2["default"].createElement(Spinner, { size: 8 })
        );
      }
    }
  }], [{
    key: "propTypes",
    value: {
      title: _react.PropTypes.string.isRequired,
      hasActivities: _react.PropTypes.bool,
      onClose: _react.PropTypes.func.isRequired
    },
    enumerable: true
  }]);

  return RelativePopupHeader;
})();

exports["default"] = RelativePopupHeader;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],373:[function(require,module,exports){
var STATE_FRIEND, STATE_GUESSED, STATE_IGNORED, STATE_NONE, STATE_REQUESTED;

STATE_FRIEND = 'friend';

STATE_REQUESTED = 'requested';

STATE_IGNORED = 'ignored';

STATE_GUESSED = 'guessed';

STATE_NONE = 'none';

window.FollowButton = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return {
      relationship: this.props.relationship,
      isHover: false,
      isError: false,
      isProcess: false
    };
  },
  componentDidMount: function() {
    return TastyEvents.on(TastyEvents.keys.follow_status_changed(this.state.relationship.user_id), this.updateFollowStatus);
  },
  componentWillUnmount: function() {
    return TastyEvents.off(TastyEvents.keys.follow_status_changed(this.state.relationship.user_id), this.updateFollowStatus);
  },
  render: function() {
    var rootClass;
    if (this.isFollow() && !this.state.isError && !this.state.isProcess) {
      rootClass = 'state--active';
    }
    return React.createElement("button", {
      "style": {
        display: 'inline-block!important'
      },
      "className": 'follow-button ' + rootClass,
      "onClick": this.onClick,
      "onMouseOver": this.onMouseOver,
      "onMouseLeave": this.onMouseLeave
    }, this._getTitle());
  },
  isFollow: function() {
    return this.state.relationship.state === STATE_FRIEND;
  },
  onClick: function() {
    switch (this.state.relationship.state) {
      case STATE_FRIEND:
        return this.unfollow();
      case STATE_REQUESTED:
        return this.cancel();
      case STATE_IGNORED:
        return this.cancel();
      case STATE_GUESSED:
        return this.follow();
      case STATE_NONE:
        return this.follow();
      default:
        return console.warn('Неизвестный статус', this.state.relationship.state);
    }
  },
  onMouseOver: function() {
    return this.setState({
      isHover: true
    });
  },
  onMouseLeave: function() {
    return this.setState({
      isHover: false
    });
  },
  updateFollowStatus: function(newStatus) {
    var newRelationship;
    newRelationship = this.state.relationship;
    newRelationship.state = newStatus;
    return this.setState({
      relationship: newRelationship
    });
  },
  _getTitle: function() {
    if (this.state.isError) {
      return i18n.t('follow_button_error');
    }
    if (this.state.isProcess) {
      return i18n.t('follow_button_process');
    }
    if (this.state.isHover) {
      switch (this.state.relationship.state) {
        case STATE_FRIEND:
          return i18n.t('follow_button_unsubscribe');
        case STATE_REQUESTED:
          return i18n.t('follow_button_cancel');
        case STATE_IGNORED:
          return i18n.t('follow_button_unblock');
        case STATE_GUESSED:
          if (this.state.relationship.user.is_privacy) {
            return i18n.t('follow_button_send_request');
          } else {
            return i18n.t('follow_button_subscribe');
          }
          break;
        case STATE_NONE:
          if (this.state.relationship.user.is_privacy) {
            return i18n.t('follow_button_send_request');
          } else {
            return i18n.t('follow_button_subscribe');
          }
          break;
        default:
          return console.log('Неизвестный статус', this.state.relationship.state);
      }
    } else {
      switch (this.state.relationship.state) {
        case STATE_FRIEND:
          return i18n.t('follow_button_subscribed');
        case STATE_REQUESTED:
          return i18n.t('follow_button_requested');
        case STATE_IGNORED:
          return i18n.t('follow_button_ignored');
        case STATE_GUESSED:
          if (this.state.relationship.user.is_privacy) {
            return i18n.t('follow_button_send_request');
          } else {
            return i18n.t('follow_button_subscribe');
          }
          break;
        case STATE_NONE:
          if (this.state.relationship.user.is_privacy) {
            return i18n.t('follow_button_send_request');
          } else {
            return i18n.t('follow_button_subscribe');
          }
          break;
        default:
          return console.log('Неизвестный статус', this.state.relationship.state);
      }
    }
  }
});


},{}],374:[function(require,module,exports){
window.RelationshipFollowerButton = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentDidMount: function() {
    return CurrentUserStore.addChangeListener(this.onStoreChange);
  },
  componentWillUnmount: function() {
    return CurrentUserStore.removeChangeListener(this.onStoreChange);
  },
  render: function() {
    var unfollowButton;
    if (this.isProfilePrivate()) {
      unfollowButton = React.createElement("button", {
        "className": "button button--small button--outline-light-white button--icon",
        "onClick": this.handleDisapproveClick
      }, React.createElement("i", {
        "className": "icon icon--cross"
      }));
    }
    return React.createElement("div", null, React.createElement(FollowButton, {
      "relationship": this.props.relationship.reverse_relationship
    }), unfollowButton);
  },
  isProfilePrivate: function() {
    return this.state.user.is_privacy === true;
  },
  getStateFromStore: function() {
    return {
      user: CurrentUserStore.getUser()
    };
  },
  handleDisapproveClick: function() {
    return this.unfollowFromYourself({
      success: (function(_this) {
        return function() {
          return RelationshipsDispatcher.handleServerAction({
            type: 'relationshipUnfollowedFromYourself',
            relationship: _this.props.relationship
          });
        };
      })(this)
    });
  },
  onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{}],375:[function(require,module,exports){
window.RelationshipGuessButton = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    relationship: React.PropTypes.object.isRequired,
    onRequestEnd: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      isError: false,
      isProcess: false
    };
  },
  render: function() {
    return React.createElement("div", null, React.createElement(FollowButton, {
      "relationship": this.props.relationship
    }), React.createElement("button", {
      "onClick": this.handleDisapproveClick,
      "className": "button button--small button--outline-light-white button--icon"
    }, React.createElement("i", {
      "className": "icon icon--cross"
    })));
  },
  handleDisapproveClick: function() {
    return this.cancel({
      success: (function(_this) {
        return function() {
          return _this.props.onRequestEnd(_this.props.relationship);
        };
      })(this)
    });
  }
});


},{}],376:[function(require,module,exports){
var STATE_IGNORED;

STATE_IGNORED = 'ignored';

window.RelationshipIgnoreButton = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return {
      relationship: this.props.relationship,
      isHover: false,
      isError: false,
      isProcess: false
    };
  },
  render: function() {
    return React.createElement("button", {
      "style": {
        display: 'inline-block!important'
      },
      "className": "follow-button",
      "onClick": this.onClick,
      "onMouseOver": this.onMouseOver,
      "onMouseLeave": this.onMouseLeave
    }, this._getTitle());
  },
  isIgnored: function() {
    return this.state.relationship.state === STATE_IGNORED;
  },
  onClick: function() {
    if (this.isIgnored()) {
      return this.cancel();
    } else {
      return this.ignore();
    }
  },
  onMouseOver: function() {
    return this.setState({
      isHover: true
    });
  },
  onMouseLeave: function() {
    return this.setState({
      isHover: false
    });
  },
  _getTitle: function() {
    if (this.state.isError) {
      return i18n.t('follow_button_error');
    }
    if (this.state.isProcess) {
      return i18n.t('follow_button_process');
    }
    if (this.state.relationship.state === STATE_IGNORED) {
      if (this.state.isHover) {
        return i18n.t('follow_button_unblock');
      } else {
        return i18n.t('follow_button_ignored');
      }
    } else {
      return i18n.t('follow_button_block');
    }
  }
});


},{}],377:[function(require,module,exports){
window.RelationshipMixin = {
  componentWillUnmount: function() {
    return this.clearErrorTimer();
  },
  follow: function() {
    this.closeError();
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.change_my_relationship_url(this.state.relationship.user_id, 'follow'),
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            relationship: data
          });
          return TastyEvents.trigger(TastyEvents.keys.follow_status_changed(data.user_id), [data.state]);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.startErrorTimer();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  unfollow: function() {
    this.closeError();
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.change_my_relationship_url(this.state.relationship.user_id, 'unfollow'),
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            relationship: data
          });
          return TastyEvents.trigger(TastyEvents.keys.follow_status_changed(data.user_id), [data.state]);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.startErrorTimer();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  unfollowFromYourself: function(options) {
    return this.createRequest({
      url: ApiRoutes.unfollow_from_yourself_url(this.props.relationship.reader_id),
      method: 'POST',
      data: {
        _method: 'DELETE'
      },
      success: function() {
        return options != null ? typeof options.success === "function" ? options.success() : void 0 : void 0;
      },
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this)
    });
  },
  cancel: function(options) {
    this.closeError();
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.change_my_relationship_url(this.state.relationship.user_id, 'cancel'),
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            relationship: data
          });
          if (options != null ? options.success : void 0) {
            if (options != null) {
              options.success();
            }
          }
          return TastyEvents.trigger(TastyEvents.keys.follow_status_changed(data.user_id), [data.state]);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.startErrorTimer();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  ignore: function() {
    this.closeError();
    this.setState({
      isProcess: true
    });
    return this.createRequest({
      url: ApiRoutes.change_my_relationship_url(this.state.relationship.user_id, 'ignore'),
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            relationship: data
          });
          return TastyEvents.trigger(TastyEvents.keys.follow_status_changed(data.user_id), [data.state]);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.startErrorTimer();
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            isProcess: false
          });
        };
      })(this)
    });
  },
  approve: function(options) {
    this.activateLoadingState();
    return this.createRequest({
      url: ApiRoutes.relationships_by_tlog_approve_url(this.props.relationship.reader.id),
      method: 'POST',
      data: {
        expose_reverse: 1
      },
      success: (function(_this) {
        return function(relationship) {
          return options != null ? typeof options.success === "function" ? options.success(relationship) : void 0 : void 0;
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.activateWaitingState();
        };
      })(this)
    });
  },
  disapprove: function(options) {
    this.activateLoadingState();
    return this.createRequest({
      url: ApiRoutes.relationships_by_tlog_disapprove_url(this.props.relationship.reader.id),
      method: 'POST',
      success: (function(_this) {
        return function(relationship) {
          return options != null ? typeof options.success === "function" ? options.success(relationship) : void 0 : void 0;
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          return NoticeService.errorResponse(data);
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.activateWaitingState();
        };
      })(this)
    });
  },
  _loadRelationship: function() {
    return this.createRequest({
      url: ApiRoutes.get_my_relationship_url(this.props.tlogId),
      success: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            relationship: data
          });
          return TastyEvents.trigger(TastyEvents.keys.follow_status_changed(data.user_id), [data.state]);
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          _this.safeUpdateState({
            isError: true
          });
          return NoticeService.errorResponse(data);
        };
      })(this)
    });
  }
};

React.mixins.add('RelationshipMixin', [RelationshipMixin, ErrorTimerMixin, RequesterMixin, ComponentManipulationsMixin]);


},{}],378:[function(require,module,exports){
var ERROR_STATE, LOADING_STATE, WAITING_STATE;

ERROR_STATE = 'error';

LOADING_STATE = 'loading';

WAITING_STATE = 'waiting';

window.RelationshipRequestButton = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    relationship: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return {
      currentState: WAITING_STATE,
      isError: false,
      isProcess: false
    };
  },
  render: function() {
    var title;
    title = this._getTitle();
    return React.createElement("div", null, React.createElement("button", {
      "className": "button button--small button--outline-light-white",
      "onClick": this.handleApproveClick
    }, title), React.createElement("button", {
      "className": "button button--small button--outline-light-white button--icon",
      "onClick": this.handleDisapproveClick
    }, React.createElement("i", {
      "className": "icon icon--cross"
    })));
  },
  activateLoadingState: function() {
    return this.safeUpdateState({
      currentState: LOADING_STATE
    });
  },
  activateWaitingState: function() {
    return this.safeUpdateState({
      currentState: WAITING_STATE
    });
  },
  _getTitle: function() {
    switch (this.state.currentState) {
      case ERROR_STATE:
        return i18n.t('follow_button_error');
      case LOADING_STATE:
        return i18n.t('follow_button_process');
      default:
        return i18n.t('follow_button_approve');
    }
  },
  handleApproveClick: function() {
    return this.approve({
      success: (function(_this) {
        return function(relationship) {
          return RelationshipsDispatcher.handleServerAction({
            type: 'requestedRelationshipApproved',
            relationship: relationship
          });
        };
      })(this)
    });
  },
  handleDisapproveClick: function() {
    return this.disapprove({
      success: (function(_this) {
        return function(relationship) {
          return RelationshipsDispatcher.handleServerAction({
            type: 'requestedRelationshipDisapproved',
            relationship: relationship
          });
        };
      })(this)
    });
  }
});


},{}],379:[function(require,module,exports){
var CLASSNAME_ACTIVE, CLASSNAME_READY, DELAY_SLIDESHOW, STATE_LOADING, STATE_READY, ScreenViewer_Item, ScreenViewer_Loader, ScreenViewer_Slideshow, ScreenViewer_Title;

STATE_LOADING = 'loading';

STATE_READY = 'ready';

CLASSNAME_READY = '__ready';

CLASSNAME_ACTIVE = '__active';

DELAY_SLIDESHOW = 8000;

module.exports = React.createClass({
  displayName: 'ScreenViewer',
  propTypes: {
    title: React.PropTypes.string,
    sourceImages: React.PropTypes.array.isRequired
  },
  getInitialState: function() {
    return {
      currentState: STATE_LOADING,
      images: []
    };
  },
  componentDidMount: function() {
    return this.loadImages();
  },
  render: function() {
    var readyClass, viewerContent, viewerTitle;
    viewerContent = (function() {
      switch (this.state.currentState) {
        case STATE_LOADING:
          return React.createElement(ScreenViewer_Loader, null);
        case STATE_READY:
          return React.createElement(ScreenViewer_Slideshow, {
            "images": this.state.images
          });
        default:
          return console.warn('Неизвестное состояние #{@state.currentState}');
      }
    }).call(this);
    if (this.props.title != null) {
      viewerTitle = React.createElement(ScreenViewer_Title, {
        "title": this.props.title
      });
    }
    readyClass = this.isReadyState() ? CLASSNAME_READY : '';
    return React.createElement("div", {
      "className": 'screen-viewer ' + readyClass
    }, React.createElement("div", {
      "className": 'screen-viewer__spacer'
    }), viewerContent, viewerTitle);
  },
  loadImages: function() {
    return _.each(this.props.sourceImages, (function(_this) {
      return function(sourceImage) {
        var image;
        image = new Image;
        image.src = sourceImage.imgSrc;
        return image.onload = function() {
          var images;
          images = _this.state.images;
          images.push({
            isAnimate: false,
            imgSrc: sourceImage.imgSrc,
            tlogUrl: sourceImage.tlogUrl,
            userName: sourceImage.userName
          });
          return _this.setState({
            images: images,
            currentState: STATE_READY
          });
        };
      };
    })(this));
  },
  isReadyState: function() {
    return this.state.currentState === STATE_READY;
  }
});

ScreenViewer_Slideshow = React.createClass({
  propTypes: {
    images: React.PropTypes.array.isRequired
  },
  getInitialState: function() {
    return {
      index: 0,
      currentImage: this.props.images[0]
    };
  },
  componentDidMount: function() {
    return this.startTimeout();
  },
  render: function() {
    var items, that;
    that = this;
    items = this.props.images.map((function(_this) {
      return function(image, index) {
        return React.createElement(ScreenViewer_Item, {
          "key": index,
          "active": that.state.index === index,
          "imgSrc": image.imgSrc,
          "userName": image.userName,
          "tlogUrl": image.tlogUrl
        });
      };
    })(this));
    return React.createElement("div", {
      "className": "screen-viewer__slideshow"
    }, items);
  },
  startTimeout: function() {
    return setTimeout(((function(_this) {
      return function() {
        _this.nextImage();
        return _this.startTimeout();
      };
    })(this)), DELAY_SLIDESHOW);
  },
  nextImage: function() {
    var nextIndex;
    if (this.state.index === this.props.images.length - 1) {
      nextIndex = 0;
    } else {
      nextIndex = this.state.index + 1;
    }
    return this.setState({
      index: nextIndex
    });
  }
});

ScreenViewer_Item = React.createClass({
  propTypes: {
    active: React.PropTypes.bool.isRequired,
    imgSrc: React.PropTypes.string.isRequired,
    tlogUrl: React.PropTypes.string.isRequired,
    userName: React.PropTypes.string.isRequired
  },
  render: function() {
    var activeClass, style;
    activeClass = this.props.active ? CLASSNAME_ACTIVE : '';
    style = {
      backgroundImage: "url('" + this.props.imgSrc + "')"
    };
    return React.createElement("div", {
      "className": 'screen-viewer__item ' + activeClass
    }, React.createElement("div", {
      "style": style,
      "className": 'screen-viewer__bg'
    }), React.createElement("div", {
      "className": 'screen-viewer__user'
    }, React.createElement("a", {
      "href": this.props.tlogUrl,
      "title": this.props.userName
    }, "Фотография – ", this.props.userName)));
  }
});

ScreenViewer_Loader = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": 'screen-viewer__loader'
    }, React.createElement(Spinner, {
      "size": 24.
    }));
  }
});

ScreenViewer_Title = React.createClass({
  propTypes: {
    title: React.PropTypes.string
  },
  render: function() {
    return React.createElement("div", {
      "className": 'screen-viewer__title',
      "dangerouslySetInnerHTML": {
        __html: this.props.title || ''
      }
    });
  }
});


},{}],380:[function(require,module,exports){
window.SearchButton = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "search__button",
      "onClick": this.props.onClick
    }, React.createElement("i", {
      "className": "icon icon--magnifier"
    }));
  }
});


},{}],381:[function(require,module,exports){
window.SearchField = React.createClass({
  propTypes: {
    query: React.PropTypes.string,
    onCancel: React.PropTypes.func.isRequired,
    onSubmit: React.PropTypes.func.isRequired
  },
  componentDidMount: function() {
    return this.selectAllText();
  },
  render: function() {
    return React.createElement("form", {
      "className": "search__form"
    }, React.createElement("input", {
      "ref": "searchInput",
      "type": "text",
      "placeholder": i18n.t('search_placeholder'),
      "defaultValue": this.props.query,
      "className": "search__input",
      "onBlur": this.props.onCancel,
      "onFocus": this.putCursorAtEnd,
      "onKeyDown": this.handleKeyDown
    }));
  },
  selectAllText: function() {
    var searchInput;
    searchInput = this.refs.searchInput.getDOMNode();
    return searchInput.setSelectionRange(0, searchInput.value.length);
  },
  putCursorAtEnd: function() {
    var searchInput;
    searchInput = this.refs.searchInput.getDOMNode();
    return searchInput.value = searchInput.value;
  },
  handleKeyDown: function(e) {
    switch (e.key) {
      case 'Escape':
        e.preventDefault();
        return this.props.onCancel();
      case 'Enter':
        e.preventDefault();
        return this.props.onSubmit();
    }
  }
});


},{}],382:[function(require,module,exports){
var CLOSED, OPENED, classnames;

classnames = require('classnames');

CLOSED = 'closed';

OPENED = 'opened';

window.Search = React.createClass({
  propTypes: {
    searchUrl: React.PropTypes.string,
    query: React.PropTypes.string
  },
  getInitialState: function() {
    return {
      currentState: this.props.query ? OPENED : CLOSED
    };
  },
  render: function() {
    var searchClasses;
    searchClasses = classnames('search', {
      'state--active': this.isOpen()
    });
    return React.createElement("div", {
      "className": searchClasses
    }, React.createElement(SearchField, {
      "ref": "searchField",
      "query": this.props.query,
      "onCancel": this.closeSearch,
      "onSubmit": this.submit
    }), React.createElement(SearchButton, {
      "onClick": this.handleButtonClick
    }));
  },
  openSearch: function() {
    this.setState({
      currentState: OPENED
    });
    return this.refs.searchField.refs.searchInput.getDOMNode().focus();
  },
  closeSearch: function() {
    return this.setState({
      currentState: CLOSED
    });
  },
  submit: function() {
    var query, url;
    query = this.refs.searchField.refs.searchInput.getDOMNode().value;
    if (query.length === 0) {
      return;
    }
    url = this._prepareSearchUrl(query);
    return window.location = url;
  },
  isOpen: function() {
    return this.state.currentState !== CLOSED;
  },
  _prepareSearchUrl: function(query) {
    var url;
    url = this.props.searchUrl || window.location.origin + window.location.pathname;
    return url + '?q=' + query;
  },
  handleButtonClick: function(e) {
    e.stopPropagation();
    if (this.isOpen()) {
      return this.submit();
    } else {
      return this.openSearch();
    }
  }
});


},{"classnames":647}],383:[function(require,module,exports){
var cloneWithProps;

cloneWithProps = require('react/lib/cloneWithProps');

window.ShellBox = React.createClass({
  mixins: [ReactUnmountMixin],
  getDefaultProps: function() {
    return {
      fadeSpeed: 1000
    };
  },
  getInitialState: function() {
    return {
      isDisabled: false
    };
  },
  handleClick: function(e) {
    if (!this.state.isDisabled) {
      if ($(e.target).hasClass('shellbox__cell')) {
        e.preventDefault();
        return this.unmount();
      }
    }
  },
  componentWillMount: function() {
    this.blurScreen();
    return Mousetrap.bind('esc', this.onClose);
  },
  componentDidMount: function() {},
  componentWillUnmount: function() {
    this.unblurScreen();
    return Mousetrap.unbind('esc', this.onClose);
  },
  render: function() {
    var children;
    children = React.Children.map(this.props.children, (function(_this) {
      return function(child) {
        return cloneWithProps(child, {
          disableShellbox: _this.disableShellbox,
          enableShellbox: _this.enableShellbox
        });
      };
    })(this));
    return React.createElement("div", {
      "className": "shellbox"
    }, React.createElement("div", {
      "className": "shellbox__main"
    }, React.createElement("div", {
      "className": "shellbox__cell",
      "onClick": this.handleClick
    }, children)));
  },
  blurScreen: function() {
    return $('html').addClass('shellbox-enabled');
  },
  unblurScreen: function() {
    return $('html').removeClass('shellbox-enabled');
  },
  onClose: function() {
    if (!this.state.isDisabled) {
      return this.unmount();
    }
  },
  disableShellbox: function() {
    return this.setState({
      isDisabled: true
    });
  },
  enableShellbox: function() {
    return this.setState({
      isDisabled: false
    });
  }
});


},{"react/lib/cloneWithProps":797}],384:[function(require,module,exports){
var EmailConfirmRegistration, SocialNetworksConfirmRegistration;

EmailConfirmRegistration = require('../Auth/email/confirm_registration');

SocialNetworksConfirmRegistration = require('../Auth/social_networks/confirm_registration');

window.ConfirmRegistrationShellbox = React.createClass({
  propTypes: {
    type: React.PropTypes.oneOf(['email', 'socialNetwork']).isRequired,
    postUrl: React.PropTypes.string.isRequired,
    email: React.PropTypes.string,
    password: React.PropTypes.string,
    proposedSlug: React.PropTypes.string.isRequired
  },
  getInitialState: function() {
    return {
      isProcess: false
    };
  },
  render: function() {
    var ConfirmRegistration;
    ConfirmRegistration = (function() {
      switch (this.props.type) {
        case 'email':
          return EmailConfirmRegistration;
        case 'socialNetwork':
          return SocialNetworksConfirmRegistration;
        default:
          return console.warn('Unknown type of confirm registration component', this.props.type);
      }
    }).call(this);
    return React.createElement(ShellBox, null, React.createElement(ConfirmRegistration, {
      "email": this.props.email,
      "postUrl": this.props.postUrl,
      "password": this.props.password,
      "proposedSlug": this.props.proposedSlug
    }));
  }
});


},{"../Auth/email/confirm_registration":32,"../Auth/social_networks/confirm_registration":39}],385:[function(require,module,exports){
var STATE_GUESSED, STATE_NONE;

STATE_NONE = 'none';

STATE_GUESSED = 'guessed';

window.SmartFollowStatus = React.createClass({
  mixins: ['RelationshipMixin'],
  propTypes: {
    status: React.PropTypes.string.isRequired,
    tlogId: React.PropTypes.number.isRequired
  },
  getInitialState: function() {
    return {
      relationship: {
        user_id: this.props.tlogId
      },
      status: this.props.status,
      isError: false,
      isProcess: false
    };
  },
  componentDidMount: function() {
    return TastyEvents.on(TastyEvents.keys.follow_status_changed(this.props.tlogId), this.updateFollowStatus);
  },
  componentWillUnmount: function() {
    return TastyEvents.off(TastyEvents.keys.follow_status_changed(this.props.tlogId), this.updateFollowStatus);
  },
  render: function() {
    return React.createElement(FollowStatus, {
      "status": this.state.status,
      "error": this.state.isError,
      "process": this.state.isProcess,
      "onClick": this.handleClick
    });
  },
  handleClick: function() {
    if (!this.state.isError && !this.state.isProcess) {
      switch (this.state.status) {
        case STATE_NONE:
        case STATE_GUESSED:
          return this.follow();
      }
    }
  },
  updateFollowStatus: function(newStatus) {
    return this.setState({
      status: newStatus
    });
  }
});


},{}],386:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _sharedReactComponentsCommonAvatar = require('../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var AvatarToolbar = React.createClass({
  displayName: 'AvatarToolbar',

  componentDidMount: function componentDidMount() {
    $(this.getDOMNode()).tooltip({
      title: i18n.t('avatar_toolbar_tooltip'),
      placement: 'left',
      container: '.toolbar--avatar'
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    $(this.getDOMNode()).tooltip('destroy');
  },

  render: function render() {
    return React.createElement(
      'a',
      { href: this.props.user.tlog_url, className: 'toolbar toolbar--avatar' },
      React.createElement(
        'div',
        { className: 'toolbar__toggle' },
        React.createElement(_sharedReactComponentsCommonAvatar2['default'], { userpic: this.props.user.userpic, size: 70 })
      )
    );
  }
});

exports['default'] = AvatarToolbar;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Avatar":532,"babel-runtime/helpers/interop-require-default":574}],387:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _AvatarToolbar = require('./AvatarToolbar');

var _AvatarToolbar2 = _interopRequireDefault(_AvatarToolbar);

var AvatarToolbarContainer = React.createClass({
  displayName: 'AvatarToolbarContainer',

  propTypes: {
    user: React.PropTypes.object.isRequired,
    userLogged: React.PropTypes.bool.isRequired
  },

  render: function render() {
    return this.props.userLogged ? React.createElement(_AvatarToolbar2['default'], { user: this.props.user }) : null;
  }
});

AvatarToolbarContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(AvatarToolbarContainer, [_storesCurrent_user2['default']], function (props) {
  return {
    user: _storesCurrent_user2['default'].getUser(),
    userLogged: _storesCurrent_user2['default'].isLogged()
  };
});

exports['default'] = AvatarToolbarContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../stores/current_user":517,"./AvatarToolbar":386,"babel-runtime/helpers/interop-require-default":574}],388:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var CloseToolbar = React.createClass({
  displayName: "CloseToolbar",

  mixins: [TouchMixin],

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "toolbar toolbar--close", onClick: this.props.onClick },
      React.createElement(
        "div",
        { className: "toolbar__toggle" },
        React.createElement("i", { className: "icon icon--cross" })
      )
    );
  }
});

exports["default"] = CloseToolbar;
module.exports = exports["default"];

},{}],389:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _ComposeToolbarDropdownList = require('./ComposeToolbarDropdownList');

var _ComposeToolbarDropdownList2 = _interopRequireDefault(_ComposeToolbarDropdownList);

var ComposeToolbar = (function (_Component) {
  _inherits(ComposeToolbar, _Component);

  function ComposeToolbar() {
    _classCallCheck(this, ComposeToolbar);

    _get(Object.getPrototypeOf(ComposeToolbar.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      dropdownVisible: false
    };
  }

  _createClass(ComposeToolbar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      $((0, _react.findDOMNode)(this.refs.button)).tooltip({
        title: i18n.t('toolbar_new_entry_item'),
        placement: 'left',
        container: '.toolbar--compose'
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      $((0, _react.findDOMNode)(this.refs.button)).tooltip('destroy');
    }
  }, {
    key: 'onMouseEnter',
    value: function onMouseEnter(ev) {
      this.setState({ dropdownVisible: true });
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave(ev) {
      this.setState({ dropdownVisible: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var tlog = _props.tlog;
      var user = _props.user;

      var containerClasses = (0, _classnames2['default'])({
        'toolbar': true,
        'toolbar--compose': true,
        'state--open': this.state.dropdownVisible
      });

      return _react2['default'].createElement(
        'div',
        {
          className: containerClasses,
          onMouseEnter: this.onMouseEnter.bind(this),
          onMouseLeave: this.onMouseLeave.bind(this)
        },
        _react2['default'].createElement(
          'a',
          { href: _sharedRoutesRoutes2['default'].new_entry_url(this.props.user.slug) },
          _react2['default'].createElement(
            'div',
            { className: 'toolbar__toggle', ref: 'button' },
            _react2['default'].createElement('i', { className: 'icon icon--plus' })
          )
        ),
        _react2['default'].createElement(_ComposeToolbarDropdownList2['default'], {
          isFlow: tlog.is_flow,
          tlogSlug: tlog.slug,
          userSlug: user.slug
        })
      );
    }
  }]);

  return ComposeToolbar;
})(_react.Component);

ComposeToolbar.propTypes = {
  tlog: _react.PropTypes.object.isRequired,
  user: _react.PropTypes.object.isRequired
};

ComposeToolbar.defaultProps = {
  tlog: {},
  user: {}
};

exports['default'] = ComposeToolbar;
module.exports = exports['default'];

},{"../../../../shared/routes/routes":558,"./ComposeToolbarDropdownList":391,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],390:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _ComposeToolbar = require('./ComposeToolbar');

var _ComposeToolbar2 = _interopRequireDefault(_ComposeToolbar);

var _ComposeToolbarContainer = (function (_Component) {
  _inherits(_ComposeToolbarContainer, _Component);

  function _ComposeToolbarContainer() {
    _classCallCheck(this, _ComposeToolbarContainer);

    _get(Object.getPrototypeOf(_ComposeToolbarContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(_ComposeToolbarContainer, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var user = _props.user;
      var userLogged = _props.userLogged;

      return userLogged ? _react2['default'].createElement(_ComposeToolbar2['default'], { user: user }) : null;
    }
  }]);

  return _ComposeToolbarContainer;
})(_react.Component);

_ComposeToolbarContainer.propTypes = {
  user: _react.PropTypes.object.isRequired,
  userLogged: _react.PropTypes.bool.isRequired
};

var ComposeToolbarContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(_ComposeToolbarContainer, [_storesCurrent_user2['default']], function () {
  return {
    user: _storesCurrent_user2['default'].getUser(),
    userLogged: _storesCurrent_user2['default'].isLogged()
  };
});

exports['default'] = ComposeToolbarContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../stores/current_user":517,"./ComposeToolbar":389,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],391:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _actionsPopup = require('../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var _commonTooltip = require('../common/Tooltip');

var _commonTooltip2 = _interopRequireDefault(_commonTooltip);

var ComposeToolbarDropdownList = (function () {
  function ComposeToolbarDropdownList() {
    _classCallCheck(this, ComposeToolbarDropdownList);
  }

  _createClass(ComposeToolbarDropdownList, [{
    key: 'createFlow',
    value: function createFlow(ev) {
      ev.preventDefault();
      _actionsPopup2['default'].createFlow();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var isFlow = _props.isFlow;
      var tlogSlug = _props.tlogSlug;
      var userSlug = _props.userSlug;

      var context = isFlow ? 'flow' : '';
      var contextSlug = isFlow ? tlogSlug : userSlug;

      return _react2['default'].createElement(
        'div',
        { className: 'toolbar__drops' },
        _react2['default'].createElement(
          _commonTooltip2['default'],
          { placement: 'left', title: i18n.t('toolbar_new_text_entry', { context: context }) },
          _react2['default'].createElement(
            'div',
            { className: 'toolbar__drop' },
            _react2['default'].createElement(
              'a',
              { className: 'button button--circle button--emerald', href: _sharedRoutesRoutes2['default'].new_entry_url(contextSlug, 'text') },
              _react2['default'].createElement('i', { className: 'icon icon--text-circle' })
            )
          )
        ),
        _react2['default'].createElement(
          _commonTooltip2['default'],
          { placement: 'left', title: i18n.t('toolbar_new_image_entry', { context: context }) },
          _react2['default'].createElement(
            'div',
            { className: 'toolbar__drop' },
            _react2['default'].createElement(
              'a',
              { className: 'button button--circle button--emerald', href: _sharedRoutesRoutes2['default'].new_entry_url(contextSlug, 'image') },
              _react2['default'].createElement('i', { className: 'icon icon--image-circle' })
            )
          )
        ),
        _react2['default'].createElement(
          _commonTooltip2['default'],
          { placement: 'left', title: i18n.t('toolbar_new_anonymous_entry') },
          _react2['default'].createElement(
            'div',
            { className: 'toolbar__drop' },
            _react2['default'].createElement(
              'a',
              { className: 'button button--circle button--emerald', href: _sharedRoutesRoutes2['default'].new_anonymous_entry_url(userSlug) },
              _react2['default'].createElement('i', { className: 'icon icon--question-mark' })
            )
          )
        ),
        _react2['default'].createElement(
          _commonTooltip2['default'],
          { placement: 'left', title: i18n.t('toolbar_new_flow') },
          _react2['default'].createElement(
            'div',
            { className: 'toolbar__drop' },
            _react2['default'].createElement(
              'a',
              { className: 'button button--circle button--emerald', href: '#', onClick: this.createFlow },
              _react2['default'].createElement('i', { className: 'icon icon--hash' })
            )
          )
        )
      );
    }
  }]);

  return ComposeToolbarDropdownList;
})();

ComposeToolbarDropdownList.propTypes = {
  isFlow: _react.PropTypes.bool,
  tlogSlug: _react.PropTypes.string.isRequired,
  userSlug: _react.PropTypes.string.isRequired
};

exports['default'] = ComposeToolbarDropdownList;
module.exports = exports['default'];

},{"../../../../shared/routes/routes":558,"../../actions/popup":17,"../common/Tooltip":269,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],392:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _commonScrollerScroller = require('../common/scroller/scroller');

var _commonScrollerScroller2 = _interopRequireDefault(_commonScrollerScroller);

var _UserToolbarToggle = require('./UserToolbarToggle');

var _UserToolbarToggle2 = _interopRequireDefault(_UserToolbarToggle);

var _UserToolbarHoverLine = require('./UserToolbarHoverLine');

var _UserToolbarHoverLine2 = _interopRequireDefault(_UserToolbarHoverLine);

var _UserToolbarPrimaryList = require('./UserToolbarPrimaryList');

var _UserToolbarPrimaryList2 = _interopRequireDefault(_UserToolbarPrimaryList);

var _UserToolbarAdditionalList = require('./UserToolbarAdditionalList');

var _UserToolbarAdditionalList2 = _interopRequireDefault(_UserToolbarAdditionalList);

var _UserToolbarGuestList = require('./UserToolbarGuestList');

var _UserToolbarGuestList2 = _interopRequireDefault(_UserToolbarGuestList);

var UserToolbar = React.createClass({
  displayName: 'UserToolbar',

  propTypes: {
    hovered: React.PropTypes.bool.isRequired,
    userLogged: React.PropTypes.bool.isRequired,
    unreadAnonymousCount: React.PropTypes.number.isRequired,
    unreadBestCount: React.PropTypes.number.isRequired,
    unreadConversationsCount: React.PropTypes.number.isRequired,
    unreadFriendsCount: React.PropTypes.number.isRequired,
    unreadLiveCount: React.PropTypes.number.isRequired,
    unreadLiveFlowCount: React.PropTypes.number.isRequired,
    unreadNotificationsCount: React.PropTypes.number.isRequired,
    searchUrl: React.PropTypes.string.isRequired,
    searchTitleI18nKey: React.PropTypes.string.isRequired,
    onMouseEnter: React.PropTypes.func.isRequired,
    onMouseLeave: React.PropTypes.func.isRequired,
    onToggleClick: React.PropTypes.func.isRequired,
    onLineHover: React.PropTypes.func.isRequired,
    onMessagesClick: React.PropTypes.func.isRequired,
    onNotificationsClick: React.PropTypes.func.isRequired,
    onFriendsClick: React.PropTypes.func.isRequired,
    onDesignSettingsClick: React.PropTypes.func.isRequired,
    onSettingsClick: React.PropTypes.func.isRequired,
    onSearchClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    var navbarClasses = (0, _classnames2['default'])('toolbar__navbar', {
      'toolbar__navbar--complex': this.props.userLogged
    });

    return React.createElement(
      'div',
      { className: 'toolbar toolbar--main',
        onMouseEnter: this.props.onMouseEnter,
        onMouseLeave: this.props.onMouseLeave },
      React.createElement(_UserToolbarHoverLine2['default'], { onMouseEnter: this.props.onLineHover }),
      React.createElement(_UserToolbarToggle2['default'], {
        hasConversations: !!this.props.unreadConversationsCount,
        hasNotifications: !!this.props.unreadNotificationsCount,
        onClick: this.props.onToggleClick,
        onMouseEnter: this.props.onLineHover
      }),
      React.createElement(
        'div',
        { className: navbarClasses },
        React.createElement(
          _commonScrollerScroller2['default'],
          null,
          this.renderPrimaryList()
        ),
        this.renderAdditionalList()
      )
    );
  },

  renderPrimaryList: function renderPrimaryList() {
    if (this.props.userLogged) {
      return React.createElement(_UserToolbarPrimaryList2['default'], {
        onDesignSettingsClick: this.props.onDesignSettingsClick,
        onFriendsClick: this.props.onFriendsClick,
        onMessagesClick: this.props.onMessagesClick,
        onNotificationsClick: this.props.onNotificationsClick,
        stayOpen: this.props.hovered,
        unreadAnonymousCount: this.props.unreadAnonymousCount,
        unreadBestCount: this.props.unreadBestCount,
        unreadConversationsCount: this.props.unreadConversationsCount,
        unreadFriendsCount: this.props.unreadFriendsCount,
        unreadLiveCount: this.props.unreadLiveCount,
        unreadLiveFlowCount: this.props.unreadLiveFlowCount,
        unreadNotificationsCount: this.props.unreadNotificationsCount,
        user: this.props.user
      });
    } else {
      return React.createElement(_UserToolbarGuestList2['default'], {
        unreadBestCount: this.props.unreadBestCount,
        unreadLiveCount: this.props.unreadLiveCount
      });
    }
  },

  renderAdditionalList: function renderAdditionalList() {
    if (this.props.userLogged) {
      return React.createElement(_UserToolbarAdditionalList2['default'], {
        user: this.props.user,
        searchTitleI18nKey: this.props.searchTitleI18nKey,
        onSettingsClick: this.props.onSettingsClick,
        onSearchClick: this.props.onSearchClick });
    }
  }
});

exports['default'] = UserToolbar;
module.exports = exports['default'];

},{"../common/scroller/scroller":276,"./UserToolbarAdditionalList":393,"./UserToolbarGuestList":395,"./UserToolbarHoverLine":396,"./UserToolbarPrimaryList":398,"./UserToolbarToggle":399,"babel-runtime/helpers/interop-require-default":574,"classnames":647}],393:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _UserToolbarListItem = require('./UserToolbarListItem');

var _UserToolbarListItem2 = _interopRequireDefault(_UserToolbarListItem);

var UserToolbarAdditionalList = React.createClass({
  displayName: "UserToolbarAdditionalList",

  propTypes: {
    user: React.PropTypes.object.isRequired,
    searchTitleI18nKey: React.PropTypes.string.isRequired,
    onSettingsClick: React.PropTypes.func.isRequired,
    onSearchClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      "ul",
      { className: "toolbar__nav toolbar__nav--bottom" },
      React.createElement(_UserToolbarListItem2["default"], {
        title: i18n.t("searchbox_titles." + this.props.searchTitleI18nKey),
        icon: "icon--magnifier",
        onClick: this.props.onSearchClick }),
      React.createElement(_UserToolbarListItem2["default"], {
        url: Routes.userSettings(this.props.user.slug),
        title: i18n.t('toolbar_settings_item'),
        icon: "icon--cogwheel",
        onClick: this.props.onSettingsClick }),
      React.createElement(_UserToolbarListItem2["default"], {
        url: Routes.logout_path(this.props.user.slug),
        title: i18n.t('toolbar_logout_item'),
        icon: "icon--logout" })
    );
  }
});

exports["default"] = UserToolbarAdditionalList;
module.exports = exports["default"];

},{"./UserToolbarListItem":397,"babel-runtime/helpers/interop-require-default":574}],394:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storesCurrent_user = require('../../stores/current_user');

var _storesCurrent_user2 = _interopRequireDefault(_storesCurrent_user);

var _messagingStoresMessaging_status = require('../../messaging/stores/messaging_status');

var _messagingStoresMessaging_status2 = _interopRequireDefault(_messagingStoresMessaging_status);

var _storesFeedsStore = require('../../stores/FeedsStore');

var _storesFeedsStore2 = _interopRequireDefault(_storesFeedsStore);

var _sharedReactComponentsHigherOrderConnectToStores = require('../../../../shared/react/components/higherOrder/connectToStores');

var _sharedReactComponentsHigherOrderConnectToStores2 = _interopRequireDefault(_sharedReactComponentsHigherOrderConnectToStores);

var _actionsToolbar = require('../../actions/Toolbar');

var _actionsToolbar2 = _interopRequireDefault(_actionsToolbar);

var _actionsPopup = require('../../actions/popup');

var _actionsPopup2 = _interopRequireDefault(_actionsPopup);

var _UserToolbar = require('./UserToolbar');

var _UserToolbar2 = _interopRequireDefault(_UserToolbar);

var STORAGE_KEY = 'states:mainToolbarOpened';
var SEARCH_TITLE_I18N_KEYS = ['live', 'best', 'friends', 'anonymous', 'mytlog', 'tlog', 'favorites', 'privates', 'people'];

var UserToolbarContainer = (0, _react.createClass)({
  propTypes: {
    searchTitleI18nKey: _react.PropTypes.oneOf(SEARCH_TITLE_I18N_KEYS).isRequired,
    searchUrl: _react.PropTypes.string.isRequired,
    unreadAnonymousCount: _react.PropTypes.number.isRequired,
    unreadBestCount: _react.PropTypes.number.isRequired,
    unreadConversationsCount: _react.PropTypes.number.isRequired,
    unreadFriendsCount: _react.PropTypes.number.isRequired,
    unreadLiveCount: _react.PropTypes.number.isRequired,
    unreadLiveFlowCount: _react.PropTypes.number.isRequired,
    unreadNotificationsCount: _react.PropTypes.number.isRequired,
    userLogged: _react.PropTypes.bool.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      opened: JSON.parse(AppStorage.getItem(STORAGE_KEY)) || false,
      openedTemporarily: false,
      hovered: false
    };
  },

  componentWillMount: function componentWillMount() {
    _actionsToolbar2['default'].initVisibility(this.state.opened);
  },

  componentDidMount: function componentDidMount() {
    window.addEventListener('scroll', this.onDocumentScroll);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('scroll', this.onDocumentScroll);
  },

  render: function render() {
    var actions = {
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave,
      onToggleClick: this.toggleOpenness,
      onLineHover: this.handleLineHover,
      onMessagesClick: this.toggleMessages,
      onNotificationsClick: this.showNotifications,
      onFriendsClick: this.toggleFriends,
      onDesignSettingsClick: this.toggleDesignSettings,
      onSettingsClick: this.showSettings,
      onSearchClick: this.showSearch
    };

    return _react2['default'].createElement(_UserToolbar2['default'], _extends({}, this.props, this.state, actions));
  },

  toggleOpenness: function toggleOpenness() {
    !this.state.opened ? this.open() : this.close();
  },

  open: function open() {
    AppStorage.setItem(STORAGE_KEY, true);
    _actionsToolbar2['default'].toggleOpenness(true);
    this.setState({
      opened: true,
      openedTemporarily: false
    });
  },

  close: function close() {
    AppStorage.setItem(STORAGE_KEY, false);
    _actionsToolbar2['default'].toggleOpenness(false);
    this.setState({
      opened: false,
      openedTemporarily: false
    });
  },

  toggleMessages: function toggleMessages() {
    _actionsPopup2['default'].toggleMessages();
  },

  showNotifications: function showNotifications() {
    _actionsPopup2['default'].showNotifications();
    // Если тулбар был открыт временно, при этом открыли уведомления, то не позволяем
    // закрыться тулбару
    this.setState({
      opened: true,
      openedTemporarily: false
    });
  },

  toggleFriends: function toggleFriends() {
    _actionsPopup2['default'].toggleFriends();
  },

  toggleDesignSettings: function toggleDesignSettings() {
    _actionsPopup2['default'].toggleDesignSettings();
  },

  showSettings: function showSettings() {
    _actionsPopup2['default'].showSettings();
  },

  showSearch: function showSearch() {
    _actionsPopup2['default'].showSearch({
      searchUrl: this.props.searchUrl,
      searchTitleI18nKey: this.props.searchTitleI18nKey
    });
  },

  handleMouseEnter: function handleMouseEnter() {
    this.setState({ hovered: true });
  },

  handleMouseLeave: function handleMouseLeave(ev) {
    if (ev.clientX <= 0) {
      return;
    }

    if (this.state.openedTemporarily) {
      this.setState({
        openedTemporarily: false,
        hovered: false
      });
      _actionsToolbar2['default'].toggleOpenness(false);
    } else {
      this.setState({ hovered: false });
    }
  },

  handleLineHover: function handleLineHover() {
    if (!this.state.opened) {
      this.setState({ openedTemporarily: true });
      _actionsToolbar2['default'].toggleOpenness(true);
    }
  },

  onDocumentScroll: function onDocumentScroll() {
    if (this.state.opened) {
      this.close();
    }
  }
});

UserToolbarContainer = (0, _sharedReactComponentsHigherOrderConnectToStores2['default'])(UserToolbarContainer, [_storesCurrent_user2['default'], _storesFeedsStore2['default'], _messagingStoresMessaging_status2['default']], function (props) {
  return {
    user: _storesCurrent_user2['default'].getUser(),
    userLogged: _storesCurrent_user2['default'].isLogged(),
    unreadAnonymousCount: (props.unreadAnonymousCount || 0) + _storesFeedsStore2['default'].getUnreadAnonymousCount(),
    unreadBestCount: (props.unreadBestCount || 0) + _storesFeedsStore2['default'].getUnreadBestCount(),
    unreadFriendsCount: (props.unreadFriendsCount || 0) + _storesFeedsStore2['default'].getUnreadFriendsCount(),
    unreadLiveCount: (props.unreadLiveCount || 0) + _storesFeedsStore2['default'].getUnreadLiveCount(),
    unreadLiveFlowCount: (props.unreadLiveFlowCount || 0) + _storesFeedsStore2['default'].getUnreadLiveFlowCount(),
    unreadConversationsCount: _messagingStoresMessaging_status2['default'].getUnreadConversationsCount(),
    unreadNotificationsCount: _messagingStoresMessaging_status2['default'].getUnreadNotificationsCount()
  };
});

exports['default'] = UserToolbarContainer;
module.exports = exports['default'];

},{"../../../../shared/react/components/higherOrder/connectToStores":548,"../../actions/Toolbar":12,"../../actions/popup":17,"../../messaging/stores/messaging_status":484,"../../stores/FeedsStore":513,"../../stores/current_user":517,"./UserToolbar":392,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],395:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _UserToolbarListItem = require('./UserToolbarListItem');

var _UserToolbarListItem2 = _interopRequireDefault(_UserToolbarListItem);

var UserToolbarGuestList = (function () {
  function UserToolbarGuestList() {
    _classCallCheck(this, UserToolbarGuestList);
  }

  _createClass(UserToolbarGuestList, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'ul',
        { className: 'toolbar__nav' },
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--hash',
          label: 'new',
          labelClassName: 'toolbar__label--new',
          title: i18n.t('toolbar_flows_item'),
          url: _sharedRoutesRoutes2['default'].flows()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: this.props.unreadLiveCount,
          icon: 'icon--wave',
          title: i18n.t('feed_live'),
          url: _sharedRoutesRoutes2['default'].live_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: this.props.unreadBestCount,
          icon: 'icon--fire',
          title: i18n.t('feed_best'),
          url: _sharedRoutesRoutes2['default'].best_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--people',
          title: i18n.t('feed_people'),
          url: _sharedRoutesRoutes2['default'].people_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--anonymous',
          title: i18n.t('feed_anonymous'),
          url: _sharedRoutesRoutes2['default'].anonymous_feed_path()
        })
      );
    }
  }]);

  return UserToolbarGuestList;
})();

UserToolbarGuestList.propTypes = {
  unreadBestCount: _react.PropTypes.number.isRequired,
  unreadLiveCount: _react.PropTypes.number.isRequired
};

exports['default'] = UserToolbarGuestList;
module.exports = exports['default'];

},{"../../../../shared/routes/routes":558,"./UserToolbarListItem":397,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],396:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var UserToolbarHoverLine = React.createClass({
  displayName: "UserToolbarHoverLine",

  propTypes: {
    onMouseEnter: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement("div", { className: "toolbar__hover-line", onMouseEnter: this.props.onMouseEnter });
  }
});

exports["default"] = UserToolbarHoverLine;
module.exports = exports["default"];

},{}],397:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var MAX_BADGE_COUNT = 99;
var MAX_BADGE_PRESENTATION = MAX_BADGE_COUNT + '+';

var UserToolbarListItem = _react2['default'].createClass({
  displayName: 'UserToolbarListItem',

  propTypes: {
    title: _react2['default'].PropTypes.string.isRequired,
    icon: _react2['default'].PropTypes.string.isRequired,
    url: _react2['default'].PropTypes.string,
    badgeCount: _react2['default'].PropTypes.number,
    badgeClassName: _react2['default'].PropTypes.string,
    stayOpen: _react2['default'].PropTypes.bool,
    onClick: _react2['default'].PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      opened: false
    };
  },

  componentDidMount: function componentDidMount() {
    $(this.refs.link.getDOMNode()).tooltip({
      title: this.props.title,
      placement: 'right',
      container: '.toolbar--main'
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (!nextProps.stayOpen && this.state.opened) {
      this.setState({ opened: false });
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    $(this.refs.link.getDOMNode()).tooltip('destroy');
  },

  renderIcon: function renderIcon() {
    var _props = this.props;
    var icon = _props.icon;
    var title = _props.title;

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement('i', { className: 'icon ' + icon }),
      _react2['default'].createElement(
        'span',
        { className: 'toolbar__nav-text' },
        title
      ),
      this.renderLabel(),
      this.renderBadge()
    );
  },

  render: function render() {
    var _props2 = this.props;
    var children = _props2.children;
    var icon = _props2.icon;
    var opened = this.state.opened;

    var tChildren = _react2['default'].Children.map(children, function (child) {
      return _react2['default'].cloneElement(child, { opened: opened });
    });

    var itemClasses = (0, _classnames2['default'])('toolbar__nav-item', {
      '__opened': opened
    });

    return _react2['default'].createElement(
      'li',
      {
        className: itemClasses,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      },
      _react2['default'].createElement(
        'a',
        {
          className: 'toolbar__nav-link',
          onClick: this.handleClick,
          ref: 'link'
        },
        icon ? this.renderIcon() : tChildren
      )
    );
  },

  renderBadge: function renderBadge() {
    var _props3 = this.props;
    var badgeClassName = _props3.badgeClassName;
    var badgeCount = _props3.badgeCount;

    if (badgeCount) {
      return _react2['default'].createElement(
        'span',
        { className: badgeClassName },
        badgeCount > MAX_BADGE_COUNT ? MAX_BADGE_PRESENTATION : badgeCount
      );
    }
  },

  renderLabel: function renderLabel() {
    var _props4 = this.props;
    var badgeCount = _props4.badgeCount;
    var label = _props4.label;
    var labelClassName = _props4.labelClassName;

    if (!badgeCount && label) {
      return _react2['default'].createElement(
        'span',
        { className: (0, _classnames2['default'])('toolbar__label', labelClassName) },
        label
      );
    }
  },

  handleMouseEnter: function handleMouseEnter() {
    if (this.props.children) {
      this.setState({ opened: true });
    }
  },

  handleMouseLeave: function handleMouseLeave() {
    if (!this.props.stayOpen) {
      this.setState({ opened: false });
    }
  },

  handleClick: function handleClick(e) {
    e.stopPropagation();

    if (typeof this.props.onClick === 'function') {
      this.props.onClick();
    } else if (this.state.opened || !this.props.children) {
      // We will make redirect if item has no children, or it has been opened
      window.location = this.props.url;
    }
  }
});

exports['default'] = UserToolbarListItem;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],398:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedRoutesRoutes = require('../../../../shared/routes/routes');

var _sharedRoutesRoutes2 = _interopRequireDefault(_sharedRoutesRoutes);

var _UserToolbarListItem = require('./UserToolbarListItem');

var _UserToolbarListItem2 = _interopRequireDefault(_UserToolbarListItem);

var _sharedReactComponentsCommonAvatar = require('../../../../shared/react/components/common/Avatar');

var _sharedReactComponentsCommonAvatar2 = _interopRequireDefault(_sharedReactComponentsCommonAvatar);

var UserToolbarPrimaryList = (function () {
  function UserToolbarPrimaryList() {
    _classCallCheck(this, UserToolbarPrimaryList);
  }

  _createClass(UserToolbarPrimaryList, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var onDesignSettingsClick = _props.onDesignSettingsClick;
      var onFriendsClick = _props.onFriendsClick;
      var onNotificationsClick = _props.onNotificationsClick;
      var onMessagesClick = _props.onMessagesClick;
      var unreadAnonymousCount = _props.unreadAnonymousCount;
      var unreadBestCount = _props.unreadBestCount;
      var unreadConversationsCount = _props.unreadConversationsCount;
      var unreadFriendsCount = _props.unreadFriendsCount;
      var unreadLiveCount = _props.unreadLiveCount;
      var unreadLiveFlowCount = _props.unreadLiveFlowCount;
      var unreadNotificationsCount = _props.unreadNotificationsCount;
      var _props$user = _props.user;
      var slug = _props$user.slug;
      var tlog_url = _props$user.tlog_url;
      var userpic = _props$user.userpic;

      return _react2['default'].createElement(
        'ul',
        { className: 'toolbar__nav' },
        _react2['default'].createElement(
          _UserToolbarListItem2['default'],
          {
            title: i18n.t('avatar_toolbar_tooltip'),
            url: tlog_url
          },
          _react2['default'].createElement(_sharedReactComponentsCommonAvatar2['default'], { size: 30, userpic: userpic })
        ),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadFriendsCount,
          icon: 'icon--friends',
          title: i18n.t('feed_friends'),
          url: _sharedRoutesRoutes2['default'].friends_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadLiveFlowCount,
          icon: 'icon--hash',
          label: 'new',
          labelClassName: 'toolbar__label--new',
          title: i18n.t('toolbar_flows_item'),
          url: _sharedRoutesRoutes2['default'].flows()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadLiveCount,
          icon: 'icon--wave',
          title: i18n.t('feed_live'),
          url: _sharedRoutesRoutes2['default'].live_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadBestCount,
          icon: 'icon--fire',
          title: i18n.t('feed_best'),
          url: _sharedRoutesRoutes2['default'].best_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--people',
          title: i18n.t('feed_people'),
          url: _sharedRoutesRoutes2['default'].people_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadAnonymousCount,
          icon: 'icon--anonymous',
          title: i18n.t('feed_anonymous'),
          url: _sharedRoutesRoutes2['default'].anonymous_feed_path()
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'messages-badge',
          badgeCount: unreadConversationsCount,
          icon: 'icon--messages',
          onClick: onMessagesClick,
          title: i18n.t('toolbar_messages_item')
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          badgeClassName: 'notifications-badge',
          badgeCount: unreadNotificationsCount,
          icon: 'icon--bell',
          onClick: onNotificationsClick,
          title: i18n.t('toolbar_notifications_item')
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--star',
          title: i18n.t('toolbar_favorites_item'),
          url: _sharedRoutesRoutes2['default'].favorites_url(slug)
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--lock',
          title: i18n.t('toolbar_privates_item'),
          url: _sharedRoutesRoutes2['default'].private_entries_url(slug)
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--friends',
          onClick: onFriendsClick,
          title: i18n.t('toolbar_friends_item')
        }),
        _react2['default'].createElement(_UserToolbarListItem2['default'], {
          icon: 'icon--drawing',
          onClick: onDesignSettingsClick,
          title: i18n.t('toolbar_design_item'),
          url: _sharedRoutesRoutes2['default'].userDesignSettings(slug)
        })
      );
    }
  }]);

  return UserToolbarPrimaryList;
})();

UserToolbarPrimaryList.propTypes = {
  onDesignSettingsClick: _react.PropTypes.func.isRequired,
  onFriendsClick: _react.PropTypes.func.isRequired,
  onMessagesClick: _react.PropTypes.func.isRequired,
  onNotificationsClick: _react.PropTypes.func.isRequired,
  stayOpen: _react.PropTypes.bool.isRequired,
  unreadAnonymousCount: _react.PropTypes.number.isRequired,
  unreadBestCount: _react.PropTypes.number.isRequired,
  unreadConversationsCount: _react.PropTypes.number.isRequired,
  unreadFriendsCount: _react.PropTypes.number.isRequired,
  unreadLiveCount: _react.PropTypes.number.isRequired,
  unreadLiveFlowCount: _react.PropTypes.number.isRequired,
  unreadNotificationsCount: _react.PropTypes.number.isRequired,
  user: _react.PropTypes.object.isRequired
};

exports['default'] = UserToolbarPrimaryList;
module.exports = exports['default'];

},{"../../../../shared/react/components/common/Avatar":532,"../../../../shared/routes/routes":558,"./UserToolbarListItem":397,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],399:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var UserToolbarToggle = _react2["default"].createClass({
  displayName: "UserToolbarToggle",

  propTypes: {
    hasConversations: _react.PropTypes.bool.isRequired,
    hasNotifications: _react.PropTypes.bool.isRequired,
    onClick: _react.PropTypes.func.isRequired,
    onMouseEnter: _react.PropTypes.func.isRequired
  },

  render: function render() {
    return _react2["default"].createElement(
      "div",
      {
        className: "toolbar__toggle",
        onMouseEnter: this.onMouseEnter,
        onTouchTap: this.onClick
      },
      this.renderIndicators(),
      _react2["default"].createElement("i", { className: "icon icon--menu" })
    );
  },

  renderIndicators: function renderIndicators() {
    var conversationsIndicator = undefined,
        notificationsIndicator = undefined;

    if (this.props.hasConversations) {
      conversationsIndicator = _react2["default"].createElement("i", { className: "toolbar__m-indicator toolbar__m-indicator--messages" });
    }

    if (this.props.hasNotifications) {
      notificationsIndicator = _react2["default"].createElement("i", { className: "toolbar__m-indicator toolbar__m-indicator--notifications" });
    }

    return _react2["default"].createElement(
      "span",
      { className: "toolbar__m-indicators" },
      conversationsIndicator,
      notificationsIndicator
    );
  },

  onClick: function onClick() {
    this.props.onClick();
  },

  onMouseEnter: function onMouseEnter() {
    this.props.onMouseEnter();
  }
});

exports["default"] = UserToolbarToggle;
module.exports = exports["default"];

},{"babel-runtime/helpers/interop-require-default":574,"react":"react"}],400:[function(require,module,exports){
var EVENT_NAME_MAP, ReactTransitionGroup, TICK, TimeoutTransitionGroupChild, animationAllowed, animationSupported, bowser, detectEvents, endEvents;

bowser = require('bowser');

ReactTransitionGroup = require('react/lib/ReactTransitionGroup');

TICK = 17;

EVENT_NAME_MAP = {
  transitionend: {
    transition: 'transitionend',
    WebkitTransition: 'webkitTransitionEnd',
    MozTransition: 'mozTransitionEnd',
    OTransition: 'oTransitionEnd',
    msTransition: 'MSTransitionEnd'
  },
  animationend: {
    animation: 'animationend',
    WebkitAnimation: 'webkitAnimationEnd',
    MozAnimation: 'mozAnimationEnd',
    OAnimation: 'oAnimationEnd',
    msAnimation: 'MSAnimationEnd'
  }
};

endEvents = [];

(detectEvents = function() {
  var baseEventName, baseEvents, style, styleName, testEl;
  testEl = document.createElement('div');
  style = testEl.style;
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }
  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }
  for (baseEventName in EVENT_NAME_MAP) {
    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
      baseEvents = EVENT_NAME_MAP[baseEventName];
      for (styleName in baseEvents) {
        if (styleName in style) {
          endEvents.push(baseEvents[styleName]);
          break;
        }
      }
    }
  }
})();

animationSupported = function() {
  return endEvents.length !== 0;
};

animationAllowed = function() {
  var browser, browserName, browserVersion;
  browser = bowser.browser || bowser;
  browserName = browser.name;
  browserVersion = parseInt(browser.version);
  if (browserName === 'Firefox' && browserVersion < 34) {
    return false;
  }
  return true;
};

TimeoutTransitionGroupChild = React.createClass({
  transition: function(animationType, finishCallback) {
    var activeClassName, className, endListener, node;
    if (!animationAllowed()) {
      return typeof finishCallback === "function" ? finishCallback() : void 0;
    }
    node = this.getDOMNode();
    className = this.props.name + '-' + animationType;
    activeClassName = className + '-active';
    endListener = function() {
      $(node).removeClass(className);
      $(node).removeClass(activeClassName);
      return typeof finishCallback === "function" ? finishCallback() : void 0;
    };
    if (!animationSupported()) {
      endListener();
    } else {
      switch (animationType) {
        case 'enter':
          this.animationTimeout = setTimeout(endListener, this.props.enterTimeout);
          break;
        case 'leave':
          this.animationTimeout = setTimeout(endListener, this.props.leaveTimeout);
      }
    }
    $(node).addClass(className);
    return this.queueClass(activeClassName);
  },
  queueClass: function(className) {
    this.classNameQueue.push(className);
    if (!this.timeout) {
      return this.timeout = setTimeout(this.flushClassNameQueue, TICK);
    }
  },
  flushClassNameQueue: function() {
    if (this.isMounted()) {
      $(this.getDOMNode()).addClass(this.classNameQueue.join(' '));
    }
    this.classNameQueue.length = 0;
    return this.timeout = null;
  },
  componentWillMount: function() {
    return this.classNameQueue = [];
  },
  componentWillUnmount: function() {
    if (this.timeout != null) {
      clearTimeout(this.timeout);
    }
    if (this.animationTimeout != null) {
      return clearTimeout(this.animationTimeout);
    }
  },
  componentWillEnter: function(done) {
    if (this.props.enter) {
      return this.transition('enter', done);
    } else {
      return done();
    }
  },
  componentWillLeave: function(done) {
    if (this.props.leave) {
      return this.transition('leave', done);
    } else {
      return done();
    }
  },
  render: function() {
    return React.Children.only(this.props.children);
  }
});

window.TimeoutTransitionGroup = React.createClass({
  propTypes: {
    enterTimeout: React.PropTypes.number.isRequired,
    leaveTimeout: React.PropTypes.number.isRequired,
    transitionName: React.PropTypes.string.isRequired,
    transitionEnter: React.PropTypes.bool,
    transitionLeave: React.PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      transitionEnter: true,
      transitionLeave: true
    };
  },
  _wrapChild: function(child) {
    return React.createElement(TimeoutTransitionGroupChild, {
      "enterTimeout": this.props.enterTimeout,
      "leaveTimeout": this.props.leaveTimeout,
      "name": this.props.transitionName,
      "enter": this.props.transitionEnter,
      "leave": this.props.transitionLeave
    }, child);
  },
  render: function() {
    return React.createElement(ReactTransitionGroup, React.__spread({}, this.props, {
      "childFactory": this._wrapChild
    }));
  }
});


},{"bowser":"bowser","react/lib/ReactTransitionGroup":773}],401:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.Voting = React.createClass({
  mixins: [RequesterMixin, ComponentManipulationsMixin],
  propTypes: {
    entryId: React.PropTypes.number.isRequired,
    isVoteable: React.PropTypes.bool.isRequired,
    isVoted: React.PropTypes.bool.isRequired,
    votes: React.PropTypes.number.isRequired,
    rating: React.PropTypes.number.isRequired
  },
  getInitialState: function() {
    return {
      canVote: this.props.isVoteable,
      isVoted: this.props.isVoted,
      votes: this.props.votes,
      rating: this.props.rating,
      process: false
    };
  },
  componentDidMount: function() {
    var $voting;
    $voting = $(this.getDOMNode());
    return $voting.tooltip({
      placement: 'top',
      container: 'body'
    });
  },
  componentWillUnmount: function() {
    var $voting;
    $voting = $(this.getDOMNode());
    return $voting.tooltip('destroy');
  },
  render: function() {
    var title, votes, votingClasses;
    title = this.getTitle();
    votingClasses = classnames('voting', {
      'votable': this.state.canVote,
      'unvotable': !this.state.canVote,
      'voted': this.state.isVoted
    });
    votes = this.state.process ? React.createElement(Spinner, {
      "size": 8.
    }) : this.state.votes;
    return React.createElement("span", {
      "className": votingClasses,
      "data-original-title": title,
      "onClick": this.handleClick
    }, votes);
  },
  handleClick: function() {
    if (this.state.isVoted || !this.state.canVote) {
      return;
    }
    this.setState({
      process: true
    });
    return this.createRequest({
      url: ApiRoutes.votes_url(this.props.entryId),
      method: 'POST',
      success: (function(_this) {
        return function(data) {
          return _this.safeUpdateState({
            isVoted: data.is_voted,
            canVote: data.is_voteable,
            votes: data.votes,
            rating: data.votes
          });
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.safeUpdateState({
            process: false
          });
        };
      })(this)
    });
  },
  getTitle: function() {
    var title;
    if (this.state.canVote && !this.state.isVoted) {
      title = i18n.t('vote');
    } else if (this.state.isVoted) {
      title = i18n.t('voted');
    } else {
      title = i18n.t('cant_vote');
    }
    return '(Рейтинг ' + this.state.rating + ') ' + title;
  }
});


},{"classnames":647}],402:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var CROSSPOST_OUT = "out";
exports.CROSSPOST_OUT = CROSSPOST_OUT;
var CROSSPOST_NONE = "none";
exports.CROSSPOST_NONE = CROSSPOST_NONE;

},{}],403:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibKeyMirror = require('react/lib/keyMirror');

var _reactLibKeyMirror2 = _interopRequireDefault(_reactLibKeyMirror);

exports['default'] = (0, _reactLibKeyMirror2['default'])({
  ENTRIES_SET_ENTRIES: null,
  ENTRIES_SET_HAS_MORE: null,
  ENTRIES_SET_NEXT_PAGE: null,
  ENTRIES_SET_NEXT_PAGE_PARAM: null,
  ENTRIES_SET_NEXT_PAGE_FIELD: null,
  ENTRIES_SET_IS_LOADING: null,
  ENTRIES_SET_LIMIT: null,
  ENTRIES_SET_LOAD_URL: null
});
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/keyMirror":830}],404:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var ENTRY_PINNED_STATE = 'fixed';
exports.ENTRY_PINNED_STATE = ENTRY_PINNED_STATE;
var ENTRY_AWAITING_PAYMENT_STATE = 'wait_fixed';

exports.ENTRY_AWAITING_PAYMENT_STATE = ENTRY_AWAITING_PAYMENT_STATE;
var ENTRY_TYPE_TEXT = 'text';
exports.ENTRY_TYPE_TEXT = ENTRY_TYPE_TEXT;
var ENTRY_TYPE_IMAGE = 'image';
exports.ENTRY_TYPE_IMAGE = ENTRY_TYPE_IMAGE;
var ENTRY_TYPE_QUOTE = 'quote';
exports.ENTRY_TYPE_QUOTE = ENTRY_TYPE_QUOTE;
var ENTRY_TYPE_VIDEO = 'video';
exports.ENTRY_TYPE_VIDEO = ENTRY_TYPE_VIDEO;
var ENTRY_TYPE_LINK = 'link';
exports.ENTRY_TYPE_LINK = ENTRY_TYPE_LINK;
var ENTRY_TYPE_SONG = 'song';
exports.ENTRY_TYPE_SONG = ENTRY_TYPE_SONG;
var ENTRY_TYPE_CODE = 'code';
exports.ENTRY_TYPE_CODE = ENTRY_TYPE_CODE;
var ENTRY_TYPE_CONVO = 'convo';
exports.ENTRY_TYPE_CONVO = ENTRY_TYPE_CONVO;
var ENTRY_TYPE_ANONYMOUS = 'anonymous';

exports.ENTRY_TYPE_ANONYMOUS = ENTRY_TYPE_ANONYMOUS;
var ENTRY_TYPES = [ENTRY_TYPE_TEXT, ENTRY_TYPE_IMAGE, ENTRY_TYPE_VIDEO, ENTRY_TYPE_QUOTE, ENTRY_TYPE_LINK, ENTRY_TYPE_SONG, ENTRY_TYPE_CODE];
exports.ENTRY_TYPES = ENTRY_TYPES;

},{}],405:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibKeyMirror = require('react/lib/keyMirror');

var _reactLibKeyMirror2 = _interopRequireDefault(_reactLibKeyMirror);

exports['default'] = (0, _reactLibKeyMirror2['default'])({
  FEED_LIVE_NEW_ENTRY: null,
  FEED_LIVE_RESET: null,
  FEED_LIVE_INITIAL_COUNT: null,
  FEED_BEST_NEW_ENTRY: null,
  FEED_BEST_RESET: null,
  FEED_BEST_INITIAL_COUNT: null,
  FEED_FRIENDS_NEW_ENTRY: null,
  FEED_FRIENDS_RESET: null,
  FEED_FRIENDS_INITIAL_COUNT: null,
  FEED_ANONYMOUS_NEW_ENTRY: null,
  FEED_ANONYMOUS_RESET: null,
  FEED_LIVE_FLOW_NEW_ENTRY: null,
  FEED_LIVE_FLOW_RESET: null
});
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/keyMirror":830}],406:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var PIN_ENTRY_ORDER = 'FixedEntryOrder';
exports.PIN_ENTRY_ORDER = PIN_ENTRY_ORDER;

},{}],407:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibKeyMirror = require('react/lib/keyMirror');

var _reactLibKeyMirror2 = _interopRequireDefault(_reactLibKeyMirror);

exports['default'] = (0, _reactLibKeyMirror2['default'])({
  USER_ONBOARDING_SET_ISLOADING: null,
  USER_ONBOARDING_SET_MORE: null,
  USER_ONBOARDING_SET_RELATIONSHIPS: null
});
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/keyMirror":830}],408:[function(require,module,exports){
var ApiConstants, keyMirror;

keyMirror = require('react/lib/keyMirror');

ApiConstants = keyMirror({
  SEARCH_LOAD_NEXT_PAGE: null,
  EDITOR_CREATE_IMAGE_ATTACHMENT: null,
  EDITOR_CREATE_EMBED: null,
  EDITOR_CREATE_ENTRY: null,
  EDITOR_UPDATE_ENTRY: null,
  DESIGN_SAVE: null,
  CREATE_BG_IMAGE: null,
  LOAD_NOTIFICATIONS: null,
  READ_NOTIFICATION: null,
  UNFOLLOW_TLOG: null,
  UNFOLLOW_TLOG_FROM_YOURSELF: null,
  FOLLOW_TLOG: null,
  CANCEL_TLOG: null,
  IGNORE_TLOG: null,
  APPROVE_REQUEST_TLOG: null,
  DISAPPROVE_REQUEST_TLOG: null,
  VOTE_ENTRY: null,
  ADD_TO_FAVORITES_ENTRY: null,
  REMOVE_FROM_FAVORITES_ENTRY: null,
  ADD_TO_WATCHING_ENTRY: null,
  REMOVE_FROM_WATCHING_ENTRY: null,
  REPORT_ENTRY: null,
  DELETE_ENTRY: null,
  ACCEPT_ENTRY: null,
  REPOST_ENTRY: null,
  DECLINE_ENTRY: null,
  LOAD_ENTRIES: null,
  LOAD_HTML_ENTRIES: null,
  PREDICT_USERS: null,
  CREATE_FLOW: null,
  UPDATE_FLOW: null,
  LOAD_FLOWS: null,
  LOAD_MY_FLOWS: null,
  LOAD_AVAILABLE_FLOWS: null,
  ADD_STAFF_FLOW: null,
  REMOVE_STAFF_FLOW: null,
  CREATE_COMMENT: null,
  REPORT_COMMENT: null,
  EDIT_COMMENT: null,
  DELETE_COMMENT: null,
  USER_ONBOARDING_LOAD: null
});

module.exports = ApiConstants;


},{"react/lib/keyMirror":830}],409:[function(require,module,exports){
var ApiConstants, EditorConstants, UserToolbarConstants;

ApiConstants = require('./api');

UserToolbarConstants = require('./userToolbar');

EditorConstants = require('./editor');

module.exports = {
  api: ApiConstants,
  userToolbar: UserToolbarConstants,
  editor: EditorConstants
};


},{"./api":408,"./editor":411,"./userToolbar":413}],410:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibKeyMirror = require('react/lib/keyMirror');

var _reactLibKeyMirror2 = _interopRequireDefault(_reactLibKeyMirror);

var DesignConstants = (0, _reactLibKeyMirror2['default'])({
  INIT_CURRENT: null,
  CHANGE_OPTION: null,
  CLOSE_DESIGN_SETTINGS: null,
  SAVE_CURRENT_SUCCESS: null,
  SAVE_CURRENT_FAIL: null,
  SAVE_CURRENT_START: null
});

exports['default'] = DesignConstants;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/keyMirror":830}],411:[function(require,module,exports){
var EditorConstants, keyMirror;

keyMirror = require('react/lib/keyMirror');

EditorConstants = keyMirror({
  INIT: null,
  UPDATE_FIELD: null,
  CHANGE_TYPE: null,
  CHANGE_PRIVACY: null,
  ENTRY_SAVE: null,
  ENTRY_SAVE_SUCCESS: null,
  ENTRY_SAVE_ERROR: null,
  ENTRY_CREATING_ATTACHMENTS_START: null,
  ENTRY_CREATING_ATTACHMENTS_END: null,
  ENTRY_PIN: null
});

module.exports = EditorConstants;


},{"react/lib/keyMirror":830}],412:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibKeyMirror = require('react/lib/keyMirror');

var _reactLibKeyMirror2 = _interopRequireDefault(_reactLibKeyMirror);

var NotificationConstants = (0, _reactLibKeyMirror2['default'])({
  LOAD: null,
  LOAD_SUCCESS: null,
  LOAD_ERROR: null,
  LOAD_MORE: null,
  LOAD_MORE_SUCCESS: null,
  LOAD_MORE_ERROR: null,
  MARK_AS_READ_SUCCESS: null
});

exports['default'] = NotificationConstants;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/keyMirror":830}],413:[function(require,module,exports){
var UserToolbarConstants, keyMirror;

keyMirror = require('react/lib/keyMirror');

UserToolbarConstants = keyMirror({
  INIT_VISIBILITY: null,
  TOGGLE_VISIBILITY: null
});

module.exports = UserToolbarConstants;


},{"react/lib/keyMirror":830}],414:[function(require,module,exports){
var GuideController;

GuideController = {
  start: function() {
    var intro, userToolbar, userToolbarClicked, userToolbarItem;
    userToolbar = document.querySelectorAll(".toolbar--nav")[1];
    userToolbarItem = $(userToolbar).find(".toolbar__popup-item").eq(0).get(0);
    userToolbarClicked = false;
    intro = introJs.introJs();
    intro.setOptions({
      steps: [
        {
          intro: "<div class='introjs-tooltiptitle'>Добро пожаловать на Taaasty!</div> Это дневник, в который хочется писать каждый день"
        }, {
          intro: "<div class='introjs-tooltiptitle'>Сейчас мы познакомим Вас с&nbsp;основными элементами</div> Мы постараемся рассказать про каждый элемент отдельно, чтобы Вы прочуствовали все возможности Taaasty. Жмите &laquo;Далее&raquo; и приступим :)"
        }, {
          element: document.querySelectorAll(".post")[1],
          intro: "<div class='introjs-tooltiptitle'>Напишите что-нибудь или добавьте фотографию</div> Вы можете размещать фотографии, писать тексты, постить ссылки с любимых сервисов. Мы поддерживаем instagram, youtube и еще более 500 сервисов",
          position: "left"
        }, {
          element: document.querySelector(".hero__box"),
          intro: "<div class='introjs-tooltiptitle'>Заголовок тлога &mdash; это профиль</div> Вся информация о тлоге в одном месте. Просто раскройте кликом мыши. Там же можно подписаться/отписаться",
          position: "bottom"
        }, {
          element: userToolbarItem,
          intro: "<div class='introjs-tooltiptitle'>Делитесь своими мыслями в социальных сетях</div> Интересные мысли, которыми хотелось бы поделиться со всем миром?",
          position: "left"
        }, {
          element: document.querySelector(".social-share"),
          intro: "<div class='introjs-tooltiptitle'>Делитесь своими мыслями в социальных сетях</div> Интересные мысли, которыми хотелось бы поделиться со всем миром?",
          position: "right"
        }
      ],
      nextLabel: "Дальше",
      prevLabel: "Назад",
      skipLabel: "Отменить",
      doneLabel: "Конец",
      exitOnEsc: false,
      exitOnOverlayClick: false,
      showStepNumbers: false,
      showBullets: false,
      showProgress: true,
      overlayOpacity: .92
    });
    intro.onafterchange(function() {
      var className, skipButton;
      skipButton = document.querySelector(".introjs-skipbutton");
      className = skipButton.className + "introjs-visible";
      if (intro._currentStep === (intro._introItems.length - 1)) {
        skipButton.className = className;
      }
      if (intro._currentStep === 4) {
        userToolbar.click();
        return userToolbarClicked = true;
      } else if (userToolbarClicked) {
        userToolbar.click();
        return userToolbarClicked = false;
      }
    });
    return intro.start();
  }
};

module.exports = GuideController;


},{}],415:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var LayoutStatesController = (function () {
  function LayoutStatesController() {
    var layoutEl = arguments.length <= 0 || arguments[0] === undefined ? document.body : arguments[0];

    _classCallCheck(this, LayoutStatesController);

    this.layoutEl = layoutEl;
    this.states = {
      userToolbar: 'main-toolbar-open',
      browserIncompatable: 'browserbar-enabled'
    };
  }

  _createClass(LayoutStatesController, [{
    key: 'toggleState',
    value: function toggleState(UIelement, value) {
      var stateName = this.states[UIelement];
      // Используем add и remove вместо toggle, чтобы явно следовать внутренним стейтам
      // компонентов. Если у в лейауте был класс компонента, а из компонента пришло
      // что нужно его установить, то мы просто вызываем add, который ничего не испортит.
      // Если же будет toggle, то он уберёт класс компонента и будет рассинхрон.
      var methodName = value ? 'add' : 'remove';
      this.layoutEl.classList[methodName](stateName);
    }
  }]);

  return LayoutStatesController;
})();

exports['default'] = LayoutStatesController;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569}],416:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _componentsPadPadContainer = require('../components/Pad/PadContainer');

var _componentsPadPadContainer2 = _interopRequireDefault(_componentsPadPadContainer);

var PadController = (function () {
  function PadController() {
    _classCallCheck(this, PadController);

    this.containerAttribute = 'pad-container';
  }

  _createClass(PadController, [{
    key: 'getContainer',
    value: function getContainer() {
      var container = document.querySelector('[' + this.containerAttribute + ']');

      if (container == null) {
        container = document.createElement('div');
        container.setAttribute(this.containerAttribute, '');
        document.body.appendChild(container);
      }

      return container;
    }
  }, {
    key: 'open',
    value: function open(Component, props) {
      var container = this.getContainer();

      React.render(React.createElement(
        _componentsPadPadContainer2['default'],
        _extends({}, props, { onClose: this.close.bind(this) }),
        React.createElement(Component, null)
      ), container);
    }
  }, {
    key: 'close',
    value: function close() {
      var container = this.getContainer();
      React.unmountComponentAtNode(container);
      container.parentNode.removeChild(container);
    }
  }]);

  return PadController;
})();

exports['default'] = PadController;
module.exports = exports['default'];

},{"../components/Pad/PadContainer":196,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574}],417:[function(require,module,exports){
window.ReactPopup = (function() {
  function ReactPopup() {
    this.popupContainer = $('<\div>').appendTo('body').get(0);
  }

  ReactPopup.prototype.show = function(reactClass, args) {
    return React.render(React.createElement(PopupBox, React.__spread({}, args), React.createElement("reactClass", React.__spread({}, args))), this.popupContainer);
  };

  ReactPopup.prototype.close = function() {
    return _.defer((function(_this) {
      return function() {
        return React.unmountComponentAtNode(_this.popupContainer);
      };
    })(this));
  };

  return ReactPopup;

})();


},{}],418:[function(require,module,exports){
var Popup, PopupArea, PopupController, _;

_ = require('lodash');

Popup = require('../components/PopupComponent/Popup');

PopupArea = require('../components/PopupComponent/PopupArea');

PopupController = (function() {
  function PopupController() {}

  PopupController.prototype.containerAttribute = 'popup-container';

  PopupController.prototype.popupBGContainerAttribute = 'popup-bg-container';

  PopupController.prototype.addContainer = function(containerAttribute) {
    var container;
    container = document.querySelector("[" + containerAttribute + "]");
    if (container == null) {
      container = document.createElement('div');
      container.setAttribute(containerAttribute, '');
      document.body.appendChild(container);
    }
    return container;
  };

  PopupController.prototype.removeContainer = function(container) {
    var ref;
    return (ref = container.parentNode) != null ? ref.removeChild(container) : void 0;
  };

  PopupController.prototype.open = function(arg) {
    var Component, container, containerAttribute, popupProps, props;
    Component = arg.Component, props = arg.props, popupProps = arg.popupProps, containerAttribute = arg.containerAttribute;
    if (containerAttribute == null) {
      containerAttribute = this.containerAttribute;
    }
    container = this.addContainer(containerAttribute);
    popupProps.onClose = this.handleClose.bind(this, containerAttribute);
    return React.render(React.createElement(Popup, React.__spread({}, popupProps), React.createElement(Component, React.__spread({}, props))), container);
  };

  PopupController.prototype.openWithBackground = function(arg) {
    var Component, container, containerAttribute, onClose, popupProps, props;
    Component = arg.Component, props = arg.props, popupProps = arg.popupProps, containerAttribute = arg.containerAttribute;
    if (containerAttribute == null) {
      containerAttribute = this.popupBGContainerAttribute;
    }
    container = this.addContainer(containerAttribute);
    $('body').addClass('popup-enabled');
    onClose = (function(_this) {
      return function() {
        return _.defer(function() {
          return _this.handleCloseWithBackground(containerAttribute);
        });
      };
    })(this);
    return React.render(React.createElement(PopupArea, {
      "onClose": onClose
    }, React.createElement(Popup, React.__spread({}, popupProps, {
      "withBackground": true,
      "onClose": onClose
    }), React.createElement(Component, React.__spread({}, props)))), container);
  };

  PopupController.prototype.openPopup = function(PopupComponent, props, containerAttribute) {
    var container, onClose;
    if (containerAttribute == null) {
      containerAttribute = this.containerAttribute;
    }
    container = this.addContainer(containerAttribute);
    onClose = this.handleClose.bind(this, containerAttribute);
    if (props != null ? props.onClose : void 0) {
      onClose = (function(_this) {
        return function() {
          props.onClose();
          return _this.handleClose(containerAttribute);
        };
      })(this);
    }
    return React.render(React.createElement(PopupComponent, React.__spread({}, props, {
      "onClose": onClose
    })), container);
  };

  PopupController.prototype.close = function(containerAttribute) {
    var container;
    if (containerAttribute == null) {
      containerAttribute = this.containerAttribute;
    }
    container = document.querySelector("[" + containerAttribute + "]");
    React.unmountComponentAtNode(container);
    return this.removeContainer(container);
  };

  PopupController.prototype.handleClose = function(containerAttribute) {
    return this.close(containerAttribute);
  };

  PopupController.prototype.handleCloseWithBackground = function(containerAttribute) {
    $('body').removeClass('popup-enabled');
    return this.close(containerAttribute);
  };

  return PopupController;

})();

module.exports = PopupController;


},{"../components/PopupComponent/Popup":197,"../components/PopupComponent/PopupArea":198,"lodash":"lodash"}],419:[function(require,module,exports){
window.ReactShellBox = (function() {
  function ReactShellBox() {
    var container;
    container = document.querySelectorAll('[shellbox-container]')[0];
    if (!container) {
      container = $('<\div>', {
        'shellbox-container': ''
      }).appendTo('body')[0];
    }
    this.shellboxContainer = container;
  }

  ReactShellBox.prototype.show = function(Component, args) {
    return React.render(React.createElement(ShellBox, null, React.createElement(Component, React.__spread({}, args))), this.shellboxContainer);
  };

  ReactShellBox.prototype.close = function() {
    return _.defer((function(_this) {
      return function() {
        return React.unmountComponentAtNode(_this.shellboxContainer);
      };
    })(this));
  };

  return ReactShellBox;

})();


},{}],420:[function(require,module,exports){
window.TastyAlertController = {
  show: function(arg) {
    var buttonColor, buttonText, container, message, onAccept, regex, title;
    title = arg.title, message = arg.message, buttonText = arg.buttonText, buttonColor = arg.buttonColor, onAccept = arg.onAccept;
    if (isMobile()) {
      regex = /<br\s*[\/]?>/gi;
      message = message.replace(regex, '\n');
      alert(message);
      if (onAccept != null) {
        return onAccept();
      }
    } else {
      container = document.querySelectorAll('[tasty-alert-container]')[0];
      if (!container) {
        container = $('<\div>', {
          'tasty-alert-container': ''
        }).appendTo('body')[0];
      }
      return React.render(React.createElement(TastyAlert, {
        "title": title,
        "message": message,
        "buttonText": buttonText,
        "buttonColor": buttonColor,
        "onAccept": onAccept
      }), container);
    }
  }
};


},{}],421:[function(require,module,exports){
window.TastyConfirmController = {
  show: function(arg) {
    var acceptButtonColor, acceptButtonText, container, message, messageWithoutBR, onAccept, regex, rejectButtonText;
    message = arg.message, acceptButtonText = arg.acceptButtonText, rejectButtonText = arg.rejectButtonText, acceptButtonColor = arg.acceptButtonColor, onAccept = arg.onAccept;
    if (isMobile()) {
      regex = /<br\s*[\/]?>/gi;
      messageWithoutBR = message.replace(regex, '\n');
      if (confirm(messageWithoutBR)) {
        if (_.isFunction(onAccept)) {
          return onAccept.call();
        }
      }
    } else {
      container = document.querySelectorAll('[tasty-confirm-container]')[0];
      if (!container) {
        container = $('<\div>', {
          'tasty-confirm-container': ''
        }).appendTo('body')[0];
      }
      return React.render(React.createElement(TastyConfirm, {
        "message": message,
        "acceptButtonText": acceptButtonText,
        "rejectButtonText": rejectButtonText,
        "acceptButtonColor": acceptButtonColor,
        "onAccept": onAccept
      }), container);
    }
  }
};


},{}],422:[function(require,module,exports){
window.TastyEvents = new EventEmitter();

TastyEvents.keys = {
  follow_status_changed: function(tlogId) {
    return "follow_status:" + tlogId + ":changed";
  },
  hero_closed: function() {
    return 'hero:closed';
  },
  comment_replied: function(entryId) {
    return "comment:" + entryId + ":replied";
  },
  comment_form_toggled: function() {
    return 'comment_form:toggled';
  },
  user_property_changed: function(propertyName, userId) {
    return propertyName + ":" + userId + ":changed";
  },
  command_current_notification_hide: function() {
    return 'command:current_notification:hide';
  },
  message_list_scrolled: function() {
    return 'message_list:scrolled';
  },
  user_toolbar_closed: function() {
    return 'user_toolbar:closed';
  },
  user_toolbar_opened: function() {
    return 'user_toolbar:opened';
  },
  command_hero_open: function() {
    return 'command:hero:open';
  },
  command_hero_close: function() {
    return 'command:hero:close';
  },
  command_settings_open: function() {
    return 'command:settings:open';
  },
  command_design_settings_open: function() {
    return 'command:design_settings:open';
  },
  command_requested_open: function() {
    return 'command:requested:open';
  },
  command_vkontakte_open: function() {
    return 'command:vkontakte:open';
  },
  command_facebook_open: function() {
    return 'command:facebook:open';
  }
};


},{}],423:[function(require,module,exports){
window.TastyLockingAlertController = {
  show: function(arg) {
    var action, container, message, regex, title;
    title = arg.title, message = arg.message, action = arg.action;
    if (isMobile()) {
      regex = /<br\s*[\/]?>/gi;
      message = message.replace(regex, '\n');
      alert(message);
      if (action != null) {
        return action();
      }
    } else {
      container = document.querySelectorAll('[tasty-alert-container]')[0];
      if (!container) {
        container = $('<\div>', {
          'tasty-alert-container': ''
        }).appendTo('body')[0];
      }
      return React.render(React.createElement(TastyLockingAlert, {
        "title": title,
        "message": message,
        "action": action
      }), container);
    }
  }
};


},{}],424:[function(require,module,exports){
var BaseDispatcher,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseDispatcher = (function(superClass) {
  extend(BaseDispatcher, superClass);

  function BaseDispatcher() {
    return BaseDispatcher.__super__.constructor.apply(this, arguments);
  }

  BaseDispatcher.prototype.handleViewAction = function(action) {
    return this.dispatch({
      source: 'VIEW_ACTION',
      action: action
    });
  };

  BaseDispatcher.prototype.handleServerAction = function(action) {
    return this.dispatch({
      source: 'SERVER_ACTION',
      action: action
    });
  };

  return BaseDispatcher;

})(Dispatcher);

module.exports = BaseDispatcher;


},{}],425:[function(require,module,exports){
var BaseDispatcher;

BaseDispatcher = require('./_base');

window.CurrentUserDispatcher = _.extend(new BaseDispatcher(), {
  setupUser: function(user) {
    return this.handleServerAction({
      type: 'setup',
      user: user
    });
  }
});


},{"./_base":424}],426:[function(require,module,exports){
var AppDispatcher, Dispatcher, _;

_ = require('lodash');

Dispatcher = require('flux').Dispatcher;

AppDispatcher = _.extend(new Dispatcher(), {
  handleViewAction: function(action) {
    return this.dispatch({
      source: 'VIEW_ACTION',
      action: action
    });
  },
  handleServerAction: function(action) {
    return this.dispatch({
      source: 'SERVER_ACTION',
      action: action
    });
  }
});

module.exports = AppDispatcher;


},{"flux":648,"lodash":"lodash"}],427:[function(require,module,exports){
window.RelationshipsDispatcher = _.extend(new Dispatcher(), {
  handleViewAction: function(action) {
    var payload;
    payload = {
      source: 'viewAction',
      action: action
    };
    return this.dispatch(payload);
  },
  handleServerAction: function(action) {
    var payload;
    payload = {
      source: 'serverAction',
      action: action
    };
    return this.dispatch(payload);
  }
});


},{}],428:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Timer = function Timer(callback, delay) {
  _classCallCheck(this, Timer);

  var timerID = undefined,
      start = undefined,
      remaining = delay;

  this.pause = function () {
    window.clearTimeout(timerID);
    remaining -= new Date() - start;
  };

  this.resume = function () {
    start = new Date();
    window.clearTimeout(timerID);
    timerID = window.setTimeout(callback, remaining);
  };

  this.resume();
};

exports["default"] = Timer;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568}],429:[function(require,module,exports){
var Design, _;

_ = require('lodash');

Design = (function() {
  function Design(data) {
    _.extend(this, data);
  }

  Design.prototype.headerFont = null;

  Design.prototype.headerSize = null;

  Design.prototype.headerColor = null;

  Design.prototype.backgroundColor = null;

  Design.prototype.backgroundImageUrl = null;

  Design.prototype.backgroundImageEnabled = null;

  Design.prototype.backgroundAlignment = null;

  Design.prototype.feedBackgroundColor = null;

  Design.prototype.feedFont = null;

  Design.prototype.feedFontColor = null;

  Design.prototype.feedOpacity = null;

  return Design;

})();

module.exports = Design;


},{"lodash":"lodash"}],430:[function(require,module,exports){
var Design, DesignSet;

Design = require('./design');

DesignSet = (function() {
  function DesignSet(data) {
    this.origin = new Design(data);
    this.current = new Design(data);
  }

  return DesignSet;

})();

module.exports = DesignSet;


},{"./design":429}],431:[function(require,module,exports){
var NormalizedEntry, _;

_ = require('lodash');

NormalizedEntry = (function() {
  function NormalizedEntry(data) {
    _.extend(this, data);
  }

  return NormalizedEntry;

})();

module.exports = NormalizedEntry;


},{"lodash":"lodash"}],432:[function(require,module,exports){
/*global i18n */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.metabarAuthor = metabarAuthor;

function metabarAuthor(_ref) {
  var author = _ref.author;
  var tlog = _ref.tlog;
  var host_tlog_id = _ref.host_tlog_id;

  if (tlog != null && author != null) {
    if (host_tlog_id == null) {
      if (author.id === tlog.id) {
        return '<a class="meta-item__link" href="' + author.url + '">' + author.tag + '</a>';
      } else {
        return i18n.t('entry.meta.author_posted_in', {
          context: author.gender,
          author: author.tag,
          authorUrl: author.url,
          tlog: tlog.tag,
          tlogUrl: tlog.url
        });
      }
    } else if (host_tlog_id === tlog.id) {
      if (author.id !== tlog.id) {
        return i18n.t('entry.meta.author_posted_in', {
          context: author.gender,
          author: author.tag,
          authorUrl: author.url,
          tlog: tlog.tag,
          tlogUrl: tlog.url
        });
      } else {
        return null;
      }
    } else if (host_tlog_id !== tlog.id) {
      if (author.id === tlog.id) {
        return i18n.t('entry.meta.repost_from', { tag: tlog.tag, url: tlog.url });
      } else {
        return i18n.t('entry.meta.author_posted_in', {
          context: author.gender,
          author: author.tag,
          authorUrl: author.url,
          tlog: tlog.tag,
          tlogUrl: tlog.url
        });
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
}

},{}],433:[function(require,module,exports){
window.AppHelpers = {
  reselectAndFocus: function(node) {
    node.focus();
    return this.selectAllText(node);
  },
  selectAllText: function(node) {
    var value, valueLength;
    value = node.value;
    valueLength = value.length;
    if (node.setSelectionRange != null) {
      return node.setSelectionRange(0, valueLength);
    } else {
      return node.value = value;
    }
  }
};


},{}],434:[function(require,module,exports){
var CLOSED_STATE, COMMENT_CREATE_STATE, COMMENT_EDIT_STATE;

CLOSED_STATE = 'closed';

COMMENT_CREATE_STATE = 'commentCreateForm';

COMMENT_EDIT_STATE = 'commentEditForm';

window.CommentsMediator = (function() {
  function CommentsMediator() {
    this._state = CLOSED_STATE;
    this._forms = [];
  }

  CommentsMediator.prototype.setState = function(newState) {
    return this._state = newState;
  };

  CommentsMediator.prototype.registerForm = function(component) {
    if (!this._isFormRegistered(component)) {
      if (typeof component.isCurrentlyOpen === "function" ? component.isCurrentlyOpen() : void 0) {
        this.setState(component);
      }
      return this._forms.push(component);
    }
  };

  CommentsMediator.prototype.unregisterForm = function(component) {
    return this._forms = _.without(this._forms, component);
  };

  CommentsMediator.prototype.openAndReply = function(entryId, name) {
    var form;
    form = this._getForm(entryId);
    form.openAndReply(name);
    return this.setState(form);
  };

  CommentsMediator.prototype.openForm = function(entryId, commentId) {
    var form;
    form = this._getForm(entryId, commentId);
    form.openForm();
    return this.setState(form);
  };

  CommentsMediator.prototype.closeCurrentForm = function() {
    var base;
    if (typeof (base = this._state).closeForm === "function") {
      base.closeForm();
    }
    return this.setState(CLOSED_STATE);
  };

  CommentsMediator.prototype.doCommentClicked = function(entryId) {
    if (!this._isFormOpened(entryId)) {
      this.closeCurrentForm();
    }
    return this.openForm(entryId);
  };

  CommentsMediator.prototype.doReplyClicked = function(entryId, name) {
    if (!this._isFormOpened(entryId)) {
      this.closeCurrentForm();
    }
    return this.openAndReply(entryId, name);
  };

  CommentsMediator.prototype.doEdit = function(entryId, commentId) {
    if (!this._isFormOpened(entryId, commentId)) {
      this.closeCurrentForm();
    }
    return this.openForm(entryId, commentId);
  };

  CommentsMediator.prototype.doFormClosed = function() {
    this.closeCurrentForm();
    return this.setState(CLOSED_STATE);
  };

  CommentsMediator.prototype._getForm = function(entryId, commentId) {
    var result;
    if (commentId != null) {
      result = this._forms.filter((function(_this) {
        return function(form) {
          return form.props.commentId === commentId;
        };
      })(this));
    } else {
      result = this._forms.filter((function(_this) {
        return function(form) {
          return form.props.entryId === entryId;
        };
      })(this));
    }
    return result[0];
  };

  CommentsMediator.prototype._isFormRegistered = function(component) {
    var result;
    if (component.props.commentId != null) {
      result = this._forms.filter((function(_this) {
        return function(form) {
          return form.props.commentId === component.props.commentId;
        };
      })(this));
    } else {
      result = this._forms.filter((function(_this) {
        return function(form) {
          return form.props.entryId === component.props.entryId;
        };
      })(this));
    }
    return result.length > 0;
  };

  CommentsMediator.prototype._isFormOpened = function(entryId, commentId) {
    if (!this._isClosed()) {
      return this._state.props.entryId === entryId && this._state.props.commentId === commentId;
    } else {
      return false;
    }
  };

  CommentsMediator.prototype._isClosed = function() {
    return this._state === CLOSED_STATE;
  };

  return CommentsMediator;

})();

window.commentsMediator = new CommentsMediator();


},{}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var ConversationActions = {
  clickConversation: function clickConversation(conversationId) {
    return MessagingDispatcher.handleViewAction({
      type: 'openConversation',
      conversationId: conversationId
    });
  },

  openConversation: function openConversation(recipientId) {
    var conversation = ConversationsStore.getConversationByUserId(recipientId);

    if (conversation) {
      MessagingDispatcher.handleViewAction({
        type: 'openConversation',
        conversationId: conversation.id
      });
    } else {
      messagingService.postNewConversation({ recipientId: recipientId });
    }

    messagingService.openMessagesPopup();
    return TastyEvents.emit(TastyEvents.keys.command_hero_close());
  },

  postNewConversation: function postNewConversation(_ref) {
    var recipientId = _ref.recipientId;
    var error = _ref.error;

    return messagingService.postNewConversation({ recipientId: recipientId, error: error });
  }
};

exports['default'] = ConversationActions;
module.exports = exports['default'];

},{}],436:[function(require,module,exports){
window.MessageActions = {
  newMessage: function(arg) {
    var content, conversationId, files, uuid;
    conversationId = arg.conversationId, content = arg.content, files = arg.files;
    uuid = UuidService.generate();
    MessagingDispatcher.messageSubmitted({
      conversationId: conversationId,
      content: content,
      files: files,
      uuid: uuid
    });
    return messagingService.postMessage({
      conversationId: conversationId,
      content: content,
      files: files,
      uuid: uuid
    });
  },
  readMessage: function(conversationId, messageId) {
    return messagingService.markAsReadMessage(conversationId, messageId);
  },
  resendMessage: function(arg) {
    var content, conversationId, files, uuid;
    conversationId = arg.conversationId, content = arg.content, files = arg.files, uuid = arg.uuid;
    return messagingService.postMessage({
      conversationId: conversationId,
      content: content,
      files: files,
      uuid: uuid
    });
  },
  loadMoreMessages: function(arg) {
    var conversationId, toMessageId;
    conversationId = arg.conversationId, toMessageId = arg.toMessageId;
    return messagingService.loadMoreMessages(conversationId, toMessageId);
  }
};


},{}],437:[function(require,module,exports){
window.NotificationActions = {
  readNotification: function(notificationId) {
    console.log('читаем уведомление', notificationId);
    return messagingService.markAsReadNotification(notificationId);
  }
};


},{}],438:[function(require,module,exports){
window.PopupActions = {
  closeMessagesPopup: function() {
    messagingService.closeMessagesPopup();
    return MessagingDispatcher.handleViewAction({
      type: 'closeMessagesPopup'
    });
  },
  closeNotificationsPopup: function() {
    return messagingService.closeNotificationsPopup();
  },
  openMessagesPopup: function() {
    return messagingService.openMessagesPopup();
  },
  openNotificationsPopup: function() {
    return messagingService.openNotificationsPopup();
  },
  toggleMessagesPopup: function() {
    return messagingService.toggleMessagesPopup();
  },
  toggleNotificationsPopup: function() {
    return messagingService.toggleNotificationsPopup();
  }
};


},{}],439:[function(require,module,exports){
/*global i18n */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var MessagesPopupUICreateNewConversationButton = (function () {
  function MessagesPopupUICreateNewConversationButton() {
    _classCallCheck(this, MessagesPopupUICreateNewConversationButton);
  }

  _createClass(MessagesPopupUICreateNewConversationButton, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "span",
        {
          className: "button button--green",
          onClick: this.props.onClick
        },
        _react2["default"].createElement(
          "span",
          { className: "button__inner" },
          _react2["default"].createElement(
            "span",
            { className: "button__text" },
            i18n.t('new_thread_button')
          )
        )
      );
    }
  }]);

  return MessagesPopupUICreateNewConversationButton;
})();

MessagesPopupUICreateNewConversationButton.propTypes = {
  onClick: _react.PropTypes.func.isRequired
};

exports["default"] = MessagesPopupUICreateNewConversationButton;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],440:[function(require,module,exports){
/*global MessagingDispatcher */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _MessagesPopupUICreateNewConversationButton = require('./MessagesPopupUICreateNewConversationButton');

var _MessagesPopupUICreateNewConversationButton2 = _interopRequireDefault(_MessagesPopupUICreateNewConversationButton);

//import MessagingDispatcher from '../../../dispatchers/messaging';

var MessagesPopupConversations = (function () {
  function MessagesPopupConversations() {
    _classCallCheck(this, MessagesPopupConversations);
  }

  _createClass(MessagesPopupConversations, [{
    key: 'handleCreateNewConversation',
    value: function handleCreateNewConversation() {
      MessagingDispatcher.handleViewAction({
        type: 'clickNewConversation'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'messages__section messages__section--dialogs' },
        _react2['default'].createElement(_list2['default'], null),
        _react2['default'].createElement(
          'footer',
          { className: 'messages__footer' },
          _react2['default'].createElement(_MessagesPopupUICreateNewConversationButton2['default'], { onClick: this.handleCreateNewConversation })
        )
      );
    }
  }]);

  return MessagesPopupConversations;
})();

exports['default'] = MessagesPopupConversations;
module.exports = exports['default'];

},{"./MessagesPopupUICreateNewConversationButton":439,"./list":448,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],441:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _componentsAvatarsUserAvatar = require('../../../../../components/avatars/UserAvatar');

var _componentsAvatarsUserAvatar2 = _interopRequireDefault(_componentsAvatarsUserAvatar);

var _ConversationsListItemEntryContent = require('./ConversationsListItemEntryContent');

var _ConversationsListItemEntryContent2 = _interopRequireDefault(_ConversationsListItemEntryContent);

var _ConversationsListItemEntryUsers = require('./ConversationsListItemEntryUsers');

var _ConversationsListItemEntryUsers2 = _interopRequireDefault(_ConversationsListItemEntryUsers);

var ConversationsListItemEntry = (function () {
  function ConversationsListItemEntry() {
    _classCallCheck(this, ConversationsListItemEntry);
  }

  _createClass(ConversationsListItemEntry, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var _props$conversation = _props.conversation;
      var created_at = _props$conversation.created_at;
      var entry = _props$conversation.entry;
      var last_message = _props$conversation.last_message;
      var notify = _props$conversation.notify;
      var online = _props$conversation.online;
      var users = _props$conversation.users;
      var hasUnread = _props.hasUnread;
      var onClick = _props.onClick;
      var showUsers = _props.showUsers;

      var listItemClasses = (0, _classnames2['default'])({
        'messages__dialog': true,
        'messages__dialog--discussion': true,
        'state--read': !hasUnread
      });
      var notifyButtonClasses = (0, _classnames2['default'])({
        'messages__notification-button': true,
        '__active': notify
      });

      return _react2['default'].createElement(
        'div',
        { className: listItemClasses, onClick: onClick },
        false && _react2['default'].createElement(
          'button',
          { 'class': notifyButtonClasses },
          _react2['default'].createElement('i', { 'class': 'icon icon--bell' })
        ),
        _react2['default'].createElement(
          'span',
          { className: 'messages__user-avatar' },
          _react2['default'].createElement(_componentsAvatarsUserAvatar2['default'], { user: entry.author, size: 35 }),
          online && _react2['default'].createElement('span', { className: 'messages__user-online' })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'messages__dialog-content' },
          _react2['default'].createElement(_ConversationsListItemEntryContent2['default'], { entry: entry })
        ),
        _react2['default'].createElement(
          'span',
          { className: 'messages__date' },
          (0, _moment2['default'])(last_message ? last_message.created_at : created_at).format('D MMMM HH:mm')
        ),
        showUsers && _react2['default'].createElement(_ConversationsListItemEntryUsers2['default'], { users: users })
      );
    }
  }]);

  return ConversationsListItemEntry;
})();

ConversationsListItemEntry.propTypes = {
  conversation: _react.PropTypes.object.isRequired,
  hasUnread: _react.PropTypes.bool,
  hasUnreceived: _react.PropTypes.bool,
  onClick: _react.PropTypes.func,
  showUsers: _react.PropTypes.bool
};

ConversationsListItemEntry.defaultProps = {
  showUsers: true
};

exports['default'] = ConversationsListItemEntry;
module.exports = exports['default'];

},{"../../../../../components/avatars/UserAvatar":246,"./ConversationsListItemEntryContent":442,"./ConversationsListItemEntryUsers":444,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"moment":659,"react":"react"}],442:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var ConversationsListItemEntryContent = (function () {
  function ConversationsListItemEntryContent() {
    _classCallCheck(this, ConversationsListItemEntryContent);
  }

  _createClass(ConversationsListItemEntryContent, [{
    key: "render",
    value: function render() {
      var _props$entry = this.props.entry;
      var preview_image = _props$entry.preview_image;
      var title = _props$entry.title;
      var url = _props$entry.url;

      return _react2["default"].createElement(
        "div",
        null,
        preview_image && _react2["default"].createElement(
          "div",
          { className: "messages__dialog-media" },
          _react2["default"].createElement(Image, {
            image: preview_image,
            maxHeight: 58,
            maxWidth: 58
          })
        ),
        _react2["default"].createElement(
          "div",
          { className: "messages__dialog-text" },
          title
        )
      );
    }
  }]);

  return ConversationsListItemEntryContent;
})();

ConversationsListItemEntryContent.propTypes = {
  entry: _react.PropTypes.object.isRequired
};

exports["default"] = ConversationsListItemEntryContent;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],443:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _componentsAvatarsUserAvatar = require('../../../../../components/avatars/UserAvatar');

var _componentsAvatarsUserAvatar2 = _interopRequireDefault(_componentsAvatarsUserAvatar);

var _actionsConversationActions = require('../../../../actions/ConversationActions');

var _actionsConversationActions2 = _interopRequireDefault(_actionsConversationActions);

var ConversationsListItemEntryUserAvatar = (function (_Component) {
  _inherits(ConversationsListItemEntryUserAvatar, _Component);

  function ConversationsListItemEntryUserAvatar() {
    _classCallCheck(this, ConversationsListItemEntryUserAvatar);

    _get(Object.getPrototypeOf(ConversationsListItemEntryUserAvatar.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      hover: false
    };
  }

  _createClass(ConversationsListItemEntryUserAvatar, [{
    key: 'onMouseEnter',
    value: function onMouseEnter() {
      this.setState({ hover: true });
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      this.setState({ hover: false });
    }
  }, {
    key: 'newConversation',
    value: function newConversation(ev) {
      ev.preventDefault();
      _actionsConversationActions2['default'].openConversation(this.props.user.id);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var isExtra = _props.isExtra;
      var user = _props.user;

      var containerClasses = (0, _classnames2['default'])({
        'messages__dialog-user': true,
        '__extra': isExtra
      });
      var dropdownClasses = (0, _classnames2['default'])({
        'messages__dropdown': true,
        'state--open': this.state.hover
      });

      return _react2['default'].createElement(
        'div',
        {
          className: containerClasses,
          onMouseEnter: this.onMouseEnter.bind(this),
          onMouseLeave: this.onMouseLeave.bind(this)
        },
        _react2['default'].createElement(_componentsAvatarsUserAvatar2['default'], { user: user, size: 30 }),
        _react2['default'].createElement(
          'div',
          { className: dropdownClasses },
          _react2['default'].createElement(
            'a',
            {
              className: 'messages__dropdown-item',
              href: user.tlog_url,
              title: i18n.t('conversation_entry_user_profile')
            },
            i18n.t('conversation_entry_user_profile')
          ),
          _react2['default'].createElement(
            'a',
            {
              className: 'messages__dropdown-item',
              href: '#',
              onClick: this.newConversation.bind(this),
              title: i18n.t('conversation_entry_user_private')
            },
            i18n.t('conversation_entry_user_private')
          )
        )
      );
    }
  }]);

  return ConversationsListItemEntryUserAvatar;
})(_react.Component);

ConversationsListItemEntryUserAvatar.propTypes = {
  isExtra: _react.PropTypes.bool.isRequired,
  user: _react.PropTypes.object.isRequired
};

exports['default'] = ConversationsListItemEntryUserAvatar;
module.exports = exports['default'];

},{"../../../../../components/avatars/UserAvatar":246,"../../../../actions/ConversationActions":435,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],444:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ConversationsListItemEntryUserAvatar = require('./ConversationsListItemEntryUserAvatar');

var _ConversationsListItemEntryUserAvatar2 = _interopRequireDefault(_ConversationsListItemEntryUserAvatar);

var ConversationsListItemEntryUsers = (function () {
  function ConversationsListItemEntryUsers() {
    _classCallCheck(this, ConversationsListItemEntryUsers);
  }

  _createClass(ConversationsListItemEntryUsers, [{
    key: 'render',
    value: function render() {
      var users = this.props.users;

      return _react2['default'].createElement(
        'div',
        { className: 'messages__dialor-users __short' },
        _react2['default'].createElement(
          'div',
          { className: 'messages__dialog-users-cell' },
          users.map(function (u, idx) {
            return _react2['default'].createElement(_ConversationsListItemEntryUserAvatar2['default'], { isExtra: idx > 3, user: u });
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'messages__dialog-users-cell' },
          _react2['default'].createElement('p', { dangerouslySetInnerHTML: { __html: i18n.t('conversation_entry_users', { count: users.length }) } })
        )
      );
    }
  }]);

  return ConversationsListItemEntryUsers;
})();

ConversationsListItemEntryUsers.propTypes = {
  users: _react.PropTypes.array.isRequired
};

ConversationsListItemEntryUsers.defaultProps = {
  users: []
};

exports['default'] = ConversationsListItemEntryUsers;
module.exports = exports['default'];

},{"./ConversationsListItemEntryUserAvatar":443,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],445:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _componentsAvatarsUserAvatar = require('../../../../../components/avatars/UserAvatar');

var _componentsAvatarsUserAvatar2 = _interopRequireDefault(_componentsAvatarsUserAvatar);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var ConversationsListItemText = (function () {
  function ConversationsListItemText() {
    _classCallCheck(this, ConversationsListItemText);
  }

  _createClass(ConversationsListItemText, [{
    key: 'renderIndicator',
    value: function renderIndicator() {
      var _props = this.props;
      var unread_messages_count = _props.conversation.unread_messages_count;
      var hasUnread = _props.hasUnread;
      var hasUnreceived = _props.hasUnreceived;

      if (hasUnread) {
        return _react2['default'].createElement(
          'div',
          { className: 'unread-messages__counter' },
          unread_messages_count
        );
      } else if (hasUnreceived) {
        return _react2['default'].createElement('div', { className: 'unreceived-messages__counter' });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var _props2$conversation = _props2.conversation;
      var created_at = _props2$conversation.created_at;
      var last_message = _props2$conversation.last_message;
      var recipient = _props2$conversation.recipient;
      var online = _props2$conversation.online;
      var hasUnread = _props2.hasUnread;
      var onClick = _props2.onClick;

      var listItemClasses = (0, _classnames2['default'])({
        'messages__dialog': true,
        'state--read': !hasUnread
      });
      var lastMessageText = last_message ? last_message.content_html : '';

      return _react2['default'].createElement(
        'div',
        { className: listItemClasses, onClick: onClick },
        this.renderIndicator(),
        _react2['default'].createElement(
          'span',
          { className: 'messages__user-avatar' },
          _react2['default'].createElement(_componentsAvatarsUserAvatar2['default'], { user: recipient, size: 35 }),
          online && _react2['default'].createElement('span', { className: 'messages__user-online' })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'messages__dialog-text' },
          _react2['default'].createElement(
            'span',
            { className: 'messages__user-name' },
            recipient.slug
          ),
          lastMessageText && _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: lastMessageText } })
        ),
        _react2['default'].createElement(
          'span',
          { className: 'messages__date' },
          (0, _moment2['default'])(last_message ? last_message.created_at : created_at).format('D MMMM HH:mm')
        )
      );
    }
  }]);

  return ConversationsListItemText;
})();

ConversationsListItemText.propTypes = {
  conversation: _react.PropTypes.object.isRequired,
  hasUnread: _react.PropTypes.bool,
  hasUnreceived: _react.PropTypes.bool,
  onClick: _react.PropTypes.func
};

exports['default'] = ConversationsListItemText;
module.exports = exports['default'];

},{"../../../../../components/avatars/UserAvatar":246,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"moment":659,"react":"react"}],446:[function(require,module,exports){
/*global i18n */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var MessagesPopupConversationsListEmpty = (function () {
  function MessagesPopupConversationsListEmpty() {
    _classCallCheck(this, MessagesPopupConversationsListEmpty);
  }

  _createClass(MessagesPopupConversationsListEmpty, [{
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "div",
        { className: "messages__list-cell" },
        _react2["default"].createElement(
          "div",
          { className: "messages__empty" },
          _react2["default"].createElement(
            "div",
            { className: "messages__empty-text" },
            i18n.t('conversations_empty_list')
          )
        )
      );
    }
  }]);

  return MessagesPopupConversationsListEmpty;
})();

exports["default"] = MessagesPopupConversationsListEmpty;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],447:[function(require,module,exports){
/*global i18n */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsConversationActions = require('../../../../actions/ConversationActions');

var _actionsConversationActions2 = _interopRequireDefault(_actionsConversationActions);

var _ConversationsListItemText = require('./ConversationsListItemText');

var _ConversationsListItemText2 = _interopRequireDefault(_ConversationsListItemText);

var _ConversationsListItemEntry = require('./ConversationsListItemEntry');

var _ConversationsListItemEntry2 = _interopRequireDefault(_ConversationsListItemEntry);

var _constantsConversationConstants = require('../../../../constants/ConversationConstants');

var MessagesPopupConversationsListItem = (function () {
  function MessagesPopupConversationsListItem() {
    _classCallCheck(this, MessagesPopupConversationsListItem);
  }

  _createClass(MessagesPopupConversationsListItem, [{
    key: 'hasUnread',
    value: function hasUnread() {
      return this.props.conversation.unread_messages_count > 0;
    }
  }, {
    key: 'hasUnreceived',
    value: function hasUnreceived() {
      return this.props.conversation.unreceived_messages_count > 0;
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      _actionsConversationActions2['default'].clickConversation(this.props.conversation.id);
    }
  }, {
    key: 'render',
    value: function render() {
      var conversation = this.props.conversation;

      var props = {
        conversation: conversation,
        hasUnread: this.hasUnread(),
        hasUnreceived: this.hasUnreceived(),
        onClick: this.onClick.bind(this)
      };

      return conversation.type === _constantsConversationConstants.PUBLIC_CONVERSATION ? _react2['default'].createElement(_ConversationsListItemEntry2['default'], props) : _react2['default'].createElement(_ConversationsListItemText2['default'], props);
    }
  }]);

  return MessagesPopupConversationsListItem;
})();

MessagesPopupConversationsListItem.propTypes = {
  conversation: _react.PropTypes.object.isRequired
};

exports['default'] = MessagesPopupConversationsListItem;
module.exports = exports['default'];

},{"../../../../actions/ConversationActions":435,"../../../../constants/ConversationConstants":474,"./ConversationsListItemEntry":441,"./ConversationsListItemText":445,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],448:[function(require,module,exports){
/*global ConversationsStore */
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

//import ConversationsStore from '../../../../stores/conversations';

var _mixinsScroller = require('../../../../../mixins/scroller');

var _mixinsScroller2 = _interopRequireDefault(_mixinsScroller);

var _MessagesPopupConversationsListEmpty = require('./MessagesPopupConversationsListEmpty');

var _MessagesPopupConversationsListEmpty2 = _interopRequireDefault(_MessagesPopupConversationsListEmpty);

var _MessagesPopupConversationsListItem = require('./MessagesPopupConversationsListItem');

var _MessagesPopupConversationsListItem2 = _interopRequireDefault(_MessagesPopupConversationsListItem);

var MessagesPopupConversationsList = (0, _react.createClass)({
  mixins: [_mixinsScroller2['default']],
  getInitialState: function getInitialState() {
    return this.getStateFromStore();
  },

  componentDidMount: function componentDidMount() {
    ConversationsStore.addChangeListener(this._onStoreChange);
  },

  componentWillUnmount: function componentWillUnmount() {
    ConversationsStore.removeChangeListener(this._onStoreChange);
  },

  isEmpty: function isEmpty() {
    return this.state.activeConversations.length === 0;
  },

  getStateFromStore: function getStateFromStore() {
    return {
      activeConversations: ConversationsStore.getActiveConversations()
    };
  },

  _onStoreChange: function _onStoreChange() {
    this.setState(this.getStateFromStore());
  },

  render: function render() {
    return _react2['default'].createElement(
      'div',
      { className: 'messages__body' },
      _react2['default'].createElement(
        'div',
        {
          className: 'scroller scroller--dark',
          ref: 'scroller'
        },
        _react2['default'].createElement(
          'div',
          { className: 'scroller__pane js-scroller-pane' },
          _react2['default'].createElement(
            'div',
            { className: 'messages__dialogs' },
            this.isEmpty() ? _react2['default'].createElement(_MessagesPopupConversationsListEmpty2['default'], null) : this.state.activeConversations.map(function (conversation, i) {
              return _react2['default'].createElement(_MessagesPopupConversationsListItem2['default'], {
                conversation: conversation,
                key: conversation.id
              });
            })
          )
        ),
        _react2['default'].createElement(
          'div',
          { className: 'scroller__track js-scroller-track' },
          _react2['default'].createElement('div', { className: 'scroller__bar js-scroller-bar' })
        )
      )
    );
  }
});

exports['default'] = MessagesPopupConversationsList;
module.exports = exports['default'];

},{"../../../../../mixins/scroller":493,"./MessagesPopupConversationsListEmpty":446,"./MessagesPopupConversationsListItem":447,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],449:[function(require,module,exports){
var CLOSE_STATE, OPEN_STATE, classnames;

classnames = require('classnames');

OPEN_STATE = 'openState';

CLOSE_STATE = 'closeState';

window.MessagesPopup_Chooser = React.createClass({
  propTypes: {
    onSubmit: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: OPEN_STATE
    };
  },
  render: function() {
    var chooser, chooserClasses;
    chooserClasses = classnames('messages__chooser', {
      'state--open': this.isOpenState()
    });
    switch (this.state.currentState) {
      case CLOSE_STATE:
        chooser = React.createElement(MessagesPopup_ChooserButton, {
          "onClick": this.activateOpenState
        });
        break;
      case OPEN_STATE:
        chooser = React.createElement(MessagesPopup_ChooserDropdown, {
          "onCancel": this.activateCloseState,
          "onSubmit": this.props.onSubmit
        });
    }
    return React.createElement("div", {
      "className": "messages__box"
    }, React.createElement("div", {
      "className": chooserClasses
    }, chooser), React.createElement("div", {
      "className": "messages__field"
    }, React.createElement("input", {
      "type": "hidden",
      "data-placeholder": "Введите имя",
      "style": {
        'width': '100%'
      }
    })), React.createElement("div", {
      "className": "messages__hint"
    }, i18n.t('new_thread_hint')));
  },
  activateOpenState: function() {
    return this.setState({
      currentState: OPEN_STATE
    });
  },
  activateCloseState: function() {
    return this.setState({
      currentState: CLOSE_STATE
    });
  },
  isOpenState: function() {
    return this.state.currentState === OPEN_STATE;
  },
  isCloseState: function() {
    return this.state.currentState === CLOSE_STATE;
  }
});


},{"classnames":647}],450:[function(require,module,exports){
window.MessagesPopup_ChooserButton = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "messages__chooser-button",
      "onClick": this.props.onClick
    }, React.createElement("span", {
      "className": "messages__chooser-button-text"
    }, i18n.t('new_thread_placeholder')));
  }
});


},{}],451:[function(require,module,exports){
var LinkedStateMixin;

LinkedStateMixin = require('react/lib/LinkedStateMixin');

window.MessagesPopup_ChooserDropdown = React.createClass({
  mixins: [LinkedStateMixin],
  propTypes: {
    onCancel: React.PropTypes.func.isRequired,
    onSubmit: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      query: ''
    };
  },
  componentDidMount: function() {
    return this.refs.chooserInput.getDOMNode().focus();
  },
  render: function() {
    var chooserResults;
    if (this.state.query) {
      chooserResults = React.createElement(MessagesPopup_ChooserResults, {
        "ref": "chooserResults",
        "query": this.state.query,
        "onSubmit": this.props.onSubmit
      });
    }
    return React.createElement("div", {
      "className": "messages__chooser-dropdown"
    }, React.createElement("input", {
      "ref": "chooserInput",
      "type": "text",
      "className": "messages__chooser-input",
      "valueLink": this.linkState('query'),
      "onKeyDown": this.handleKeyDown
    }), chooserResults);
  },
  handleKeyDown: function(e) {
    var chooserResults;
    chooserResults = this.refs.chooserResults;
    switch (e.key) {
      case 'Enter':
        e.preventDefault();
        if (chooserResults != null) {
          this.props.onSubmit(chooserResults.getSelectedUserId());
        }
        break;
      case 'Escape':
        e.preventDefault();
        this.props.onCancel();
        break;
      case 'ArrowUp':
        e.preventDefault();
        chooserResults.selectPreviousResult();
        break;
      case 'ArrowDown':
        e.preventDefault();
        chooserResults.selectNextResult();
        break;
    }
  }
});


},{"react/lib/LinkedStateMixin":705}],452:[function(require,module,exports){
var EMPTY_STATE, LOADED_STATE, LOADING_STATE;

LOADING_STATE = 'loadingState';

LOADED_STATE = 'loadedState';

EMPTY_STATE = 'emptyState';

window.MessagesPopup_ChooserResults = React.createClass({
  mixins: [RequesterMixin],
  propTypes: {
    query: React.PropTypes.string.isRequired,
    onSubmit: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      currentState: LOADING_STATE,
      predictedUsers: [],
      selectedUserIndex: 0
    };
  },
  componentDidMount: function() {
    return this.loadPredictions(this.props.query);
  },
  componentWillReceiveProps: function(nextProps) {
    if (this.props.query !== nextProps.query) {
      return this.loadPredictions(nextProps.query);
    }
  },
  render: function() {
    var content, predictedUsers, that;
    switch (this.state.currentState) {
      case LOADED_STATE:
        that = this;
        predictedUsers = this.state.predictedUsers.map(function(predictedUser, i) {
          return React.createElement(MessagesPopup_ChooserResultsItem, {
            "predictedUser": predictedUser,
            "selected": that.state.selectedUserIndex === i,
            "onClick": that.props.onSubmit,
            "key": predictedUser.id
          });
        });
        content = React.createElement("div", null, predictedUsers);
        break;
      case EMPTY_STATE:
        content = React.createElement("div", {
          "className": "messages__chooser-empty"
        }, i18n.t('new_thread_unknown_user'));
    }
    return React.createElement("div", {
      "className": "messages__chooser-results"
    }, content);
  },
  activateEmptyState: function() {
    return this.setState({
      currentState: EMPTY_STATE
    });
  },
  activateLoadedState: function() {
    return this.setState({
      currentState: LOADED_STATE
    });
  },
  selectPreviousResult: function() {
    return this._moveHighlight(-1);
  },
  selectNextResult: function() {
    return this._moveHighlight(1);
  },
  loadPredictions: function(query) {
    return this.createRequest({
      url: ApiRoutes.users_predict(),
      method: 'GET',
      data: {
        query: query
      },
      success: (function(_this) {
        return function(predictedUsers) {
          _this.setState({
            predictedUsers: predictedUsers
          });
          if (predictedUsers.length === 0) {
            return _this.activateEmptyState();
          } else {
            return _this.activateLoadedState();
          }
        };
      })(this),
      error: (function(_this) {
        return function(errMsg) {
          return NoticeService.errorResponse(errMsg);
        };
      })(this)
    });
  },
  getSelectedUserId: function() {
    return this.state.predictedUsers[this.state.selectedUserIndex].id;
  },
  _moveHighlight: function(delta) {
    var userIndex, usersCount;
    usersCount = this.state.predictedUsers.length;
    userIndex = this.state.selectedUserIndex;
    if (usersCount > 0) {
      if ((userIndex > 0 && delta < 0) || (userIndex < usersCount - 1 && delta > 0)) {
        return this.setState({
          selectedUserIndex: userIndex + delta
        });
      }
    }
  }
});


},{}],453:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.MessagesPopup_ChooserResultsItem = React.createClass({
  propTypes: {
    predictedUser: React.PropTypes.object.isRequired,
    selected: React.PropTypes.bool.isRequired,
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    var itemClasses;
    itemClasses = classnames('messages__chooser-result', {
      'state--active': this.props.selected
    });
    return React.createElement("div", {
      "className": itemClasses,
      "onClick": this.handleClick
    }, React.createElement("div", {
      "className": "messages__person"
    }, React.createElement("div", {
      "className": "messages__person-avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.predictedUser,
      "size": 35.
    })), React.createElement("div", {
      "className": "messages__person-name"
    }, this.props.predictedUser.slug)));
  },
  handleClick: function(e) {
    e.preventDefault();
    e.stopPropagation();
    return this.props.onClick(this.props.predictedUser.id);
  }
});


},{"classnames":647}],454:[function(require,module,exports){
var CHOOSER_STATE, PROCESS_STATE;

PROCESS_STATE = 'process';

CHOOSER_STATE = 'chooser';

window.MessagesPopup_CreateNewConversation = React.createClass({
  getInitialState: function() {
    return {
      currentState: CHOOSER_STATE
    };
  },
  render: function() {
    var content;
    switch (this.state.currentState) {
      case PROCESS_STATE:
        content = React.createElement(MessagesPopup_LoadingMessage, {
          "content": i18n.t('new_thread_process')
        });
        break;
      case CHOOSER_STATE:
        content = React.createElement(MessagesPopup_Chooser, {
          "onSubmit": this.postNewConversation
        });
    }
    return React.createElement("div", {
      "className": "messages__section messages__section--recipients"
    }, React.createElement("div", {
      "className": "messages__body"
    }, content));
  },
  activateProcessState: function() {
    return this.setState({
      currentState: PROCESS_STATE
    });
  },
  activateChooserState: function() {
    return this.setState({
      currentState: CHOOSER_STATE
    });
  },
  postNewConversation: function(recipientId) {
    this.activateProcessState();
    return ConversationActions.postNewConversation({
      recipientId: recipientId,
      error: this.activateChooserState
    });
  }
});


},{}],455:[function(require,module,exports){
/*global i18n, MessagesPopupStateStore, ConversationsStore, PopupActions, 
  MessagingDispatcher, RequesterMixin, ReactUnmountMixin */
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _conversations = require('./conversations');

var _conversations2 = _interopRequireDefault(_conversations);

var _thread = require('./thread');

var _thread2 = _interopRequireDefault(_thread);

var _constantsConversationConstants = require('../../constants/ConversationConstants');

var CONVERSATIONS_STATE = 'conversations';
var CREATE_NEW_CONVERSATION_STATE = 'createNewConversation';
var THREAD_STATE = 'thread';
var ENTER_TIMEOUT = 300;
var LEAVE_TIMEOUT = 300;

var MessagesPopup = (0, _react.createClass)({
  mixins: [ReactUnmountMixin, 'ReactActivitiesMixin', RequesterMixin],
  getInitialState: function getInitialState() {
    return this.getStateFromStore();
  },

  componentDidMount: function componentDidMount() {
    MessagesPopupStateStore.addChangeListener(this._onStoreChange);
  },

  componentWillUnmount: function componentWillUnmount() {
    MessagesPopupStateStore.removeChangeListener(this._onStoreChange);
  },

  isConversationsState: function isConversationsState() {
    return this.state.currentState === CONVERSATIONS_STATE;
  },

  isCreateNewConversationState: function isCreateNewConversationState() {
    return this.state.currentState === CREATE_NEW_CONVERSATION_STATE;
  },

  isThreadState: function isThreadState() {
    return this.state.currentState === THREAD_STATE;
  },

  getStateFromStore: function getStateFromStore() {
    return {
      currentState: MessagesPopupStateStore.getCurrentState(),
      currentConversationId: MessagesPopupStateStore.getCurrentConversationId()
    };
  },

  getTitle: function getTitle() {
    if (this.isThreadState()) {
      var conversation = ConversationsStore.getConversation(this.state.currentConversationId);
      if (conversation.type === _constantsConversationConstants.PUBLIC_CONVERSATION) {
        return i18n.t('messages_entry_title');
      } else {
        return i18n.t('messages_thread_title', { slug: conversation.recipient.slug });
      }
    } else {
      return i18n.t('messages_popup_title');
    }
  },

  handleBackButtonClick: function handleBackButtonClick() {
    MessagingDispatcher.handleViewAction({ type: 'clickBackButton' });
  },

  _onStoreChange: function _onStoreChange() {
    this.setState(this.getStateFromStore());
  },

  render: function render() {
    var title = this.getTitle();
    var content = undefined,
        transitionName = undefined;

    switch (this.state.currentState) {
      case CONVERSATIONS_STATE:
        content = _react2['default'].createElement(_conversations2['default'], { key: 'conversations' });
        transitionName = 'conversations';
        break;
      case CREATE_NEW_CONVERSATION_STATE:
        content = _react2['default'].createElement(MessagesPopup_CreateNewConversation, { key: 'newConversation' });
        transitionName = 'new-conversation';
        break;
      case THREAD_STATE:
        content = _react2['default'].createElement(_thread2['default'], {
          conversationId: this.state.currentConversationId,
          key: 'thread'
        });
        transitionName = 'thread';
        break;
    }

    return _react2['default'].createElement(
      Popup,
      {
        className: 'popup--messages',
        colorScheme: 'light',
        hasActivities: this.hasActivities(),
        isDraggable: true,
        onClose: PopupActions.closeMessagesPopup,
        position: { top: 30, left: 30 },
        title: title,
        type: 'messages'
      },
      _react2['default'].createElement(
        'div',
        { className: 'messages' },
        !this.isConversationsState() && _react2['default'].createElement(MessagesPopup_UIBackButton, { onClick: this.handleBackButtonClick }),
        content
      )
    );
  }
});

exports['default'] = MessagesPopup;
module.exports = exports['default'];

},{"../../constants/ConversationConstants":474,"./conversations":440,"./thread":461,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],456:[function(require,module,exports){
window.MessagesPopup_LoadingMessage = React.createClass({
  propTypes: {
    content: React.PropTypes.string.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "grid-full"
    }, React.createElement("div", {
      "className": "grid-full__middle"
    }, React.createElement("div", {
      "className": "messages-loading"
    }, React.createElement("div", {
      "className": "messages-loading__header"
    }, React.createElement(Spinner, {
      "size": 30.
    })), React.createElement("div", {
      "className": "messages-loading__body"
    }, this.props.content))));
  }
});


},{}],457:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sharedHelpersBrowser = require('../../../../../../shared/helpers/browser');

var _sharedHelpersBrowser2 = _interopRequireDefault(_sharedHelpersBrowser);

var ImgFromFile = (function () {
  function ImgFromFile() {
    _classCallCheck(this, ImgFromFile);
  }

  _createClass(ImgFromFile, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this = this;

      this.image = new Image();
      this.image.onload = function (ev) {
        var container = (0, _react.findDOMNode)(_this.refs.container);
        if (container instanceof HTMLElement) {
          _this.image.style.width = ev.target.width + 'px';
          _this.image.style.height = ev.target.height + 'px';
          container.appendChild(_this.image);
        }
      };
      this.imageSrc = _sharedHelpersBrowser2['default'].createObjectURL(this.props.file);
      this.image.src = this.imageSrc;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _sharedHelpersBrowser2['default'].revokeObjectURL(this.imageSrc);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement('div', { ref: 'container' });
    }
  }]);

  return ImgFromFile;
})();

ImgFromFile.propTypes = {
  file: _react.PropTypes.object.isRequired
};

exports['default'] = ImgFromFile;
module.exports = exports['default'];

},{"../../../../../../shared/helpers/browser":529,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],458:[function(require,module,exports){
/*global i18n */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _componentsAvatarsUserAvatar = require('../../../../components/avatars/UserAvatar');

var _componentsAvatarsUserAvatar2 = _interopRequireDefault(_componentsAvatarsUserAvatar);

var _sharedReactComponentsCommonSpinner = require('../../../../../../shared/react/components/common/Spinner');

var _sharedReactComponentsCommonSpinner2 = _interopRequireDefault(_sharedReactComponentsCommonSpinner);

var _ThreadFormUploadButton = require('./ThreadFormUploadButton');

var _ThreadFormUploadButton2 = _interopRequireDefault(_ThreadFormUploadButton);

var _ThreadFormMediaPreview = require('./ThreadFormMediaPreview');

var _ThreadFormMediaPreview2 = _interopRequireDefault(_ThreadFormMediaPreview);

var MessagesPopupThreadForm = (function (_Component) {
  _inherits(MessagesPopupThreadForm, _Component);

  function MessagesPopupThreadForm() {
    _classCallCheck(this, MessagesPopupThreadForm);

    _get(Object.getPrototypeOf(MessagesPopupThreadForm.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      user: window.CurrentUserStore.getUser(),
      files: [],
      isLoading: false
    };
  }

  _createClass(MessagesPopupThreadForm, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.form = (0, _react.findDOMNode)(this.refs.messageForm);
      if (this.form instanceof HTMLElement) {
        this.form.focus();
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(ev) {
      if (ev.key === 'Enter' && !ev.shiftKey && !ev.ctrlKey && !ev.altKey && !ev.metaKey) {
        ev.preventDefault();
        this.sendMessage();
      }
    }
  }, {
    key: 'onFileInputChange',
    value: function onFileInputChange(ev) {
      if (!window.File || !window.FileList) {
        return;
      }
      var files = [].slice.call(ev.target.files);
      this.setState({ files: this.state.files.concat(files.map(this.getFileData)) });
    }
  }, {
    key: 'onFileRemove',
    value: function onFileRemove(idx) {
      this.setState({
        files: this.state.files.filter(function (el, i) {
          return i !== idx;
        })
      });
    }
  }, {
    key: 'getFileData',
    value: function getFileData(file) {
      return file;
    }
  }, {
    key: 'clearForm',
    value: function clearForm() {
      this.form.value = '';
      this.setState({ files: [] });
    }
  }, {
    key: 'msgReadyToSend',
    value: function msgReadyToSend() {
      return this.form && this.form.value !== '' || this.state.files.length;
    }
  }, {
    key: 'sendMessage',
    value: function sendMessage() {
      if (this.msgReadyToSend()) {
        MessageActions.newMessage({
          content: this.form.value,
          files: this.state.files,
          conversationId: this.props.conversationId
        });

        this.clearForm();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var buttonClasses = (0, _classnames2['default'])({
        'message-form__button-send': true,
        '--disabled': !this.msgReadyToSend()
      });

      return _react2['default'].createElement(
        'div',
        { className: 'message-form' },
        _react2['default'].createElement(
          'span',
          { className: 'messages__user-avatar' },
          this.state.isLoading ? _react2['default'].createElement(_sharedReactComponentsCommonSpinner2['default'], { size: 30 }) : _react2['default'].createElement(_componentsAvatarsUserAvatar2['default'], { size: 35, user: this.state.user })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'message-form__controls' },
          _react2['default'].createElement(
            'div',
            { className: 'message-form__textarea-container' },
            _react2['default'].createElement('textarea', {
              className: 'message-form__textarea',
              onChange: this.forceUpdate.bind(this),
              onKeyDown: this.onKeyDown.bind(this),
              placeholder: i18n.t('new_message_placeholder'),
              ref: 'messageForm'
            })
          ),
          _react2['default'].createElement(_ThreadFormMediaPreview2['default'], {
            files: this.state.files,
            onFileRemove: this.onFileRemove.bind(this)
          }),
          _react2['default'].createElement(
            'div',
            { className: 'message-form__button-container' },
            _react2['default'].createElement(_ThreadFormUploadButton2['default'], { onChange: this.onFileInputChange.bind(this) }),
            _react2['default'].createElement(
              'button',
              {
                className: buttonClasses,
                onTouchTap: this.sendMessage.bind(this)
              },
              i18n.t('buttons.messenger.send')
            )
          )
        )
      );
    }
  }]);

  return MessagesPopupThreadForm;
})(_react.Component);

MessagesPopupThreadForm.propTypes = {
  conversationId: _react.PropTypes.number.isRequired
};

exports['default'] = MessagesPopupThreadForm;
module.exports = exports['default'];

},{"../../../../../../shared/react/components/common/Spinner":537,"../../../../components/avatars/UserAvatar":246,"./ThreadFormMediaPreview":459,"./ThreadFormUploadButton":460,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/get":572,"babel-runtime/helpers/inherits":573,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],459:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ImgFromFile = require('./ImgFromFile');

var _ImgFromFile2 = _interopRequireDefault(_ImgFromFile);

var ThreadFormMediaPreview = (function () {
  function ThreadFormMediaPreview() {
    _classCallCheck(this, ThreadFormMediaPreview);
  }

  _createClass(ThreadFormMediaPreview, [{
    key: 'onTouchTap',
    value: function onTouchTap(idx) {
      this.props.onFileRemove(idx);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      return _react2['default'].createElement(
        'div',
        { className: 'message-form__media-preview' },
        this.props.files.map(function (file, idx) {
          return _react2['default'].createElement(
            'div',
            {
              className: 'message-form__media-preview__item',
              key: 'file-' + idx + '-' + file.name + '-' + file.size
            },
            _react2['default'].createElement(
              'div',
              {
                className: 'message-form__media-preview__item-remove',
                onTouchTap: _this.onTouchTap.bind(_this, idx)
              },
              _react2['default'].createElement('i', { className: 'icon icon--cross' })
            ),
            _react2['default'].createElement(_ImgFromFile2['default'], { file: file })
          );
        })
      );
    }
  }]);

  return ThreadFormMediaPreview;
})();

ThreadFormMediaPreview.propTypes = {
  files: _react.PropTypes.array.isRequired,
  onFileRemove: _react.PropTypes.func.isRequired
};

exports['default'] = ThreadFormMediaPreview;
module.exports = exports['default'];

},{"./ImgFromFile":457,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],460:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var ThreadFormUploadButton = (function () {
  function ThreadFormUploadButton() {
    _classCallCheck(this, ThreadFormUploadButton);
  }

  _createClass(ThreadFormUploadButton, [{
    key: "onChange",
    value: function onChange(ev) {
      this.props.onChange(ev);
      ev.target.value = null;
    }
  }, {
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "div",
        { className: "message-form__upload-button-container" },
        _react2["default"].createElement(
          "div",
          { className: "message-form__upload-button" },
          _react2["default"].createElement("i", { className: "icon icon--image-circle" }),
          _react2["default"].createElement("input", {
            accept: "image/png,image/jpeg,image/gif",
            className: "message-form__upload-input",
            multiple: true,
            onChange: this.onChange.bind(this),
            ref: "files",
            size: "28",
            type: "file"
          })
        )
      );
    }
  }]);

  return ThreadFormUploadButton;
})();

ThreadFormUploadButton.propTypes = {
  onChange: _react.PropTypes.func.isRequired
};

exports["default"] = ThreadFormUploadButton;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],461:[function(require,module,exports){
/*global ConversationsStore */
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _MessagesPopupThreadForm = require('./MessagesPopupThreadForm');

var _MessagesPopupThreadForm2 = _interopRequireDefault(_MessagesPopupThreadForm);

var _conversationsListConversationsListItemEntry = require('../conversations/list/ConversationsListItemEntry');

var _conversationsListConversationsListItemEntry2 = _interopRequireDefault(_conversationsListConversationsListItemEntry);

var _constantsConversationConstants = require('../../../constants/ConversationConstants');

var MessagesPopupThread = (function () {
  function MessagesPopupThread() {
    _classCallCheck(this, MessagesPopupThread);
  }

  _createClass(MessagesPopupThread, [{
    key: 'render',
    value: function render() {
      var id = this.props.conversationId;
      var conversation = ConversationsStore.getConversation(id);
      var backgroundUrl = conversation.type === _constantsConversationConstants.PUBLIC_CONVERSATION ? conversation.entry.author.design.backgroundImageUrl : conversation.recipient.design.backgroundImageUrl;
      var threadStyles = { backgroundImage: 'url(' + backgroundUrl + ')' };

      return _react2['default'].createElement(
        'div',
        { className: 'messages__section messages__section--thread' },
        conversation.type === _constantsConversationConstants.PUBLIC_CONVERSATION && _react2['default'].createElement(_conversationsListConversationsListItemEntry2['default'], {
          conversation: conversation,
          hasUnread: conversation.unread_messages_count,
          showUsers: false
        }),
        _react2['default'].createElement(
          'div',
          { className: 'messages__body', style: threadStyles },
          _react2['default'].createElement('div', { className: 'messages__thread-overlay' }),
          _react2['default'].createElement(MessagesPopup_ThreadMessageList, { conversationId: id })
        ),
        _react2['default'].createElement(
          'footer',
          { className: 'messages__footer' },
          _react2['default'].createElement(_MessagesPopupThreadForm2['default'], { conversationId: id })
        )
      );
    }
  }]);

  return MessagesPopupThread;
})();

MessagesPopupThread.propTypes = {
  conversationId: _react.PropTypes.number.isRequired
};

exports['default'] = MessagesPopupThread;
module.exports = exports['default'];

},{"../../../constants/ConversationConstants":474,"../conversations/list/ConversationsListItemEntry":441,"./MessagesPopupThreadForm":458,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],462:[function(require,module,exports){
window.MessagesPopup_MessageListEmpty = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": "messages__empty"
    }, React.createElement("div", {
      "className": "messages__empty-text"
    }, i18n.t("messages_empty_list")));
  }
});


},{}],463:[function(require,module,exports){
var savedScrollHeight;

savedScrollHeight = null;

window.MessagesPopup_ThreadMessageList = React.createClass({
  mixins: [ScrollerMixin],
  propTypes: {
    conversationId: React.PropTypes.number.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentDidMount: function() {
    this._scrollToBottom();
    MessagesStore.addChangeListener(this._onStoreChange);
    return messagingService.openConversation(this.props.conversationId);
  },
  componentWillUpdate: function(nextProps, nextState) {
    var ref, ref1, scrollerNode;
    if (this.state.messages[0] != null) {
      if (((ref = this.state.messages[0]) != null ? ref.uuid : void 0) !== ((ref1 = nextState.messages[0]) != null ? ref1.uuid : void 0)) {
        scrollerNode = this.refs.scrollerPane.getDOMNode();
        return savedScrollHeight = scrollerNode.scrollHeight;
      }
    }
  },
  componentDidUpdate: function(prevProps, prevState) {
    var ref, ref1;
    if (prevState.messages[0] != null) {
      if (((ref = prevState.messages[0]) != null ? ref.uuid : void 0) !== ((ref1 = this.state.messages[0]) != null ? ref1.uuid : void 0)) {
        return this._holdScroll();
      } else if (prevState.messages.length !== this.state.messages.length) {
        return this._scrollToBottom();
      }
    } else {
      return this._scrollToBottom();
    }
  },
  componentWillUnmount: function() {
    return MessagesStore.removeChangeListener(this._onStoreChange);
  },
  render: function() {
    var messages, that;
    if (this.isEmpty()) {
      messages = React.createElement(MessagesPopup_MessageListEmpty, null);
    } else {
      that = this;
      messages = this.state.messages.map(function(message, i) {
        return React.createElement(MessagesPopup_ThreadMessageListItemManager, {
          "message": message,
          "messagesCount": that.state.messages.length,
          "key": message.id + "-" + message.uuid
        });
      });
    }
    return React.createElement("div", {
      "ref": "scroller",
      "className": "scroller scroller--dark scroller--messages"
    }, React.createElement("div", {
      "ref": "scrollerPane",
      "className": "scroller__pane js-scroller-pane",
      "onScroll": this.handleScroll
    }, React.createElement("div", {
      "ref": "messageList",
      "className": "messages__list"
    }, React.createElement("div", {
      "className": "messages__list-cell"
    }, messages))), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })));
  },
  isEmpty: function() {
    return this.state.messages.length === 0;
  },
  handleScroll: function() {
    var scrollerPaneNode;
    scrollerPaneNode = this.refs.scrollerPane.getDOMNode();
    if (scrollerPaneNode.scrollTop === 0 && !this.state.isAllMessagesLoaded) {
      MessageActions.loadMoreMessages({
        conversationId: this.props.conversationId,
        toMessageId: this.state.messages[0].id
      });
    }
    return TastyEvents.emit(TastyEvents.keys.message_list_scrolled(), scrollerPaneNode);
  },
  getStateFromStore: function() {
    return {
      messages: MessagesStore.getMessages(this.props.conversationId),
      isAllMessagesLoaded: MessagesStore.isAllMessagesLoaded(this.props.conversationId)
    };
  },
  _scrollToBottom: function() {
    var scrollerNode;
    scrollerNode = this.refs.scrollerPane.getDOMNode();
    return scrollerNode.scrollTop = scrollerNode.scrollHeight;
  },
  _holdScroll: function() {
    var scrollerNode;
    scrollerNode = this.refs.scrollerPane.getDOMNode();
    scrollerNode.scrollTop = scrollerNode.scrollHeight - savedScrollHeight;
    return savedScrollHeight = null;
  },
  _onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{}],464:[function(require,module,exports){
var ERROR_STATE, Image, ImgFromFile, READ_STATE, SENDING_STATE, SENT_STATE, classnames;

classnames = require('classnames');

ImgFromFile = require('../ImgFromFile');

Image = require('../../../../../../../shared/react/components/common/Image');

ERROR_STATE = 'error';

SENT_STATE = 'sent';

READ_STATE = 'read';

SENDING_STATE = 'sending';

window.MessagesPopup_ThreadMessageListItem = React.createClass({
  mixins: [ReactGrammarMixin],
  propTypes: {
    message: React.PropTypes.object.isRequired,
    messageInfo: React.PropTypes.object.isRequired,
    onResendMessage: React.PropTypes.func.isRequired
  },
  render: function() {
    var attachments, deliveryStatus, messageClasses, messageCreatedAt, userSlug;
    messageClasses = classnames('message', {
      'message--from': this.props.messageInfo.type === 'outgoing',
      'message--to': this.props.messageInfo.type === 'incoming'
    });
    if (this.isOutgoing()) {
      deliveryStatus = this._getDeliveryStatus();
    }
    if (this.props.message.created_at) {
      messageCreatedAt = this._getMessageCreatedAt();
    }
    if (this.isIncoming()) {
      userSlug = React.createElement("span", {
        "className": "messages__user-name"
      }, React.createElement("a", {
        "href": this.props.messageInfo.user.tlog_url,
        "target": "_blank"
      }, this.props.messageInfo.user.slug));
    } else {
      userSlug = React.createElement("span", {
        "className": "messages__user-name"
      }, this.props.messageInfo.user.slug);
    }
    attachments = this.props.message.attachments && this.props.message.attachments.length ? this.props.message.attachments.map((function(_this) {
      return function(img) {
        return React.createElement("div", {
          "className": "messages__img"
        }, React.createElement("a", {
          "href": img.url,
          "target": "_blank"
        }, React.createElement(Image, {
          "image": img,
          "isRawUrl": true,
          "maxWidth": 220.
        })));
      };
    })(this)) : this.props.message.files && this.props.message.files.length ? this.props.message.files.map((function(_this) {
      return function(file) {
        return React.createElement("div", {
          "className": "messages__img"
        }, React.createElement(ImgFromFile, {
          "file": file
        }));
      };
    })(this)) : null;
    return React.createElement("div", {
      "className": messageClasses
    }, React.createElement("span", {
      "className": "messages__user-avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.messageInfo.user,
      "size": 35.
    })), React.createElement("div", {
      "className": "messages__bubble"
    }, userSlug, React.createElement("span", {
      "className": "messages__text",
      "dangerouslySetInnerHTML": {
        __html: this.props.message.content_html || ''
      }
    }), React.createElement("div", {
      "className": "messages__img-container"
    }, attachments)), React.createElement("span", {
      "className": "messages__date"
    }, messageCreatedAt, deliveryStatus));
  },
  isUnread: function() {
    return this.props.message.read_at === null;
  },
  isOutgoing: function() {
    return this.props.messageInfo.type === 'outgoing';
  },
  isIncoming: function() {
    return this.props.messageInfo.type === 'incoming';
  },
  _getDeliveryStatus: function() {
    var deliveryClass, onClick;
    switch (this.props.deliveryStatus) {
      case ERROR_STATE:
        deliveryClass = 'icon--refresh';
        onClick = (function(_this) {
          return function() {
            return _this.props.onResendMessage();
          };
        })(this);
        break;
      case SENT_STATE:
        deliveryClass = 'icon--tick';
        break;
      case READ_STATE:
        deliveryClass = 'icon--double-tick';
    }
    return React.createElement("span", {
      "className": "message-delivery__status",
      "onClick": onClick
    }, React.createElement("span", {
      "className": 'icon ' + deliveryClass
    }));
  },
  _getMessageCreatedAt: function() {
    return moment(this.props.message.created_at).format('D MMMM HH:mm');
  }
});


},{"../../../../../../../shared/react/components/common/Image":534,"../ImgFromFile":457,"classnames":647}],465:[function(require,module,exports){
var ERROR_STATE, READ_STATE, SENDING_STATE, SENT_STATE, getElementPosition, isElementInViewport;

ERROR_STATE = 'error';

SENT_STATE = 'sent';

READ_STATE = 'read';

SENDING_STATE = 'sending';

isElementInViewport = function(el, parent) {
  var position;
  position = getElementPosition(el, parent);
  if (position.viewportHeight > position.elemBottomBorder || position.viewportHeight > position.elemTopBorder) {
    return position.elemTopBorder > 0 || position.elemBottomBorder > 0;
  }
};

getElementPosition = function(el, parent) {
  var _topBorder;
  _topBorder = el.offsetTop - parent.scrollTop;
  return {
    elemTopBorder: _topBorder,
    elemBottomBorder: _topBorder + el.offsetHeight,
    viewport: parent,
    viewportHeight: parent.offsetHeight
  };
};

window.MessagesPopup_ThreadMessageListItemManager = React.createClass({
  mixins: [ReactGrammarMixin],
  propTypes: {
    message: React.PropTypes.object.isRequired,
    messagesCount: React.PropTypes.number
  },
  getInitialState: function() {
    return this.stateFromProps(this.props);
  },
  componentDidMount: function() {
    if (this.isUnread() && this.state.messageInfo.type === 'incoming') {
      if (this.props.messagesCount > 10) {
        TastyEvents.on(TastyEvents.keys.message_list_scrolled(), this.handleMessageListScroll);
      } else {
        this.readMessage();
      }
    }
    if (this.isErrorState()) {
      return messagingService.addReconnectListener(this.resendMessage);
    }
  },
  componentDidUpdate: function() {
    if (this.isErrorState()) {
      return messagingService.addReconnectListener(this.resendMessage);
    }
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setState(this.stateFromProps(nextProps));
  },
  componentWillUnmount: function() {
    TastyEvents.off(TastyEvents.keys.message_list_scrolled(), this.handleMessageListScroll);
    return messagingService.removeReconnectListener(this.resendMessage);
  },
  render: function() {
    return React.createElement(MessagesPopup_ThreadMessageListItem, {
      "message": this.props.message,
      "messageInfo": this.state.messageInfo,
      "deliveryStatus": this.state.currentState,
      "onResendMessage": this.resendMessage
    });
  },
  activateSendingState: function() {
    return this.setState({
      currentState: SENDING_STATE
    });
  },
  activateErrorState: function() {
    return this.setState({
      currentState: ERROR_STATE
    });
  },
  isErrorState: function() {
    return this.state.currentState === ERROR_STATE;
  },
  isUnread: function() {
    return this.props.message.read_at === null;
  },
  resendMessage: function() {
    this.activateSendingState();
    return MessageActions.resendMessage({
      conversationId: this.props.message.conversation_id,
      content: this.props.message.content,
      files: this.props.message.files,
      uuid: this.props.message.uuid
    });
  },
  readMessage: function() {
    return MessageActions.readMessage(this.props.message.conversation_id, this.props.message.id);
  },
  stateFromProps: function(props) {
    var currentState;
    if (props.message.sendingState != null) {
      currentState = ERROR_STATE;
    } else if (props.message.id) {
      currentState = this.isUnread() ? SENT_STATE : READ_STATE;
    } else {
      currentState = SENDING_STATE;
    }
    return {
      messageInfo: MessagesStore.getMessageInfo(props.message, props.message.conversation_id),
      currentState: currentState
    };
  },
  handleMessageListScroll: function(scrollerNode) {
    var messageNode;
    messageNode = this.getDOMNode();
    if (isElementInViewport(messageNode, scrollerNode)) {
      this.readMessage();
      return TastyEvents.off(TastyEvents.keys.message_list_scrolled(), this.handleMessageListScroll);
    }
  }
});


},{}],466:[function(require,module,exports){
window.MessagesPopup_UIBackButton = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "onClick": this.props.onClick,
      "className": "messages__back js-messages-back"
    }, React.createElement("div", {
      "className": "icon icon--arrow-left"
    }));
  }
});


},{}],467:[function(require,module,exports){
window.NotificationsPopup_NotificationsEmpty = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": "notifications__empty"
    }, i18n.t('notifications_empty_list'));
  }
});


},{}],468:[function(require,module,exports){
var IMAGE_SIZE, classnames;

classnames = require('classnames');

IMAGE_SIZE = 50;

window.NotificationsPopup_Notification = React.createClass({
  propTypes: {
    notification: React.PropTypes.object.isRequired
  },
  componentWillUnmount: function() {
    if (this.isUnread()) {
      return NotificationActions.readNotification(this.props.notification.id);
    }
  },
  render: function() {
    var actionText, entityUrl, image, notificationClasses, text, userSlug;
    notificationClasses = classnames('notification', {
      'state--unread': this.isUnread()
    });
    userSlug = this.props.notification.sender.slug;
    actionText = this.props.notification.action_text;
    text = this.props.notification.text;
    entityUrl = this.props.notification.entity_url;
    if (this.props.notification.image) {
      image = this._getNotificationImage();
    }
    return React.createElement("li", {
      "className": notificationClasses,
      "onClick": this.handleClick
    }, React.createElement("a", {
      "href": entityUrl,
      "target": "_blank",
      "className": "notification__link"
    }, React.createElement("div", {
      "className": "notification__inner"
    }, React.createElement("div", {
      "className": "notification__read-state"
    }), React.createElement("div", {
      "className": "notification__user-avatar"
    }, React.createElement(UserAvatar, {
      "user": this.props.notification.sender,
      "size": 35.
    })), image, React.createElement("div", {
      "className": "notification__desc"
    }, React.createElement("span", {
      "className": "notification__user"
    }, userSlug), React.createElement("span", {
      "className": "notification__action-text"
    }, " ", actionText, " "), React.createElement("span", {
      "className": "notification__text"
    }, text)))));
  },
  isUnread: function() {
    return this.props.notification.read_at === null;
  },
  _getNotificationImage: function() {
    var aspectRatio, geometry, imageStyles, url;
    url = ThumborService.imageUrl({
      url: this.props.notification.image.url,
      path: this.props.notification.image.path,
      size: IMAGE_SIZE + 'x' + IMAGE_SIZE
    });
    geometry = this.props.notification.image.geometry;
    aspectRatio = this.calculateAspectRatioFit(geometry.width, geometry.height, IMAGE_SIZE, IMAGE_SIZE);
    imageStyles = {
      height: aspectRatio.height + 'px',
      width: aspectRatio.width + 'px'
    };
    return React.createElement("figure", {
      "className": "notification__image",
      "style": imageStyles
    }, React.createElement("img", {
      "src": url
    }));
  },
  calculateAspectRatioFit: function(srcWidth, srcHeight, maxWidth, maxHeight) {
    var ratio;
    ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
    return {
      width: srcWidth * ratio,
      height: srcHeight * ratio
    };
  },
  handleClick: function() {
    if (this.isUnread()) {
      return NotificationActions.readNotification(this.props.notification.id);
    }
  }
});


},{"classnames":647}],469:[function(require,module,exports){
window.NotificationsPopup_Notifications = React.createClass({
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentDidMount: function() {
    return NotificationsStore.addChangeListener(this._onStoreChange);
  },
  componentWillUnmount: function() {
    return NotificationsStore.removeChangeListener(this._onStoreChange);
  },
  render: function() {
    var notifications;
    if (this.isEmpty()) {
      notifications = React.createElement(NotificationsPopup_NotificationsEmpty, null);
    } else {
      notifications = this.state.notifications.map(function(notification, i) {
        return React.createElement(NotificationsPopup_Notification, {
          "notification": notification,
          "key": notification.id
        });
      });
      notifications = React.createElement("ul", {
        "className": "notifications__list"
      }, notifications);
    }
    return notifications;
  },
  isEmpty: function() {
    return this.state.notifications.length === 0;
  },
  getStateFromStore: function() {
    return {
      notifications: NotificationsStore.getNotifications()
    };
  },
  _onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{}],470:[function(require,module,exports){
window.NotificationsPopup = React.createClass({
  mixins: [ScrollerMixin],
  render: function() {
    return React.createElement("div", {
      "className": "popup popup--notifications popup--dark"
    }, React.createElement("div", {
      "className": "popup__arrow popup__arrow--left"
    }), React.createElement("div", {
      "className": "popup__content"
    }, React.createElement("div", {
      "className": "popup__body"
    }, React.createElement("div", {
      "className": "notifications"
    }, React.createElement("div", {
      "ref": "scroller",
      "className": "scroller scroller--dark scroller--notifications"
    }, React.createElement("div", {
      "ref": "scrollerPane",
      "className": "scroller__pane js-scroller-pane"
    }, React.createElement(NotificationsPopup_Notifications, null)), React.createElement("div", {
      "className": "scroller__track js-scroller-track"
    }, React.createElement("div", {
      "className": "scroller__bar js-scroller-bar"
    })))))));
  }
});


},{}],471:[function(require,module,exports){
var ADVANCED_STATE, BASIC_STATE, MOUSE_LEAVE_TIMEOUT, classnames;

classnames = require('classnames');

MOUSE_LEAVE_TIMEOUT = 800;

BASIC_STATE = 'basic';

ADVANCED_STATE = 'advanced';

window.IndicatorsToolbar = React.createClass({
  mixins: [ComponentManipulationsMixin],
  getInitialState: function() {
    return _.extend(this.getStateFromStore(), {
      currentState: BASIC_STATE
    });
  },
  componentDidMount: function() {
    ConnectionStateStore.addUpdateListener(this._onStoreChange);
    $(document).on('click', this._onDocumentClick);
    TastyEvents.on(TastyEvents.keys.user_toolbar_closed(), this._onUserToolbarClose);
    return TastyEvents.on(TastyEvents.keys.user_toolbar_opened(), this._onUserToolbarOpen);
  },
  componentWillUnmount: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    ConnectionStateStore.removeUpdateListener(this._onStoreChange);
    $(document).off('click', this._onDocumentClick);
    TastyEvents.off(TastyEvents.keys.user_toolbar_closed(), this._onUserToolbarClose);
    return TastyEvents.off(TastyEvents.keys.user_toolbar_opened(), this._onUserToolbarOpen);
  },
  render: function() {
    var indicators, indicatorsClasses;
    indicatorsClasses = classnames('toolbar__indicators', {
      'state--advanced': this.isAdvancedState(),
      'state--basic': this.isBasicState()
    });
    if (ConnectionStateStore.CONNECTED_STATE) {
      indicators = React.createElement("div", {
        "className": indicatorsClasses,
        "onMouseEnter": this.handleMouseEnter,
        "onMouseLeave": this.handleMouseLeave
      }, React.createElement(IndicatorsToolbar_Messages, {
        "onClick": this.handleMessagesClick
      }), React.createElement(IndicatorsToolbar_Notifications, {
        "onClick": this.handleNotificationsClick
      }));
    }
    return indicators;
  },
  isBasicState: function() {
    return this.state.currentState === BASIC_STATE;
  },
  isAdvancedState: function() {
    return this.state.currentState === ADVANCED_STATE;
  },
  activateBasicState: function() {
    return this.setState({
      currentState: BASIC_STATE
    });
  },
  activateAdvancedState: function() {
    return this.setState({
      currentState: ADVANCED_STATE
    });
  },
  getStateFromStore: function() {
    return {
      connectionState: ConnectionStateStore.getConnectionState()
    };
  },
  handleMessagesClick: function() {
    if (this.isAdvancedState()) {
      return PopupActions.toggleMessagesPopup();
    }
  },
  handleNotificationsClick: function() {
    if (this.isAdvancedState()) {
      return PopupActions.toggleNotificationsPopup();
    }
  },
  handleMouseEnter: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    return this.setState({
      isHovered: true,
      currentState: ADVANCED_STATE
    });
  },
  handleMouseLeave: function() {
    this.safeUpdateState({
      isHovered: false
    });
    if (!messagingService.isNotificationsPopupShown()) {
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          return _this.safeUpdateState({
            currentState: BASIC_STATE
          });
        };
      })(this)), MOUSE_LEAVE_TIMEOUT);
    }
  },
  _onUserToolbarOpen: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (CurrentUserStore.isLogged()) {
      if (messagingService.isNotificationsPopupShown()) {
        PopupActions.closeNotificationsPopup();
      }
    }
    return this.activateAdvancedState();
  },
  _onUserToolbarClose: function() {
    if (!this.state.isHovered) {
      return this.activateBasicState();
    }
  },
  _onDocumentClick: function(e) {
    if (CurrentUserStore.isLogged()) {
      if (!($(e.target).closest('.toolbar__indicators').length && this.isAdvancedState())) {
        PopupActions.closeNotificationsPopup();
        return this.activateBasicState();
      }
    }
  },
  _onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{"classnames":647}],472:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.IndicatorsToolbar_Messages = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentDidMount: function() {
    return MessagingStatusStore.addChangeListener(this._onStoreChange);
  },
  componentWillUnmount: function() {
    return MessagingStatusStore.removeChangeListener(this._onStoreChange);
  },
  render: function() {
    var indicatorClasses;
    indicatorClasses = classnames('toolbar__indicator', 'toolbar__indicator--messages', {
      'state--empty': this.state.unreadConversationsCount === 0
    });
    if (this.hasUnreadConversations()) {
      return React.createElement("div", {
        "className": indicatorClasses,
        "onClick": this.props.onClick
      }, React.createElement("span", {
        "className": "messages-badge"
      }, this.state.unreadConversationsCount), React.createElement("i", {
        "className": "icon icon--messages"
      }));
    } else {
      return null;
    }
  },
  hasUnreadConversations: function() {
    return this.state.unreadConversationsCount != null;
  },
  getStateFromStore: function() {
    return {
      unreadConversationsCount: MessagingStatusStore.getUnreadConversationsCount(),
      activeConversationsCount: MessagingStatusStore.getActiveConversationsCount()
    };
  },
  _onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{"classnames":647}],473:[function(require,module,exports){
var classnames;

classnames = require('classnames');

window.IndicatorsToolbar_Notifications = React.createClass({
  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },
  getInitialState: function() {
    return this.getStateFromStore();
  },
  componentDidMount: function() {
    return MessagingStatusStore.addChangeListener(this._onStoreChange);
  },
  componentDidUpdate: function(prevProps, prevState) {
    if (prevState.unreadNotificationsCount > 0 && !this.hasUnreadNotifications()) {
      return PopupActions.closeNotificationsPopup();
    }
  },
  componentWillUnmount: function() {
    return MessagingStatusStore.removeChangeListener(this._onStoreChange);
  },
  render: function() {
    var indicatorClasses;
    indicatorClasses = classnames('toolbar__indicator', 'toolbar__indicator--notifications', {
      'state--empty': this.state.unreadNotificationsCount === 0
    });
    if (this.hasUnreadNotifications()) {
      return React.createElement("div", {
        "className": indicatorClasses,
        "onClick": this.props.onClick
      }, React.createElement("span", {
        "className": "notifications-badge"
      }, this.state.unreadNotificationsCount), React.createElement("i", {
        "className": "icon icon--bell"
      }));
    } else {
      return null;
    }
  },
  hasUnreadNotifications: function() {
    return this.state.unreadNotificationsCount != null;
  },
  getStateFromStore: function() {
    return {
      unreadNotificationsCount: MessagingStatusStore.getUnreadNotificationsCount()
    };
  },
  _onStoreChange: function() {
    return this.setState(this.getStateFromStore());
  }
});


},{"classnames":647}],474:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var PRIVATE_CONVERSATION = 'PrivateConversation';
exports.PRIVATE_CONVERSATION = PRIVATE_CONVERSATION;
var PUBLIC_CONVERSATION = 'PublicConversation';
exports.PUBLIC_CONVERSATION = PUBLIC_CONVERSATION;

},{}],475:[function(require,module,exports){
window.MessagingDispatcher = _.extend(new Dispatcher(), {
  handleViewAction: function(action) {
    return this.dispatch({
      source: 'VIEW_ACTION',
      action: action
    });
  },
  handleServerAction: function(action) {
    return this.dispatch({
      source: 'SERVER_ACTION',
      action: action
    });
  },
  updateMessagingStatus: function(messagingStatus) {
    return MessagingDispatcher.handleServerAction({
      type: 'updateMessagingStatus',
      messagingStatus: messagingStatus
    });
  },
  updateActiveConversations: function(activeConversations) {
    console.log('Receive activeConversations', activeConversations);
    return MessagingDispatcher.handleServerAction({
      type: 'updateActiveConversations',
      activeConversations: activeConversations
    });
  },
  updateConversation: function(conversation) {
    return MessagingDispatcher.handleServerAction({
      type: 'updateConversation',
      conversation: conversation
    });
  },
  changeConnectionState: function(state) {
    return MessagingDispatcher.handleServerAction({
      type: 'connectionState',
      state: state
    });
  },
  messageReceived: function(message) {
    console.info('Получено сообщение', message);
    if (message.user_id !== CurrentUserStore.getUser().id) {
      BeepService.play();
    }
    return MessagingDispatcher.handleServerAction({
      type: 'messageReceived',
      conversationId: message.conversation_id,
      message: message
    });
  },
  notificationReceived: function(notification) {
    console.info('Получено уведомление', notification);
    BeepService.play();
    return MessagingDispatcher.handleServerAction({
      type: 'notificationReceived',
      notification: notification
    });
  },
  messagesUpdated: function(data) {
    return MessagingDispatcher.handleServerAction({
      type: 'messagesUpdated',
      conversationId: data.conversation_id,
      messages: data.messages
    });
  },
  notificationsUpdated: function(data) {
    return MessagingDispatcher.handleServerAction({
      type: 'notificationsUpdated',
      notifications: data.notifications
    });
  },
  messageSubmitted: function(arg) {
    var content, conversation, conversationId, currentUser, files, message, recipient, uuid;
    conversationId = arg.conversationId, content = arg.content, files = arg.files, uuid = arg.uuid;
    conversation = ConversationsStore.getConversation(conversationId);
    currentUser = CurrentUserStore.getUser();
    recipient = conversation.recipient;
    message = {
      content: content,
      files: files,
      content_html: _.escape(content),
      conversation_id: conversationId,
      recipient_id: recipient.id,
      user_id: currentUser.id,
      uuid: uuid
    };
    return MessagingDispatcher.handleViewAction({
      type: 'messageSubmitted',
      conversationId: conversationId,
      message: message
    });
  }
});


},{}],476:[function(require,module,exports){
window.MessagingRequester = (function() {
  function MessagingRequester(arg) {
    this.access_token = arg.access_token, this.socket_id = arg.socket_id;
  }

  MessagingRequester.prototype.notifyReady = function(arg) {
    var error, success;
    success = arg.success, error = arg.error;
    return $.ajax({
      url: ApiRoutes.messenger_ready_url(),
      data: {
        socket_id: this.socket_id
      },
      method: 'POST',
      success: success,
      error: error
    });
  };

  MessagingRequester.prototype.postNewConversation = function(recipientId, content) {
    return $.ajax({
      url: ApiRoutes.messengerConversationsByUserId(recipientId),
      method: 'POST',
      data: {
        socket_id: this.socket_id,
        content: content
      }
    });
  };

  MessagingRequester.prototype.loadMessages = function(conversationId) {
    return $.ajax({
      url: ApiRoutes.messenger_load_messages_url(conversationId),
      data: {
        socket_id: this.socket_id
      }
    });
  };

  MessagingRequester.prototype.loadMoreMessages = function(conversationId, toMessageId) {
    return $.ajax({
      url: ApiRoutes.messenger_load_messages_url(conversationId),
      data: {
        socket_id: this.socket_id,
        to_message_id: toMessageId,
        limit: 10
      }
    });
  };

  MessagingRequester.prototype.postMessage = function(conversationId, content, files, uuid) {
    var formData;
    formData = new FormData();
    formData.append('socket_id', this.socket_id);
    formData.append('content', content);
    formData.append('uuid', uuid);
    files.forEach(function(file) {
      return formData.append('files[]', file);
    });
    return $.ajax({
      url: ApiRoutes.messenger_new_message_url(conversationId),
      method: 'POST',
      data: formData,
      processData: false,
      contentType: false
    });
  };

  MessagingRequester.prototype.markAsReadMessage = function(conversationId, messageId) {
    return $.ajax({
      url: ApiRoutes.messenger_read_messages_url(conversationId),
      method: 'POST',
      data: {
        _method: 'PUT',
        socket_id: this.socket_id,
        ids: messageId
      }
    });
  };

  MessagingRequester.prototype.markAsReadNotification = function(notificationId) {
    return $.ajax({
      url: ApiRoutes.notifications_read_url(notificationId),
      method: 'POST',
      data: {
        _method: 'PUT',
        socket_id: this.socket_id,
        id: notificationId
      }
    });
  };

  return MessagingRequester;

})();


},{}],477:[function(require,module,exports){
var MessagesPopup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MessagesPopup = require('./components/messages_popup');

window.MessagingService = (function() {
  MessagingService.prototype.EVENT_STATUS = 'status';

  MessagingService.prototype.EVENT_ACTIVE_CONVERSATIONS = 'active_conversations';

  MessagingService.prototype.EVENT_UPDATE_CONVERSATION = 'update_conversation';

  MessagingService.prototype.EVENT_PUSH_MESSAGE = 'push_message';

  MessagingService.prototype.EVENT_PUSH_NOTIFICATION = 'push_notification';

  MessagingService.prototype.EVENT_UPDATE_MESSAGES = 'update_messages';

  MessagingService.prototype.EVENT_UPDATE_NOTIFICATIONS = 'update_notifications';

  MessagingService.prototype.RECONNECT_EVENT = 'reconnected';

  MessagingService.prototype.CHANNEL_MAIN = function(userId) {
    return "private-" + userId + "-messaging";
  };

  function MessagingService(arg) {
    this.user = arg.user;
    this.emitReconnect = bind(this.emitReconnect, this);
    this._connected = bind(this._connected, this);
    MessagingDispatcher.changeConnectionState(ConnectionStateStore.PROCESS_STATE);
    _.extend(this, EventEmitter.prototype);
    this.pusher = new Pusher(gon.pusher.key, {
      authEndpoint: ApiRoutes.pusher_auth_url(),
      pong_timeout: 6000,
      unavailable_timeout: 2000,
      auth: {
        headers: {
          'X-User-Token': this.user.api_key.access_token
        }
      }
    });
    this.channel = this.pusher.subscribe(this.CHANNEL_MAIN(this.user.id));
    this.channel.bind('pusher:subscription_succeeded', this._connected);
    this.channel.bind('pusher:subscription_error', function(error) {
      NoticeService.notify('error', i18n.t('pusher_subscription_error'));
      return MessagingDispatcher.changeConnectionState(ConnectionStateStore.ERROR_STATE);
    });
    this.channel.bind(this.EVENT_STATUS, MessagingDispatcher.updateMessagingStatus);
    this.channel.bind(this.EVENT_UPDATE_CONVERSATION, MessagingDispatcher.updateConversation);
    this.bindPushMessages();
    this.bindUpdateMessages();
    this.bindPushNotifications();
    this.bindUpdateNotifications();
    this.messagesContainer = $('<\div>', {
      'popup-messages-container': ''
    }).appendTo('body')[0];
    this.notificationsContainer = $('<\div>', {
      'popup-notifications-container': ''
    }).appendTo('body')[0];
  }

  MessagingService.prototype.reconnect = function() {
    MessagingDispatcher.changeConnectionState(ConnectionStateStore.PROCESS_STATE);
    return this.channel = this.pusher.subscribe(this.CHANNEL_MAIN(this.user.id));
  };

  MessagingService.prototype._connected = function() {
    MessagingDispatcher.changeConnectionState(ConnectionStateStore.CONNECTED_STATE);
    this.requester = new MessagingRequester({
      access_token: this.user.api_key.access_token,
      socket_id: this.pusher.connection.socket_id
    });
    this.requester.notifyReady({
      success: function(data) {
        console.log('Server is notified');
        MessagingDispatcher.handleServerAction({
          type: 'conversationsLoaded',
          conversations: data.conversations
        });
        return MessagingDispatcher.handleServerAction({
          type: 'notificationsLoaded',
          notifications: data.notifications
        });
      },
      error: function(error) {
        return typeof console.error === "function" ? console.error("Error", error) : void 0;
      }
    });
    this.pusher.connection.bind('unavailable', function(error) {
      return console.log("pusher unavailable", error);
    });
    this.pusher.connection.bind('failed', function(error) {
      return console.log("pusher failer", error);
    });
    return this.pusher.connection.bind('connected', this.emitReconnect);
  };

  MessagingService.prototype.emitReconnect = function() {
    return this.emit(this.RECONNECT_EVENT);
  };

  MessagingService.prototype.postNewConversation = function(arg) {
    var error, recipientId;
    recipientId = arg.recipientId, error = arg.error;
    return this.requester.postNewConversation(recipientId).done(function(conversation) {
      return MessagingDispatcher.handleServerAction({
        type: 'postNewConversation',
        conversation: conversation
      });
    }).fail(function(errMsg) {
      if (typeof error === "function") {
        error();
      }
      return NoticeService.errorResponse(errMsg);
    });
  };

  MessagingService.prototype.openConversation = function(conversationId) {
    return this.loadMessages(conversationId);
  };

  MessagingService.prototype.loadMessages = function(conversationId) {
    return this.requester.loadMessages(conversationId).done(function(data) {
      return MessagingDispatcher.handleServerAction({
        type: 'messagesLoaded',
        conversationId: conversationId,
        messages: data.messages
      });
    }).fail(function(error) {
      return console.error('Проблема при загрузке сообщений для переписки', error);
    });
  };

  MessagingService.prototype.loadMoreMessages = function(conversationId, toMessageId) {
    return this.requester.loadMoreMessages(conversationId, toMessageId).done(function(data) {
      return MessagingDispatcher.handleServerAction({
        type: 'moreMessagesLoaded',
        conversationId: conversationId,
        messages: data.messages,
        allMessagesLoaded: data.scope_count < 10
      });
    }).fail(function(error) {
      return console.error('Проблема при загрузке сообщений для переписки', error);
    });
  };

  MessagingService.prototype.postMessage = function(arg) {
    var content, conversationId, files, uuid;
    conversationId = arg.conversationId, content = arg.content, files = arg.files, uuid = arg.uuid;
    return this.requester.postMessage(conversationId, content, files, uuid).done(function(message) {
      return MessagingDispatcher.messageReceived(message);
    }).fail(function(errMsg) {
      MessagingDispatcher.handleServerAction({
        type: 'messageSendingError',
        conversationId: conversationId,
        uuid: uuid
      });
      return NoticeService.errorResponse(errMsg);
    });
  };

  MessagingService.prototype.markAsReadMessage = function(conversationId, messageId) {
    return this.requester.markAsReadMessage(conversationId, messageId).fail(function(errMsg) {
      return console.error('Проблема при прочтении сообщения', errMsg);
    });
  };

  MessagingService.prototype.markAsReadNotification = function(notificationId) {
    return this.requester.markAsReadNotification(notificationId).fail(function(errMsg) {
      return console.error('Проблема при прочтении уведомления', errMsg);
    });
  };

  MessagingService.prototype.isMessagesPopupShown = function() {
    var ref;
    return (ref = this.messagesPopup) != null ? ref.isMounted() : void 0;
  };

  MessagingService.prototype.isNotificationsPopupShown = function() {
    var ref;
    return (ref = this.notificationsPopup) != null ? ref.isMounted() : void 0;
  };

  MessagingService.prototype.closeMessagesPopup = function() {
    if (this.isMessagesPopupShown()) {
      React.unmountComponentAtNode(this.messagesContainer);
    }
  };

  MessagingService.prototype.closeNotificationsPopup = function() {
    if (this.isNotificationsPopupShown()) {
      React.unmountComponentAtNode(this.notificationsContainer);
    }
  };

  MessagingService.prototype.openMessagesPopup = function() {
    if (!this.isMessagesPopupShown()) {
      this.messagesPopup = React.render(React.createElement(MessagesPopup, null), this.messagesContainer);
    }
  };

  MessagingService.prototype.openNotificationsPopup = function() {
    if (!this.isNotificationsPopupShown()) {
      this.notificationsPopup = React.render(React.createElement(NotificationsPopup, null), this.notificationsContainer);
    }
  };

  MessagingService.prototype.toggleMessagesPopup = function() {
    if (this.isMessagesPopupShown()) {
      return this.closeMessagesPopup();
    } else {
      return this.openMessagesPopup();
    }
  };

  MessagingService.prototype.toggleNotificationsPopup = function() {
    if (this.isNotificationsPopupShown()) {
      return this.closeNotificationsPopup();
    } else {
      return this.openNotificationsPopup();
    }
  };

  MessagingService.prototype.addReconnectListener = function(callback) {
    return this.on(this.RECONNECT_EVENT, callback);
  };

  MessagingService.prototype.removeReconnectListener = function(callback) {
    return this.off(this.RECONNECT_EVENT, callback);
  };

  MessagingService.prototype.bindPushMessages = function() {
    return this.channel.bind(this.EVENT_PUSH_MESSAGE, MessagingDispatcher.messageReceived);
  };

  MessagingService.prototype.unbindPushMessages = function() {
    return this.channel.unbind(this.EVENT_PUSH_MESSAGE, MessagingDispatcher.messageReceived);
  };

  MessagingService.prototype.bindUpdateMessages = function() {
    return this.channel.bind(this.EVENT_UPDATE_MESSAGES, MessagingDispatcher.messagesUpdated);
  };

  MessagingService.prototype.unbindUpdateMessages = function() {
    return this.channel.unbind(this.EVENT_UPDATE_MESSAGES, MessagingDispatcher.messagesUpdated);
  };

  MessagingService.prototype.bindPushNotifications = function() {
    return this.channel.bind(this.EVENT_PUSH_NOTIFICATION, MessagingDispatcher.notificationReceived);
  };

  MessagingService.prototype.unbindPushNotifications = function() {
    return this.channel.unbind(this.EVENT_PUSH_NOTIFICATION, MessagingDispatcher.notificationReceived);
  };

  MessagingService.prototype.bindUpdateNotifications = function() {
    return this.channel.bind(this.EVENT_UPDATE_NOTIFICATIONS, MessagingDispatcher.notificationsUpdated);
  };

  MessagingService.prototype.unbindUpdateNotifications = function() {
    return this.channel.unbind(this.EVENT_UPDATE_NOTIFICATIONS, MessagingDispatcher.notificationsUpdated);
  };

  return MessagingService;

})();


},{"./components/messages_popup":455}],478:[function(require,module,exports){
window.MessagingMock = {
  message: function() {
    var conversation, recipient, sender;
    sender = new Sender({
      id: 1,
      name: 'Вася'
    });
    recipient = new Recipient({
      id: 1,
      name: 'Петя'
    });
    conversation = new Conversation({
      id: 123,
      participants: [sender, recipient]
    });
    return new Message({
      conversation_id: 123,
      sender_id: sender.id,
      recipient_id: recipient.id,
      content: 'Сообщение',
      content_html: 'Сообщение'
    });
  },
  emulateMessage: function(arg) {
    var message;
    message = arg.message;
    message || (message = this.message());
    return messaging.emitEvent(message.conversation_id + ":message:" + message.id);
  },
  emulateRead: function(arg) {
    var message;
    message = arg.message;
    message || (message = this.message());
    return messaging.emitEvent(message.conversation_id + ":read:" + message.id);
  }
};


},{}],479:[function(require,module,exports){
var BaseStore, CHANGE_EVENT,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CHANGE_EVENT = 'change';

BaseStore = (function(superClass) {
  extend(BaseStore, superClass);

  function BaseStore() {
    return BaseStore.__super__.constructor.apply(this, arguments);
  }

  BaseStore.prototype.emitChange = function() {
    return this.emit(CHANGE_EVENT);
  };

  BaseStore.prototype.addChangeListener = function(cb) {
    return this.on(CHANGE_EVENT, cb);
  };

  BaseStore.prototype.removeChangeListener = function(cb) {
    return this.off(CHANGE_EVENT, cb);
  };

  return BaseStore;

})(EventEmitter);

module.exports = BaseStore;


},{}],480:[function(require,module,exports){
var CONNECTION_EVENT, _connectionState;

CONNECTION_EVENT = 'connectionStateUpdated';

_connectionState = null;

window.ConnectionStateStore = _.extend({}, EventEmitter.prototype, {
  PROCESS_STATE: 'process',
  ERROR_STATE: 'error',
  CONNECTED_STATE: 'connected',
  NOT_CONNECTED_STATE: 'notconnected',
  emitUpdate: function() {
    return this.emit(CONNECTION_EVENT);
  },
  addUpdateListener: function(callback) {
    return this.on(CONNECTION_EVENT, callback);
  },
  removeUpdateListener: function(callback) {
    return this.off(CONNECTION_EVENT, callback);
  },
  getConnectionState: function() {
    return _connectionState;
  },
  _update: function(state) {
    return _connectionState = state;
  }
});

_connectionState = ConnectionStateStore.NOT_CONNECTED_STATE;

ConnectionStateStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'connectionState':
      ConnectionStateStore._update(action.state);
      ConnectionStateStore.emitUpdate();
      break;
  }
});


},{}],481:[function(require,module,exports){
var CHANGE_EVENT, _conversations;

CHANGE_EVENT = 'change';

_conversations = [];

window.ConversationsStore = _.extend({}, EventEmitter.prototype, {
  emitChange: function() {
    return this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(callback) {
    return this.on(CHANGE_EVENT, callback);
  },
  removeChangeListener: function(callback) {
    return this.off(CHANGE_EVENT, callback);
  },
  unshiftConversations: function(conversations) {
    var clonedConversations, conversation, j, len;
    clonedConversations = _conversations.slice(0);
    for (j = 0, len = conversations.length; j < len; j++) {
      conversation = conversations[j];
      if (!this.isConversationExists(conversation)) {
        clonedConversations.unshift(conversation);
      }
    }
    return _conversations = clonedConversations;
  },
  updateConversation: function(data) {
    var clonedConversations, conversation, i, j, len;
    clonedConversations = _conversations.slice(0);
    for (i = j = 0, len = clonedConversations.length; j < len; i = ++j) {
      conversation = clonedConversations[i];
      if (conversation.id === data.id) {
        clonedConversations[i] = data;
        break;
      }
    }
    return _conversations = clonedConversations;
  },
  preloadConversationsImages: function(conversations) {
    var conversation, image, j, len, results;
    results = [];
    for (j = 0, len = conversations.length; j < len; j++) {
      conversation = conversations[j];
      image = new Image();
      results.push(image.src = conversation.recipient.design.backgroundImageUrl);
    }
    return results;
  },
  getConversation: function(conversationId) {
    var conversation, j, len;
    for (j = 0, len = _conversations.length; j < len; j++) {
      conversation = _conversations[j];
      if (conversation.id === conversationId) {
        return conversation;
      }
    }
  },
  getConversationByUserId: function(recipientId) {
    var conversation, j, len;
    for (j = 0, len = _conversations.length; j < len; j++) {
      conversation = _conversations[j];
      if (conversation.recipient.id === recipientId) {
        return conversation;
      }
    }
  },
  getActiveConversations: function() {
    return _conversations;
  },
  sortByDesc: function() {
    var clonedConversations;
    clonedConversations = _conversations.slice(0);
    clonedConversations.sort(function(a, b) {
      return new Date(b.updated_at) - new Date(a.updated_at);
    });
    return _conversations = clonedConversations;
  },
  isConversationExists: function(conversation) {
    var cnv, j, len;
    for (j = 0, len = _conversations.length; j < len; j++) {
      cnv = _conversations[j];
      if (cnv.id === conversation.id) {
        return true;
      }
    }
    return false;
  }
});

ConversationsStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'postNewConversation':
      ConversationsStore.unshiftConversations([action.conversation]);
      ConversationsStore.emitChange();
      break;
    case 'conversationsLoaded':
      ConversationsStore.unshiftConversations(action.conversations);
      ConversationsStore.sortByDesc();
      ConversationsStore.emitChange();
      break;
    case 'updateConversation':
      if (ConversationsStore.isConversationExists(action.conversation)) {
        ConversationsStore.updateConversation(action.conversation);
      } else {
        ConversationsStore.unshiftConversations([action.conversation]);
      }
      ConversationsStore.sortByDesc();
      ConversationsStore.emitChange();
      break;
  }
});


},{}],482:[function(require,module,exports){
var CHANGE_EVENT, _allMessagesLoaded, _messages;

CHANGE_EVENT = 'change';

_messages = {};

_allMessagesLoaded = {};

window.MessagesStore = _.extend({}, EventEmitter.prototype, {
  emitChange: function() {
    return this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(callback) {
    return this.on(CHANGE_EVENT, callback);
  },
  removeChangeListener: function(callback) {
    return this.off(CHANGE_EVENT, callback);
  },
  pushMessages: function(conversationId, messages) {
    var clonedMessages, i, len, message;
    _messages[conversationId] || (_messages[conversationId] = []);
    clonedMessages = _messages[conversationId].slice(0);
    for (i = 0, len = messages.length; i < len; i++) {
      message = messages[i];
      if (!this.isMessageExists(conversationId, message)) {
        clonedMessages.push(message);
      }
    }
    return _messages[conversationId] = clonedMessages;
  },
  unshiftMessages: function(conversationId, messages) {
    var clonedMessages, i, len, loadedMessage, loadedMessages;
    loadedMessages = messages.reverse();
    clonedMessages = _messages[conversationId].slice(0);
    for (i = 0, len = loadedMessages.length; i < len; i++) {
      loadedMessage = loadedMessages[i];
      clonedMessages.unshift(loadedMessage);
    }
    return _messages[conversationId] = clonedMessages;
  },
  updateMessage: function(conversationId, data) {
    var i, len, message, messages, results;
    _messages[conversationId] || (_messages[conversationId] = []);
    messages = _messages[conversationId];
    results = [];
    for (i = 0, len = messages.length; i < len; i++) {
      message = messages[i];
      if (message.uuid === data.uuid) {
        _.extend(message, data);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  getMessages: function(conversationId) {
    var ref;
    return (ref = _messages[conversationId]) != null ? ref : [];
  },
  getMessageInfo: function(message, conversationId) {
    var conversation, currentUser, messageInfo, recipient;
    conversation = ConversationsStore.getConversation(conversationId);
    currentUser = CurrentUserStore.getUser();
    recipient = conversation.recipient;
    if (recipient.id === message.recipient_id) {
      messageInfo = {
        type: 'outgoing',
        user: currentUser
      };
    } else {
      messageInfo = {
        type: 'incoming',
        user: recipient
      };
    }
    return messageInfo;
  },
  isMessageExists: function(conversationId, message) {
    var i, len, messages, msg;
    _messages[conversationId] || (_messages[conversationId] = []);
    messages = _messages[conversationId];
    for (i = 0, len = messages.length; i < len; i++) {
      msg = messages[i];
      if (msg.uuid === message.uuid) {
        return true;
      }
    }
    return false;
  },
  isAllMessagesLoaded: function(conversationId) {
    return _allMessagesLoaded[conversationId];
  },
  sortByAsc: function(conversationId) {
    var clonedMessages;
    clonedMessages = _messages[conversationId].slice(0);
    clonedMessages.sort(function(a, b) {
      return a.id - b.id;
    });
    return _messages[conversationId] = clonedMessages;
  }
});

MessagesStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action, i, len, message, ref;
  action = payload.action;
  switch (action.type) {
    case 'messagesLoaded':
      MessagesStore.pushMessages(action.conversationId, action.messages);
      MessagesStore.sortByAsc(action.conversationId);
      MessagesStore.emitChange();
      break;
    case 'moreMessagesLoaded':
      _allMessagesLoaded[action.conversationId] = action.allMessagesLoaded;
      MessagesStore.unshiftMessages(action.conversationId, action.messages);
      MessagesStore.emitChange();
      break;
    case 'messagesUpdated':
      ref = action.messages;
      for (i = 0, len = ref.length; i < len; i++) {
        message = ref[i];
        MessagesStore.updateMessage(action.conversationId, message);
      }
      MessagesStore.emitChange();
      break;
    case 'messageReceived':
      message = _.extend(action.message, {
        sendingState: null
      });
      if (MessagesStore.isMessageExists(action.conversationId, message)) {
        MessagesStore.updateMessage(action.conversationId, message);
      } else {
        MessagesStore.pushMessages(action.conversationId, [message]);
        MessagesStore.sortByAsc(action.conversationId);
      }
      MessagesStore.emitChange();
      break;
    case 'messageSubmitted':
      MessagesStore.pushMessages(action.conversationId, [action.message]);
      MessagesStore.emitChange();
      break;
    case 'messageSendingError':
      MessagesStore.updateMessage(action.conversationId, {
        uuid: action.uuid,
        sendingState: 'error'
      });
      MessagesStore.emitChange();
      break;
  }
});


},{}],483:[function(require,module,exports){
var CHANGE_EVENT, CONVERSATIONS_STATE, CREATE_NEW_CONVERSATION_STATE, THREAD_STATE, conversationId, currentState;

CHANGE_EVENT = 'change';

CONVERSATIONS_STATE = 'conversations';

CREATE_NEW_CONVERSATION_STATE = 'createNewConversation';

THREAD_STATE = 'thread';

currentState = CONVERSATIONS_STATE;

conversationId = null;

window.MessagesPopupStateStore = _.extend({}, EventEmitter.prototype, {
  emitChange: function() {
    return this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(callback) {
    return this.on(CHANGE_EVENT, callback);
  },
  removeChangeListener: function(callback) {
    return this.off(CHANGE_EVENT, callback);
  },
  getCurrentState: function() {
    return currentState;
  },
  getCurrentConversationId: function() {
    return conversationId;
  },
  setCurrentConversationId: function(id) {
    return conversationId = id;
  },
  setThreadState: function() {
    return currentState = THREAD_STATE;
  },
  setCreateNewConversationState: function() {
    return currentState = CREATE_NEW_CONVERSATION_STATE;
  },
  setConversationsState: function() {
    return currentState = CONVERSATIONS_STATE;
  }
});

MessagesPopupStateStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'postNewConversation':
      MessagingDispatcher.waitFor([ConversationsStore.dispatchToken]);
      MessagesPopupStateStore.setCurrentConversationId(action.conversation.id);
      MessagesPopupStateStore.setThreadState();
      MessagesPopupStateStore.emitChange();
      break;
    case 'clickNewConversation':
      MessagesPopupStateStore.setCreateNewConversationState();
      MessagesPopupStateStore.emitChange();
      break;
    case 'clickBackButton':
      MessagesPopupStateStore.setConversationsState();
      MessagesPopupStateStore.emitChange();
      break;
    case 'openConversation':
      MessagesPopupStateStore.setCurrentConversationId(action.conversationId);
      MessagesPopupStateStore.setThreadState();
      MessagesPopupStateStore.emitChange();
      break;
    case 'closeMessagesPopup':
      MessagesPopupStateStore.setConversationsState();
      MessagesPopupStateStore.emitChange();
      break;
  }
});


},{}],484:[function(require,module,exports){
var BaseStore, MessagingStatusStore, _, _messagingStatus;

_ = require('lodash');

BaseStore = require('./_base');

_messagingStatus = {
  activeConversationsCount: 0,
  unreadConversationsCount: 0,
  unreadNotificationsCount: 0
};

MessagingStatusStore = _.extend(new BaseStore(), {
  getUnreadConversationsCount: function() {
    return _messagingStatus.unreadConversationsCount;
  },
  getActiveConversationsCount: function() {
    return _messagingStatus.activeConversationsCount;
  },
  getUnreadNotificationsCount: function() {
    return _messagingStatus.unreadNotificationsCount;
  },
  _update: function(messagingStatus) {
    return _messagingStatus = messagingStatus;
  }
});

module.exports = MessagingStatusStore;

MessagingStatusStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'updateMessagingStatus':
      _messagingStatus = action.messagingStatus;
      return MessagingStatusStore.emitChange();
  }
});


},{"./_base":479,"lodash":"lodash"}],485:[function(require,module,exports){
var CHANGE_EVENT, _notifications;

CHANGE_EVENT = 'change';

_notifications = [];

window.NotificationsStore = _.extend({}, EventEmitter.prototype, {
  emitChange: function() {
    return this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(callback) {
    return this.on(CHANGE_EVENT, callback);
  },
  removeChangeListener: function(callback) {
    return this.off(CHANGE_EVENT, callback);
  },
  getNotifications: function() {
    return _notifications;
  },
  unshiftNotifications: function(notifications) {
    var clonedNotifications, i, len, notification;
    clonedNotifications = _notifications.slice(0);
    for (i = 0, len = notifications.length; i < len; i++) {
      notification = notifications[i];
      if (!this.isNotificationExists(notification)) {
        clonedNotifications.unshift(notification);
      }
    }
    return _notifications = clonedNotifications;
  },
  pushNotifications: function(notifications) {
    var clonedNotifications, i, len, notification;
    if (!_.isArray(notifications)) {
      return console.error('Error in pushNotifications method. Argument should be array');
    }
    clonedNotifications = _notifications.slice(0);
    for (i = 0, len = notifications.length; i < len; i++) {
      notification = notifications[i];
      if (!this.isNotificationExists(notification)) {
        clonedNotifications.push(notification);
      }
    }
    return _notifications = clonedNotifications;
  },
  updateNotification: function(data) {
    var i, len, notification, results;
    results = [];
    for (i = 0, len = _notifications.length; i < len; i++) {
      notification = _notifications[i];
      if (!(notification.id === data.id)) {
        continue;
      }
      _.extend(notification, data);
      break;
    }
    return results;
  },
  sortByDesc: function() {
    var clonedNotifications;
    clonedNotifications = _notifications.slice(0);
    clonedNotifications.sort(function(a, b) {
      return b.id - a.id;
    });
    return _notifications = clonedNotifications;
  },
  isNotificationExists: function(notification) {
    var i, len, ntf;
    for (i = 0, len = _notifications.length; i < len; i++) {
      ntf = _notifications[i];
      if (ntf.id === notification.id) {
        return true;
      }
    }
    return false;
  }
});

NotificationsStore.dispatchToken = MessagingDispatcher.register(function(payload) {
  var action, i, len, notification, ref;
  action = payload.action;
  switch (action.type) {
    case 'notificationsLoaded':
      NotificationsStore.pushNotifications(action.notifications);
      NotificationsStore.emitChange();
      break;
    case 'notificationsUpdated':
      ref = action.notifications;
      for (i = 0, len = ref.length; i < len; i++) {
        notification = ref[i];
        NotificationsStore.updateNotification(notification);
      }
      NotificationsStore.emitChange();
      break;
    case 'notificationReceived':
      NotificationsStore.unshiftNotifications([action.notification]);
      NotificationsStore.sortByDesc();
      NotificationsStore.emitChange();
      break;
  }
});


},{}],486:[function(require,module,exports){
var BaseMixin, ERROR_TIMEOUT, ram, rau;

ERROR_TIMEOUT = 1000;

BaseMixin = {
  setActivitiesHandler: function(handler) {
    this.activitiesHandler = handler;
    this.hasActivities = handler.hasActivities;
    this.incrementActivities = handler.increment;
    return this.decrementActivities = handler.decrement;
  }
};

ram = {
  componentWillMount: function() {
    return this.setActivitiesHandler(this.createActivitiesHandler());
  },
  getInitialState: function() {
    return {
      activities: 0
    };
  },
  incrementActivities: function() {
    return this.activitiesHandler.incrementActivities;
  },
  decrementActivities: function() {
    return this.activitiesHandler.decrementActivities;
  },
  createActivitiesHandler: function() {
    var activities, decrement, hasActivities, increment;
    increment = (function() {
      return _.defer((function(_this) {
        return function() {
          return _this.setState({
            activities: ++_this.state.activities
          });
        };
      })(this));
    }).bind(this);
    decrement = (function() {
      return _.defer((function(_this) {
        return function() {
          return _this.setState({
            activities: --_this.state.activities
          });
        };
      })(this));
    }).bind(this);
    hasActivities = (function() {
      return this.state.activities > 0;
    }).bind(this);
    activities = (function() {
      return this.state.activities;
    }).bind(this);
    return {
      increment: increment,
      decrement: decrement,
      hasActivities: hasActivities,
      activities: activities
    };
  }
};

rau = {
  propTypes: {
    activitiesHandler: React.PropTypes.object.isRequired
  },
  componentWillMount: function() {
    return this.setActivitiesHandler(this.props.activitiesHandler);
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setActivitiesHandler(nextProps.activitiesHandler);
  }
};

React.mixins.add('ReactActivitiesMixin', [ram, BaseMixin]);

React.mixins.add('ReactActivitiesUser', [rau, BaseMixin]);


},{}],487:[function(require,module,exports){
window.ComponentManipulationsMixin = {
  safeUpdate: function(func) {
    if (!this._isUnmounted()) {
      func();
    }
  },
  safeUpdateState: function(newStates) {
    if (!this._isUnmounted()) {
      this.setState(newStates);
    }
  },
  _isUnmounted: function() {
    return this._compositeLifeCycleState === 'UNMOUNTING' || this._compositeLifeCycleState === 'UNMOUNTED' || this._lifeCycleState === 'UNMOUNTING' || this._lifeCycleState === 'UNMOUNTED';
  }
};


},{}],488:[function(require,module,exports){
var ENTRY_DELETE_ANIMATION_SPEED;

ENTRY_DELETE_ANIMATION_SPEED = 300;

window.DOMManipulationsMixin = {
  removeEntryFromDOM: function(entryId, speed) {
    var $entryNode;
    if (speed == null) {
      speed = ENTRY_DELETE_ANIMATION_SPEED;
    }
    $entryNode = $("[data-id='" + entryId + "']");
    return $entryNode.slideUp(speed, (function(_this) {
      return function() {
        if (_this.props.onDelete != null) {
          _this.props.onDelete();
        }
        return $entryNode.remove();
      };
    })(this));
  }
};


},{}],489:[function(require,module,exports){
var ERROR_TIMEOUT;

ERROR_TIMEOUT = 1000;

window.ErrorTimerMixin = {
  componentWillUnmount: function() {
    return this.clearErrorTimer();
  },
  clearErrorTimer: function() {
    if (this.errorTimer) {
      return clearTimeout(this.errorTimer);
    }
  },
  startErrorTimer: function() {
    if (!this.state.isError) {
      this.setState({
        isError: true
      });
    }
    return this.errorTimer = setTimeout(this.closeError, 1000);
  },
  closeError: function() {
    return this.setState({
      isError: false
    });
  }
};


},{}],490:[function(require,module,exports){
window.ReactGrammarMixin = {
  declension: function(number, titles) {
    var cases;
    cases = [2, 0, 1, 1, 1, 2];
    if (number % 100 > 4 && number % 100 < 20) {
      return titles[2];
    }
    if (number % 10 < 5) {
      return titles[cases[number % 10]];
    } else {
      return titles[cases[5]];
    }
  },
  timeAgo: function(date) {
    var createdAt, now;
    now = moment();
    createdAt = moment(date);
    if (now.diff(createdAt, 'minutes') < 180) {
      date = createdAt.fromNow();
    } else if (now.diff(createdAt, 'days') < 1) {
      date = createdAt.calendar();
    } else {
      if (now.year() !== createdAt.year()) {
        date = createdAt.format('D MMMM YYYY');
      } else {
        date = createdAt.format('D MMMM');
      }
    }
    return date;
  }
};


},{}],491:[function(require,module,exports){
var COMPONENT_WIDTH, REPOSITION_TIMEOUT;

REPOSITION_TIMEOUT = 500;

COMPONENT_WIDTH = 400;

window.ReactPositionsMixin = {
  propTypes: {
    position: React.PropTypes.object
  },
  positionKey: function() {
    return this.props.type || this.props.title;
  },
  componentDidMount: function() {
    this.restorePosition();
    return $(window).on('resize', this.checkPosition);
  },
  componentWillUnmount: function() {
    return $(window).off('resize', this.checkPosition);
  },
  checkPosition: function() {
    var currentPosition, reposition, smartPosition;
    currentPosition = this.currentPosition();
    smartPosition = PositionsService.smartPosition(currentPosition);
    if ((smartPosition != null) && smartPosition !== currentPosition) {
      reposition = (function(_this) {
        return function() {
          return _this.setPosition(smartPosition);
        };
      })(this);
      clearTimeout(this._repositionTimeout);
      return this._repositionTimeout = setTimeout(reposition, REPOSITION_TIMEOUT);
    }
  },
  currentPosition: function() {
    return $(this.getDOMNode()).position();
  },
  defaultPosition: function() {
    return this.props.position || {
      top: 100,
      left: Math.round($(window).width() / 2 - COMPONENT_WIDTH / 2)
    };
  },
  restorePosition: function() {
    return this.setPosition(this.initialPosition());
  },
  initialPosition: function() {
    return PositionsService.smartPosition(PositionsService.restorePosition(this.positionKey()) || this.defaultPosition());
  },
  initialPositionStyle: function() {
    return this.initialPosition();
  },
  savePosition: function(position) {
    return PositionsService.savePosition(this.positionKey(), position);
  },
  setPosition: function(position) {
    var $node;
    if (position != null) {
      $node = $(this.getDOMNode());
      return $node.css(position);
    }
  }
};


},{}],492:[function(require,module,exports){
var Nanobar, nanobar, oldXHR;

Nanobar = require('nanobar');

nanobar = new Nanobar({
  bg: '#24df88'
});

oldXHR = $.ajaxSettings.xhr;

$.ajaxSettings.xhr = function() {
  var xhr;
  xhr = oldXHR();
  if (xhr instanceof window.XMLHttpRequest) {
    xhr.addEventListener('progress', this.progress, false);
  }
  if (xhr.upload) {
    xhr.upload.addEventListener('progress', this.progress, false);
  }
  return xhr;
};

window.RequesterMixin = {
  createRequest: function(settings, options) {
    var jqXHR;
    if (options == null) {
      options = {};
    }
    if (options.progressBar != null) {
      settings.progress = function(e) {
        var percentComplete, progress;
        if (e.lengthComputable) {
          progress = e.loaded / e.total;
          percentComplete = Math.round(progress * 100);
          return nanobar.go(percentComplete);
        }
      };
    }
    jqXHR = $.ajax(settings);
    jqXHR.always((function(_this) {
      return function() {
        return _this.removeActiveRequest(jqXHR);
      };
    })(this));
    this.addActiveRequest(jqXHR);
    return jqXHR;
  },
  activeRequests: function() {
    var ref;
    return (ref = this._activeRequests) != null ? ref : [];
  },
  addActiveRequest: function(jqXHR) {
    var ref;
    this._activeRequests = (ref = this._activeRequests) != null ? ref : [];
    return this._activeRequests.push(jqXHR);
  },
  removeActiveRequest: function(jqXHR) {
    var index;
    index = this._activeRequests.indexOf(jqXHR);
    if (index > -1) {
      return this._activeRequests.splice(index, 1);
    }
  },
  abortActiveRequests: function() {
    if (!this._activeRequests) {
      return;
    }
    this._activeRequests.map(function(jqXHR) {
      return jqXHR.abort();
    });
    return this._activeRequests = [];
  },
  componentWillUnmount: function() {
    return this.abortActiveRequests();
  }
};


},{"nanobar":"nanobar"}],493:[function(require,module,exports){
window.ScrollerMixin = {
  componentDidMount: function() {
    $(document).on('DOMMouseScroll mousewheel', '.js-scroller-pane', this.handleMouseWheel);
    return this.initScroll();
  },
  componentDidUpdate: function() {
    return this.scroller.update();
  },
  componentWillUnmount: function() {
    $(document).off('DOMMouseScroll mousewheel', '.js-scroller-pane', this.handleMouseWheel);
    this.scroller.dispose();
    return this.$scroller = this.scroller = null;
  },
  initScroll: function() {
    this.$scroller = $(this.refs.scroller.getDOMNode());
    return this.scroller = this.$scroller.baron({
      scroller: '.js-scroller-pane',
      bar: '.js-scroller-bar',
      track: '.js-scroller-track',
      barOnCls: 'scroller--tracked',
      pause: 0
    });
  },
  handleMouseWheel: function(ev) {
    var delta, el, height, prevent, scrollHeight, scrollTop, up;
    el = ev.currentTarget;
    scrollTop = el.scrollTop;
    scrollHeight = el.scrollHeight;
    height = $(el).height();
    delta = (ev.type === 'DOMMouseScroll' ? ev.originalEvent.detail * -40 : ev.originalEvent.wheelDelta);
    up = delta > 0;
    prevent = function() {
      ev.stopPropagation();
      ev.preventDefault();
      ev.returnValue = false;
      return false;
    };
    if (!up && -delta > scrollHeight - height - scrollTop) {
      $(el).scrollTop(scrollHeight);
      return prevent();
    } else if (up && delta > scrollTop) {
      $(el).scrollTop(0);
      return prevent();
    }
  }
};


},{}],494:[function(require,module,exports){
window.ReactShakeMixin = {
  shake: function() {
    var animationEnd, form;
    form = $(this.getDOMNode());
    animationEnd = "webkitAnimationEnd oanimationend msAnimationEnd animationend";
    return form.addClass("shake animated").one(animationEnd, function() {
      return form.removeClass("shake animated");
    });
  }
};


},{}],495:[function(require,module,exports){
window.TouchMixin = {
  componentWillMount: function() {
    if (isMobile()) {
      this.onMouseEnter = function() {};
      return this.onMouseLeave = function() {};
    }
  }
};


},{}],496:[function(require,module,exports){
window.ReactUnmountMixin = {
  unmount: function() {
    return _.defer((function(_this) {
      return function() {
        return React.unmountComponentAtNode(_this.getDOMNode().parentNode);
      };
    })(this));
  }
};


},{}],497:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var DesignFreeOptions = {
  headerFont: ['proximanova'],
  headerSize: ['middle'],
  headerColor: ['#ffffff', '#000000'],
  backgroundColor: ['#ffffff', '#000000'],
  backgroundImageUrl: ':ANY:',
  backgroundImageEnabled: ':ANY:',
  backgroundAlignment: ['justify', 'center'],
  feedBackgroundColor: ['#ffffff', '#000000'],
  feedFont: ['ptsans', 'ptserif'],
  feedFontColor: ['#ffffff', '#000000'],
  feedOpacity: ':ANY:'
};

exports['default'] = DesignFreeOptions;
module.exports = exports['default'];

},{}],498:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var DesignOptions = {
  headerFont: ['proximanova', 'notoserif', 'comfortaa', 'airbornepilot', 'amaranth', 'beermoney', 'dancingscript', 'greatvibes', 'veles', 'zion', 'nautilus', 'ospdin', 'pecita', 'poetsen', 'yessireebob'],
  headerSize: ['small', 'middle', 'large'],
  headerColor: ['#ffffff', '#000000', '#2ac67e', '#e74c3c', '#6c7a89', '#38434e', ':ANY:'],
  backgroundColor: ['#ffffff', '#000000', '#e74c3c', '#c6c9cc', '#6c7a89', ':ANY:'],
  backgroundAlignment: ['justify', 'center'],
  feedBackgroundColor: ['#ffffff', '#000000', '#e74c3c', '#c6c9cc', '#6c7a89', ':ANY:'],
  feedFont: ['ptsans', 'ptserif', 'roboto', 'lora', 'philosopher', 'ptmono', 'berenisadfpro', 'djserif', 'heuristica', 'permian', 'robotoslab', 'clearsans'],
  feedFontColor: ['#ffffff', '#000000', '#c6c9cc', '#6c7a89', '#38434e', ':ANY:']
};

exports['default'] = DesignOptions;
module.exports = exports['default'];

},{}],499:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var DesignPaymentOptions = {
  headerFont: ['proximanova', 'notoserif', 'comfortaa', 'airbornepilot', 'amaranth', 'beermoney', 'dancingscript', 'greatvibes', 'veles', 'zion', 'nautilus', 'ospdin', 'pecita', 'poetsen', 'yessireebob'],
  feedFont: ['ptsans', 'ptserif', 'roboto', 'lora', 'philosopher', 'ptmono', 'berenisadfpro', 'djserif', 'heuristica', 'permian', 'robotoslab', 'clearsans'],
  feedAndHeaderColors: ['cinnabar', 'silversand', 'bluegray', ':ANY:']
};

exports['default'] = DesignPaymentOptions;
module.exports = exports['default'];

},{}],500:[function(require,module,exports){
var CurrentUserResource;

CurrentUserResource = {
  update: function(arg) {
    var beforeSend, complete, data, error, success;
    data = arg.data, beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    data._method = 'PUT';
    return $.ajax({
      url: ApiRoutes.update_profile_url(),
      method: 'POST',
      data: data,
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete
    });
  },
  stopFbCrosspost: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return $.ajax({
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete,
      url: ApiRoutes.fb_crosspost_url(),
      method: 'POST',
      data: {
        _method: 'DELETE'
      }
    });
  },
  stopTwitterCrosspost: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return $.ajax({
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete,
      url: ApiRoutes.twitter_crosspost_url(),
      method: 'POST',
      data: {
        _method: 'DELETE'
      }
    });
  },
  cancelEmailConfirmation: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return $.ajax({
      url: ApiRoutes.request_confirm_url(),
      method: 'POST',
      data: {
        _method: 'DELETE'
      },
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete
    });
  },
  resendEmailConfirmation: function(arg) {
    var beforeSend, complete, error, success;
    beforeSend = arg.beforeSend, success = arg.success, error = arg.error, complete = arg.complete;
    return $.ajax({
      url: ApiRoutes.request_confirm_url(),
      method: 'POST',
      beforeSend: beforeSend,
      success: success,
      error: error,
      complete: complete
    });
  }
};

module.exports = CurrentUserResource;


},{}],501:[function(require,module,exports){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
function CustomWaypointService(selector) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var cb = _ref.cb;
  var _ref$context = _ref.context;
  var context = _ref$context === undefined ? window : _ref$context;

  function trigger(data) {
    if (typeof cb === 'function') {
      cb(data);
    }
  }

  var bounds = undefined;
  var boundsIndex = [];
  var lastPageYOffset = -Infinity;

  function getBounds(selector, context) {
    var c = context === window ? document : context;
    var nodeList = c.querySelectorAll(selector);
    if (!nodeList.length) {
      return {};
    }

    var nodeArr = [].slice.call(nodeList);
    var prevEl = null;
    return nodeArr.reduce(function (acc, el) {
      var rect = el.getBoundingClientRect();
      var top = rect.top + window.pageYOffset;
      if (acc[String(top)]) {
        return acc;
      } else {
        acc[String(top)] = el;
        el.previousWaypoint = prevEl;
        prevEl = el;
        return acc;
      }
    }, {});
  }

  function checkBounds(ev) {
    var pageYOffset = window.pageYOffset;
    var affIndexes = void 0;
    var el = void 0;

    if (pageYOffset > lastPageYOffset) {
      //direction down
      affIndexes = boundsIndex.filter(function (el) {
        return lastPageYOffset <= el && el <= pageYOffset;
      });
      if (affIndexes.length) {
        el = bounds[String(affIndexes[affIndexes.length - 1])];
      }
    } else {
      //direction up
      affIndexes = boundsIndex.filter(function (el) {
        return pageYOffset <= el && el <= lastPageYOffset;
      });
      if (affIndexes.length) {
        var t = bounds[String(affIndexes[0])];
        el = t.previousWaypoint;
      }
    }

    lastPageYOffset = pageYOffset;

    if (el) {
      trigger({
        id: el.getAttribute('data-id'),
        time: el.getAttribute('data-time')
      });
    }
  }

  function calcData() {
    bounds = getBounds(selector, context);
    boundsIndex = _Object$keys(bounds).map(Number).sort();
  }

  function attach() {
    calcData();
    context.addEventListener('scroll', checkBounds, false);
  }

  function detach() {
    context.removeEventListener('scroll', checkBounds, false);
  }

  function refresh() {
    calcData();
  }

  return {
    attach: attach,
    detach: detach,
    refresh: refresh
  };
}

exports['default'] = CustomWaypointService;
module.exports = exports['default'];

},{"babel-runtime/core-js/object/keys":565}],502:[function(require,module,exports){
/*global gon */
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = getSingletonInstance;

var _sharedRoutesApi = require('../../../shared/routes/api');

var _sharedRoutesApi2 = _interopRequireDefault(_sharedRoutesApi);

var _actionsFeedsUpdateActions = require('../actions/FeedsUpdateActions');

var FeedsUpdateActions = _interopRequireWildcard(_actionsFeedsUpdateActions);

var _pusher = require('pusher');

var _pusher2 = _interopRequireDefault(_pusher);

var pusherEvent = {
  NEW_ENTRY: 'new_entry'
};

var _instance = void 0;

function FeedsUpdateService() {
  var user = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  if (!(gon.pusher && gon.pusher.key)) {
    return;
  }

  var userToken = user.api_key && user.api_key.access_token;
  var authOptions = userToken ? {
    auth: {
      headers: {
        'X-User-Token': userToken
      }
    }
  } : null;

  var pusher = new _pusher2['default'](gon.pusher.key, _extends({
    authEndpoint: _sharedRoutesApi2['default'].pusher_auth_url(),
    pong_timeout: 6000,
    unavailable_timeout: 2000
  }, authOptions));

  var channelLive = pusher.subscribe('live');
  var channelBest = pusher.subscribe('best');
  var channelAnonymous = pusher.subscribe('anonymous');
  var channelLiveFlow = pusher.subscribe('live_flow_entries');

  channelLive.bind(pusherEvent.NEW_ENTRY, FeedsUpdateActions.addLiveEntry);
  channelBest.bind(pusherEvent.NEW_ENTRY, FeedsUpdateActions.addBestEntry);
  channelAnonymous.bind(pusherEvent.NEW_ENTRY, FeedsUpdateActions.addAnonymousEntry);
  channelLiveFlow.bind(pusherEvent.NEW_ENTRY, FeedsUpdateActions.addLiveFlowEntry);

  if (userToken && user.id) {
    var channelFriends = pusher.subscribe('private-' + user.id + '-friends');

    channelFriends.bind(pusherEvent.NEW_ENTRY, FeedsUpdateActions.addFriendsEntry);
  }
}

function getSingletonInstance() {
  if (_instance) {
    return _instance;
  } else {
    _instance = FeedsUpdateService.apply(undefined, arguments);
    return _instance;
  }
}

module.exports = exports['default'];

},{"../../../shared/routes/api":557,"../actions/FeedsUpdateActions":8,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"babel-runtime/helpers/interop-require-wildcard":575,"pusher":"pusher"}],503:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _componentsAlertsNotice = require('../components/alerts/Notice');

var _componentsAlertsNotice2 = _interopRequireDefault(_componentsAlertsNotice);

var NoticeService = {
  _ID: 1,
  _queue: [],
  _activeID: null,
  _notices: {},

  getID: function getID() {
    return 'ID_' + this._ID++;
  },

  getActive: function getActive() {
    return this._notices[this._activeID];
  },

  getContainer: function getContainer() {
    var container = document.querySelector('[notice-container]');

    if (container == null) {
      container = document.createElement('div');
      container.setAttribute('notice-container', '');
      document.body.appendChild(container);
    }

    return container;
  },

  getTimeoutForText: function getTimeoutForText() {
    var text = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    var multiplier = text.length < 30 ? 200 : 100;
    return text.length * multiplier;
  },

  register: function register(type, text, timeout) {
    var ID = this.getID();
    this._notices[ID] = { type: type, text: text, timeout: timeout };
    return ID;
  },

  addToQueue: function addToQueue(ID) {
    if (!this._notices.hasOwnProperty(ID)) {
      return false;
    }
    this._queue.push(ID);
  },

  notify: function notify(type, text, timeout) {
    timeout = timeout || this.getTimeoutForText(text);
    var ID = this.register(type, text, timeout);
    this.addToQueue(ID);
    this.render();
  },

  notifyError: function notifyError(text, timeout) {
    this.notify('error', text, timeout);
  },

  notifySuccess: function notifySuccess(text, timeout) {
    this.notify('success', text, timeout);
  },

  errorResponse: function errorResponse(response, timeout) {
    function isPageLoadingCanceled(response) {
      // Вернет true, если во время запроса пользователь:
      // - Остановил загрузку страницы
      // - Перешёл на другую страницу
      return response.statusText === 'error' && response.status == 0 && response.readyState == 0;
    }

    if (isPageLoadingCanceled(response) || response.statusText === 'abort') {
      return false;
    }

    var message = '';

    if (response.responseJSON != null) {
      var json = response.responseJSON;

      message = json.message || json.long_message || json.error;
    } else {
      message = i18n.t('network_error', { text: response.statusText });
    }

    this.notifyError(message, timeout);
  },

  render: function render() {
    if (this._queue.length < 1) {
      return false;
    }

    this._activeID = this._queue[this._queue.length - 1];
    var container = this.getContainer(),
        data = this.getActive();

    React.unmountComponentAtNode(container);
    React.render(React.createElement(_componentsAlertsNotice2['default'], _extends({}, data, { onClose: this.close.bind(this) })), container);
  },

  close: function close() {
    var container = this.getContainer(),
        ID = this._queue.pop();

    React.unmountComponentAtNode(container);
    delete this._notices[ID];
    this._activeID = null;
    this.render();
  },

  closeAll: function closeAll() {
    var container = this.getContainer();

    React.unmountComponentAtNode(container);
    this._queue = [];
    this._activeID = null;
    this._notices = {};
  }
};

exports['default'] = NoticeService;
module.exports = exports['default'];

},{"../components/alerts/Notice":242,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"lodash":"lodash"}],504:[function(require,module,exports){
var CurrentUserStore, DesignFreeOptions, DesignOptionsService;

CurrentUserStore = require('../stores/current_user');

DesignFreeOptions = require('../models/designFreeOptions');

DesignOptionsService = {
  hasPaidValues: function(design) {
    var key, val;
    for (key in design) {
      val = design[key];
      if (!DesignFreeOptions[key]) {
        continue;
      }
      if (DesignFreeOptions[key] === ':ANY:') {
        continue;
      }
      if (DesignFreeOptions[key].indexOf(val) === -1) {
        return true;
      }
    }
    return false;
  },
  isPaidValue: function(option, value) {
    var i, len, ref, val;
    if (!DesignFreeOptions[option]) {
      throw new Error("Неизвестная опция " + option);
    }
    if (DesignFreeOptions[option] === ':ANY:') {
      return false;
    }
    ref = DesignFreeOptions[option];
    for (i = 0, len = ref.length; i < len; i++) {
      val = ref[i];
      if (val === value) {
        return false;
      }
    }
    return true;
  },
  isBoughtValue: function(option, value) {
    return CurrentUserStore.hasDesignBundle();
  }
};

module.exports = DesignOptionsService;


},{"../models/designFreeOptions":497,"../stores/current_user":517}],505:[function(require,module,exports){
var DesignPresenterService, _;

_ = require('lodash');

DesignPresenterService = {
  options: {
    headerFont: [
      {
        value: 'proximanova',
        name: 'proximanova',
        title: 'Proxima Nova',
        text: 'Aa'
      }, {
        value: 'notoserif',
        name: 'notoserif',
        title: 'Noto Serif',
        text: 'Aa'
      }, {
        value: 'comfortaa',
        name: 'comfortaa',
        title: 'Comfortaa',
        text: 'Aa'
      }, {
        value: 'airbornepilot',
        name: 'airbornepilot',
        title: 'Airborne Pilot',
        text: 'Aa'
      }, {
        value: 'amaranth',
        name: 'amaranth',
        title: 'Amaranth',
        text: 'Aa'
      }, {
        value: 'beermoney',
        name: 'beermoney',
        title: 'Beer Money',
        text: 'Aa'
      }, {
        value: 'dancingscript',
        name: 'dancingscript',
        title: 'Dancing Script',
        text: 'Aa'
      }, {
        value: 'greatvibes',
        name: 'greatvibes',
        title: 'Great Vibes',
        text: 'Aa'
      }, {
        value: 'veles',
        name: 'veles',
        title: 'Veles',
        text: 'Aa'
      }, {
        value: 'zion',
        name: 'zion',
        title: 'ZionTrain',
        text: 'Aa'
      }, {
        value: 'nautilus',
        name: 'nautilus',
        title: 'Nautilus Pompilius',
        text: 'Aa'
      }, {
        value: 'ospdin',
        name: 'ospdin',
        title: 'OSP-DIN',
        text: 'Aa'
      }, {
        value: 'pecita',
        name: 'pecita',
        title: 'Pecita',
        text: 'Aa'
      }, {
        value: 'poetsen',
        name: 'poetsen',
        title: 'PoetsenOne',
        text: 'Aa'
      }, {
        value: 'yessireebob',
        name: 'yessireebob',
        title: 'Yes Siree Bob',
        text: 'Aa'
      }
    ],
    headerSize: [
      {
        value: 'small',
        name: 'small',
        text: function() {
          return i18n.t('design_header_size_small');
        }
      }, {
        value: 'middle',
        name: 'middle',
        text: function() {
          return i18n.t('design_header_size_medium');
        }
      }, {
        value: 'large',
        name: 'large',
        text: function() {
          return i18n.t('design_header_size_large');
        }
      }
    ],
    headerColor: [
      {
        value: '#ffffff',
        name: 'white',
        title: function() {
          return i18n.t('design_colors_white');
        }
      }, {
        value: '#000000',
        name: 'black',
        title: function() {
          return i18n.t('design_colors_black');
        }
      }, {
        value: ':ANY:',
        name: 'custom',
        title: function() {
          return i18n.t('design_colors_custom');
        }
      }, {
        value: '#2ac67e',
        name: 'shamrock',
        title: function() {
          return i18n.t('design_colors_shamrock');
        }
      }, {
        value: '#e74c3c',
        name: 'cinnabar',
        title: function() {
          return i18n.t('design_colors_cinnabar');
        }
      }, {
        value: '#6c7a89',
        name: 'bluegray',
        title: function() {
          return i18n.t('design_colors_bluegray');
        }
      }, {
        value: '#38434e',
        name: 'madison',
        title: function() {
          return i18n.t('design_colors_madison');
        }
      }
    ],
    backgroundColor: [
      {
        value: '#ffffff',
        name: 'white',
        title: function() {
          return i18n.t('design_colors_white');
        }
      }, {
        value: '#000000',
        name: 'black',
        title: function() {
          return i18n.t('design_colors_black');
        }
      }, {
        value: ':ANY:',
        name: 'custom',
        title: function() {
          return i18n.t('design_colors_custom');
        }
      }, {
        value: '#e74c3c',
        name: 'cinnabar',
        title: function() {
          return i18n.t('design_colors_cinnabar');
        }
      }, {
        value: '#c6c9cc',
        name: 'silversand',
        title: function() {
          return i18n.t('design_colors_silversand');
        }
      }, {
        value: '#6c7a89',
        name: 'bluegray',
        title: function() {
          return i18n.t('design_colors_bluegray');
        }
      }
    ],
    backgroundAlignment: [
      {
        value: 'justify',
        name: 'justify',
        text: function() {
          return i18n.t('design_background_alignment_justify');
        }
      }, {
        value: 'center',
        name: 'center',
        text: function() {
          return i18n.t('design_background_alignment_center');
        }
      }
    ],
    feedBackgroundColor: [
      {
        value: '#ffffff',
        name: 'white',
        title: function() {
          return i18n.t('design_colors_white');
        }
      }, {
        value: '#000000',
        name: 'black',
        title: function() {
          return i18n.t('design_colors_black');
        }
      }, {
        value: ':ANY:',
        name: 'custom',
        title: function() {
          return i18n.t('design_colors_custom');
        }
      }, {
        value: '#e74c3c',
        name: 'cinnabar',
        title: function() {
          return i18n.t('design_colors_cinnabar');
        }
      }, {
        value: '#c6c9cc',
        name: 'silversand',
        title: function() {
          return i18n.t('design_colors_silversand');
        }
      }, {
        value: '#6c7a89',
        name: 'bluegray',
        title: function() {
          return i18n.t('design_colors_bluegray');
        }
      }
    ],
    feedFont: [
      {
        value: 'ptsans',
        name: 'ptsans',
        title: 'PT Sans',
        text: 'Aa'
      }, {
        value: 'ptserif',
        name: 'ptserif',
        title: 'PT Serif',
        text: 'Aa'
      }, {
        value: 'roboto',
        name: 'roboto',
        title: 'Roboto',
        text: 'Aa'
      }, {
        value: 'lora',
        name: 'lora',
        title: 'Lora',
        text: 'Aa'
      }, {
        value: 'philosopher',
        name: 'philosopher',
        title: 'Philosopher',
        text: 'Aa'
      }, {
        value: 'ptmono',
        name: 'ptmono',
        title: 'PT Mono',
        text: 'Aa'
      }, {
        value: 'berenisadfpro',
        name: 'berenisadfpro',
        title: 'Berenis ADF Pro',
        text: 'Aa'
      }, {
        value: 'djserif',
        name: 'djserif',
        title: 'DejaVu Serif Condensed',
        text: 'Aa'
      }, {
        value: 'heuristica',
        name: 'heuristica',
        title: 'Heuristica',
        text: 'Aa'
      }, {
        value: 'permian',
        name: 'permian',
        title: 'Permian Slab Serif',
        text: 'Aa'
      }, {
        value: 'robotoslab',
        name: 'robotoslab',
        title: 'Roboto Slab',
        text: 'Aa'
      }, {
        value: 'clearsans',
        name: 'clearsans',
        title: 'Clear Sans',
        text: 'Aa'
      }
    ],
    feedFontColor: [
      {
        value: '#ffffff',
        name: 'white',
        title: function() {
          return i18n.t('design_colors_white');
        }
      }, {
        value: '#000000',
        name: 'black',
        title: function() {
          return i18n.t('design_colors_black');
        }
      }, {
        value: '#c6c9cc',
        name: 'silversand',
        title: function() {
          return i18n.t('design_colors_silversand');
        }
      }, {
        value: '#6c7a89',
        name: 'bluegray',
        title: function() {
          return i18n.t('design_colors_bluegray');
        }
      }, {
        value: '#38434e',
        name: 'madison',
        title: function() {
          return i18n.t('design_colors_madison');
        }
      }, {
        value: ':ANY:',
        name: 'custom',
        title: function() {
          return i18n.t('design_colors_custom');
        }
      }
    ]
  },
  getTitle: function(option, value) {
    var property;
    property = this.getProperty(option, value);
    if (property != null ? property.title : void 0) {
      if (_.isFunction(property.title)) {
        return property.title();
      } else {
        return property.title;
      }
    }
  },
  getText: function(option, value) {
    var property;
    property = this.getProperty(option, value);
    if (property != null ? property.text : void 0) {
      if (_.isFunction(property.text)) {
        return property.text();
      } else {
        return property.text;
      }
    } else {
      return this.getTitle(option, value);
    }
  },
  getName: function(option, value) {
    var property;
    property = this.getProperty(option, value);
    if (property != null ? property.name : void 0) {
      return property.name;
    }
  },
  getProperty: function(option, value) {
    var i, len, property, propertyAny, ref;
    propertyAny = null;
    if (!this.options[option]) {
      throw new Error("Неизвестная опция " + option);
    }
    ref = this.options[option];
    for (i = 0, len = ref.length; i < len; i++) {
      property = ref[i];
      if (property.value === ':ANY:') {
        propertyAny = property;
      }
      if (property.value === value) {
        return property;
      }
    }
    if (propertyAny != null) {
      return propertyAny;
    }
    return null;
  }
};

module.exports = DesignPresenterService;


},{"lodash":"lodash"}],506:[function(require,module,exports){
var DesignPreviewService, _, jss, sheet;

_ = require('lodash');

jss = require('jss');

sheet = jss.createStyleSheet({}, {
  named: false
}).attach();

sheet.element.setAttribute('design-settings-sheet', '');

DesignPreviewService = {
  page: document.body,
  pageCover: function() {
    return document.querySelector('.page-cover');
  },
  feed: function() {
    return document.querySelector('.content-area__bg');
  },
  states: {
    headerFont: 'designtlog-headerfont',
    headerSize: 'designtlog-headersize',
    headerColor: 'designtlog-headercolor',
    backgroundColor: 'designtlog-bgcolor',
    backgroundAlignment: 'designtlog-bgalignment',
    feedBackgroundColor: 'designtlog-feedbgcolor',
    feedFont: 'designtlog-feedfont',
    feedFontColor: 'designtlog-feedcolor'
  },
  switchableStates: {
    backgroundImageEnabled: 'designtlog-bgimage-none'
  },
  classNames: {
    headerFont: [
      {
        value: 'proximanova',
        className: 'proximanova'
      }, {
        value: 'notoserif',
        className: 'notoserif'
      }, {
        value: 'comfortaa',
        className: 'comfortaa'
      }, {
        value: 'airbornepilot',
        className: 'airbornepilot'
      }, {
        value: 'amaranth',
        className: 'amaranth'
      }, {
        value: 'beermoney',
        className: 'beermoney'
      }, {
        value: 'dancingscript',
        className: 'dancingscript'
      }, {
        value: 'greatvibes',
        className: 'greatvibes'
      }, {
        value: 'veles',
        className: 'veles'
      }, {
        value: 'zion',
        className: 'zion'
      }, {
        value: 'nautilus',
        className: 'nautilus'
      }, {
        value: 'ospdin',
        className: 'ospdin'
      }, {
        value: 'pecita',
        className: 'pecita'
      }, {
        value: 'poetsen',
        className: 'poetsen'
      }, {
        value: 'yessireebob',
        className: 'yessireebob'
      }
    ],
    headerSize: [
      {
        value: 'small',
        className: 'small'
      }, {
        value: 'middle',
        className: 'middle'
      }, {
        value: 'large',
        className: 'large'
      }
    ],
    headerColor: [
      {
        value: '#ffffff',
        className: 'white'
      }, {
        value: '#000000',
        className: 'black'
      }, {
        value: ':ANY:',
        className: 'custom'
      }, {
        value: '#2ac67e',
        className: 'shamrock'
      }, {
        value: '#e74c3c',
        className: 'cinnabar'
      }, {
        value: '#6c7a89',
        className: 'bluegray'
      }, {
        value: '#38434e',
        className: 'madison'
      }
    ],
    backgroundColor: [
      {
        value: '#ffffff',
        className: 'white'
      }, {
        value: '#000000',
        className: 'black'
      }, {
        value: ':ANY:',
        className: 'custom'
      }, {
        value: '#e74c3c',
        className: 'cinnabar'
      }, {
        value: '#c6c9cc',
        className: 'silversand'
      }, {
        value: '#6c7a89',
        className: 'bluegray'
      }
    ],
    backgroundAlignment: [
      {
        value: 'justify',
        className: 'justify'
      }, {
        value: 'center',
        className: 'center'
      }
    ],
    feedBackgroundColor: [
      {
        value: '#ffffff',
        className: 'white'
      }, {
        value: '#000000',
        className: 'black'
      }, {
        value: ':ANY:',
        className: 'custom'
      }, {
        value: '#e74c3c',
        className: 'cinnabar'
      }, {
        value: '#c6c9cc',
        className: 'silversand'
      }, {
        value: '#6c7a89',
        className: 'bluegray'
      }
    ],
    feedFont: [
      {
        value: 'ptsans',
        className: 'ptsans'
      }, {
        value: 'ptserif',
        className: 'ptserif'
      }, {
        value: 'roboto',
        className: 'roboto'
      }, {
        value: 'lora',
        className: 'lora'
      }, {
        value: 'philosopher',
        className: 'philosopher'
      }, {
        value: 'ptmono',
        className: 'ptmono'
      }, {
        value: 'berenisadfpro',
        className: 'berenisadfpro'
      }, {
        value: 'djserif',
        className: 'djserif'
      }, {
        value: 'heuristica',
        className: 'heuristica'
      }, {
        value: 'permian',
        className: 'permian'
      }, {
        value: 'robotoslab',
        className: 'robotoslab'
      }, {
        value: 'clearsans',
        className: 'clearsans'
      }
    ],
    feedFontColor: [
      {
        value: '#ffffff',
        className: 'white'
      }, {
        value: '#000000',
        className: 'black'
      }, {
        value: '#c6c9cc',
        className: 'silversand'
      }, {
        value: '#6c7a89',
        className: 'bluegray'
      }, {
        value: '#38434e',
        className: 'madison'
      }, {
        value: ':ANY:',
        className: 'custom'
      }
    ]
  },
  rules: {
    headerColor: function(value) {
      return {
        '.design-settings__option--headercolor .design-settings__state-i': {
          'border-color': value,
          'background-color': value
        },
        '.hero': {
          'color': value
        }
      };
    },
    backgroundColor: function(value) {
      return {
        '.design-settings__option--bgcolor .design-settings__state-i': {
          'border-color': value,
          'background-color': value
        },
        '.page-cover': {
          'background-color': value
        }
      };
    },
    feedBackgroundColor: function(value) {
      return {
        '.design-settings__option--feedbgcolor .design-settings__state-i': {
          'border-color': value,
          'background-color': value
        },
        '.content-area__bg': {
          'background-color': value
        }
      };
    },
    feedFontColor: function(value) {
      return {
        '.design-settings__option--feedcolor .design-settings__state-i': {
          'border-color': value,
          'background-color': value
        },
        '.page-body': {
          'color': value
        }
      };
    }
  },
  apply: function(design) {
    var classes, newClass, propertyClassName, ref, ref1, state, states, switchableStates, value;
    states = {};
    switchableStates = {};
    for (state in design) {
      value = design[state];
      if (this.states[state]) {
        states[state] = value;
      }
      if (this.switchableStates[state]) {
        switchableStates[state] = value;
      }
    }
    classes = this.page.className.split(' ').filter((function(_this) {
      return function(className) {
        var k, m;
        for (k in states) {
          if (className.indexOf(_this.states[k]) === 0) {
            return false;
          }
        }
        for (m in switchableStates) {
          if (_this.switchableStates[m] === className) {
            return false;
          }
        }
        return true;
      };
    })(this));
    for (state in states) {
      value = states[state];
      propertyClassName = this.getPropertyClassName(state, value);
      newClass = this.states[state] + '-' + propertyClassName;
      classes.push(newClass);
    }
    for (state in switchableStates) {
      value = switchableStates[state];
      switch (state) {
        case 'backgroundImageEnabled':
          if (!value) {
            newClass = this.switchableStates[state];
            classes.push(newClass);
          }
      }
    }
    for (state in states) {
      value = states[state];
      propertyClassName = this.getPropertyClassName(state, value);
      if (propertyClassName === 'custom') {
        this.setStyles(state, value);
      }
    }
    if (design.backgroundImageUrl) {
      if ((ref = this.pageCover()) != null) {
        ref.style.backgroundImage = 'url("' + design.backgroundImageUrl + '")';
      }
    }
    if (_.isNumber(design.feedOpacity)) {
      if ((ref1 = this.feed()) != null) {
        ref1.style.opacity = design.feedOpacity;
      }
    }
    return this.page.className = _.trim(classes.join(' '));
  },
  getPropertyClassName: function(option, value) {
    var i, len, property, propertyAny, ref;
    propertyAny = null;
    if (!this.classNames[option]) {
      throw new Error("Неизвестная опция " + option);
    }
    ref = this.classNames[option];
    for (i = 0, len = ref.length; i < len; i++) {
      property = ref[i];
      if (property.value === ':ANY:') {
        propertyAny = property;
      }
      if (property.value === value) {
        return property.className;
      }
    }
    if (propertyAny != null ? propertyAny.className : void 0) {
      return propertyAny.className;
    }
    return null;
  },
  setStyles: function(option, value) {
    var rule;
    rule = this.rules[option];
    if (!rule) {
      throw new Error("Неизвестная опция " + option);
    }
    return sheet.addRules(rule(value));
  }
};

module.exports = DesignPreviewService;


},{"jss":652,"lodash":"lodash"}],507:[function(require,module,exports){
var EntryKeeper, LAST_PRIVACY_KEY, NormalizedEntry, STORAGE_PREFIX, key, keyAnonymous, keyExisting, keyNew, storage;

NormalizedEntry = require('../entities/normalizedEntry');

STORAGE_PREFIX = 'entries';

LAST_PRIVACY_KEY = 'editor:lastEntryPrivacy';

storage = AppStorage;

key = function(normalizedEntry) {
  switch (false) {
    case normalizedEntry.type !== 'anonymous':
      return keyAnonymous();
    case !normalizedEntry.id:
      return keyExisting(normalizedEntry.id, normalizedEntry.updatedAt);
    default:
      return keyNew();
  }
};

keyNew = function() {
  return STORAGE_PREFIX + ':new';
};

keyAnonymous = function() {
  return STORAGE_PREFIX + ':anonymous';
};

keyExisting = function(entryID, entryUpdatedAt) {
  var time;
  time = new Date(entryUpdatedAt).getTime();
  return STORAGE_PREFIX + ':' + entryID + ':' + time;
};

EntryKeeper = {
  restore: function(storageKey) {
    var entryData;
    entryData = JSON.parse(storage.getItem(storageKey));
    if (entryData != null) {
      if (entryData.type == null) {
        entryData.type = 'text';
      }
      return new NormalizedEntry(entryData);
    } else {
      return null;
    }
  },
  restoreExistingEntry: function(entryID, entryUpdatedAt) {
    return this.restore(keyExisting(entryID, entryUpdatedAt));
  },
  restoreExistingNewEntry: function() {
    return this.restore(keyNew());
  },
  restoreExistingAnonymousEntry: function() {
    return this.restore(keyAnonymous());
  },
  restoreLastEntryPrivacy: function() {
    return storage.getItem(LAST_PRIVACY_KEY) || null;
  },
  store: function(normalizedEntry) {
    var storageKey;
    storageKey = key(normalizedEntry);
    return storage.setItem(storageKey, JSON.stringify(normalizedEntry));
  },
  storeLastEntryPrivacy: function(entryPrivacy) {
    var storageKey;
    storageKey = LAST_PRIVACY_KEY;
    return storage.setItem(storageKey, entryPrivacy);
  },
  remove: function(normalizedEntry) {
    var storageKey;
    storageKey = key(normalizedEntry);
    return storage.removeItem(storageKey);
  }
};

module.exports = EntryKeeper;


},{"../entities/normalizedEntry":431}],508:[function(require,module,exports){
var CORRESPONDENCE_NORMALIZED_TABLE, EntryNormalizationService, NormalizedEntry, _;

_ = require('lodash');

NormalizedEntry = require('../entities/normalizedEntry');

CORRESPONDENCE_NORMALIZED_TABLE = {
  text: {
    title: 'data1',
    text: 'data2'
  },
  anonymous: {
    title: 'data1',
    text: 'data2'
  },
  image: {
    title: 'data2',
    imageUrl: 'imageUrl',
    imageAttachments: 'imageAttachments'
  },
  instagram: {
    title: 'data2',
    embedUrl: 'embedUrl',
    embedHtml: 'embedHtml'
  },
  music: {
    title: 'data2',
    embedUrl: 'embedUrl',
    embedHtml: 'embedHtml'
  },
  video: {
    title: 'data2',
    embedUrl: 'embedUrl',
    embedHtml: 'embedHtml'
  },
  quote: {
    source: 'data1',
    text: 'data2'
  }
};

EntryNormalizationService = {
  normalize: function(entry) {
    var attrs;
    attrs = {
      id: entry.id,
      type: entry.type,
      privacy: entry.privacy,
      pinOrderUrl: entry.order_url,
      pinState: entry.fixed_state,
      pinnedTill: entry.fixed_up_at,
      updatedAt: new Date(entry.updated_at).getTime()
    };
    switch (entry.type) {
      case 'text':
      case 'anonymous':
        _.extend(attrs, {
          data1: entry.title,
          data2: entry.text
        });
        break;
      case 'image':
        _.extend(attrs, {
          data2: entry.title,
          imageUrl: entry.image_url,
          imageAttachments: entry.image_attachments
        });
        break;
      case 'instagram':
      case 'music':
      case 'video':
        _.extend(attrs, {
          data2: entry.title,
          embedUrl: entry.iframely.url,
          embedHtml: entry.iframely.html
        });
        break;
      case 'quote':
        _.extend(attrs, {
          data1: entry.source,
          data2: entry.text
        });
        break;
      default:
        if (typeof console.error === "function") {
          console.error("Unknown entry type " + entry.type);
        }
    }
    return new NormalizedEntry(attrs);
  },
  getNormalizedEntryValue: function(normalizedEntry, key) {
    var correspondingValues;
    correspondingValues = CORRESPONDENCE_NORMALIZED_TABLE[normalizedEntry.type];
    return normalizedEntry[correspondingValues[key]] || null;
  },
  getNormalizedKey: function(normalizedEntry, key) {
    var correspondingValues;
    correspondingValues = CORRESPONDENCE_NORMALIZED_TABLE[normalizedEntry.type];
    return correspondingValues[key] || null;
  }
};

module.exports = EntryNormalizationService;


},{"../entities/normalizedEntry":431,"lodash":"lodash"}],509:[function(require,module,exports){
var MIN_OFFSET, MOVE_OFFSET, STORAGE_PREFIX;

MOVE_OFFSET = 100;

MIN_OFFSET = 50;

STORAGE_PREFIX = 'positions:';

window.PositionsService = {
  storage: AppStorage,
  savePosition: function(key, position) {
    return this.storage.setItem(this._positionKey(key), JSON.stringify(position));
  },
  restorePosition: function(key) {
    return JSON.parse(this.storage.getItem(this._positionKey(key)));
  },
  smartPosition: function(position) {
    var windowHeight, windowWidth;
    if (position == null) {
      return;
    }
    position = _.clone(position);
    windowWidth = $(window).width();
    windowHeight = $(window).height();
    if (position.top > (windowHeight - MIN_OFFSET)) {
      position.top = windowHeight - MOVE_OFFSET;
    }
    if (position.top < 0) {
      position.top = 0;
    }
    if (position.left > (windowWidth - MIN_OFFSET)) {
      position.left = windowWidth - MOVE_OFFSET;
    }
    if (position.left < 0) {
      position.left = 0;
    }
    return position;
  },
  _positionKey: function(key) {
    return STORAGE_PREFIX + ':' + key;
  }
};


},{}],510:[function(require,module,exports){
window.UuidService = {
  generate: function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return (s4() + s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4() + s4() + s4());
  }
};


},{}],511:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibObjectAssign = require('react/lib/Object.assign');

var _reactLibObjectAssign2 = _interopRequireDefault(_reactLibObjectAssign);

var _constantsConstants = require('../constants/constants');

var _constantsConstants2 = _interopRequireDefault(_constantsConstants);

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _servicesEntryNormalization = require('../services/entryNormalization');

var _servicesEntryNormalization2 = _interopRequireDefault(_servicesEntryNormalization);

var _servicesEntryKeeper = require('../services/entryKeeper');

var _servicesEntryKeeper2 = _interopRequireDefault(_servicesEntryKeeper);

var _entitiesNormalizedEntry = require('../entities/normalizedEntry');

var _entitiesNormalizedEntry2 = _interopRequireDefault(_entitiesNormalizedEntry);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var PRIVACY_TYPES = {
  'private': ['public', 'private'],
  'public': ['live', 'public', 'private']
};

var _loading = false,
    _creatingAttachments = false,
    _tlog = null,
    _entry = new _entitiesNormalizedEntry2['default']({
  type: 'text',
  privacy: 'public'
});

function getPrivacyByTlogType(tlogType) {
  var privacy = _servicesEntryKeeper2['default'].restoreLastEntryPrivacy(),
      privacyTypes = PRIVACY_TYPES[tlogType];

  if (privacy != null) {
    if (privacyTypes != null) {
      return privacyTypes.indexOf(privacy) === -1 ? privacyTypes[0] : privacy;
    } else {
      return 'public';
    }
  } else {
    return privacyTypes != null ? privacyTypes[0] : 'public';
  }
}

var EditorStore = (0, _reactLibObjectAssign2['default'])(new _base2['default'](), {
  getTlog: function getTlog() {
    return _tlog;
  },

  getTlogID: function getTlogID() {
    return _tlog ? _tlog.id : null;
  },

  getEntry: function getEntry() {
    return _entry;
  },

  getEntryID: function getEntryID() {
    return _entry.id;
  },

  getEntryType: function getEntryType() {
    return _entry.type;
  },

  getEntryFlows: function getEntryFlows() {
    return _entry.flows;
  },

  getEntryPrivacy: function getEntryPrivacy() {
    return _entry.privacy;
  },

  getEntryImageAttachmentsIDs: function getEntryImageAttachmentsIDs() {
    var IDs = [],
        imageAttachments = this.getEntryValue('imageAttachments');

    if (imageAttachments != null) {
      imageAttachments.forEach(function (item) {
        return IDs.push(item.id);
      });
    }

    return IDs;
  },

  getEntryValue: function getEntryValue(key) {
    return _servicesEntryNormalization2['default'].getNormalizedEntryValue(_entry, key);
  },

  isLoading: function isLoading() {
    return _loading;
  },

  isCreatingAttachments: function isCreatingAttachments() {
    return _creatingAttachments;
  }
});

EditorStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var action = payload.action;

  switch (action.type) {
    case _constantsConstants2['default'].editor.INIT:
      var entry = action.entry,
          tlog = action.tlog,
          tlogType = action.tlogType;

      if (entry != null && entry.id) {
        var id = entry.id;
        var updated_at = entry.updated_at;

        if (tlogType === 'anonymous') {
          _entry = _servicesEntryKeeper2['default'].restoreExistingAnonymousEntry() || _servicesEntryNormalization2['default'].normalize(entry);
        } else {
          _entry = _servicesEntryKeeper2['default'].restoreExistingEntry(id, updated_at) || _servicesEntryNormalization2['default'].normalize(entry);
        }
      } else {
        if (tlogType === 'anonymous') {
          _entry = _servicesEntryKeeper2['default'].restoreExistingAnonymousEntry() || new _entitiesNormalizedEntry2['default']({
            type: 'anonymous',
            privacy: 'public'
          });
        } else {
          _entry = _servicesEntryKeeper2['default'].restoreExistingNewEntry() || new _entitiesNormalizedEntry2['default']({
            type: 'text',
            privacy: getPrivacyByTlogType(tlogType)
          });
        }
      }
      _tlog = tlog || null;
      break;

    case _constantsConstants2['default'].editor.UPDATE_FIELD:
      var key = action.key,
          value = action.value;

      var normalizedKey = _servicesEntryNormalization2['default'].getNormalizedKey(_entry, key);

      if (normalizedKey != null) {
        _entry[normalizedKey] = value;
        _servicesEntryKeeper2['default'].store(_entry);
      }
      break;

    case _constantsConstants2['default'].editor.CHANGE_TYPE:
      _entry.type = action.entryType;
      _servicesEntryKeeper2['default'].store(_entry);
      break;

    case _constantsConstants2['default'].editor.CHANGE_PRIVACY:
      _entry.privacy = action.entryPrivacy;
      _servicesEntryKeeper2['default'].store(_entry);
      _servicesEntryKeeper2['default'].storeLastEntryPrivacy(action.entryPrivacy);
      break;

    case _constantsConstants2['default'].editor.ENTRY_SAVE:
      _loading = true;
      break;

    case _constantsConstants2['default'].editor.ENTRY_SAVE_SUCCESS:
      _servicesEntryKeeper2['default'].remove(_entry);
      break;

    case _constantsConstants2['default'].editor.ENTRY_SAVE_ERROR:
      _loading = false;
      break;

    case _constantsConstants2['default'].editor.ENTRY_CREATING_ATTACHMENTS_START:
      _creatingAttachments = true;
      break;

    case _constantsConstants2['default'].editor.ENTRY_CREATING_ATTACHMENTS_END:
      _creatingAttachments = false;
      break;

    default:
      return true;
  }
  EditorStore.emitChange();
});

exports['default'] = EditorStore;
module.exports = exports['default'];

},{"../constants/constants":409,"../dispatchers/dispatcher":426,"../entities/normalizedEntry":431,"../services/entryKeeper":507,"../services/entryNormalization":508,"./_base":516,"babel-runtime/helpers/interop-require-default":574,"react/lib/Object.assign":709}],512:[function(require,module,exports){
'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionMap;

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsEntriesConstants = require('../constants/EntriesConstants');

var _constantsEntriesConstants2 = _interopRequireDefault(_constantsEntriesConstants);

var _constantsEntryConstants = require('../constants/EntryConstants');

var entriesStore = {
  entries: [],
  nextPage: void 0,
  nextPageParam: void 0,
  nextPageField: void 0,
  limit: void 0,
  hasMore: void 0,
  isLoading: false,
  loadUrl: void 0
};

var actionMap = (_actionMap = {}, _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_ENTRIES, function () {
  var payload = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var ids = [];
  var promos = [];

  var tmp = payload.reduce(function (acc, el) {
    if (!el) {
      return acc;
    }

    // filter uniques
    if (ids.indexOf(el.entry.id) > -1) {
      return acc;
    } else {
      ids.push(el.entry.id);
    }

    // collect promo posts
    if (el.entry.fixed_state === _constantsEntryConstants.ENTRY_PINNED_STATE) {
      promos.push(el);
      return acc;
    }

    acc.push(el);
    return acc;
  }, []);

  entriesStore.entries = promos.concat(tmp);
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_HAS_MORE, function (payload) {
  entriesStore.hasMore = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE, function (payload) {
  entriesStore.nextPage = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE_PARAM, function (payload) {
  entriesStore.nextPageParam = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_NEXT_PAGE_FIELD, function (payload) {
  entriesStore.nextPageField = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_IS_LOADING, function (payload) {
  entriesStore.isLoading = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_LIMIT, function (payload) {
  entriesStore.limit = payload;
}), _defineProperty(_actionMap, _constantsEntriesConstants2['default'].ENTRIES_SET_LOAD_URL, function (payload) {
  entriesStore.loadUrl = payload;
}), _actionMap);

var EntriesStore = _Object$assign(new _base2['default'](), {
  getEntries: function getEntries() {
    return entriesStore.entries;
  },

  getFirstEntryId: function getFirstEntryId() {
    var firstEntry = entriesStore.entries[0];
    return firstEntry && firstEntry.entry.id;
  },

  getLoadUrl: function getLoadUrl() {
    return entriesStore.loadUrl;
  },

  getNextPageField: function getNextPageField() {
    return entriesStore.nextPageField;
  },

  getNextPageData: function getNextPageData() {
    var limit = entriesStore.limit;
    var nextPage = entriesStore.nextPage;
    var nextPageParam = entriesStore.nextPageParam;

    return _defineProperty({
      limit: limit
    }, nextPageParam, nextPage);
  },

  hasMore: function hasMore() {
    return entriesStore.hasMore;
  },

  isLoading: function isLoading() {
    return entriesStore.isLoading;
  }
});

EntriesStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var fn = actionMap[payload.action.type];
  if (!fn) {
    return;
  }

  fn(payload.action.payload);
  EntriesStore.emitChange();
});

exports['default'] = EntriesStore;
module.exports = exports['default'];

},{"../constants/EntriesConstants":403,"../constants/EntryConstants":404,"../dispatchers/dispatcher":426,"./_base":516,"babel-runtime/core-js/object/assign":561,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/interop-require-default":574}],513:[function(require,module,exports){
'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionMap;

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsFeedConstants = require('../constants/FeedConstants');

var _constantsFeedConstants2 = _interopRequireDefault(_constantsFeedConstants);

var unreadFeeds = {
  live: [],
  liveInitialCount: 0,
  best: [],
  bestInitialCount: 0,
  friends: [],
  friendsInitialCount: 0,
  anonymous: [],
  anonymousInitialCount: 0,
  liveFlow: [],
  liveFlowInitialCount: 0
};

var actionMap = (_actionMap = {}, _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_LIVE_NEW_ENTRY, function (payload) {
  unreadFeeds.live.push(payload);
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_LIVE_RESET, function (payload) {
  unreadFeeds.live = [];
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_LIVE_INITIAL_COUNT, function (payload) {
  unreadFeeds.liveInitialCount = payload;
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_BEST_NEW_ENTRY, function (payload) {
  unreadFeeds.best.push(payload);
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_BEST_RESET, function (payload) {
  unreadFeeds.best = [];
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_BEST_INITIAL_COUNT, function (payload) {
  unreadFeeds.bestInitialCount = payload;
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_FRIENDS_NEW_ENTRY, function (payload) {
  unreadFeeds.friends.push(payload);
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_FRIENDS_RESET, function (payload) {
  unreadFeeds.friends = [];
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_FRIENDS_INITIAL_COUNT, function (payload) {
  unreadFeeds.friendsInitialCount = payload;
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_ANONYMOUS_NEW_ENTRY, function (payload) {
  unreadFeeds.anonymous.push(payload);
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_ANONYMOUS_RESET, function (payload) {
  unreadFeeds.anonymous = [];
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_LIVE_FLOW_NEW_ENTRY, function (payload) {
  unreadFeeds.liveFlow.push(payload);
}), _defineProperty(_actionMap, _constantsFeedConstants2['default'].FEED_LIVE_FLOW_RESET, function (payload) {
  unreadFeeds.liveFlow = [];
}), _actionMap);

var FeedsStore = _Object$assign(new _base2['default'](), {
  getUnreadBestCount: function getUnreadBestCount() {
    var best = unreadFeeds.best;
    var bestInitialCount = unreadFeeds.bestInitialCount;

    return bestInitialCount + best.length;
  },

  getUnreadLiveCount: function getUnreadLiveCount() {
    var live = unreadFeeds.live;
    var liveInitialCount = unreadFeeds.liveInitialCount;

    return liveInitialCount + live.length;
  },

  getUnreadFriendsCount: function getUnreadFriendsCount() {
    var friends = unreadFeeds.friends;
    var friendsInitialCount = unreadFeeds.friendsInitialCount;

    return friendsInitialCount + friends.length;
  },

  getUnreadAnonymousCount: function getUnreadAnonymousCount() {
    var anonymous = unreadFeeds.anonymous;
    var anonymousInitialCount = unreadFeeds.anonymousInitialCount;

    return anonymousInitialCount + anonymous.length;
  },

  getUnreadLiveFlowCount: function getUnreadLiveFlowCount() {
    var liveFlow = unreadFeeds.liveFlow;
    var liveFlowInitialCount = unreadFeeds.liveFlowInitialCount;

    return liveFlowInitialCount + liveFlow.length;
  }
});

FeedsStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var fn = actionMap[payload.action.type];
  if (!fn) {
    return;
  }

  fn(payload.action.payload);
  FeedsStore.emitChange();
});

exports['default'] = FeedsStore;
module.exports = exports['default'];

},{"../constants/FeedConstants":405,"../dispatchers/dispatcher":426,"./_base":516,"babel-runtime/core-js/object/assign":561,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/interop-require-default":574}],514:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactLibObjectAssign = require('react/lib/Object.assign');

var _reactLibObjectAssign2 = _interopRequireDefault(_reactLibObjectAssign);

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _constantsNotification = require('../constants/notification');

var _constantsNotification2 = _interopRequireDefault(_constantsNotification);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _notifications = {},
    _everythingLoaded = false,
    _loading = false,
    _loadingMore = false,
    _error = false;

var NotificationStore = (0, _reactLibObjectAssign2['default'])(new _base2['default'](), {
  getAll: function getAll() {
    return _notifications;
  },

  getAllChrono: function getAllChrono() {
    var notifications = [];

    _lodash2['default'].forEach(_notifications, function (item) {
      return notifications.push(item);
    });
    notifications = _lodash2['default'].sortBy(notifications, function (item) {
      return -item.id;
    });

    return notifications;
  },

  isEverythingLoaded: function isEverythingLoaded() {
    return _everythingLoaded;
  },

  isLoading: function isLoading() {
    return _loading;
  },

  isLoadingMore: function isLoadingMore() {
    return _loadingMore;
  },

  isError: function isError() {
    return _error;
  }
});

NotificationStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var action = payload.action;

  switch (action.type) {
    case _constantsNotification2['default'].LOAD:
      _loading = true;
      _error = false;
      break;

    case _constantsNotification2['default'].LOAD_SUCCESS:
      if (action.notifications.length) {
        action.notifications.forEach(function (item) {
          return _notifications[item.id] = item;
        });
      } else {
        _everythingLoaded = true;
      }
      _loading = false;
      break;

    case _constantsNotification2['default'].LOAD_ERROR:
      _loading = false;
      _error = true;
      break;

    case _constantsNotification2['default'].LOAD_MORE:
      _loadingMore = true;
      break;

    case _constantsNotification2['default'].LOAD_MORE_SUCCESS:
      if (action.notifications.length) {
        action.notifications.forEach(function (item) {
          return _notifications[item.id] = item;
        });
      } else {
        _everythingLoaded = true;
      }
      _loadingMore = false;
      break;

    case _constantsNotification2['default'].LOAD_MORE_ERROR:
      _loadingMore = false;
      break;

    case _constantsNotification2['default'].MARK_AS_READ_SUCCESS:
      _lodash2['default'].extend(_notifications[action.notification.id], action.notification);
      break;

    default:
      return true;
  }

  NotificationStore.emitChange();
});

exports['default'] = NotificationStore;
module.exports = exports['default'];

},{"../constants/notification":412,"../dispatchers/dispatcher":426,"./_base":516,"babel-runtime/helpers/interop-require-default":574,"lodash":"lodash","react/lib/Object.assign":709}],515:[function(require,module,exports){
'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actionMap;

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsUserOnboardingConstants = require('../constants/UserOnboardingConstants');

var _constantsUserOnboardingConstants2 = _interopRequireDefault(_constantsUserOnboardingConstants);

var userList = {
  relationships: [],
  isLoading: false
};

var actionMap = (_actionMap = {}, _defineProperty(_actionMap, _constantsUserOnboardingConstants2['default'].USER_ONBOARDING_SET_RELATIONSHIPS, function (payload) {
  userList.relationships = payload;
}), _defineProperty(_actionMap, _constantsUserOnboardingConstants2['default'].USER_ONBOARDING_SET_ISLOADING, function (payload) {
  userList.isLoading = payload;
}), _actionMap);

var UserOnboardingStore = _Object$assign(new _base2['default'](), {
  getState: function getState() {
    return userList;
  }
});

UserOnboardingStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var fn = actionMap[payload.action.type];
  if (!fn) {
    return;
  }

  fn(payload.action.payload);
  UserOnboardingStore.emitChange();
});

exports['default'] = UserOnboardingStore;
module.exports = exports['default'];

},{"../constants/UserOnboardingConstants":407,"../dispatchers/dispatcher":426,"./_base":516,"babel-runtime/core-js/object/assign":561,"babel-runtime/helpers/define-property":570,"babel-runtime/helpers/interop-require-default":574}],516:[function(require,module,exports){
var BaseStore, CHANGE_EVENT,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CHANGE_EVENT = 'change';

BaseStore = (function(superClass) {
  extend(BaseStore, superClass);

  function BaseStore() {
    return BaseStore.__super__.constructor.apply(this, arguments);
  }

  BaseStore.prototype.emitChange = function() {
    return this.emit(CHANGE_EVENT);
  };

  BaseStore.prototype.addChangeListener = function(cb) {
    return this.on(CHANGE_EVENT, cb);
  };

  BaseStore.prototype.removeChangeListener = function(cb) {
    return this.off(CHANGE_EVENT, cb);
  };

  return BaseStore;

})(EventEmitter);

module.exports = BaseStore;


},{}],517:[function(require,module,exports){
var BaseStore, CROSSPOST_NONE, CurrentUserStore, currentUser;

BaseStore = require('./_base');

CROSSPOST_NONE = require('../constants/CrosspostConstants').CROSSPOST_NONE;

currentUser = null;

CurrentUserStore = _.extend(new BaseStore(), {
  isLogged: function() {
    return currentUser != null;
  },
  isPrivate: function() {
    return currentUser != null ? currentUser.is_privacy : void 0;
  },
  hasDesignBundle: function() {
    return !!(currentUser != null ? currentUser.has_design_bundle : void 0);
  },
  hasVkontakteAuth: function() {
    var authentication, authentications, i, len;
    authentications = currentUser != null ? currentUser.authentications : void 0;
    if (authentications != null) {
      for (i = 0, len = authentications.length; i < len; i++) {
        authentication = authentications[i];
        if (authentication.provider === 'vkontakte') {
          return true;
        }
      }
    }
    return false;
  },
  hasFacebookAuth: function() {
    var authentication, authentications, i, len;
    authentications = currentUser != null ? currentUser.authentications : void 0;
    if (authentications != null) {
      for (i = 0, len = authentications.length; i < len; i++) {
        authentication = authentications[i];
        if (authentication.provider === 'facebook') {
          return true;
        }
      }
    }
    return false;
  },
  getUser: function() {
    return currentUser;
  },
  getUserID: function() {
    return currentUser != null ? currentUser.id : void 0;
  },
  getAccessToken: function() {
    return currentUser != null ? currentUser.api_key.access_token : void 0;
  },
  getUserpic: function() {
    return currentUser != null ? currentUser.userpic : void 0;
  },
  updateUser: function(data) {
    return _.extend(currentUser, data);
  },
  updateAuthenticationCrosspost: function(social, type) {
    var a, authentications, i, len, results;
    authentications = (currentUser != null ? currentUser.authentications : void 0) || [];
    results = [];
    for (i = 0, len = authentications.length; i < len; i++) {
      a = authentications[i];
      if (a.provider === social) {
        results.push(a.crossposting_cd = type);
      }
    }
    return results;
  },
  getOmniauthEnableUrl: function(social) {
    var authentications;
    authentications = (currentUser != null ? currentUser.authentications : void 0) || [];
    return authentications.reduce((function(acc, el) {
      if (el.provider === social) {
        return el.omniauth_enable_url;
      } else {
        return acc;
      }
    }), null);
  },
  _setupUser: function(user) {
    currentUser = user;
    return typeof console.debug === "function" ? console.debug('Залогинен пользователь:', user.slug) : void 0;
  }
});

module.exports = CurrentUserStore;

CurrentUserStore.dispatchToken = CurrentUserDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'setup':
      CurrentUserStore._setupUser(action.user);
      return CurrentUserStore.emitChange();
    case 'userUpdated':
      CurrentUserStore.updateUser(action.user);
      return CurrentUserStore.emitChange();
    case 'userpicUpdated':
      CurrentUserStore.updateUser({
        userpic: action.userpic
      });
      return CurrentUserStore.emitChange();
    case 'confirmationEmailCanceled':
      CurrentUserStore.updateUser({
        confirmation_email: null
      });
      return CurrentUserStore.emitChange();
    case 'stopFbCrosspost':
      CurrentUserStore.updateAuthenticationCrosspost('facebook', CROSSPOST_NONE);
      return CurrentUserStore.emitChange();
    case 'stopTwitterCrosspost':
      CurrentUserStore.updateAuthenticationCrosspost('twitter', CROSSPOST_NONE);
      return CurrentUserStore.emitChange();
  }
});


},{"../constants/CrosspostConstants":402,"./_base":516}],518:[function(require,module,exports){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibObjectAssign = require('react/lib/Object.assign');

var _reactLibObjectAssign2 = _interopRequireDefault(_reactLibObjectAssign);

var _base = require('./_base');

var _base2 = _interopRequireDefault(_base);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsDesign = require('../constants/design');

var _constantsDesign2 = _interopRequireDefault(_constantsDesign);

var _modelsDesignOptions = require('../models/designOptions');

var _modelsDesignOptions2 = _interopRequireDefault(_modelsDesignOptions);

var _modelsDesignPaymentOptions = require('../models/designPaymentOptions');

var _modelsDesignPaymentOptions2 = _interopRequireDefault(_modelsDesignPaymentOptions);

var _entitiesDesignSet = require('../entities/designSet');

var _entitiesDesignSet2 = _interopRequireDefault(_entitiesDesignSet);

var _servicesDesignOptions = require('../services/designOptions');

var _servicesDesignOptions2 = _interopRequireDefault(_servicesDesignOptions);

var _designSet = {};
var _unsavedFields = {};
var _saving = false;
var _designOptions = _modelsDesignOptions2['default'],
    _designPaymentOptions = _modelsDesignPaymentOptions2['default'];

function initDesignSet(design) {
  _designSet = new _entitiesDesignSet2['default'](design);
}

function updateDesignSet(design) {
  _designSet.current = design;
}

function changeOption(name, value) {
  _unsavedFields[name] = value;

  // Если мы поменяли значение, и оно совпадает с тем что было в самом начале, то
  // удаляем это поле из "Несохранённых".
  if (_unsavedFields[name] === _designSet.current[name]) {
    delete _unsavedFields[name];
  }
}

var DesignStore = (0, _reactLibObjectAssign2['default'])(new _base2['default'](), {

  getOrigin: function getOrigin() {
    return _designSet.origin || null;
  },

  getCurrent: function getCurrent() {
    var design = undefined;

    if (this.hasUnsavedFields()) {
      design = (0, _reactLibObjectAssign2['default'])({}, _designSet.current, this.getUnsavedFields());
    } else {
      design = _designSet.current;
    }

    return design || null;
  },

  getOptions: function getOptions() {
    return _designOptions;
  },

  getPaymentOptions: function getPaymentOptions() {
    return _designPaymentOptions;
  },

  getUnsavedFields: function getUnsavedFields() {
    return _unsavedFields;
  },

  isSaving: function isSaving() {
    return _saving;
  },

  hasPaidValues: function hasPaidValues() {
    var design = undefined;

    if (this.hasUnsavedFields()) {
      design = (0, _reactLibObjectAssign2['default'])({}, this.getCurrent(), this.getUnsavedFields());
    } else {
      design = this.getCurrent();
    }

    return _servicesDesignOptions2['default'].hasPaidValues(design);
  },

  hasUnsavedFields: function hasUnsavedFields() {
    return _Object$keys(_unsavedFields).length !== 0;
  }
});

DesignStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (payload) {
  var action = payload.action;

  switch (action.type) {
    case _constantsDesign2['default'].INIT_CURRENT:
      initDesignSet(action.design);
      DesignStore.emitChange();
      break;

    case _constantsDesign2['default'].CHANGE_OPTION:
      var name = action.name,
          value = action.value;

      changeOption(name, value);
      DesignStore.emitChange();
      break;

    case _constantsDesign2['default'].CLOSE_DESIGN_SETTINGS:
      _unsavedFields = {};
      DesignStore.emitChange();
      break;

    case _constantsDesign2['default'].SAVE_CURRENT_SUCCESS:
      _unsavedFields = {};
      _saving = false;
      updateDesignSet(action.design);
      DesignStore.emitChange();
      break;

    case _constantsDesign2['default'].SAVE_CURRENT_FAIL:
      _saving = false;
      DesignStore.emitChange();
      break;

    case _constantsDesign2['default'].SAVE_CURRENT_START:
      _saving = true;
      DesignStore.emitChange();
      break;
  }

  return true; //It is necessary for correct waitFor work
});

exports['default'] = DesignStore;
module.exports = exports['default'];

},{"../constants/design":410,"../dispatchers/dispatcher":426,"../entities/designSet":430,"../models/designOptions":498,"../models/designPaymentOptions":499,"../services/designOptions":504,"./_base":516,"babel-runtime/core-js/object/keys":565,"babel-runtime/helpers/interop-require-default":574,"react/lib/Object.assign":709}],519:[function(require,module,exports){
var CHANGE_EVENT, SUMMARY_CHANGE_EVENT, _relationships;

CHANGE_EVENT = 'changed';

SUMMARY_CHANGE_EVENT = 'summary:changed';

_relationships = {
  followings: {
    items: null,
    totalCount: null
  },
  followers: {
    items: null,
    totalCount: null
  },
  guessed: {
    items: null,
    totalCount: null
  },
  requested: {
    items: null,
    totalCount: null
  },
  ignored: {
    items: null,
    totalCount: null
  },
  vkontakte: {
    suggestions: {
      items: null,
      totalCount: null
    }
  },
  facebook: {
    suggestions: {
      items: null,
      totalCount: null
    }
  }
};

window.RelationshipsStore = _.extend({}, EventEmitter.prototype, {
  emitChange: function() {
    return this.emit(CHANGE_EVENT);
  },
  addChangeListener: function(cb) {
    return this.on(CHANGE_EVENT, cb);
  },
  removeChangeListener: function(cb) {
    return this.off(CHANGE_EVENT, cb);
  },
  emitSummaryChange: function() {
    return this.emit(SUMMARY_CHANGE_EVENT);
  },
  addSummaryChangeListener: function(cb) {
    return this.on(SUMMARY_CHANGE_EVENT, cb);
  },
  removeSummaryChangeListener: function(cb) {
    return this.off(SUMMARY_CHANGE_EVENT, cb);
  },
  getRelationships: function() {
    return _relationships;
  },
  getFollowers: function() {
    return _relationships.followers.items;
  },
  getFollowings: function() {
    return _relationships.followings.items;
  },
  getGuessed: function() {
    return _relationships.guessed.items;
  },
  getIgnored: function() {
    return _relationships.ignored.items;
  },
  getRequested: function() {
    return _relationships.requested.items;
  },
  getFollowersTotalCount: function() {
    return _relationships.followers.totalCount;
  },
  getFollowingsTotalCount: function() {
    return _relationships.followings.totalCount;
  },
  getGuessedTotalCount: function() {
    return _relationships.guessed.totalCount;
  },
  getIgnoredTotalCount: function() {
    return _relationships.ignored.totalCount;
  },
  getRequestedTotalCount: function() {
    return _relationships.requested.totalCount;
  },
  getVkontakteSuggestions: function() {
    return _relationships.vkontakte.suggestions.items;
  },
  getVkontakteSuggestionsTotalCount: function() {
    return _relationships.vkontakte.suggestions.totalCount;
  },
  getFacebookSuggestions: function() {
    return _relationships.facebook.suggestions.items;
  },
  getFacebookSuggestionsTotalCount: function() {
    return _relationships.facebook.suggestions.totalCount;
  },
  isSummaryLoaded: function() {
    var relationship, value;
    for (relationship in _relationships) {
      value = _relationships[relationship];
      if (value.totalCount === null) {
        return false;
      }
    }
    return true;
  },
  isRelationshipExists: function(relationship) {
    var item, j, len, ref, rel, value;
    for (rel in _relationships) {
      value = _relationships[rel];
      if (value.items == null) {
        continue;
      }
      ref = value.items;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item.id === relationship.id || item.reader_id === relationship.reader_id) {
          return true;
        }
      }
    }
    return false;
  },
  updateSummary: function(summary) {
    var relationship, results, value;
    results = [];
    for (relationship in _relationships) {
      value = _relationships[relationship];
      results.push(value.totalCount = summary[relationship + '_count']);
    }
    return results;
  },
  unshiftRelationships: function(type, relationships) {
    var base, j, len, newRelationships, relationship;
    if (!_relationships[type]) {
      return console.warn('Unknown type of relationship', type);
    }
    (base = _relationships[type]).items || (base.items = []);
    newRelationships = _relationships[type].items.slice(0);
    for (j = 0, len = relationships.length; j < len; j++) {
      relationship = relationships[j];
      if (!this.isRelationshipExists(relationship)) {
        newRelationships.unshift(relationship);
      }
    }
    return _relationships[type].items = newRelationships;
  },
  pushRelationships: function(type, relationships) {
    var base, j, len, newRelationships, relationship;
    if (!_relationships[type]) {
      return console.warn('Unknown type of relationship', type);
    }
    (base = _relationships[type]).items || (base.items = []);
    newRelationships = _relationships[type].items.slice(0);
    for (j = 0, len = relationships.length; j < len; j++) {
      relationship = relationships[j];
      if (!this.isRelationshipExists(relationship)) {
        newRelationships.push(relationship);
      }
    }
    return _relationships[type].items = newRelationships;
  },
  pushSuggestions: function(type, suggestions) {
    if (!_relationships[type]) {
      return console.warn('Unknown type of relationship', type);
    }
    _relationships[type].suggestions.items = suggestions;
    return _relationships[type].suggestions.totalCount = suggestions.length;
  },
  cleanSuggestions: function(type) {
    if (!_relationships[type]) {
      return console.warn('Unknown type of relationship', type);
    }
    _relationships[type].suggestions.items = [];
    return _relationships[type].suggestions.totalCount = 0;
  },
  approveRequest: function(relationship) {
    var relationships;
    relationships = _relationships['requested'].items;
    if (this.isRelationshipExists(relationship)) {
      this._removeRelationship('requested', relationship);
    }
    return this.unshiftRelationships('followers', [relationship]);
  },
  disapproveRequest: function(relationship) {
    if (this.isRelationshipExists(relationship)) {
      return this._removeRelationship('requested', relationship);
    }
  },
  unfollowFromYourself: function(relationship) {
    if (this.isRelationshipExists(relationship)) {
      return this._removeRelationship('followers', relationship);
    }
  },
  _removeRelationship: function(type, relationship) {
    var i, j, len, newRelationships, newRelationshipsTotalCount, rel;
    newRelationships = _relationships[type].items.slice(0);
    newRelationshipsTotalCount = _relationships[type].totalCount;
    for (i = j = 0, len = newRelationships.length; j < len; i = ++j) {
      rel = newRelationships[i];
      if (rel.id === relationship.id || rel.reader_id === relationship.user_id || rel.reader_id === relationship.reader_id) {
        newRelationships.splice(i, 1);
        newRelationshipsTotalCount--;
        break;
      }
    }
    _relationships[type].items = newRelationships;
    return _relationships[type].totalCount = newRelationshipsTotalCount;
  }
});

RelationshipsStore.dispatchToken = RelationshipsDispatcher.register(function(payload) {
  var action;
  action = payload.action;
  switch (action.type) {
    case 'summaryLoaded':
      RelationshipsStore.updateSummary(action.summary);
      return RelationshipsStore.emitSummaryChange();
    case 'relationshipsLoaded':
      _relationships[action.relationship].items = [];
      RelationshipsStore.pushRelationships(action.relationship, action.items);
      return RelationshipsStore.emitChange();
    case 'suggestionsLoaded':
      RelationshipsStore.pushSuggestions(action.source, action.suggestions);
      return RelationshipsStore.emitChange();
    case 'suggestionsSubscribed':
      RelationshipsStore.cleanSuggestions(action.source);
      return RelationshipsStore.emitChange();
    case 'moreRelationshipsLoaded':
      RelationshipsStore.pushRelationships(action.relationship, action.items);
      return RelationshipsStore.emitChange();
    case 'requestedRelationshipApproved':
      RelationshipsStore.approveRequest(action.relationship);
      RelationshipsStore.emitSummaryChange();
      return RelationshipsStore.emitChange();
    case 'requestedRelationshipDisapproved':
      RelationshipsStore.disapproveRequest(action.relationship);
      RelationshipsStore.emitSummaryChange();
      return RelationshipsStore.emitChange();
    case 'relationshipUnfollowedFromYourself':
      RelationshipsStore.unfollowFromYourself(action.relationship);
      RelationshipsStore.emitSummaryChange();
      return RelationshipsStore.emitChange();
  }
});


},{}],520:[function(require,module,exports){
var defaults,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

defaults = {
  hoverClass: "_hover",
  onStart: function() {},
  onProgress: function() {},
  onSuccess: function() {},
  onReady: function() {},
  onReaderLoad: function() {},
  dropables: null,
  inputs: null
};

window.FileReceiver = (function() {
  function FileReceiver(options) {
    this.changeInput = bind(this.changeInput, this);
    this.drop = bind(this.drop, this);
    this.dragleave = bind(this.dragleave, this);
    this.dragenter = bind(this.dragenter, this);
    this.noPropagation = bind(this.noPropagation, this);
    this.url = null;
    this.dragging = 0;
    this.tests = {
      fileReader: typeof FileReader !== "undefined",
      dnd: "draggable" in document.createElement("span"),
      formData: !!window.FormData,
      progress: "upload" in new XMLHttpRequest
    };
    this.settings = $.extend({}, defaults, options);
    this.errors = [];
    this.accept = ["image/png", "image/jpeg", "image/gif"];
    if (this.tests.fileReader || this.tests.dnd) {
      this.settings.dropables.forEach((function(_this) {
        return function(dropable) {
          return $(dropable).on("dragenter", _this.dragenter).on("dragleave", _this.dragleave).on("dragover", _this.noPropagation).on("dragend", _this.noPropagation).on("drop", _this.drop);
        };
      })(this));
      this.settings.inputs.forEach((function(_this) {
        return function(input) {
          return $(input).on("change", _this.changeInput);
        };
      })(this));
    }
  }

  FileReceiver.prototype._error = function(msg) {
    return this.errors.push(msg);
  };

  FileReceiver.prototype.noPropagation = function(e) {
    e.stopPropagation();
    if (e.preventDefault) {
      return e.preventDefault();
    } else {
      return e.returnValue = false;
    }
  };

  FileReceiver.prototype.dragenter = function(event) {
    var target;
    this.dragging++;
    target = event.currentTarget;
    $(target).addClass(this.settings.hoverClass);
  };

  FileReceiver.prototype.dragleave = function(event) {
    var target;
    this.dragging--;
    target = event.currentTarget;
    if (this.dragging === 0) {
      $(target).removeClass(this.settings.hoverClass);
    }
  };

  FileReceiver.prototype.drop = function(event) {
    var files, target;
    this.dragging = 0;
    event.preventDefault();
    target = event.currentTarget;
    $(target).removeClass(this.settings.hoverClass);
    files = event.originalEvent.dataTransfer.files;
    if (files.length > 0) {
      this.readFile(files[0]);
    }
  };

  FileReceiver.prototype.changeInput = function(event) {
    var files;
    files = event.target.files;
    if (files.length > 0) {
      this.readFile(files[0]);
    }
  };

  FileReceiver.prototype.readFile = function(file) {
    var $cover, formData, reader, tests;
    $cover = $(this.settings.cover);
    tests = this.tests;
    formData = (tests.formData ? new FormData() : null);
    if (this.accept.indexOf(file.type) === -1) {
      this._error("загрузить можно только изображения");
    } else {
      if (tests.formData) {
        formData.append("file", file);
      }
      reader = new FileReader();
      this.settings.onStart();
      reader.onload = (function(_this) {
        return function(e) {
          var url;
          url = e.target.result;
          $cover.css("background-image", "url(" + url + ")");
          $cover.data("file", file);
          _this.settings.onReaderLoad(url);
        };
      })(this);
      reader.readAsDataURL(file);
      this.settings.onReady(file);
    }
  };

  FileReceiver.prototype.toggleInput = function(input, state) {
    this.coverInput.forEach(function(input) {
      if (state) {
        $(input).removeAttr("disabled");
      } else {
        $(input).attr("disabled", "disabled");
      }
    });
  };

  return FileReceiver;

})();


},{}],521:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var gon = {
  version: 'static-development',
  env: 'static-development',
  host: AppStorage.getItem('host') ? AppStorage.getItem('host') : 'http://taaasty.com/',
  api_host: AppStorage.getItem('api_host') ? AppStorage.getItem('api_host') : 'http://taaasty.com/api/',
  sound_asset_url: 'sounds/',
  locale: "ru",
  localesPath: document.domain === 'taaasty.github.io' ? './locales' : '../locales',
  localesVersion: '1.0.0',
  app_stats: {
    anonymous_entries_in_day_count: '5',
    comments_count: '9544721',
    comments_in_day_count: '642',
    entries_count: '14693569',
    public_entries_in_day_count: '2027',
    total_anonymous_entries_count: '49234',
    unvalid_users: [],
    users_count: '213514',
    users_in_anonymous_count: '0',
    users_in_best_count: '21219',
    users_in_day_count: '74',
    users_in_live_count: '93608',
    users_votes_in_day_count: '34',
    votes_in_day_count: '169'
  },
  // taaasty development app
  pusher: {
    key: '40dbf1d864d4b366b5e6'
  },
  user: {
    "id": parseInt(AppStorage.getItem('userId')) || 232992,
    "locale": "ru",
    "name": "sergeylaptev",
    "slug": "sergeylaptev",
    "tag": "~sergeylaptev",
    "title": "",
    "is_female": false,
    "is_daylog": false,
    "tlog_url": "http://taaasty.com/~sergeylaptev",
    "created_at": "2014-06-18T14:27:22.000+04:00",
    "updated_at": "2015-04-25T02:09:59.000+03:00",
    "is_premium": true,
    "has_design_bundle": true,
    "total_entries_count": 63,
    "private_entries_count": 55,
    "public_entries_count": 8,
    "saw_guide": true,
    "saw_guide_design": false,
    "is_privacy": true,
    "confirmation_email": null,
    "email": "sergeylaptev@gmail.com",
    "is_confirmed": false,
    "available_notifications": true,
    "authentications": [{
      "id": 5,
      "provider": "vkontakte",
      "uid": "17202124",
      "name": "Сергей Лаптев",
      "sex": null,
      "image": "https://pp.vk.me/c618020/v6180202/50e6/UtWWgge-iQc.jpg",
      "url": "http://vk.com/serlaptev"
    }],
    "api_key": {
      "access_token": AppStorage.getItem('userToken') || "dasd;lkCKJ123",
      "user_id": 232992,
      "expires_at": "2015-01-04T18:07:07.000+03:00"
    },
    "design": {
      "headerFont": "nautilus",
      "headerSize": "middle",
      "headerColor": "#efa114",
      "backgroundColor": "#6c7a89",
      "backgroundImageUrl": "http://taaasty.com/assets/bgs/99/0f/2565_original.jpeg",
      "backgroundId": 2565,
      "backgroundImageEnabled": true,
      "backgroundAlignment": "justify",
      "feedBackgroundColor": "#6c7a89",
      "feedFont": "ptsans",
      "feedFontColor": "#c6c9cc",
      "feedOpacity": 0.95,
      "version": 1,
      "headColor": "white",
      "feedColor": "white",
      "fontType": "sans",
      "background_url": "http://taaasty.com/assets/bgs/99/0f/2565_original.jpeg"
    },
    "userpic": {
      "original_url": "http://taaasty.com/assets/userpic/6d/ec/232992_original.jpeg",
      "large_url": "http://taaasty.com/assets/userpic/6d/ec/232992_large.jpeg",
      "thumb128_url": "http://taaasty.com/assets/userpic/6d/ec/232992_thumb128.jpeg",
      "thumb64_url": "http://taaasty.com/assets/userpic/6d/ec/232992_thumb64.jpeg",
      "thumbor_path": "userpic/6d/ec/232992_original.jpeg",
      "symbol": "s",
      "kind": "user",
      "default_colors": {
        "background": "#b5c31e",
        "name": "#ffffff"
      }
    },
    "features": {
      "search": true,
      "notification": false
    }
  },
  prices: {
    'design': {
      'cents': 1000,
      'currency': {
        'iso_code': 'RUB',
        'iso_numeric': '643',
        'name': 'Russian Ruble',
        'symbol': '₽',
        'html_name': 'руб.',
        'human_name': 'Российские рубли',
        'symbol_first': false,
        'thousands_separator': '.',
        'decimal_mark': ',',
        'subunit_to_unit': 100,
        'smallest_denomination': 1,
        'exponent': 2
      }
    }
  },
  languages: [{ text: 'Русский', value: 'ru' }, { text: 'English', value: 'en' }],
  thumbor: {
    security_key: null,
    server_url: "http://thumbor0.tasty0.ru"
  },
  thumbor_http_loader: {
    security_key: null,
    server_url: "http://thumbor4.tasty0.ru"
  }
};

exports['default'] = gon;
module.exports = exports['default'];

},{}],522:[function(require,module,exports){
window.isMobile = function() {
  var userAgent;
  userAgent = navigator.userAgent || navigator.vendor || window.opera;
  return /iPhone|iPod|iPad|Android|BlackBerry|Opera Mini|IEMobile/.test(userAgent);
};


},{}],523:[function(require,module,exports){
(function (global){
global._ = require('lodash');

global.$ = global.jQuery = require('jquery');

global.MouseTrap = require('mousetrap');

global.React = require('react');

global.Dispatcher = require('flux').Dispatcher;

global.EventEmitter = require('eventEmitter');

global.moment = require('moment');

global.Pusher = require('pusher');

global.Modernizr = require('Modernizr');

global.Undo = require('undo');

global.introJs = require('introJs');

require('aviator');

require('es5-shim');

require('jquery.mousewheel')(global.jQuery);

require('jquery.scrollto');

require('baron');

require('react-mixin-manager')(global.React);

require('bootstrap.tooltip');

require('jquery.ui.core');

require('jquery.ui.widget');

require('jquery.ui.mouse');

require('jquery.ui.slider');

require('jquery.ui.draggable');

require('jquery.ui.touch-punch');

require('jquery.collage');

require('jquery.connection');

require('jquery.fileupload');

require('jquery.select2');


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"Modernizr":"Modernizr","aviator":"aviator","baron":"baron","bootstrap.tooltip":"bootstrap.tooltip","es5-shim":"es5-shim","eventEmitter":"eventEmitter","flux":648,"introJs":"introJs","jquery":"jquery","jquery.collage":"jquery.collage","jquery.connection":"jquery.connection","jquery.fileupload":"jquery.fileupload","jquery.mousewheel":"jquery.mousewheel","jquery.scrollto":"jquery.scrollto","jquery.select2":"jquery.select2","jquery.ui.core":"jquery.ui.core","jquery.ui.draggable":"jquery.ui.draggable","jquery.ui.mouse":"jquery.ui.mouse","jquery.ui.slider":"jquery.ui.slider","jquery.ui.touch-punch":"jquery.ui.touch-punch","jquery.ui.widget":"jquery.ui.widget","lodash":"lodash","moment":659,"mousetrap":"mousetrap","pusher":"pusher","react":"react","react-mixin-manager":"react-mixin-manager","undo":"undo"}],524:[function(require,module,exports){
var csrfToken;

csrfToken = function() {
  var tokenNode;
  tokenNode = document.querySelector('[name="csrf-token"]');
  if (tokenNode != null) {
    return tokenNode.getAttribute('content');
  } else {
    return null;
  }
};

window.Tasty = {
  start: function(options) {
    var flashes, headers, locale, user;
    if (options == null) {
      options = {};
    }
    user = options.user, locale = options.locale, flashes = options.flashes;
    headers = {};
    if (user != null) {
      headers['X-User-Token'] = user.api_key.access_token;
    }
    if (csrfToken()) {
      headers['X-CSRF-Token'] = csrfToken();
    }
    headers['X-Requested-With'] = 'XMLHttpRequest';
    headers['X-Tasty-Client-Name'] = 'web_desktop';
    headers['X-Tasty-Client-Version'] = gon.version;
    if (flashes != null) {
      TastyUtils.showFlashes(flashes);
    }
    $.ajaxSetup({
      headers: headers,
      cache: true,
      xhrFields: {
        withCredentials: true
      }
    });
    return ReactApp.start({
      user: user,
      locale: locale
    });
  }
};


},{}],525:[function(require,module,exports){
window.TastyUtils = {
  showFlashes: function(flashes) {
    if (flashes == null) {
      flashes = [];
    }
    return _.each(flashes, function(flash) {
      return NoticeService.notify(flash[0], flash[1]);
    });
  },
  centerHorizontally: function(element) {
    $(element).each(function() {
      var e;
      e = $(this);
      e.css("margin-left", -(e.width() / 2));
    });
  },
  scrollFade: function(container, element) {
    var height, scrollTop;
    height = container.outerHeight() - element.outerHeight() / 2;
    scrollTop = $(window).scrollTop();
    return element.css({
      "margin-top": scrollTop,
      "opacity": Math.max(1 - scrollTop / height, 0)
    });
  },
  onMousewheel: function(e, d) {
    e.stopPropagation();
    e.preventDefault();
    if ((this.scrollTop === (this.scrollHeight - this.offsetHeight) && d < 0) || (this.scrollTop === 0 && d > 0)) {

    }
  },
  scrollToElement: function(el) {
    return setTimeout((function() {
      return scrollTo(0, $(el).offset().top);
    }), 0);
  },
  formatNumber: function(rawNumber, round, delimiter) {
    var number;
    if (delimiter == null) {
      delimiter = " ";
    }
    number = parseInt(rawNumber);
    if (round != null) {
      number = Math.ceil(number / round) * round;
    }
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, delimiter);
  },
  isImagesEqual: function(nextImages, currentImages) {
    var currentUrls, nextUrls;
    if (nextImages.length !== currentImages.length) {
      return false;
    }
    currentUrls = currentImages.map(function(i) {
      return i.src;
    });
    nextUrls = nextImages.map(function(i) {
      return i.src;
    });
    return _.isEqual(currentUrls, nextUrls);
  }
};


},{}],526:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var TLOG_SLUG_ANONYMOUS = 'anonymous';
exports.TLOG_SLUG_ANONYMOUS = TLOG_SLUG_ANONYMOUS;

},{}],527:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var TLOG_ENTRY_TYPE_ANONYMOUS = 'anonymous';
exports.TLOG_ENTRY_TYPE_ANONYMOUS = TLOG_ENTRY_TYPE_ANONYMOUS;
var TLOG_ENTRY_TYPE_TEXT = 'text';
exports.TLOG_ENTRY_TYPE_TEXT = TLOG_ENTRY_TYPE_TEXT;
var TLOG_ENTRY_TYPE_IMAGE = 'image';
exports.TLOG_ENTRY_TYPE_IMAGE = TLOG_ENTRY_TYPE_IMAGE;
var TLOG_ENTRY_TYPE_INSTAGRAM = 'instagram';
exports.TLOG_ENTRY_TYPE_INSTAGRAM = TLOG_ENTRY_TYPE_INSTAGRAM;
var TLOG_ENTRY_TYPE_MUSIC = 'music';
exports.TLOG_ENTRY_TYPE_MUSIC = TLOG_ENTRY_TYPE_MUSIC;
var TLOG_ENTRY_TYPE_VIDEO = 'video';
exports.TLOG_ENTRY_TYPE_VIDEO = TLOG_ENTRY_TYPE_VIDEO;
var TLOG_ENTRY_TYPE_QUOTE = 'quote';
exports.TLOG_ENTRY_TYPE_QUOTE = TLOG_ENTRY_TYPE_QUOTE;

},{}],528:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function buildParams(prefix, obj, traditional, add) {
  var name = undefined,
      i = undefined,
      v = undefined,
      rbracket = /\[\]$/;

  if (_.isArray(obj)) {
    // Serialize array item.
    for (i = 0; obj && i < obj.length; i++) {
      v = obj[i];
      if (traditional || rbracket.test(prefix)) {
        // Treat each array item as a scalar.
        add(prefix, v);
      } else {
        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
      }
    }
  } else if (_.isObject(obj) && Object.prototype.toString.call(obj) !== '[object File]') {
    // Serialize object item.
    for (name in obj) {
      buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
    }
  } else {
    // Serialize scalar item.
    add(prefix, obj);
  }
}

exports['default'] = {
  settle: function settle(promises) {
    var d = $.Deferred(),
        counter = 0,
        results = Array(promises.length);

    _.forEach(promises, function (promise, i) {
      promise.then(function () {
        results[i] = { promise: promise, state: 'fulfilled' };
      }).fail(function () {
        results[i] = { promise: promise, state: 'rejected' };
      }).always(function () {
        counter++;
        var progress = (promises.length - (promises.length - counter)) / promises.length;
        d.notify(progress, promises.length);
        if (counter === promises.length) {
          d.resolve(results);
        }
      });
    });

    return d.promise();
  },
  prepareFormData: function prepareFormData(data) {
    var formData = new FormData();

    function add(key, value) {
      formData.append(key, value);
    };

    for (var key in data) {
      if (data.hasOwnProperty(key) && data[key] != null) {
        buildParams(key, data[key], false, add);
      }
    }

    return formData;
  }
};
module.exports = exports['default'];

},{}],529:[function(require,module,exports){
var BrowserHelpers;

BrowserHelpers = {
  whichTransitionEvent: function() {
    var el, t, transitions;
    el = document.createElement('fakeelement');
    transitions = {
      'transition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    };
    for (t in transitions) {
      if (el.style[t] != null) {
        return transitions[t];
      }
    }
  },
  isSupportsOrientationChangeEvent: function() {
    return typeof window.orientation === 'number';
  },
  getCurrentOrientation: function() {
    var orientation;
    if (this.isSupportsOrientationChangeEvent()) {
      switch (window.orientation) {
        case 0:
        case 180:
          return 'Portrait';
        case -90:
        case 90:
          return 'Landscape';
      }
    } else {
      orientation = screen.orientation || screen.mozOrientation || screen.msOrientation;
      switch (false) {
        case !/portrait/.test(orientation):
          return 'Portrait';
        case !/landscape/.test(orientation):
          return 'Landscape';
      }
    }
  },
  createObjectURL: function(file) {
    if (window.URL && window.URL.createObjectURL) {
      return window.URL.createObjectURL(file);
    } else if (window.webkitURL) {
      return window.webkitURL.createObjectURL(file);
    } else {
      return null;
    }
  },
  revokeObjectURL: function(str) {
    if (window.URL && window.URL.revokeObjectURL) {
      return window.URL.revokeObjectURL(str);
    } else if (window.webkitURL) {
      return window.webkitURL.revokeObjectURL(str);
    } else {
      return null;
    }
  }
};

module.exports = BrowserHelpers;


},{}],530:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var StringHelpers = {
  strip: function strip(html) {
    var tmp = document.createElement('div');

    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || '';
  },

  removeTags: function removeTags(html) {
    html = html || '';
    html = html.replace('<br>', '||br||');
    html = this.strip(html);
    return html.replace('||br||', '');
  },

  cleanWordPaste: function cleanWordPaste(text) {
    var tmp = document.createElement('div');

    tmp.innerHTML = text;
    var newString = tmp.textContent || tmp.innerText || '';
    // this next piece converts line breaks into break tags
    // and removes the seemingly endless crap code
    newString = newString.replace(/\n\n/g, '<br />').replace(/.*<!--.*-->/g, '');
    // this next piece removes any break tags (up to 10) at beginning
    for (var i = 0; i < 10; i++) {
      if (newString.substr(0, 6) === '<br />') {
        newString = newString.replace('<br />', '');
      }
    }

    return newString;
  }
};

global.StringHelpers = StringHelpers;

exports['default'] = StringHelpers;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],531:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var any = _react.PropTypes.any;
var bool = _react.PropTypes.bool;
var number = _react.PropTypes.number;
var object = _react.PropTypes.object;
var oneOf = _react.PropTypes.oneOf;
var shape = _react.PropTypes.shape;
var string = _react.PropTypes.string;
var tlog = shape({
  id: number.isRequired,
  name: string.isRequired,
  slug: string.isRequired,
  design: object.isRequired,
  is_privacy: bool.isRequired,
  public_tlog_entries_count: number.isRequired,
  can_edit: bool,
  can_write: bool
});

exports.tlog = tlog;
var flow = tlog;

exports.flow = flow;
var pagination = shape({
  type: string.isRequired,
  currentPage: number.isRequired,
  totalPagesCount: number.isRequired
});

exports.pagination = pagination;
// TODO: specify required fields and type of position field
var relationship = shape({
  id: number,
  position: any,
  reader_id: number,
  state: string,
  user_id: number
});

exports.relationship = relationship;
var gender = oneOf(['f', 'm']);

var userpicData = shape({
  kind: string.isRequired,
  original_url: string,
  symbol: string
});

var heroUser = shape({
  gender: gender,
  created_at: string.isRequired,
  features: shape({
    flows: bool.isRequired,
    notification: bool.isRequired,
    search: bool.isRequired
  }),
  has_design_bundle: bool.isRequired,
  id: number.isRequired,
  is_daylog: bool.isRequired,
  is_female: bool.isRequired,
  is_flow: bool.isRequired,
  is_premium: bool.isRequired,
  is_privacy: bool.isRequired,
  locale: string.isRequired,
  name: string.isRequired,
  private_entries_count: number.isRequired,
  public_entries_count: number.isRequired,
  slug: string.isRequired,
  tag: string.isRequired,
  title: string,
  tlog_url: string.isRequired,
  total_entries_count: number.isRequired,
  updated_at: string.isRequired,
  userpic: _extends({
    default_colors: shape({
      background: string,
      name: string
    })
  }, userpicData, {
    large_url: string,
    thumb128_url: string,
    thumb64_url: string,
    thumbor_path: string.isRequired
  })
});

exports.heroUser = heroUser;
var tlogData = shape({
  id: number.isRequired,
  tag: string.isRequired,
  url: string.isRequired,
  userpic: userpicData.isRequired
});

exports.tlogData = tlogData;
var tlogEntry = shape({
  author: tlogData.isRequired,
  can_delete: bool,
  can_edit: bool,
  can_favorite: bool,
  can_moderate: bool,
  can_report: bool,
  can_vote: bool,
  can_watch: bool,
  comments_count: number.isRequired,
  id: number.isRequired,
  is_favorited: bool,
  is_voteable: bool,
  is_watching: bool,
  preview_image: shape({
    geometry: shape({
      height: number.isRequired,
      width: number.isRequired
    }),
    url: string.isRequired
  }).isRequired,
  rating: object.isRequired,
  title_truncated: string.isRequired,
  tlog: tlogData.isRequired,
  type: string.isRequired,
  url: string.isRequired
});
exports.tlogEntry = tlogEntry;

},{"babel-runtime/helpers/extends":571,"react":"react"}],532:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LazyLoadImage = require('./LazyLoadImage');

var _LazyLoadImage2 = _interopRequireDefault(_LazyLoadImage);

var Avatar = (function () {
  function Avatar() {
    _classCallCheck(this, Avatar);
  }

  _createClass(Avatar, [{
    key: 'getAvatarClasses',
    value: function getAvatarClasses() {
      return (0, _classnames2['default'])({
        'avatar': true,
        'anonymous_char': this.props.userpic.kind === 'anonymous'
      });
    }
  }, {
    key: 'renderImage',
    value: function renderImage() {
      var _props = this.props;
      var url = _props.userpic.original_url;
      var size = _props.size;

      var image = {
        url: url,
        geometry: {
          width: size,
          height: size
        }
      };

      return _react2['default'].createElement(
        'span',
        { className: this.getAvatarClasses() },
        _react2['default'].createElement(_LazyLoadImage2['default'], { className: 'avatar__img', image: image })
      );
    }
  }, {
    key: 'renderSymbol',
    value: function renderSymbol() {
      var _props$userpic = this.props.userpic;
      var _props$userpic$default_colors = _props$userpic.default_colors;
      var background = _props$userpic$default_colors.background;
      var name = _props$userpic$default_colors.name;
      var symbol = _props$userpic.symbol;

      var avatarStyles = {
        backgroundColor: background,
        color: name
      };

      return _react2['default'].createElement(
        'span',
        { className: this.getAvatarClasses(), style: avatarStyles },
        _react2['default'].createElement(
          'span',
          { className: 'avatar__text' },
          symbol
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.userpic.original_url != null ? this.renderImage() : this.renderSymbol();
    }
  }]);

  return Avatar;
})();

Avatar.propTypes = {
  size: _react.PropTypes.number.isRequired,
  userpic: _react.PropTypes.object.isRequired
};

Avatar.defaultProps = {
  size: 220
};

exports['default'] = Avatar;
module.exports = exports['default'];

},{"./LazyLoadImage":535,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"classnames":647,"react":"react"}],533:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Spinner = require('./Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var FitSpinner = (function () {
  function FitSpinner() {
    _classCallCheck(this, FitSpinner);
  }

  _createClass(FitSpinner, [{
    key: 'fitSize',
    value: function fitSize(size) {
      var knownSizes = [8, 14, 24, 30, 70];
      var lesserSizes = knownSizes.filter(function (s) {
        return s <= size - 4;
      }); // -4px for padding

      return lesserSizes[lesserSizes.length - 1];
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_Spinner2['default'], { size: this.fitSize(this.props.size) });
    }
  }]);

  return FitSpinner;
})();

FitSpinner.propTypes = {
  size: _react.PropTypes.number
};

exports['default'] = FitSpinner;
module.exports = exports['default'];

},{"./Spinner":537,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],534:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactImageloader = require('react-imageloader');

var _reactImageloader2 = _interopRequireDefault(_reactImageloader);

var _FitSpinner = require('./FitSpinner');

var _FitSpinner2 = _interopRequireDefault(_FitSpinner);

var Image = (function () {
  function Image() {
    _classCallCheck(this, Image);
  }

  _createClass(Image, [{
    key: 'renderPreloader',
    value: function renderPreloader() {
      var style = this.getSize();
      var width = style.width;
      var height = style.height;

      // 28 - 4 = 24 maximum spinner size for loader
      return _react2['default'].createElement(
        'div',
        { className: 'image-loader-spinner', style: style },
        _react2['default'].createElement(_FitSpinner2['default'], { size: Math.min(height, width, 28) })
      );
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      var _props = this.props;
      var geometry = _props.image.geometry;
      var maxWidth = _props.maxWidth;
      var maxHeight = _props.maxHeight;

      return Image.getSize(_extends({}, geometry, {
        maxWidth: maxWidth,
        maxHeight: maxHeight
      }));
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      var size = this.getSize();
      return ThumborService.newImageUrl(this.props.image.url, size);
    }
  }, {
    key: 'getRetinaUrl',
    value: function getRetinaUrl() {
      var size = this.getSize();
      return ThumborService.newRetinaImageUrl(this.props.image.url, size);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var className = _props2.className;
      var url = _props2.image.url;
      var isRawUrl = _props2.isRawUrl;

      var style = this.getSize();
      var imgProps = {
        className: className,
        style: style,
        srcSet: isRawUrl ? void 0 : this.getRetinaUrl()
      };

      return _react2['default'].createElement(_reactImageloader2['default'], {
        imgProps: imgProps,
        preloader: this.renderPreloader.bind(this),
        src: isRawUrl ? url : this.getUrl(),
        style: style
      });
    }
  }]);

  return Image;
})();

Image.propTypes = {
  className: _react.PropTypes.string,
  image: _react.PropTypes.shape({
    geometry: _react.PropTypes.object,
    url: _react.PropTypes.string.isRequired
  }).isRequired,
  isRawUrl: _react.PropTypes.bool,
  maxHeight: _react.PropTypes.number,
  maxWidth: _react.PropTypes.number
};

Image.getSize = function getSize(_ref) {
  var width = _ref.width;
  var height = _ref.height;
  var maxWidth = _ref.maxWidth;
  var maxHeight = _ref.maxHeight;

  if (width && height) {
    if (maxWidth || maxHeight) {
      var tMaxWidth = maxWidth || maxHeight;
      var tMaxHeight = maxHeight || maxWidth;

      var calcWidth = undefined,
          calcHeight = undefined,
          ratio = undefined;

      if (width > tMaxWidth) {
        ratio = tMaxWidth / width;
        calcWidth = tMaxWidth;
        calcHeight = height * ratio;
      } else if (height > tMaxHeight) {
        ratio = tMaxHeight / height;
        calcHeight = tMaxHeight;
        calcWidth = width * ratio;
      } else {
        calcWidth = width;
        calcHeight = height;
      }

      return {
        width: parseInt(calcWidth, 10),
        height: parseInt(calcHeight, 10)
      };
    } else {
      return {
        width: width,
        height: height
      };
    }
  } else {
    return {
      width: maxWidth || null,
      height: maxHeight || null
    };
  }
};

exports['default'] = Image;
module.exports = exports['default'];

},{"./FitSpinner":533,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react","react-imageloader":"react-imageloader"}],535:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLazyLoad = require('react-lazy-load');

var _reactLazyLoad2 = _interopRequireDefault(_reactLazyLoad);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Image = require('./Image');

var _Image2 = _interopRequireDefault(_Image);

var LazyLoadImage = (function () {
  function LazyLoadImage() {
    _classCallCheck(this, LazyLoadImage);
  }

  _createClass(LazyLoadImage, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var geometry = _props.image.geometry;
      var maxWidth = _props.maxWidth;
      var maxHeight = _props.maxHeight;

      var style = _Image2['default'].getSize(_extends({}, geometry, {
        maxWidth: maxWidth,
        maxHeight: maxHeight
      }));

      return _react2['default'].createElement(
        _reactLazyLoad2['default'],
        {
          height: style.height,
          threshold: parseInt(window.innerHeight, 10)
        },
        _react2['default'].createElement(_Image2['default'], this.props)
      );
    }
  }]);

  return LazyLoadImage;
})();

LazyLoadImage.propTypes = {
  className: _react.PropTypes.string,
  image: _react.PropTypes.shape({
    geometry: _react.PropTypes.object,
    url: _react.PropTypes.string.isRequired
  }).isRequired,
  isRawUrl: _react.PropTypes.bool,
  maxHeight: _react.PropTypes.number,
  maxWidth: _react.PropTypes.number
};

exports['default'] = LazyLoadImage;
module.exports = exports['default'];

},{"./Image":534,"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"react":"react","react-lazy-load":"react-lazy-load"}],536:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

// Currency format:
//   'iso_code': 'RUB',
//   'iso_numeric': '643',
//   'name': 'Russian Ruble',
//   'symbol': '₽',
//   'html_name': 'руб.',
//   'human_name': 'Российские рубли',
//   'symbol_first': false,
//   'thousands_separator': '.',
//   'decimal_mark': ',',
//   'subunit_to_unit': 100,
//   'smallest_denomination': 1,
//   'exponent': 2

var Money = React.createClass({
  displayName: 'Money',

  propTypes: {
    value: React.PropTypes.number.isRequired,
    currency: React.PropTypes.object.isRequired,
    format: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      format: '0,0[.]00 $'
    };
  },

  render: function render() {
    var unit = this.props.value / this.props.currency.subunit_to_unit;
    return React.createElement(
      'span',
      null,
      (0, _numeral2['default'])(unit).format(this.props.format)
    );
    // 299 рублей
  }
});

exports['default'] = Money;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"numeral":"numeral"}],537:[function(require,module,exports){
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

/** 
Известные размеры:
 - 8x8
 - 14x14
 - 24x24
 - 30x30
 - 70x70
*/

var propTypes = {
  size: _react.PropTypes.number
};

var defaultProps = {
  size: 8
};

var Spinner = (function () {
  function Spinner() {
    _classCallCheck(this, Spinner);
  }

  _createClass(Spinner, [{
    key: "getSize",
    value: function getSize(size) {
      return size + "x" + size;
    }
  }, {
    key: "render",
    value: function render() {
      return _react2["default"].createElement(
        "span",
        { className: "spinner spinner--" + this.getSize(this.props.size) },
        _react2["default"].createElement("span", { className: "spinner__icon" })
      );
    }
  }]);

  return Spinner;
})();

Spinner.propTypes = propTypes;
Spinner.defaultProps = defaultProps;

exports["default"] = Spinner;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],538:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Text = (function () {
  function Text() {
    _classCallCheck(this, Text);
  }

  _createClass(Text, [{
    key: 'render',
    value: function render() {
      if (this.props.withHTML) {
        return _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: this.props.value } });
      } else {
        return _react2['default'].createElement(
          'span',
          null,
          this.props.value
        );
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      value: _react.PropTypes.string.isRequired,
      withHTML: _react.PropTypes.bool
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      withHTML: false
    },
    enumerable: true
  }]);

  return Text;
})();

exports['default'] = Text;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":568,"babel-runtime/helpers/create-class":569,"babel-runtime/helpers/interop-require-default":574,"react":"react"}],539:[function(require,module,exports){
var Collage, CollageMixin, CollageRow, PropTypes;

CollageMixin = require('./mixins/collage');

CollageRow = require('./row');

PropTypes = React.PropTypes;

Collage = React.createClass({
  displayName: 'Collage',
  mixins: [CollageMixin],
  propTypes: {
    images: PropTypes.array.isRequired,
    width: PropTypes.number.isRequired,
    margin: PropTypes.number.isRequired,
    minRowHeight: PropTypes.number.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "collage"
    }, this.renderItems());
  },
  renderItems: function() {
    var images, rows;
    images = this.props.images;
    switch (false) {
      case images.length !== 0:
        return [];
      case images.length !== 1:
        rows = this.makeRows(images);
        return React.createElement(CollageRow, {
          "row": rows[0]
        });
      case !(images.length >= 2):
        rows = this.makeRows(images);
        return rows.map(function(row, i) {
          return React.createElement(CollageRow, {
            "row": row,
            "key": i
          });
        });
      default:
        return [];
    }
  }
});

module.exports = Collage;


},{"./mixins/collage":541,"./row":542}],540:[function(require,module,exports){
var Collage, CollageManager, MARGIN, MIN_ROW_HEIGHT, PropTypes;

Collage = require('./collage');

PropTypes = React.PropTypes;

MARGIN = 0;

MIN_ROW_HEIGHT = 150;

CollageManager = React.createClass({
  displayName: 'CollageManager',
  propTypes: {
    images: PropTypes.array.isRequired,
    width: PropTypes.number,
    margin: PropTypes.number,
    minRowHeight: PropTypes.number,
    recalculation: PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      margin: MARGIN,
      minRowHeight: MIN_ROW_HEIGHT
    };
  },
  getInitialState: function() {
    return {
      width: this.props.width || null
    };
  },
  componentDidMount: function() {
    if (!this.props.width) {
      this.updateWidthState();
    }
    if (this.props.recalculation) {
      return window.addEventListener('resize', this.updateWidthState);
    }
  },
  componentWillUnmount: function() {
    if (this.props.recalculation) {
      return window.removeEventListener('resize', this.updateWidthState);
    }
  },
  render: function() {
    if (this.hasWidth()) {
      return React.createElement(Collage, React.__spread({}, this.props, {
        "width": this.state.width
      }));
    } else {
      return React.createElement("span", null);
    }
  },
  hasWidth: function() {
    return this.state.width != null;
  },
  updateWidthState: function() {
    var parentWidth;
    parentWidth = this.getDOMNode().parentNode.offsetWidth;
    return this.setState({
      width: parentWidth + this.props.margin * 2
    });
  }
});

module.exports = CollageManager;


},{"./collage":539}],541:[function(require,module,exports){
var CollageMixin, assign;

assign = require('react/lib/Object.assign');

CollageMixin = {
  makeRows: function(images) {
    var newImages, rowIndex, rowWidth, rows;
    rows = [];
    rowIndex = 0;
    rowWidth = 0;
    newImages = JSON.parse(JSON.stringify(images));
    this.calculateImagesRatio(newImages);
    newImages.forEach((function(_this) {
      return function(image, i) {
        assign(image, {
          width: _this.getItemNewWidth(image, _this.props.minRowHeight),
          height: _this.props.minRowHeight,
          margin: _this.props.margin
        });
        if (i === 0 || rowWidth + image.width < _this.props.width) {
          if (rows[rowIndex] == null) {
            rows[rowIndex] = [];
          }
          rows[rowIndex].push(image);
          rowWidth += image.width + image.margin * 2;
        } else {
          _this.stretchRow(rows[rowIndex], rowWidth);
          rows[rowIndex + 1] = [image];
          rowWidth = image.width + image.margin * 2;
          rowIndex++;
        }
        if (i === newImages.length - 1) {
          return _this.stretchRow(rows[rowIndex], rowWidth);
        }
      };
    })(this));
    return rows;
  },
  stretchRow: function(row, rowWidth) {
    var lastElement, requiredHeight, resultWidth, rowHeight;
    rowHeight = row[0].height + row[0].margin * 2;
    requiredHeight = Math.round(rowHeight / rowWidth * this.props.width);
    resultWidth = 0;
    lastElement = row[row.length - 1];
    row.forEach((function(_this) {
      return function(image, i) {
        assign(image, {
          width: _this.getItemNewWidth(image, requiredHeight - _this.props.margin * 2),
          height: requiredHeight - _this.props.margin * 2
        });
        return resultWidth += image.width + image.margin * 2;
      };
    })(this));
    return lastElement.width = lastElement.width + lastElement.margin * 2 + (this.props.width - resultWidth) - this.props.margin * 2;
  },
  getItemNewWidth: function(item, newHeight) {
    return Math.round(newHeight * item.ratio);
  },
  calculateImagesRatio: function(images) {
    return images.forEach(function(image) {
      return image.ratio = image.width / image.height;
    });
  }
};

module.exports = CollageMixin;


},{"react/lib/Object.assign":709}],542:[function(require,module,exports){
var CollageRow, CollageRowItem, PropTypes;

CollageRowItem = require('./row/item');

PropTypes = React.PropTypes;

CollageRow = React.createClass({
  displayName: 'CollageRow',
  propTypes: {
    row: PropTypes.array.isRequired
  },
  render: function() {
    return React.createElement("div", {
      "className": "collage__row"
    }, this.renderRowItems());
  },
  renderRowItems: function() {
    return this.props.row.map(function(image) {
      return React.createElement(CollageRowItem, {
        "width": image.width,
        "height": image.height,
        "imagePath": image.payload.path,
        "imageUrl": image.payload.url,
        "key": image.payload.id
      });
    });
  }
});

module.exports = CollageRow;


},{"./row/item":543}],543:[function(require,module,exports){
var CollageRowItem, FitSpinner, ImageLoader, LazyLoad, PropTypes;

LazyLoad = require('react-lazy-load');

ImageLoader = require('react-imageloader');

FitSpinner = require('../../FitSpinner');

PropTypes = React.PropTypes;

CollageRowItem = React.createClass({
  displayName: 'CollageRowItem',
  propTypes: {
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    margin: PropTypes.number,
    imageUrl: PropTypes.string.isRequired,
    imagePath: PropTypes.string
  },
  getInitialState: function() {
    return {
      width: this.props.width,
      height: this.props.height
    };
  },
  renderPreloader: function() {
    var height, ref, width;
    ref = this.props, width = ref.width, height = ref.height;
    return React.createElement("div", {
      "className": "collage__item-spinner",
      "style": this.getImageStyles()
    }, React.createElement(FitSpinner, {
      "size": Math.min(width, height, 28)
    }));
  },
  render: function() {
    var imgProps;
    imgProps = {
      srcSet: this.getRetinaUrl(),
      style: this.getImageStyles()
    };
    return React.createElement("div", {
      "style": this.getContainerStyles(),
      "className": "collage__item"
    }, React.createElement(LazyLoad, {
      "height": this.props.height,
      "threshold": parseInt(window.innerHeight, 10)
    }, React.createElement(ImageLoader, {
      "imgProps": imgProps,
      "preloader": this.renderPreloader,
      "src": this.getUrl()
    })));
  },
  getContainerStyles: function() {
    var height, margin, ref, width;
    ref = this.props, width = ref.width, height = ref.height, margin = ref.margin;
    return {
      width: width,
      height: height,
      margin: margin
    };
  },
  getImageStyles: function() {
    var height, ref, width;
    ref = this.props, width = ref.width, height = ref.height;
    return {
      width: width,
      height: height
    };
  },
  getUrl: function() {
    var height, ref, width;
    ref = this.state, width = ref.width, height = ref.height;
    if (this.props.imageUrl && this.props.imagePath) {
      return ThumborService.imageUrl({
        url: this.props.imageUrl,
        path: this.props.imagePath,
        size: width + 'x' + height
      });
    } else {
      return this.props.imageUrl;
    }
  },
  getRetinaUrl: function() {
    var height, ref, width;
    ref = this.state, width = ref.width, height = ref.height;
    if (this.props.imageUrl && this.props.imagePath) {
      return ThumborService.retinaImageUrl({
        url: this.props.imageUrl,
        path: this.props.imagePath,
        size: {
          width: width,
          height: height
        }
      });
    } else {
      return this.props.imageUrl;
    }
  }
});

module.exports = CollageRowItem;


},{"../../FitSpinner":533,"react-imageloader":"react-imageloader","react-lazy-load":"react-lazy-load"}],544:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _bowser = require('bowser');

var _bowser2 = _interopRequireDefault(_bowser);

// These browsers trigger change event on autofill (http://stackoverflow.com/a/11710295)
// Anyway Safari doesn't trigger change event at all
var MINIMAL_BROWSER_VERSION = {
  'Chrome': 9,
  'Firefox': 5,
  'Safari': Infinity,
  'iPhone': Infinity,
  'iPad': Infinity,
  'Opera': 15,
  'Internet Explorer': 9
};

var Field = React.createClass({
  displayName: 'Field',

  propTypes: {
    defaultValue: React.PropTypes.string,
    onChange: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      defaultValue: ''
    };
  },

  componentDidMount: function componentDidMount() {
    if (!this.canBrowserTriggerChangeEvent()) {
      this.value = this.props.defaultValue;
      this.intervalID = setInterval(this.checkAndTriggerChangeEvent, 1000);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    if (!this.canBrowserTriggerChangeEvent()) {
      clearInterval(this.intervalID);
    }
  },

  render: function render() {
    return React.createElement('input', _extends({}, this.props, { onChange: this.handleChange }));
  },

  canBrowserTriggerChangeEvent: function canBrowserTriggerChangeEvent() {
    var name = _bowser2['default'].browser.name,
        version = parseFloat(_bowser2['default'].browser.version);

    return version < MINIMAL_BROWSER_VERSION[name] ? false : true;
  },

  checkAndTriggerChangeEvent: function checkAndTriggerChangeEvent() {
    var currentValue = this.getDOMNode().value;

    if (this.value != currentValue) {
      this.value = currentValue;
      this.props.onChange(currentValue);
    }
  },

  handleChange: function handleChange() {
    var currentValue = this.getDOMNode().value;
    if (!this.canBrowserTriggerChangeEvent()) this.value = currentValue;
    this.props.onChange(currentValue);
  }
});

exports['default'] = Field;
module.exports = exports['default'];

},{"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574,"bowser":"bowser"}],545:[function(require,module,exports){
"use strict";

var _extends = require("babel-runtime/helpers/extends")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = require('./Field');

var _Field2 = _interopRequireDefault(_Field);

var PasswordField = React.createClass({
  displayName: "PasswordField",

  render: function render() {
    return React.createElement(_Field2["default"], _extends({}, this.props, { type: "password" }));
  }
});

exports["default"] = PasswordField;
module.exports = exports["default"];

},{"./Field":544,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574}],546:[function(require,module,exports){
"use strict";

var _extends = require("babel-runtime/helpers/extends")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = require('./Field');

var _Field2 = _interopRequireDefault(_Field);

var TextField = React.createClass({
  displayName: "TextField",

  render: function render() {
    return React.createElement(_Field2["default"], _extends({}, this.props, { type: "text" }));
  }
});

exports["default"] = TextField;
module.exports = exports["default"];

},{"./Field":544,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574}],547:[function(require,module,exports){
var CollageManager, ImageAttachmentsCollage, PropTypes;

CollageManager = require('./collage/collageManager');

PropTypes = React.PropTypes;

ImageAttachmentsCollage = React.createClass({
  displayName: 'ImageAttachmentsCollage',
  propTypes: {
    width: PropTypes.number,
    imageAttachments: PropTypes.array.isRequired
  },
  render: function() {
    return React.createElement(CollageManager, {
      "width": this.props.width,
      "images": this.getCollageImages(),
      "recalculation": false
    });
  },
  getCollageImages: function() {
    return this.props.imageAttachments.map(function(imageAttachment) {
      var image, newImage;
      image = imageAttachment.image;
      newImage = {
        width: image.geometry.width,
        height: image.geometry.height,
        payload: {
          id: imageAttachment.id || imageAttachment.uuid,
          url: image.url,
          path: image.path,
          title: image.title
        }
      };
      return newImage;
    });
  }
});

module.exports = ImageAttachmentsCollage;


},{"./collage/collageManager":540}],548:[function(require,module,exports){
"use strict";

var _extends = require("babel-runtime/helpers/extends")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
function connectToStores(Component, stores, getStateFromStores) {
  var StoreConnection = React.createClass({
    displayName: "StoreConnection",

    getInitialState: function getInitialState() {
      return getStateFromStores(this.props);
    },
    componentWillMount: function componentWillMount() {
      var _this = this;

      stores.forEach(function (store) {
        return store.addChangeListener(_this.handleStoresChanged);
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      var _this2 = this;

      stores.forEach(function (store) {
        return store.removeChangeListener(_this2.handleStoresChanged);
      });
    },
    handleStoresChanged: function handleStoresChanged() {
      if (this.isMounted()) {
        this.setState(getStateFromStores(this.props));
      }
    },
    render: function render() {
      return React.createElement(Component, _extends({}, this.props, this.state));
    }
  });
  return StoreConnection;
};

exports["default"] = connectToStores;
module.exports = exports["default"];

},{"babel-runtime/helpers/extends":571}],549:[function(require,module,exports){
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _servicesPositions = require('../../services/positions');

var _servicesPositions2 = _interopRequireDefault(_servicesPositions);

var REPOSITION_TIMEOUT = 500;

function managePositions(Component) {
  var PositionManager = React.createClass({
    displayName: 'PositionManager',

    propTypes: {
      clue: React.PropTypes.string.isRequired,
      position: React.PropTypes.object
    },

    getDefaultProps: function getDefaultProps() {
      return {
        position: { left: 50, top: 50 }
      };
    },

    getInitialState: function getInitialState() {
      var position = _servicesPositions2['default'].restorePosition(this.props.clue) || this.props.position;

      // Для попапов с фоном не ставим отступы
      if (this.props.withBackground) {
        position = { left: 0, top: 0 };
      }

      return {
        position: _servicesPositions2['default'].smartPosition(position)
      };
    },

    componentDidMount: function componentDidMount() {
      $(window).on('resize', this.moveIfOutside);
    },

    componentWillUnmount: function componentWillUnmount() {
      $(window).off('resize', this.moveIfOutside);
    },

    render: function render() {
      return React.createElement(Component, _extends({}, this.props, this.state, {
        onPositionChange: this.changePosition }));
    },

    changePosition: function changePosition(position) {
      this.moveIfOutside();
      this.savePosition(position);
    },

    moveIfOutside: function moveIfOutside() {
      var _this = this;

      var currentPosition = $(this.getDOMNode()).position(),
          smartPosition = _servicesPositions2['default'].smartPosition(currentPosition);

      if (smartPosition.left != currentPosition.left || smartPosition.top != currentPosition.top) {
        clearTimeout(this._repositionTimeout);
        this._repositionTimeout = setTimeout(function () {
          _this.setState({ position: smartPosition });
        }, REPOSITION_TIMEOUT);
      }
    },

    savePosition: function savePosition(position) {
      _servicesPositions2['default'].savePosition(this.props.clue, position);
    }
  });

  return PositionManager;
};

exports['default'] = managePositions;
module.exports = exports['default'];

},{"../../services/positions":553,"babel-runtime/helpers/extends":571,"babel-runtime/helpers/interop-require-default":574}],550:[function(require,module,exports){
var ConnectStoreMixin, _;

_ = require('lodash');

ConnectStoreMixin = function(listenableStore) {
  return {
    getInitialState: function() {
      return this.getStateFromStore();
    },
    componentWillMount: function() {
      if (_.isArray(listenableStore)) {
        return _.forEach(listenableStore, (function(_this) {
          return function(store) {
            return store.addChangeListener(_this.onStoreChange);
          };
        })(this));
      } else {
        return listenableStore.addChangeListener(this.onStoreChange);
      }
    },
    componentWillUnmount: function() {
      if (_.isArray(listenableStore)) {
        return _.forEach(listenableStore, (function(_this) {
          return function(store) {
            return store.removeChangeListener(_this.onStoreChange);
          };
        })(this));
      } else {
        return listenableStore.removeChangeListener(this.onStoreChange);
      }
    },
    onStoreChange: function() {
      return this.setState(this.getStateFromStore());
    }
  };
};

module.exports = ConnectStoreMixin;


},{"lodash":"lodash"}],551:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var BeepService = {
  makeUrl: function makeUrl(soundName) {
    return gon.sound_asset_url + soundName;
  },

  play: function play(soundPath) {
    if (!soundPath) soundPath = this.makeUrl('incoming_message.mp3');

    var soundEl = undefined,
        bodyEl = undefined,
        isHTML5 = undefined;

    isHTML5 = true;
    try {
      if (typeof document.createElement("audio").play == "undefined") isHTML5 = false;
    } catch (e) {
      isHTML5 = false;
    }

    bodyEl = document.getElementsByTagName("body")[0];
    if (!bodyEl) bodyEl = document.getElementsByTagName("html")[0];

    soundEl = document.getElementById("beep");
    if (soundEl) bodyEl.removeChild(soundEl);

    if (isHTML5) {
      soundEl = document.createElement("audio");
      soundEl.setAttribute("id", "beep");
      soundEl.setAttribute("src", soundPath);
      soundEl.play();
    } else if (navigator.userAgent.toLowerCase().indexOf("msie") > -1) {
      soundEl = document.createElement("bgsound");
      soundEl.setAttribute("id", "beep");
      soundEl.setAttribute("loop", 1);
      soundEl.setAttribute("src", soundPath);
      bodyEl.appendChild(soundEl);
    } else {
      var paramEl = undefined;

      soundEl = document.createElement("object");
      soundEl.setAttribute("id", "beep");
      soundEl.setAttribute("type", "audio/mpeg");
      soundEl.setAttribute("style", "display:none;");
      soundEl.setAttribute("data", soundPath);

      paramEl = document.createElement("param");
      paramEl.setAttribute("name", "autostart");
      paramEl.setAttribute("value", "false");

      soundEl.appendChild(paramEl);
      bodyEl.appendChild(soundEl);

      try {
        soundEl.Play();
      } catch (e) {
        soundEl.object.Play();
      }
    }
  }
};

exports["default"] = BeepService;
module.exports = exports["default"];

},{}],552:[function(require,module,exports){
(function (global){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var SEVERITY_INFO_TYPE = 'info',
    SEVERITY_ERROR_TYPE = 'error',
    SEVERITY_WARNING_TYPE = 'warning';

var ErrorService = {
  remoteService: global.Bugsnag || null,

  notify: function notify(name, message, metaData, severity) {
    if (this.remoteService != null && this.remoteService.notify) {
      this.remoteService.notify(name, message, metaData, severity);
    } else {
      console.group('[' + severity + '] ' + name);
      if (metaData != null && _Object$keys(metaData).length) console.log('Meta:', metaData);
      console.groupEnd();
    }
  },

  notifyErrorResponse: function notifyErrorResponse(name) {
    var metaData = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (metaData.response) {
      this.notifyError('[AJAX] ' + name, metaData);
    }
  },

  notifyError: function notifyError(name) {
    var metaData = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.notify(name, '', metaData, 'error');
  },

  notifyWarning: function notifyWarning(name) {
    var metaData = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.notify(name, '', metaData, 'warning');
  },

  notifyException: function notifyException(e, name) {
    if (this.remoteService != null && this.remoteService.notifyException) {
      this.remoteService.notifyException(e, name);
    }
  }
};

exports['default'] = ErrorService;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"babel-runtime/core-js/object/keys":565}],553:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibObjectAssign = require('react/lib/Object.assign');

var _reactLibObjectAssign2 = _interopRequireDefault(_reactLibObjectAssign);

var MOVE_OFFSET = 100,
    MIN_OFFSET = 50,
    STORAGE_PREFIX = 'positions:';

var PositionsService = {
  storage: AppStorage,

  savePosition: function savePosition(key, position) {
    this.storage.setItem(this._positionKey(key), JSON.stringify(position));
  },

  restorePosition: function restorePosition(key) {
    return JSON.parse(this.storage.getItem(this._positionKey(key)));
  },

  smartPosition: function smartPosition(position) {
    var newPosition = (0, _reactLibObjectAssign2['default'])({}, position),
        windowWidth = $(window).width(),
        windowHeight = $(window).height();

    if (newPosition.top > windowHeight - MIN_OFFSET) {
      newPosition.top = windowHeight - MOVE_OFFSET;
    }

    if (newPosition.top < 0) {
      newPosition.top = 0;
    }

    if (newPosition.left > windowWidth - MIN_OFFSET) {
      newPosition.left = windowWidth - MOVE_OFFSET;
    }

    if (newPosition.left < 0) {
      newPosition.left = 0;
    }

    return newPosition;
  },

  _positionKey: function _positionKey(key) {
    return STORAGE_PREFIX + ':' + key;
  }
};

exports['default'] = PositionsService;
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":574,"react/lib/Object.assign":709}],554:[function(require,module,exports){
/*global gon */
'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
function prepareUrl(url) {
  return (/^\/\/\S*$/.test(url) ? 'http:' + url : url
  );
}

function filters() {
  var additional = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var common = []; //['no_upscale()'];
  var fx = [].concat(common, _toConsumableArray(additional));
  return fx.length ? '/filters:' + fx.join(':') : '';
}

var ThumborService = {
  thumborWithUrl: gon.thumbor_http_loader ? gon.thumbor_http_loader.server_url : null,
  thumborWithPath: gon.thumbor ? gon.thumbor.server_url : null,

  newImageUrl: function newImageUrl(url, size, filtersArr) {
    url = prepareUrl(url);
    var width = size.width || '',
        height = size.height || '';

    return this.thumborWithUrl ? this.thumborWithUrl + '/unsafe/' + width + 'x' + height + filters(filtersArr) + '/' + url : url;
  },

  newRetinaImageUrl: function newRetinaImageUrl(url, size, filtersArr) {
    url = prepareUrl(url);
    var width = size.width ? size.width * 2 : '',
        height = size.height ? size.height * 2 : '';

    return this.thumborWithUrl ? this.thumborWithUrl + '/unsafe/' + width + 'x' + height + filters(filtersArr) + '/' + url + ' 2x' : url;
  },

  imageUrl: function imageUrl(_ref) {
    var url = _ref.url;
    var path = _ref.path;
    var size = _ref.size;

    return this.thumborWithPath ? this.thumborWithPath + '/unsafe/' + size + filters() + '/' + path : url;
  },

  retinaImageUrl: function retinaImageUrl(_ref2) {
    var url = _ref2.url;
    var path = _ref2.path;
    var size = _ref2.size;

    url = prepareUrl(url);
    var width = size.width ? size.width * 2 : '',
        height = size.height ? size.height * 2 : '';

    return this.thumborWithPath ? this.thumborWithPath + '/unsafe/' + width + 'x' + height + filters() + '/' + path + ' 2x' : url;
  }
};

exports['default'] = ThumborService;
module.exports = exports['default'];

},{"babel-runtime/helpers/to-consumable-array":576}],555:[function(require,module,exports){
var UuidService;

UuidService = {
  generate: function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return (s4() + s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4() + s4() + s4());
  }
};

module.exports = UuidService;


},{}],556:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var AppStorage = null;

// Refer to https://gist.github.com/remy/350433
try {
  // Test webstorage existence.
  if (!window.localStorage) throw "exception";
  localStorage.setItem('storage_test', 1);
  localStorage.removeItem('storage_test');
} catch (e) {
  (function () {
    var Storage = function Storage(type) {
      function createCookie(name, value, days) {
        var date, expires;

        if (days) {
          date = new Date();
          date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
          expires = "; expires=" + date.toGMTString();
        } else {
          expires = "";
        }
        document.cookie = name + "=" + value + expires + "; path=/";
      }

      function readCookie(name) {
        var nameEQ = name + "=",
            ca = document.cookie.split(';'),
            i,
            c;

        for (i = 0; i < ca.length; i++) {
          c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1, c.length);2480;
          }

          if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length);
          }
        }
        return null;
      }

      function setData(data) {
        // Convert data into JSON and encode to accommodate for special characters.
        data = encodeURIComponent(JSON.stringify(data));
        // Create cookie.
        if (type == 'session') {
          createCookie(getSessionName(), data, 365);
        } else {
          createCookie('localStorage', data, 365);
        }
      }

      function clearData() {
        if (type == 'session') {
          createCookie(getSessionName(), '', 365);
        } else {
          createCookie('localStorage', '', 365);
        }
      }

      function getData() {
        // Get cookie data.
        var data = type == 'session' ? readCookie(getSessionName()) : readCookie('localStorage');
        // If we have some data decode, parse and return it.
        return data ? JSON.parse(decodeURIComponent(data)) : {};
      }

      function getSessionName() {
        // If there is no name for this window, set one.
        // To ensure it's unquie use the current timestamp.
        if (!window.name) {
          window.name = new Date().getTime();
        }
        return 'sessionStorage' + window.name;
      }

      // Initialise if there's already data.
      var data = getData();

      return {
        length: 0,
        clear: function clear() {
          data = {};
          this.length = 0;
          clearData();
        },
        getItem: function getItem(key) {
          return data[key] === undefined ? null : data[key];
        },
        key: function key(i) {
          // not perfect, but works
          var ctr = 0;
          for (var k in data) {
            if (ctr == i) return k;else ctr++;
          }
          return null;
        },
        removeItem: function removeItem(key) {
          delete data[key];
          this.length--;
          setData(data);
        },
        setItem: function setItem(key, value) {
          data[key] = value + ''; // forces the value to a string
          this.length++;
          setData(data);
        }
      };
    };

    AppStorage = new Storage('local');
  })();
}

// Проблем с localStorage нет, значит AppStorage просто будет ссылаться на localStorage
if (AppStorage == null) AppStorage = window.localStorage;

exports['default'] = AppStorage;
module.exports = exports['default'];

},{}],557:[function(require,module,exports){
var ApiRoutes;

ApiRoutes = {
  omniauth_url: function(provider) {
    return gon.host + '/auth/' + provider;
  },
  iframely_url: function() {
    return gon.api_host + '/v1/embeding/iframely.json';
  },
  pusher_auth_url: function() {
    return gon.api_host + '/v1/messenger/auth';
  },
  calendar_url: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/calendar';
  },
  votes_url: function(entryId) {
    return gon.api_host + '/v1/entries/' + entryId + '/votes';
  },
  reposts_url: function() {
    return gon.api_host + '/v1/reposts';
  },
  embed_url: function() {
    return gon.api_host + '/v1/embed';
  },
  design_settings_url: function(slug) {
    return gon.api_host + '/v1/design_settings/' + slug;
  },
  design_settings_cover_url: function(slug) {
    return gon.api_host + '/v1/design_settings/' + slug + '/cover';
  },
  signin_url: function() {
    return gon.api_host + '/v1/sessions';
  },
  onboarding: function() {
    return gon.api_host + "/v1/onboarding";
  },
  signup_url: function() {
    return gon.api_host + '/v1/users';
  },
  update_profile_url: function() {
    return gon.api_host + '/v1/users';
  },
  recovery_url: function() {
    return gon.api_host + '/v1/users/password/recovery';
  },
  request_confirm_url: function() {
    return gon.api_host + '/v1/users/confirmation';
  },
  userpic_url: function() {
    return gon.api_host + '/v1/users/userpic';
  },
  users_predict: function() {
    return gon.api_host + '/v1/users/predict';
  },
  fb_crosspost_url: function() {
    return gon.api_host + "/v1/facebook/crossposting";
  },
  twitter_crosspost_url: function() {
    return gon.api_host + "/v1/twitter/crossposting";
  },
  create_entry_url: function(type) {
    return gon.api_host + '/v1/entries/' + type;
  },
  update_entry_url: function(entryId, entryType) {
    return gon.api_host + '/v1/entries/' + entryType + '/' + entryId;
  },
  update_images_url: function(entryId) {
    return gon.api_host + '/v1/entries/image/' + entryId + '/images';
  },
  entry_url: function(entryId) {
    return gon.api_host + '/v1/entries/' + entryId;
  },
  favorites_url: function() {
    return gon.api_host + '/v1/favorites';
  },
  watching_url: function() {
    return gon.api_host + '/v1/watching';
  },
  report_url: function(entryId) {
    return gon.api_host + '/v1/entries/' + entryId + '/report';
  },
  relationships_summary_url: function() {
    return gon.api_host + '/v1/relationships/summary';
  },
  relationships_to_url: function(state) {
    return gon.api_host + '/v1/relationships/to/' + state;
  },
  relationships_by_url: function(state) {
    return gon.api_host + '/v1/relationships/by/' + state;
  },
  relationships_by_id_url: function(tlogId) {
    return gon.api_host + '/v1/relationships/by/' + tlogId;
  },
  unfollow_from_yourself_url: function(tlogId) {
    return gon.api_host + '/v1/relationships/by/tlog/' + tlogId;
  },
  relationships_by_tlog_approve_url: function(tlogId) {
    return gon.api_host + '/v1/relationships/by/tlog/' + tlogId + '/approve';
  },
  relationships_by_tlog_disapprove_url: function(tlogId) {
    return gon.api_host + '/v1/relationships/by/tlog/' + tlogId + '/disapprove';
  },
  tlogRelationshipsBy: function(objectID, state) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/by/' + state;
  },
  tlogRelationshipsTo: function(objectID, state) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/to/' + state;
  },
  tlogRelationshipsByApprove: function(objectID, subjectID) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/by/tlog/' + subjectID + '/approve';
  },
  tlogRelationshipsByDisapprove: function(objectID, subjectID) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/by/tlog/' + subjectID + '/disapprove';
  },
  tlogRelationshipsToTlog: function(objectID, subjectID, state) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/to/tlog/' + subjectID + '/' + state;
  },
  tlogRelationshipsByTlog: function(objectID, subjectID) {
    return gon.api_host + '/v1/tlog_relationships/' + objectID + '/by/tlog/' + subjectID;
  },
  tlogEntries: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/entries';
  },
  tlogEntriesTlogs: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/entries/tlogs';
  },
  tlogEntriesBricks: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/enrties/bricks';
  },
  tlog_followers: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/followers';
  },
  tlog_followings: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/followings';
  },
  tlog_tags: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/tags';
  },
  tlog_report: function(tlogId) {
    return gon.api_host + '/v1/tlog/' + tlogId + '/report';
  },
  get_my_relationship_url: function(tlogId) {
    return gon.api_host + '/v1/relationships/to/tlog/' + tlogId;
  },
  comments_url: function(entryId) {
    return gon.api_host + '/v1/comments';
  },
  comments_edit_delete_url: function(commentId) {
    return gon.api_host + '/v1/comments/' + commentId;
  },
  comments_report_url: function(commentId) {
    return gon.api_host + '/v1/comments/' + commentId + '/report';
  },
  change_my_relationship_url: function(tlogId, state) {
    return gon.api_host + '/v1/relationships/to/tlog/' + tlogId + '/' + state;
  },
  messenger_ready_url: function() {
    return gon.api_host + '/v1/messenger/ready';
  },
  messengerConversationsByUserId: function(userId) {
    return gon.api_host + '/v1/messenger/conversations/by_user_id/' + userId;
  },
  messenger_new_message_url: function(conversationId) {
    return gon.api_host + '/v1/messenger/conversations/by_id/' + conversationId + '/messages';
  },
  messenger_load_messages_url: function(conversationId) {
    return gon.api_host + '/v1/messenger/conversations/by_id/' + conversationId + '/messages';
  },
  messenger_read_messages_url: function(conversationId) {
    return gon.api_host + '/v1/messenger/conversations/by_id/' + conversationId + '/messages/read';
  },
  notificationsUrl: function() {
    return gon.api_host + '/v1/messenger/notifications';
  },
  notificationsReadAllUrl: function() {
    return gon.api_host + '/v1/messenger/notifications/read';
  },
  notifications_read_url: function(id) {
    return gon.api_host + '/v1/messenger/notifications/' + id + '/read';
  },
  suggestions_vkontakte: function() {
    return gon.api_host + '/v1/relationships/suggestions/vkontakte';
  },
  suggestions_facebook: function() {
    return gon.api_host + '/v1/relationships/suggestions/facebook';
  },
  feedLive: function() {
    return gon.api_host + '/v1/feeds/live';
  },
  feedBest: function() {
    return gon.api_host + '/v1/feeds/best';
  },
  feedFriends: function() {
    return gon.api_host + '/v1/my_feeds/friends';
  },
  feedAnonymous: function() {
    return gon.api_host + '/v1/feeds/anonymous';
  },
  imageAttachments: function() {
    return gon.api_host + '/v1/image_attachments';
  },
  imageAttachmentsWithID: function(attachmentID) {
    return gon.api_host + '/v1/image_attachments/' + attachmentID;
  },
  backgrounds: function() {
    return gon.api_host + '/v1/backgrounds';
  },
  flows: function() {
    return gon.api_host + '/v1/flows';
  },
  flowsMine: function() {
    return gon.api_host + '/v1/flows/my';
  },
  flowsAvailable: function() {
    return gon.api_host + '/v1/flows/available';
  },
  flow: function(flowID) {
    return gon.api_host + '/v1/flows/' + flowID;
  },
  flowStaffs: function(flowID) {
    return gon.api_host + '/v1/flows/' + flowID + '/staffs';
  }
};

module.exports = ApiRoutes;


},{}],558:[function(require,module,exports){
var Routes;

Routes = {
  locale: function() {
    var localesPath, localesVersion, vParam;
    localesPath = gon.localesPath, localesVersion = gon.localesVersion;
    vParam = localesVersion != null ? '?v=' + localesVersion : '';
    return localesPath + '/__lng__.json' + vParam;
  },
  logout_path: function() {
    return '/logout';
  },
  tlog_favorite_entries_path: function(slug) {
    return '/~' + slug + '/favorites';
  },
  friends_feed_path: function() {
    return '/friends';
  },
  live_feed_path: function() {
    return '/live';
  },
  live_anonymous_feed_path: function() {
    return '/live/anonymous';
  },
  live_flows_feed_path: function() {
    return '/live/flows';
  },
  best_feed_path: function() {
    return '/best';
  },
  anonymous_feed_path: function() {
    return '/anonymous';
  },
  people_path: function() {
    return '/people';
  },
  new_entry_url: function(userSlug, type) {
    return "/~" + userSlug + "/new" + (type ? "#" + type : "");
  },
  new_anonymous_entry_url: function(userSlug) {
    return '/~' + userSlug + '/anonymous/new';
  },
  my_tlog_url: function(userSlug) {
    return '/~' + userSlug;
  },
  favorites_url: function(userSlug) {
    return '/~' + userSlug + '/favorites';
  },
  private_entries_url: function(userSlug) {
    return '/~' + userSlug + '/privates';
  },
  entry_edit_url: function(userSlug, entryId) {
    return '/~' + userSlug + '/edit' + '/' + entryId;
  },
  messagesUrl: function(userSlug) {
    return '/~' + userSlug + '/conversations';
  },
  notificationsUrl: function(userSlug) {
    return '/~' + userSlug + '/notifications';
  },
  userProfile: function(userSlug) {
    return '/~' + userSlug + '/profile';
  },
  userSettings: function(userSlug) {
    return '/~' + userSlug + '/settings';
  },
  userDesignSettings: function(userSlug) {
    return '/~' + userSlug + '/design_settings';
  },
  userTag: function(userSlug, tag) {
    return '/~' + userSlug + '/tags/' + tag;
  },
  tlogPagination: function(userSlug, type, page) {
    var pageParam, typeFragment;
    if (type == null) {
      type = 'tlog';
    }
    if (page == null) {
      page = 1;
    }
    pageParam = page === 1 ? '' : "?page=" + page;
    typeFragment = (function() {
      switch (type) {
        case 'tlog':
        case 'flow':
          return '';
        case 'private':
          return 'privates';
        case 'favorite':
          return 'favorites';
      }
    })();
    return "/~" + userSlug + "/" + typeFragment + pageParam;
  },
  daylogPagination: function(userSlug, page) {
    return '/~' + userSlug + '/' + page;
  },
  orders: function() {
    return '/orders';
  },
  ordersNew: function(_entryID, _type) {
    var entryID, type;
    entryID = window.encodeURIComponent(_entryID);
    type = window.encodeURIComponent(_type);
    return "/orders/new?entry_id=" + entryID + "&type=" + type;
  },
  flows: function() {
    return '/flows';
  },
  editEntry: function(userTag, entryID) {
    return '/' + userTag + '/edit/' + entryID;
  }
};

module.exports = Routes;


},{}],559:[function(require,module,exports){
/**
 * Protect window.console method calls, e.g. console is not defined on IE
 * unless dev tools are open, and IE doesn't define console.debug
 * 
 * Chrome 41.0.2272.118: debug,error,info,log,warn,dir,dirxml,table,trace,assert,count,markTimeline,profile,profileEnd,time,timeEnd,timeStamp,timeline,timelineEnd,group,groupCollapsed,groupEnd,clear
 * Firefox 37.0.1: log,info,warn,error,exception,debug,table,trace,dir,group,groupCollapsed,groupEnd,time,timeEnd,profile,profileEnd,assert,count
 * Internet Explorer 11: select,log,info,warn,error,debug,assert,time,timeEnd,timeStamp,group,groupCollapsed,groupEnd,trace,clear,dir,dirxml,count,countReset,cd
 * Safari 6.2.4: debug,error,log,info,warn,clear,dir,dirxml,table,trace,assert,count,profile,profileEnd,time,timeEnd,timeStamp,group,groupCollapsed,groupEnd
 * Opera 28.0.1750.48: debug,error,info,log,warn,dir,dirxml,table,trace,assert,count,markTimeline,profile,profileEnd,time,timeEnd,timeStamp,timeline,timelineEnd,group,groupCollapsed,groupEnd,clear
 */
(function() {
  // Union of Chrome, Firefox, IE, Opera, and Safari console methods
  var methods = ["assert", "assert", "cd", "clear", "count", "countReset",
    "debug", "dir", "dirxml", "dirxml", "dirxml", "error", "error", "exception",
    "group", "group", "groupCollapsed", "groupCollapsed", "groupEnd", "info",
    "info", "log", "log", "markTimeline", "profile", "profileEnd", "profileEnd",
    "select", "table", "table", "time", "time", "timeEnd", "timeEnd", "timeEnd",
    "timeEnd", "timeEnd", "timeStamp", "timeline", "timelineEnd", "trace",
    "trace", "trace", "trace", "trace", "warn"];
  var length = methods.length;
  var console = (window.console = window.console || {});
  var method;
  var noop = function() {};
  while (length--) {
    method = methods[length];
    // define undefined methods as noops to prevent errors
    if (!console[method])
      console[method] = noop;
  }
})();
},{}],560:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":577}],561:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":578}],562:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":579}],563:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":580}],564:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":581}],565:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":582}],566:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":583}],567:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":584}],568:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],569:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      _Object$defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":563}],570:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = function (obj, key, value) {
  if (key in obj) {
    _Object$defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":563}],571:[function(require,module,exports){
"use strict";

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

exports["default"] = _Object$assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/assign":561}],572:[function(require,module,exports){
"use strict";

var _Object$getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor")["default"];

exports["default"] = function get(_x, _x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var object = _x,
        property = _x2,
        receiver = _x3;
    _again = false;
    if (object === null) object = Function.prototype;

    var desc = _Object$getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        _x = parent;
        _x2 = property;
        _x3 = receiver;
        _again = true;
        desc = parent = undefined;
        continue _function;
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  }
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/get-own-property-descriptor":564}],573:[function(require,module,exports){
"use strict";

var _Object$create = require("babel-runtime/core-js/object/create")["default"];

var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

exports["default"] = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/create":562,"babel-runtime/core-js/object/set-prototype-of":566}],574:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
};

exports.__esModule = true;
},{}],575:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
};

exports.__esModule = true;
},{}],576:[function(require,module,exports){
"use strict";

var _Array$from = require("babel-runtime/core-js/array/from")["default"];

exports["default"] = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return _Array$from(arr);
  }
};

exports.__esModule = true;
},{"babel-runtime/core-js/array/from":560}],577:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/$.core').Array.from;
},{"../../modules/$.core":590,"../../modules/es6.array.from":636,"../../modules/es6.string.iterator":644}],578:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":590,"../../modules/es6.object.assign":638}],579:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function create(P, D){
  return $.create(P, D);
};
},{"../../modules/$":612}],580:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":612}],581:[function(require,module,exports){
var $ = require('../../modules/$');
require('../../modules/es6.object.get-own-property-descriptor');
module.exports = function getOwnPropertyDescriptor(it, key){
  return $.getDesc(it, key);
};
},{"../../modules/$":612,"../../modules/es6.object.get-own-property-descriptor":639}],582:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/$.core').Object.keys;
},{"../../modules/$.core":590,"../../modules/es6.object.keys":640}],583:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/$.core').Object.setPrototypeOf;
},{"../../modules/$.core":590,"../../modules/es6.object.set-prototype-of":641}],584:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/$.core').Promise;
},{"../modules/$.core":590,"../modules/es6.object.to-string":642,"../modules/es6.promise":643,"../modules/es6.string.iterator":644,"../modules/web.dom.iterable":645}],585:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],586:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],587:[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":605}],588:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , TAG = require('./$.wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./$.cof":589,"./$.wks":634}],589:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],590:[function(require,module,exports){
var core = module.exports = {version: '1.2.5'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],591:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":585}],592:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , PROTOTYPE = 'prototype';
var ctx = function(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
};
var $def = function(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] : (global[name] || {})[PROTOTYPE]
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    if(isGlobal && typeof target[key] != 'function')exp = source[key];
    // bind timers to global for call from export context
    else if(type & $def.B && own)exp = ctx(out, global);
    // wrap global constructors for prevent change them in library
    else if(type & $def.W && target[key] == out)!function(C){
      exp = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      exp[PROTOTYPE] = C[PROTOTYPE];
    }(out);
    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export
    exports[key] = exp;
    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
module.exports = $def;
},{"./$.core":590,"./$.global":598}],593:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],594:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./$.fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./$.fails":596}],595:[function(require,module,exports){
var isObject = require('./$.is-object')
  , document = require('./$.global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./$.global":598,"./$.is-object":605}],596:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],597:[function(require,module,exports){
var ctx         = require('./$.ctx')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , anObject    = require('./$.an-object')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that){
  var iterFn = getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./$.an-object":587,"./$.ctx":591,"./$.is-array-iter":604,"./$.iter-call":606,"./$.to-length":631,"./core.get-iterator-method":635}],598:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],599:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],600:[function(require,module,exports){
var $          = require('./$')
  , createDesc = require('./$.property-desc');
module.exports = require('./$.descriptors') ? function(object, key, value){
  return $.setDesc(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./$":612,"./$.descriptors":594,"./$.property-desc":618}],601:[function(require,module,exports){
module.exports = require('./$.global').document && document.documentElement;
},{"./$.global":598}],602:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],603:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./$.cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":589}],604:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./$.iterators')
  , ITERATOR   = require('./$.wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return (Iterators.Array || ArrayProto[ITERATOR]) === it;
};
},{"./$.iterators":611,"./$.wks":634}],605:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],606:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./$.an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./$.an-object":587}],607:[function(require,module,exports){
'use strict';
var $              = require('./$')
  , descriptor     = require('./$.property-desc')
  , setToStringTag = require('./$.set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./$":612,"./$.hide":600,"./$.property-desc":618,"./$.set-to-string-tag":623,"./$.wks":634}],608:[function(require,module,exports){
'use strict';
var LIBRARY         = require('./$.library')
  , $def            = require('./$.def')
  , $redef          = require('./$.redef')
  , hide            = require('./$.hide')
  , has             = require('./$.has')
  , SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , Iterators       = require('./$.iterators')
  , $iterCreate     = require('./$.iter-create')
  , setToStringTag  = require('./$.set-to-string-tag')
  , getProto        = require('./$').getProto
  , BUGGY           = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR     = '@@iterator'
  , KEYS            = 'keys'
  , VALUES          = 'values';
var returnThis = function(){ return this; };
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG      = NAME + ' Iterator'
    , proto    = Base.prototype
    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , _default = _native || getMethod(DEFAULT)
    , methods, key;
  // Fix native
  if(_native){
    var IteratorPrototype = getProto(_default.call(new Base));
    // Set @@toStringTag to native iterators
    setToStringTag(IteratorPrototype, TAG, true);
    // FF fix
    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
  }
  // Define iterator
  if((!LIBRARY || FORCE) && (BUGGY || !(SYMBOL_ITERATOR in proto))){
    hide(proto, SYMBOL_ITERATOR, _default);
  }
  // Plug for library
  Iterators[NAME] = _default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEFAULT == VALUES ? _default : getMethod(VALUES),
      keys:    IS_SET            ? _default : getMethod(KEYS),
      entries: DEFAULT != VALUES ? _default : getMethod('entries')
    };
    if(FORCE)for(key in methods){
      if(!(key in proto))$redef(proto, key, methods[key]);
    } else $def($def.P + $def.F * BUGGY, NAME, methods);
  }
  return methods;
};
},{"./$":612,"./$.def":592,"./$.has":599,"./$.hide":600,"./$.iter-create":607,"./$.iterators":611,"./$.library":613,"./$.redef":619,"./$.set-to-string-tag":623,"./$.wks":634}],609:[function(require,module,exports){
var ITERATOR     = require('./$.wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./$.wks":634}],610:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],611:[function(require,module,exports){
module.exports = {};
},{}],612:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],613:[function(require,module,exports){
module.exports = true;
},{}],614:[function(require,module,exports){
var global    = require('./$.global')
  , macrotask = require('./$.task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , isNode    = require('./$.cof')(process) == 'process'
  , head, last, notify;

var flush = function(){
  var parent, domain;
  if(isNode && (parent = process.domain)){
    process.domain = null;
    parent.exit();
  }
  while(head){
    domain = head.domain;
    if(domain)domain.enter();
    head.fn.call(); // <- currently we use it only for Promise - try / catch not required
    if(domain)domain.exit();
    head = head.next;
  } last = undefined;
  if(parent)parent.enter();
};

// Node.js
if(isNode){
  notify = function(){
    process.nextTick(flush);
  };
// browsers with MutationObserver
} else if(Observer){
  var toggle = 1
    , node   = document.createTextNode('');
  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
  notify = function(){
    node.data = toggle = -toggle;
  };
// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
} else {
  notify = function(){
    // strange IE + webpack dev server bug - use .call(global)
    macrotask.call(global, flush);
  };
}

module.exports = function asap(fn){
  var task = {fn: fn, next: undefined, domain: isNode && process.domain};
  if(last)last.next = task;
  if(!head){
    head = task;
    notify();
  } last = task;
};
},{"./$.cof":589,"./$.global":598,"./$.task":628}],615:[function(require,module,exports){
var $redef = require('./$.redef');
module.exports = function(target, src){
  for(var key in src)$redef(target, key, src[key]);
  return target;
};
},{"./$.redef":619}],616:[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var $        = require('./$')
  , toObject = require('./$.to-object')
  , IObject  = require('./$.iobject');

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = require('./$.fails')(function(){
  var a = Object.assign
    , A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , $$    = arguments
    , $$len = $$.length
    , index = 1
    , getKeys    = $.getKeys
    , getSymbols = $.getSymbols
    , isEnum     = $.isEnum;
  while($$len > index){
    var S      = IObject($$[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  }
  return T;
} : Object.assign;
},{"./$":612,"./$.fails":596,"./$.iobject":603,"./$.to-object":632}],617:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $def  = require('./$.def')
  , core  = require('./$.core')
  , fails = require('./$.fails');
module.exports = function(KEY, exec){
  var $def = require('./$.def')
    , fn   = (core.Object || {})[KEY] || Object[KEY]
    , exp  = {};
  exp[KEY] = exec(fn);
  $def($def.S + $def.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":590,"./$.def":592,"./$.fails":596}],618:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],619:[function(require,module,exports){
module.exports = require('./$.hide');
},{"./$.hide":600}],620:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],621:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./$":612,"./$.an-object":587,"./$.ctx":591,"./$.is-object":605}],622:[function(require,module,exports){
'use strict';
var core        = require('./$.core')
  , $           = require('./$')
  , DESCRIPTORS = require('./$.descriptors')
  , SPECIES     = require('./$.wks')('species');

module.exports = function(KEY){
  var C = core[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./$":612,"./$.core":590,"./$.descriptors":594,"./$.wks":634}],623:[function(require,module,exports){
var def = require('./$').setDesc
  , has = require('./$.has')
  , TAG = require('./$.wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./$":612,"./$.has":599,"./$.wks":634}],624:[function(require,module,exports){
var global = require('./$.global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./$.global":598}],625:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./$.an-object')
  , aFunction = require('./$.a-function')
  , SPECIES   = require('./$.wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./$.a-function":585,"./$.an-object":587,"./$.wks":634}],626:[function(require,module,exports){
module.exports = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
},{}],627:[function(require,module,exports){
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l
      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./$.defined":593,"./$.to-integer":629}],628:[function(require,module,exports){
'use strict';
var ctx                = require('./$.ctx')
  , invoke             = require('./$.invoke')
  , html               = require('./$.html')
  , cel                = require('./$.dom-create')
  , global             = require('./$.global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listner = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./$.cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listner;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listner, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./$.cof":589,"./$.ctx":591,"./$.dom-create":595,"./$.global":598,"./$.html":601,"./$.invoke":602}],629:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],630:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":593,"./$.iobject":603}],631:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./$.to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./$.to-integer":629}],632:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":593}],633:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],634:[function(require,module,exports){
var store  = require('./$.shared')('wks')
  , uid    = require('./$.uid')
  , Symbol = require('./$.global').Symbol;
module.exports = function(name){
  return store[name] || (store[name] =
    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
};
},{"./$.global":598,"./$.shared":624,"./$.uid":633}],635:[function(require,module,exports){
var classof   = require('./$.classof')
  , ITERATOR  = require('./$.wks')('iterator')
  , Iterators = require('./$.iterators');
module.exports = require('./$.core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./$.classof":588,"./$.core":590,"./$.iterators":611,"./$.wks":634}],636:[function(require,module,exports){
'use strict';
var ctx         = require('./$.ctx')
  , $def        = require('./$.def')
  , toObject    = require('./$.to-object')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
$def($def.S + $def.F * !require('./$.iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , $$      = arguments
      , $$len   = $$.length
      , mapfn   = $$len > 1 ? $$[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        result[index] = mapping ? mapfn(O[index], index) : O[index];
      }
    }
    result.length = index;
    return result;
  }
});

},{"./$.ctx":591,"./$.def":592,"./$.is-array-iter":604,"./$.iter-call":606,"./$.iter-detect":609,"./$.to-length":631,"./$.to-object":632,"./core.get-iterator-method":635}],637:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./$.add-to-unscopables')
  , step             = require('./$.iter-step')
  , Iterators        = require('./$.iterators')
  , toIObject        = require('./$.to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./$.add-to-unscopables":586,"./$.iter-define":608,"./$.iter-step":610,"./$.iterators":611,"./$.to-iobject":630}],638:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');

$def($def.S + $def.F, 'Object', {assign: require('./$.object-assign')});
},{"./$.def":592,"./$.object-assign":616}],639:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./$.to-iobject');

require('./$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./$.object-sap":617,"./$.to-iobject":630}],640:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":617,"./$.to-object":632}],641:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $def = require('./$.def');
$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.def":592,"./$.set-proto":621}],642:[function(require,module,exports){

},{}],643:[function(require,module,exports){
'use strict';
var $          = require('./$')
  , LIBRARY    = require('./$.library')
  , global     = require('./$.global')
  , ctx        = require('./$.ctx')
  , classof    = require('./$.classof')
  , $def       = require('./$.def')
  , isObject   = require('./$.is-object')
  , anObject   = require('./$.an-object')
  , aFunction  = require('./$.a-function')
  , strictNew  = require('./$.strict-new')
  , forOf      = require('./$.for-of')
  , setProto   = require('./$.set-proto').set
  , same       = require('./$.same-value')
  , SPECIES    = require('./$.wks')('species')
  , speciesConstructor = require('./$.species-constructor')
  , RECORD     = require('./$.uid')('record')
  , asap       = require('./$.microtask')
  , PROMISE    = 'Promise'
  , process    = global.process
  , isNode     = classof(process) == 'process'
  , P          = global[PROMISE]
  , Wrapper;

var testResolve = function(sub){
  var test = new P(function(){});
  if(sub)test.constructor = Object;
  return P.resolve(test) === test;
};

var useNative = function(){
  var works = false;
  function P2(x){
    var self = new P(x);
    setProto(self, P2.prototype);
    return self;
  }
  try {
    works = P && P.resolve && testResolve();
    setProto(P2, P);
    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
    // actual Firefox has broken subclass support, test that
    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
      works = false;
    }
    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
    if(works && require('./$.descriptors')){
      var thenableThenGotten = false;
      P.resolve($.setDesc({}, 'then', {
        get: function(){ thenableThenGotten = true; }
      }));
      works = thenableThenGotten;
    }
  } catch(e){ works = false; }
  return works;
}();

// helpers
var isPromise = function(it){
  return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
};
var sameConstructor = function(a, b){
  // library wrapper special case
  if(LIBRARY && a === P && b === Wrapper)return true;
  return same(a, b);
};
var getConstructor = function(C){
  var S = anObject(C)[SPECIES];
  return S != undefined ? S : C;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(record, isReject){
  if(record.n)return;
  record.n = true;
  var chain = record.c;
  asap(function(){
    var value = record.v
      , ok    = record.s == 1
      , i     = 0;
    var run = function(react){
      var cb = ok ? react.ok : react.fail
        , ret, then;
      try {
        if(cb){
          if(!ok)record.h = true;
          ret = cb === true ? value : cb(value);
          if(ret === react.P){
            react.rej(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(ret)){
            then.call(ret, react.res, react.rej);
          } else react.res(ret);
        } else react.rej(value);
      } catch(err){
        react.rej(err);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    chain.length = 0;
    record.n = false;
    if(isReject)setTimeout(function(){
      var promise = record.p
        , handler, console;
      if(isUnhandled(promise)){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      } record.a = undefined;
    }, 1);
  });
};
var isUnhandled = function(promise){
  var record = promise[RECORD]
    , chain  = record.a || record.c
    , i      = 0
    , react;
  if(record.h)return false;
  while(chain.length > i){
    react = chain[i++];
    if(react.fail || !isUnhandled(react.P))return false;
  } return true;
};
var $reject = function(value){
  var record = this;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  record.v = value;
  record.s = 2;
  record.a = record.c.slice();
  notify(record, true);
};
var $resolve = function(value){
  var record = this
    , then;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  try {
    if(then = isThenable(value)){
      asap(function(){
        var wrapper = {r: record, d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      record.v = value;
      record.s = 1;
      notify(record, false);
    }
  } catch(e){
    $reject.call({r: record, d: false}, e); // wrap
  }
};

// constructor polyfill
if(!useNative){
  // 25.4.3.1 Promise(executor)
  P = function Promise(executor){
    aFunction(executor);
    var record = {
      p: strictNew(this, P, PROMISE),         // <- promise
      c: [],                                  // <- awaiting reactions
      a: undefined,                           // <- checked in isUnhandled reactions
      s: 0,                                   // <- state
      d: false,                               // <- done
      v: undefined,                           // <- value
      h: false,                               // <- handled rejection
      n: false                                // <- notify
    };
    this[RECORD] = record;
    try {
      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
    } catch(err){
      $reject.call(record, err);
    }
  };
  require('./$.mix')(P.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var react = {
        ok:   typeof onFulfilled == 'function' ? onFulfilled : true,
        fail: typeof onRejected == 'function'  ? onRejected  : false
      };
      var promise = react.P = new (speciesConstructor(this, P))(function(res, rej){
        react.res = res;
        react.rej = rej;
      });
      aFunction(react.res);
      aFunction(react.rej);
      var record = this[RECORD];
      record.c.push(react);
      if(record.a)record.a.push(react);
      if(record.s)notify(record, false);
      return promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
}

// export
$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
require('./$.set-to-string-tag')(P, PROMISE);
require('./$.set-species')(PROMISE);
Wrapper = require('./$.core')[PROMISE];

// statics
$def($def.S + $def.F * !useNative, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    return new this(function(res, rej){ rej(r); });
  }
});
$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    return isPromise(x) && sameConstructor(x.constructor, this)
      ? x : new this(function(res){ res(x); });
  }
});
$def($def.S + $def.F * !(useNative && require('./$.iter-detect')(function(iter){
  P.all(iter)['catch'](function(){});
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C      = getConstructor(this)
      , values = [];
    return new C(function(res, rej){
      forOf(iterable, false, values.push, values);
      var remaining = values.length
        , results   = Array(remaining);
      if(remaining)$.each.call(values, function(promise, index){
        C.resolve(promise).then(function(value){
          results[index] = value;
          --remaining || res(results);
        }, rej);
      });
      else res(results);
    });
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C = getConstructor(this);
    return new C(function(res, rej){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(res, rej);
      });
    });
  }
});
},{"./$":612,"./$.a-function":585,"./$.an-object":587,"./$.classof":588,"./$.core":590,"./$.ctx":591,"./$.def":592,"./$.descriptors":594,"./$.for-of":597,"./$.global":598,"./$.is-object":605,"./$.iter-detect":609,"./$.library":613,"./$.microtask":614,"./$.mix":615,"./$.same-value":620,"./$.set-proto":621,"./$.set-species":622,"./$.set-to-string-tag":623,"./$.species-constructor":625,"./$.strict-new":626,"./$.uid":633,"./$.wks":634}],644:[function(require,module,exports){
'use strict';
var $at  = require('./$.string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./$.iter-define":608,"./$.string-at":627}],645:[function(require,module,exports){
require('./es6.array.iterator');
var Iterators = require('./$.iterators');
Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
},{"./$.iterators":611,"./es6.array.iterator":637}],646:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],647:[function(require,module,exports){
/*!
  Copyright (c) 2015 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

function classNames() {
	var classes = '';
	var arg;

	for (var i = 0; i < arguments.length; i++) {
		arg = arguments[i];
		if (!arg) {
			continue;
		}

		if ('string' === typeof arg || 'number' === typeof arg) {
			classes += ' ' + arg;
		} else if (Object.prototype.toString.call(arg) === '[object Array]') {
			classes += ' ' + classNames.apply(null, arg);
		} else if ('object' === typeof arg) {
			for (var key in arg) {
				if (!arg.hasOwnProperty(key) || !arg[key]) {
					continue;
				}
				classes += ' ' + key;
			}
		}
	}
	return classes.substr(1);
}

// safely export classNames for node / browserify
if (typeof module !== 'undefined' && module.exports) {
	module.exports = classNames;
}

// safely export classNames for RequireJS
if (typeof define !== 'undefined' && define.amd) {
	define('classnames', [], function() {
		return classNames;
	});
}

},{}],648:[function(require,module,exports){
/**
 * Copyright (c) 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

module.exports.Dispatcher = require('./lib/Dispatcher');

},{"./lib/Dispatcher":649}],649:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * 
 * @preventMunge
 */

'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var invariant = require('fbjs/lib/invariant');

var _prefix = 'ID_';

/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *         case 'city-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

var Dispatcher = (function () {
  function Dispatcher() {
    _classCallCheck(this, Dispatcher);

    this._callbacks = {};
    this._isDispatching = false;
    this._isHandled = {};
    this._isPending = {};
    this._lastID = 1;
  }

  /**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   */

  Dispatcher.prototype.register = function register(callback) {
    var id = _prefix + this._lastID++;
    this._callbacks[id] = callback;
    return id;
  };

  /**
   * Removes a callback based on its token.
   */

  Dispatcher.prototype.unregister = function unregister(id) {
    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
    delete this._callbacks[id];
  };

  /**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   */

  Dispatcher.prototype.waitFor = function waitFor(ids) {
    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
    for (var ii = 0; ii < ids.length; ii++) {
      var id = ids[ii];
      if (this._isPending[id]) {
        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
        continue;
      }
      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
      this._invokeCallback(id);
    }
  };

  /**
   * Dispatches a payload to all registered callbacks.
   */

  Dispatcher.prototype.dispatch = function dispatch(payload) {
    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
    this._startDispatching(payload);
    try {
      for (var id in this._callbacks) {
        if (this._isPending[id]) {
          continue;
        }
        this._invokeCallback(id);
      }
    } finally {
      this._stopDispatching();
    }
  };

  /**
   * Is this Dispatcher currently dispatching.
   */

  Dispatcher.prototype.isDispatching = function isDispatching() {
    return this._isDispatching;
  };

  /**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @internal
   */

  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
    this._isPending[id] = true;
    this._callbacks[id](this._pendingPayload);
    this._isHandled[id] = true;
  };

  /**
   * Set up bookkeeping needed when dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
    for (var id in this._callbacks) {
      this._isPending[id] = false;
      this._isHandled[id] = false;
    }
    this._pendingPayload = payload;
    this._isDispatching = true;
  };

  /**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
    delete this._pendingPayload;
    this._isDispatching = false;
  };

  return Dispatcher;
})();

module.exports = Dispatcher;
}).call(this,require('_process'))
},{"_process":646,"fbjs/lib/invariant":650}],650:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":646}],651:[function(require,module,exports){
/*
 * Fuzzy
 * https://github.com/myork/fuzzy
 *
 * Copyright (c) 2012 Matt York
 * Licensed under the MIT license.
 */

(function() {

var root = this;

var fuzzy = {};

// Use in node or in browser
if (typeof exports !== 'undefined') {
  module.exports = fuzzy;
} else {
  root.fuzzy = fuzzy;
}

// Return all elements of `array` that have a fuzzy
// match against `pattern`.
fuzzy.simpleFilter = function(pattern, array) {
  return array.filter(function(string) {
    return fuzzy.test(pattern, string);
  });
};

// Does `pattern` fuzzy match `string`?
fuzzy.test = function(pattern, string) {
  return fuzzy.match(pattern, string) !== null;
};

// If `pattern` matches `string`, wrap each matching character
// in `opts.pre` and `opts.post`. If no match, return null
fuzzy.match = function(pattern, string, opts) {
  opts = opts || {};
  var patternIdx = 0
    , result = []
    , len = string.length
    , totalScore = 0
    , currScore = 0
    // prefix
    , pre = opts.pre || ''
    // suffix
    , post = opts.post || ''
    // String to compare against. This might be a lowercase version of the
    // raw string
    , compareString =  opts.caseSensitive && string || string.toLowerCase()
    , ch, compareChar;

  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

  // For each character in the string, either add it to the result
  // or wrap in template if it's the next string in the pattern
  for(var idx = 0; idx < len; idx++) {
    ch = string[idx];
    if(compareString[idx] === pattern[patternIdx]) {
      ch = pre + ch + post;
      patternIdx += 1;

      // consecutive characters should increase the score more than linearly
      currScore += 1 + currScore;
    } else {
      currScore = 0;
    }
    totalScore += currScore;
    result[result.length] = ch;
  }

  // return rendered string if we have a match for every char
  if(patternIdx === pattern.length) {
    return {rendered: result.join(''), score: totalScore};
  }

  return null;
};

// The normal entry point. Filters `arr` for matches against `pattern`.
// It returns an array with matching values of the type:
//
//     [{
//         string:   '<b>lah' // The rendered string
//       , index:    2        // The index of the element in `arr`
//       , original: 'blah'   // The original element in `arr`
//     }]
//
// `opts` is an optional argument bag. Details:
//
//    opts = {
//        // string to put before a matching character
//        pre:     '<b>'
//
//        // string to put after matching character
//      , post:    '</b>'
//
//        // Optional function. Input is an entry in the given arr`,
//        // output should be the string to test `pattern` against.
//        // In this example, if `arr = [{crying: 'koala'}]` we would return
//        // 'koala'.
//      , extract: function(arg) { return arg.crying; }
//    }
fuzzy.filter = function(pattern, arr, opts) {
  opts = opts || {};
  return arr
    .reduce(function(prev, element, idx, arr) {
      var str = element;
      if(opts.extract) {
        str = opts.extract(element);
      }
      var rendered = fuzzy.match(pattern, str, opts);
      if(rendered != null) {
        prev[prev.length] = {
            string: rendered.rendered
          , score: rendered.score
          , index: idx
          , original: element
        };
      }
      return prev;
    }, [])

    // Sort by score. Browsers are inconsistent wrt stable/unstable
    // sorting, so force stable by using the index in the case of tie.
    // See http://ofb.net/~sethml/is-sort-stable.html
    .sort(function(a,b) {
      var compare = b.score - a.score;
      if(compare) return compare;
      return a.index - b.index;
    });
};


}());


},{}],652:[function(require,module,exports){
/**
 * StyleSheets written in javascript.
 *
 * @copyright Oleg Slobodskoi 2014
 * @website https://github.com/jsstyles/jss
 * @license MIT
 */

module.exports = require('./lib/index')

},{"./lib/index":655}],653:[function(require,module,exports){
'use strict'

var plugins = require('./plugins')

var uid = 0

var toString = Object.prototype.toString

/**
 * Rule is selector + style hash.
 *
 * @param {String} [selector]
 * @param {Object} [style] declarations block
 * @param {Object} [options]
 * @api public
 */
function Rule(selector, style, options) {
    if (typeof selector == 'object') {
        options = style
        style = selector
        selector = null
    }

    this.id = Rule.uid++
    this.options = options || {}
    if (this.options.named == null) this.options.named = true

    if (selector) {
        this.selector = selector
        this.isAtRule = selector[0] == '@'
    } else {
        this.isAtRule = false
        this.className = Rule.NAMESPACE_PREFIX + '-' + this.id
        this.selector = '.' + this.className
    }

    this.style = style
    // Will be set by StyleSheet#link if link option is true.
    this.CSSRule = null
    // When at-rule has sub rules.
    this.rules = null
    if (this.isAtRule && this.style) this.extractAtRules()
}

module.exports = Rule

/**
 * Class name prefix when generated.
 *
 * @type {String}
 * @api private
 */
Rule.NAMESPACE_PREFIX = 'jss'

/**
 * Indentation string for formatting toString output.
 *
 * @type {String}
 * @api private
 */
Rule.INDENTATION = '  '

/**
 * Unique id, right now just a counter, because there is no need for better uid.
 *
 * @type {Number}
 * @api private
 */
Rule.uid = 0

/**
 * Get or set a style property.
 *
 * @param {String} name
 * @param {String|Number} [value]
 * @return {Rule|String|Number}
 * @api public
 */
Rule.prototype.prop = function (name, value) {
    // Its a setter.
    if (value != null) {
        if (!this.style) this.style = {}
        this.style[name] = value
        // If linked option in StyleSheet is not passed, CSSRule is not defined.
        if (this.CSSRule) this.CSSRule.style[name] = value
        return this
    }

    // Its a getter.
    if (this.style) value = this.style[name]

    // Read the value from the DOM if its not cached.
    if (value == null && this.CSSRule) {
        value = this.CSSRule.style[name]
        // Cache the value after we have got it from the DOM once.
        this.style[name] = value
    }

    return value
}

/**
 * Add child rule. Required for plugins like "nested".
 * StyleSheet will render them as a separate rule.
 *
 * @param {String} selector
 * @param {Object} style
 * @param {Object} [options] rule options
 * @return {Rule}
 * @api private
 */
Rule.prototype.addChild = function (selector, style, options) {
    if (!this.children) this.children = {}
    this.children[selector] = {
        style: style,
        options: options
    }

    return this
}

/**
 * Add child rule. Required for plugins like "nested".
 * StyleSheet will render them as a separate rule.
 *
 * @param {String} selector
 * @param {Object} style
 * @return {Rule}
 * @api public
 */
Rule.prototype.extractAtRules = function () {
    if (!this.rules) this.rules = {}

    for (var name in this.style) {
        var style = this.style[name]
        // Not a nested rule.
        if (typeof style == 'string') break
        var selector = this.options.named ? undefined : name
        var rule = this.rules[name] = new Rule(selector, style, this.options)
        plugins.run(rule)
        delete this.style[name]
    }

    return this
}

/**
 * Apply rule to an element inline.
 *
 * @param {Element} element
 * @return {Rule}
 * @api public
 */
Rule.prototype.applyTo = function (element) {
    for (var prop in this.style) {
        var value = this.style[prop]
        if (toString.call(value) == '[object Array]') {
            for (var i = 0; i < value.length; i++) {
                element.style[prop] = value[i]
            }
        } else {
            element.style[prop] = value
        }
    }

    return this
}

/**
 * Converts the rule to css string.
 *
 * @return {String}
 * @api public
 */
Rule.prototype.toString = function (options) {
    var style = this.style

    // At rules like @charset
    if (this.isAtRule && !this.style && !this.rules) return this.selector + ';'

    if (!options) options = {}
    if (options.indentationLevel == null) options.indentationLevel = 0

    var str = indent(options.indentationLevel, this.selector + ' {')

    for (var prop in style) {
        var value = style[prop]
        // We want to generate multiple style with identical property names.
        if (toString.call(value) == '[object Array]') {
            for (var i = 0; i < value.length; i++) {
                str += '\n' + indent(options.indentationLevel + 1, prop + ': ' + value[i] + ';')
            }
        } else {
            str += '\n' + indent(options.indentationLevel + 1, prop + ': ' + value + ';')
        }
    }

    // We are have an at-rule with nested statements.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
    for (var name in this.rules) {
        var ruleStr = this.rules[name].toString({
            indentationLevel: options.indentationLevel + 1
        })
        str += '\n' + indent(options.indentationLevel, ruleStr)
    }

    str += '\n' + indent(options.indentationLevel, '}')

    return str
}

/**
 * Returns JSON representation of the rule.
 * Nested rules, at-rules and array values are not supported.
 *
 * @return {Object}
 * @api public
 */
Rule.prototype.toJSON = function () {
    var style = {}

    for (var prop in this.style) {
        var value = this.style[prop]
        var type = typeof value
        if (type == 'string' || type == 'number') {
            style[prop] = value
        }
    }

    return style
}

/**
 * Indent a string.
 *
 * @param {Number} level
 * @param {String} str
 * @return {String}
 */
function indent(level, str) {
    var indentStr = ''
    for (var i = 0; i < level; i++) indentStr += Rule.INDENTATION
    return indentStr + str
}

},{"./plugins":656}],654:[function(require,module,exports){
'use strict'

var Rule = require('./Rule')
var plugins = require('./plugins')

/**
 * StyleSheet abstraction, contains rules, injects stylesheet into dom.
 *
 * Options:
 *
 *  - `media` style element attribute
 *  - `title` style element attribute
 *  - `type` style element attribute
 *  - `named` true by default - keys are names, selectors will be generated,
 *    if false - keys are global selectors.
 *  - `link` link jss Rule instances with DOM CSSRule instances so that styles,
 *  can be modified dynamically, false by default because it has some performance cost.
 *
 * @param {Object} [rules] object with selectors and declarations
 * @param {Object} [options]
 * @api public
 */
function StyleSheet(rules, options) {
    this.options = options || {}
    if (this.options.named == null) this.options.named = true
    this.element = null
    this.attached = false
    this.media = this.options.media
    this.type = this.options.type
    this.title = this.options.title
    this.rules = {}
    // Only when options.named: true.
    this.classes = {}
    this.deployed = false
    this.linked = false

    // Don't create element if we are not in a browser environment.
    if (typeof document != 'undefined') {
        this.element = this.createElement()
    }

    for (var key in rules) {
        this.createRules(key, rules[key])
    }
}

StyleSheet.ATTRIBUTES = ['title', 'type', 'media']

module.exports = StyleSheet

/**
 * Insert stylesheet element to render tree.
 *
 * @api public
 * @return {StyleSheet}
 */
StyleSheet.prototype.attach = function () {
    if (this.attached) return this

    if (!this.deployed) {
        this.deploy()
        this.deployed = true
    }

    document.head.appendChild(this.element)

    // Before element is attached to the dom rules are not created.
    if (!this.linked && this.options.link) {
        this.link()
        this.linked = true
    }

    this.attached = true

    return this
}

/**
 * Remove stylesheet element from render tree.
 *
 * @return {StyleSheet}
 * @api public
 */
StyleSheet.prototype.detach = function () {
    if (!this.attached) return this

    this.element.parentNode.removeChild(this.element)
    this.attached = false

    return this
}

/**
 * Deploy styles to the element.
 *
 * @return {StyleSheet}
 * @api private
 */
StyleSheet.prototype.deploy = function () {
    this.element.innerHTML = '\n' + this.toString() + '\n'

    return this
}

/**
 * Find CSSRule objects in the DOM and link them in the corresponding Rule instance.
 *
 * @return {StyleSheet}
 * @api private
 */
StyleSheet.prototype.link = function () {
    var CSSRuleList = this.element.sheet.cssRules
    var rules = this.rules

    for (var i = 0; i < CSSRuleList.length; i++) {
        var CSSRule = CSSRuleList[i]
        var rule = rules[CSSRule.selectorText]
        if (rule) rule.CSSRule = CSSRule
    }

    return this
}

/**
 * Add a rule to the current stylesheet. Will insert a rule also after the stylesheet
 * has been rendered first time.
 *
 * @param {Object} [key] can be selector or name if `options.named` is true
 * @param {Object} style property/value hash
 * @return {Rule}
 * @api public
 */
StyleSheet.prototype.addRule = function (key, style) {
    var rules = this.createRules(key, style)

    // Don't insert rule directly if there is no stringified version yet.
    // It will be inserted all together when .attach is called.
    if (this.deployed) {
        var sheet = this.element.sheet
        for (var i = 0; i < rules.length; i++) {
            var nextIndex = sheet.cssRules.length
            var rule = rules[i]
            sheet.insertRule(rule.toString(), nextIndex)
            if (this.options.link) rule.CSSRule = sheet.cssRules[nextIndex]
        }
    } else {
        this.deploy()
    }

    return rules
}

/**
 * Create rules, will render also after stylesheet was rendered the first time.
 *
 * @param {Object} rules key:style hash.
 * @return {StyleSheet} this
 * @api public
 */
StyleSheet.prototype.addRules = function (rules) {
    for (var key in rules) {
        this.addRule(key, rules[key])
    }

    return this
}

/**
 * Get a rule.
 *
 * @param {String} key can be selector or name if `named` is true.
 * @return {Rule}
 * @api public
 */
StyleSheet.prototype.getRule = function (key) {
    return this.rules[key]
}

/**
 * Convert rules to a css string.
 *
 * @return {String}
 * @api public
 */
StyleSheet.prototype.toString = function () {
    var str = ''
    var rules = this.rules
    var stringified = {}
    for (var key in rules) {
        var rule = rules[key]
        // We have the same rule referenced twice if using named urles.
        // By name and by selector.
        if (stringified[rule.id]) continue
        if (str) str += '\n'
        str += rules[key].toString()
        stringified[rule.id] = true
    }

    return str
}

/**
 * Create a rule, will not render after stylesheet was rendered the first time.
 *
 * @param {Object} [selector] if you don't pass selector - it will be generated
 * @param {Object} [style] declarations block
 * @param {Object} [options] rule options
 * @return {Array} rule can contain child rules
 * @api private
 */
StyleSheet.prototype.createRules = function (key, style, options) {
    var rules = []
    var selector, name

    if (!options) options = {}
    var named = this.options.named
    // Scope options overwrite instance options.
    if (options.named != null) named = options.named

    if (named) name = key
    else selector = key

    var rule = new Rule(selector, style, {
        sheet: this,
        named: named,
        name: name
    })
    rules.push(rule)

    this.rules[rule.selector] = rule
    if (name) {
        this.rules[name] = rule
        this.classes[name] = rule.className
    }

    plugins.run(rule)

    for (key in rule.children) {
        rules.push(this.createRules(
            key,
            rule.children[key].style,
            rule.children[key].options
        ))
    }

    return rules
}

/**
 * Create style sheet element.
 *
 * @api private
 * @return {Element}
 */
StyleSheet.prototype.createElement = function () {
    var element = document.createElement('style')

    StyleSheet.ATTRIBUTES.forEach(function (name) {
        if (this[name]) element.setAttribute(name, this[name])
    }, this)

    return element
}

},{"./Rule":653,"./plugins":656}],655:[function(require,module,exports){
'use strict'

var StyleSheet = require('./StyleSheet')
var Rule = require('./Rule')

exports.StyleSheet = StyleSheet

exports.Rule = Rule

exports.plugins = require('./plugins')

/**
 * Create a stylesheet.
 *
 * @param {Object} rules is selector:style hash.
 * @param {Object} [named] rules have names if true, class names will be generated.
 * @param {Object} [attributes] stylesheet element attributes.
 * @return {StyleSheet}
 * @api public
 */
exports.createStyleSheet = function (rules, named, attributes) {
    return new StyleSheet(rules, named, attributes)
}

/**
 * Create a rule.
 *
 * @param {String} [selector]
 * @param {Object} style is property:value hash.
 * @return {Rule}
 * @api public
 */
exports.createRule = function (selector, style) {
    var rule = new Rule(selector, style)
    exports.plugins.run(rule)
    return rule
}

/**
 * Register plugin. Passed function will be invoked with a rule instance.
 *
 * @param {Function} fn
 * @api public
 */
exports.use = exports.plugins.use

},{"./Rule":653,"./StyleSheet":654,"./plugins":656}],656:[function(require,module,exports){
'use strict'

/**
 * Registered plugins.
 *
 * @type {Array}
 * @api public
 */
exports.registry = []

/**
 * Register plugin. Passed function will be invoked with a rule instance.
 *
 * @param {Function} fn
 * @api public
 */
exports.use = function (fn) {
    exports.registry.push(fn)
}

/**
 * Execute all registered plugins.
 *
 * @param {Rule} rule
 * @api private
 */
exports.run = function (rule) {
    for (var i = 0; i < exports.registry.length; i++) {
        exports.registry[i](rule)
    }
}

},{}],657:[function(require,module,exports){
//! moment.js locale configuration
//! locale : great britain english (en-gb)
//! author : Chris Gedrim : https://github.com/chrisgedrim

(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['moment'], factory) :
   factory(global.moment)
}(this, function (moment) { 'use strict';


    var en_gb = moment.defineLocale('en-gb', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return en_gb;

}));
},{"../moment":659}],658:[function(require,module,exports){
//! moment.js locale configuration
//! locale : russian (ru)
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion Elensúle : https://github.com/Oire

(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['moment'], factory) :
   factory(global.moment)
}(this, function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return monthsShort[nounCase][m.month()];
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },
        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';
        return weekdays[nounCase][m.day()];
    }

    var ru = moment.defineLocale('ru', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                    case 0:
                        return '[В прошлое] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В прошлый] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В прошлую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'через %s',
            past : '%s назад',
            s : 'несколько секунд',
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'час',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ru;

}));
},{"../moment":659}],659:[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],660:[function(require,module,exports){
/*! 
 * numeral.js language configuration
 * language : russian (ru)
 * author : Anatoli Papirovski : https://github.com/apapirovski
 */
(function () {
    var language = {
        delimiters: {
            thousands: ' ',
            decimal: ','
        },
        abbreviations: {
            thousand: 'тыс.',
            million: 'млн',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function () {
            // not ideal, but since in Russian it can taken on 
            // different forms (masculine, feminine, neuter)
            // this is all we can do
            return '.'; 
        },
        currency: {
            symbol: 'руб.'
        }
    };

    // Node
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
    }
    // Browser
    if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('ru', language);
    }
}());

},{}],661:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	if (typeof str !== 'string') {
		return {};
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return {};
	}

	return str.split('&').reduce(function (ret, param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (!ret.hasOwnProperty(key)) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}

		return ret;
	}, {});
};

exports.stringify = function (obj) {
	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return key;
		}

		if (Array.isArray(val)) {
			return val.sort().map(function (val2) {
				return strictUriEncode(key) + '=' + strictUriEncode(val2);
			}).join('&');
		}

		return strictUriEncode(key) + '=' + strictUriEncode(val);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"strict-uri-encode":662}],662:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16);
	});
};

},{}],663:[function(require,module,exports){
var isBrowser = (typeof window !== 'undefined');
var Masonry = isBrowser ? window.Masonry || require('masonry') : null;
var imagesloaded = isBrowser ? require('imagesloaded') : null;

function MasonryMixin() {
    return function(reference, options) {
        return {
            masonry: false,

            domChildren: [],

            initializeMasonry: function(force) {
                if (!this.masonry || force) {
                    this.masonry = new Masonry(this.refs[reference].getDOMNode(), options);
                    this.domChildren = this.getNewDomChildren();
                }
            },

            getNewDomChildren: function () {
                var node = this.refs[reference].getDOMNode();
                var children = options.itemSelector ? node.querySelectorAll(options.itemSelector) : node.children;

                return Array.prototype.slice.call(children);
            },

            diffDomChildren: function() {
                var oldChildren = this.domChildren;
                var newChildren = this.getNewDomChildren();

                var removed = oldChildren.filter(function(oldChild) {
                    return !~newChildren.indexOf(oldChild);
                });

                var added = newChildren.filter(function(newChild) {
                    return !~oldChildren.indexOf(newChild);
                });

                var moved = [];

                if (removed.length === 0) {
                    moved = oldChildren.filter(function(child, index) {
                        return index !== newChildren.indexOf(child);
                    });
                }

                this.domChildren = newChildren;

                return {
                    old: oldChildren,
                    'new': newChildren, // fix for ie8
                    removed: removed,
                    added: added,
                    moved: moved
                };
            },

            performLayout: function() {
                var diff = this.diffDomChildren();

                if (diff.removed.length > 0) {
                    this.masonry.remove(diff.removed);
                    this.masonry.reloadItems();
                }

                if (diff.added.length > 0) {
                    this.masonry.appended(diff.added);
                }

                if (diff.moved.length > 0) {
                    this.masonry.reloadItems();
                }

                this.masonry.layout();
            },

            imagesLoaded: function() {
                imagesloaded(this.refs[reference].getDOMNode(), function(instance) {
                    this.masonry.layout();
                }.bind(this));
            },

            componentDidMount: function() {
                if (!isBrowser) return;

                this.initializeMasonry();
                this.performLayout();
                this.imagesLoaded();
            },

            componentDidUpdate: function() {
                if (!isBrowser) return;

                this.performLayout();
                this.imagesLoaded();
            },

            componentWillReceiveProps: function() {
                this._timer = setTimeout(function() {
                    this.masonry.reloadItems();
                    this.forceUpdate();
                }.bind(this), 0);
            },

            componentWillUnmount: function() {
                clearTimeout(this._timer);
            }
        };
    };
}

module.exports = MasonryMixin();

},{"imagesloaded":664,"masonry":667}],664:[function(require,module,exports){
/*!
 * imagesLoaded v3.1.8
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

( function( window, factory ) { 'use strict';
  // universal module definition

  /*global define: false, module: false, require: false */

  if ( typeof exports === 'object' ) {
    // CommonJS
    module.exports = factory(
      window,
      require('wolfy87-eventemitter'),
      require('eventie')
    );
  } else if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( [
      'eventEmitter/EventEmitter',
      'eventie/eventie'
    ], function( EventEmitter, eventie ) {
      return factory( window, EventEmitter, eventie );
    });
  } else {
    // browser global
    window.imagesLoaded = factory(
      window,
      window.EventEmitter,
      window.eventie
    );
  }

})( window,

// --------------------------  factory -------------------------- //

function factory( window, EventEmitter, eventie ) {

'use strict';

var $ = window.jQuery;
var console = window.console;
var hasConsole = typeof console !== 'undefined';

// -------------------------- helpers -------------------------- //

// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}

var objToString = Object.prototype.toString;
function isArray( obj ) {
  return objToString.call( obj ) === '[object Array]';
}

// turn element or nodeList into an array
function makeArray( obj ) {
  var ary = [];
  if ( isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( typeof obj.length === 'number' ) {
    // convert nodeList to array
    for ( var i=0, len = obj.length; i < len; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
}

  // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {Array, Element, NodeList, String} elem
   * @param {Object or Function} options - if function, use as callback
   * @param {Function} onAlways - callback function
   */
  function ImagesLoaded( elem, options, onAlways ) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if ( !( this instanceof ImagesLoaded ) ) {
      return new ImagesLoaded( elem, options );
    }
    // use elem as selector string
    if ( typeof elem === 'string' ) {
      elem = document.querySelectorAll( elem );
    }

    this.elements = makeArray( elem );
    this.options = extend( {}, this.options );

    if ( typeof options === 'function' ) {
      onAlways = options;
    } else {
      extend( this.options, options );
    }

    if ( onAlways ) {
      this.on( 'always', onAlways );
    }

    this.getImages();

    if ( $ ) {
      // add jQuery Deferred object
      this.jqDeferred = new $.Deferred();
    }

    // HACK check async to allow time to bind listeners
    var _this = this;
    setTimeout( function() {
      _this.check();
    });
  }

  ImagesLoaded.prototype = new EventEmitter();

  ImagesLoaded.prototype.options = {};

  ImagesLoaded.prototype.getImages = function() {
    this.images = [];

    // filter & find items if we have an item selector
    for ( var i=0, len = this.elements.length; i < len; i++ ) {
      var elem = this.elements[i];
      // filter siblings
      if ( elem.nodeName === 'IMG' ) {
        this.addImage( elem );
      }
      // find children
      // no non-element nodes, #143
      var nodeType = elem.nodeType;
      if ( !nodeType || !( nodeType === 1 || nodeType === 9 || nodeType === 11 ) ) {
        continue;
      }
      var childElems = elem.querySelectorAll('img');
      // concat childElems to filterFound array
      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
        var img = childElems[j];
        this.addImage( img );
      }
    }
  };

  /**
   * @param {Image} img
   */
  ImagesLoaded.prototype.addImage = function( img ) {
    var loadingImage = new LoadingImage( img );
    this.images.push( loadingImage );
  };

  ImagesLoaded.prototype.check = function() {
    var _this = this;
    var checkedCount = 0;
    var length = this.images.length;
    this.hasAnyBroken = false;
    // complete if no images
    if ( !length ) {
      this.complete();
      return;
    }

    function onConfirm( image, message ) {
      if ( _this.options.debug && hasConsole ) {
        console.log( 'confirm', image, message );
      }

      _this.progress( image );
      checkedCount++;
      if ( checkedCount === length ) {
        _this.complete();
      }
      return true; // bind once
    }

    for ( var i=0; i < length; i++ ) {
      var loadingImage = this.images[i];
      loadingImage.on( 'confirm', onConfirm );
      loadingImage.check();
    }
  };

  ImagesLoaded.prototype.progress = function( image ) {
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    // HACK - Chrome triggers event before object properties have changed. #83
    var _this = this;
    setTimeout( function() {
      _this.emit( 'progress', _this, image );
      if ( _this.jqDeferred && _this.jqDeferred.notify ) {
        _this.jqDeferred.notify( _this, image );
      }
    });
  };

  ImagesLoaded.prototype.complete = function() {
    var eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    var _this = this;
    // HACK - another setTimeout so that confirm happens after progress
    setTimeout( function() {
      _this.emit( eventName, _this );
      _this.emit( 'always', _this );
      if ( _this.jqDeferred ) {
        var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';
        _this.jqDeferred[ jqMethod ]( _this );
      }
    });
  };

  // -------------------------- jquery -------------------------- //

  if ( $ ) {
    $.fn.imagesLoaded = function( options, callback ) {
      var instance = new ImagesLoaded( this, options, callback );
      return instance.jqDeferred.promise( $(this) );
    };
  }


  // --------------------------  -------------------------- //

  function LoadingImage( img ) {
    this.img = img;
  }

  LoadingImage.prototype = new EventEmitter();

  LoadingImage.prototype.check = function() {
    // first check cached any previous images that have same src
    var resource = cache[ this.img.src ] || new Resource( this.img.src );
    if ( resource.isConfirmed ) {
      this.confirm( resource.isLoaded, 'cached was confirmed' );
      return;
    }

    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    if ( this.img.complete && this.img.naturalWidth !== undefined ) {
      // report based on naturalWidth
      this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
      return;
    }

    // If none of the checks above matched, simulate loading on detached element.
    var _this = this;
    resource.on( 'confirm', function( resrc, message ) {
      _this.confirm( resrc.isLoaded, message );
      return true;
    });

    resource.check();
  };

  LoadingImage.prototype.confirm = function( isLoaded, message ) {
    this.isLoaded = isLoaded;
    this.emit( 'confirm', this, message );
  };

  // -------------------------- Resource -------------------------- //

  // Resource checks each src, only once
  // separate class from LoadingImage to prevent memory leaks. See #115

  var cache = {};

  function Resource( src ) {
    this.src = src;
    // add to cache
    cache[ src ] = this;
  }

  Resource.prototype = new EventEmitter();

  Resource.prototype.check = function() {
    // only trigger checking once
    if ( this.isChecked ) {
      return;
    }
    // simulate loading on detached element
    var proxyImage = new Image();
    eventie.bind( proxyImage, 'load', this );
    eventie.bind( proxyImage, 'error', this );
    proxyImage.src = this.src;
    // set flag
    this.isChecked = true;
  };

  // ----- events ----- //

  // trigger specified handler for event type
  Resource.prototype.handleEvent = function( event ) {
    var method = 'on' + event.type;
    if ( this[ method ] ) {
      this[ method ]( event );
    }
  };

  Resource.prototype.onload = function( event ) {
    this.confirm( true, 'onload' );
    this.unbindProxyEvents( event );
  };

  Resource.prototype.onerror = function( event ) {
    this.confirm( false, 'onerror' );
    this.unbindProxyEvents( event );
  };

  // ----- confirm ----- //

  Resource.prototype.confirm = function( isLoaded, message ) {
    this.isConfirmed = true;
    this.isLoaded = isLoaded;
    this.emit( 'confirm', this, message );
  };

  Resource.prototype.unbindProxyEvents = function( event ) {
    eventie.unbind( event.target, 'load', this );
    eventie.unbind( event.target, 'error', this );
  };

  // -----  ----- //

  return ImagesLoaded;

});

},{"eventie":665,"wolfy87-eventemitter":666}],665:[function(require,module,exports){
/*!
 * eventie v1.0.6
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false, module: false */

( function( window ) {

'use strict';

var docElem = document.documentElement;

var bind = function() {};

function getIEEvent( obj ) {
  var event = window.event;
  // add event.target
  event.target = event.target || event.srcElement || obj;
  return event;
}

if ( docElem.addEventListener ) {
  bind = function( obj, type, fn ) {
    obj.addEventListener( type, fn, false );
  };
} else if ( docElem.attachEvent ) {
  bind = function( obj, type, fn ) {
    obj[ type + fn ] = fn.handleEvent ?
      function() {
        var event = getIEEvent( obj );
        fn.handleEvent.call( fn, event );
      } :
      function() {
        var event = getIEEvent( obj );
        fn.call( obj, event );
      };
    obj.attachEvent( "on" + type, obj[ type + fn ] );
  };
}

var unbind = function() {};

if ( docElem.removeEventListener ) {
  unbind = function( obj, type, fn ) {
    obj.removeEventListener( type, fn, false );
  };
} else if ( docElem.detachEvent ) {
  unbind = function( obj, type, fn ) {
    obj.detachEvent( "on" + type, obj[ type + fn ] );
    try {
      delete obj[ type + fn ];
    } catch ( err ) {
      // can't delete window object properties
      obj[ type + fn ] = undefined;
    }
  };
}

var eventie = {
  bind: bind,
  unbind: unbind
};

// ----- module definition ----- //

if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( eventie );
} else if ( typeof exports === 'object' ) {
  // CommonJS
  module.exports = eventie;
} else {
  // browser global
  window.eventie = eventie;
}

})( window );

},{}],666:[function(require,module,exports){
/*!
 * EventEmitter v4.2.11 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function () {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var exports = this;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);
                i = listeners.length;

                while (i--) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return EventEmitter;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}.call(this));

},{}],667:[function(require,module,exports){
/*!
 * Masonry v3.1.5
 * Cascading grid layout library
 * http://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */

( function( window ) {
'use strict';

if (!window) return;

// -------------------------- helpers -------------------------- //

var indexOf = Array.prototype.indexOf ?
  function( items, value ) {
    return items.indexOf( value );
  } :
  function ( items, value ) {
    for ( var i=0, len = items.length; i < len; i++ ) {
      var item = items[i];
      if ( item === value ) {
        return i;
      }
    }
    return -1;
  };

// -------------------------- masonryDefinition -------------------------- //

// used for AMD definition and requires
function masonryDefinition( Outlayer, getSize ) {
  // create an Outlayer layout class
  var Masonry = Outlayer.create('masonry');

  Masonry.prototype._resetLayout = function() {
    this.getSize();
    this._getMeasurement( 'columnWidth', 'outerWidth' );
    this._getMeasurement( 'gutter', 'outerWidth' );
    this.measureColumns();

    // reset column Y
    var i = this.cols;
    this.colYs = [];
    while (i--) {
      this.colYs.push( 0 );
    }

    this.maxY = 0;
  };

  Masonry.prototype.measureColumns = function() {
    this.getContainerWidth();
    // if columnWidth is 0, default to outerWidth of first item
    if ( !this.columnWidth ) {
      var firstItem = this.items[0];
      var firstItemElem = firstItem && firstItem.element;
      // columnWidth fall back to item of first element
      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
        // if first elem has no width, default to size of container
        this.containerWidth;
    }

    this.columnWidth += this.gutter;

    this.cols = Math.floor( ( this.containerWidth + this.gutter ) / this.columnWidth );
    this.cols = Math.max( this.cols, 1 );
  };

  Masonry.prototype.getContainerWidth = function() {
    // container is parent if fit width
    var container = this.options.isFitWidth ? this.element.parentNode : this.element;
    // check that this.size and size are there
    // IE8 triggers resize on body size change, so they might not be
    var size = getSize( container );
    this.containerWidth = size && size.innerWidth;
  };

  Masonry.prototype._getItemLayoutPosition = function( item ) {
    item.getSize();
    // how many columns does this brick span
    var remainder = item.size.outerWidth % this.columnWidth;
    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
    // round if off by 1 pixel, otherwise use ceil
    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
    colSpan = Math.min( colSpan, this.cols );

    var colGroup = this._getColGroup( colSpan );
    // get the minimum Y value from the columns
    var minimumY = Math.min.apply( Math, colGroup );
    var shortColIndex = indexOf( colGroup, minimumY );

    // position the brick
    var position = {
      x: this.columnWidth * shortColIndex,
      y: minimumY
    };

    // apply setHeight to necessary columns
    var setHeight = minimumY + item.size.outerHeight;
    var setSpan = this.cols + 1 - colGroup.length;
    for ( var i = 0; i < setSpan; i++ ) {
      this.colYs[ shortColIndex + i ] = setHeight;
    }

    return position;
  };

  /**
   * @param {Number} colSpan - number of columns the element spans
   * @returns {Array} colGroup
   */
  Masonry.prototype._getColGroup = function( colSpan ) {
    if ( colSpan < 2 ) {
      // if brick spans only one column, use all the column Ys
      return this.colYs;
    }

    var colGroup = [];
    // how many different places could this brick fit horizontally
    var groupCount = this.cols + 1 - colSpan;
    // for each group potential horizontal position
    for ( var i = 0; i < groupCount; i++ ) {
      // make an array of colY values for that one group
      var groupColYs = this.colYs.slice( i, i + colSpan );
      // and get the max value of the array
      colGroup[i] = Math.max.apply( Math, groupColYs );
    }
    return colGroup;
  };

  Masonry.prototype._manageStamp = function( stamp ) {
    var stampSize = getSize( stamp );
    var offset = this._getElementOffset( stamp );
    // get the columns that this stamp affects
    var firstX = this.options.isOriginLeft ? offset.left : offset.right;
    var lastX = firstX + stampSize.outerWidth;
    var firstCol = Math.floor( firstX / this.columnWidth );
    firstCol = Math.max( 0, firstCol );
    var lastCol = Math.floor( lastX / this.columnWidth );
    // lastCol should not go over if multiple of columnWidth #425
    lastCol -= lastX % this.columnWidth ? 0 : 1;
    lastCol = Math.min( this.cols - 1, lastCol );
    // set colYs to bottom of the stamp
    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +
      stampSize.outerHeight;
    for ( var i = firstCol; i <= lastCol; i++ ) {
      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
    }
  };

  Masonry.prototype._getContainerSize = function() {
    this.maxY = Math.max.apply( Math, this.colYs );
    var size = {
      height: this.maxY
    };

    if ( this.options.isFitWidth ) {
      size.width = this._getContainerFitWidth();
    }

    return size;
  };

  Masonry.prototype._getContainerFitWidth = function() {
    var unusedCols = 0;
    // count unused columns
    var i = this.cols;
    while ( --i ) {
      if ( this.colYs[i] !== 0 ) {
        break;
      }
      unusedCols++;
    }
    // fit container to columns that have been used
    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
  };

  Masonry.prototype.needsResizeLayout = function() {
    var previousWidth = this.containerWidth;
    this.getContainerWidth();
    return previousWidth !== this.containerWidth;
  };

  return Masonry;
}

// -------------------------- transport -------------------------- //
if (typeof exports === 'object') {
  module.exports = masonryDefinition(
    require('outlayer'),
    require('get-size')
  );
} else if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( [
      'outlayer/outlayer',
      'get-size/get-size'
    ],
    masonryDefinition );
} else {
  // browser global
  window.Masonry = masonryDefinition(
    window.Outlayer,
    window.getSize
  );
}

})( typeof window !== 'undefined' ? window : null );

},{"get-size":668,"outlayer":679}],668:[function(require,module,exports){
/*!
 * getSize v1.1.8
 * measure size of elements
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, exports: false, require: false, module: false */

( function( window, undefined ) {
'use strict';

if (!window) return;

// -------------------------- helpers -------------------------- //

var getComputedStyle = window.getComputedStyle;
var getStyle = getComputedStyle ?
  function( elem ) {
    return getComputedStyle( elem, null );
  } :
  function( elem ) {
    return elem.currentStyle;
  };

// get a number from a string, not a percentage
function getStyleSize( value ) {
  var num = parseFloat( value );
  // not a percent like '100%', and a number
  var isValid = value.indexOf('%') === -1 && !isNaN( num );
  return isValid && num;
}

// -------------------------- measurements -------------------------- //

var measurements = [
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'paddingBottom',
  'marginLeft',
  'marginRight',
  'marginTop',
  'marginBottom',
  'borderLeftWidth',
  'borderRightWidth',
  'borderTopWidth',
  'borderBottomWidth'
];

function getZeroSize() {
  var size = {
    width: 0,
    height: 0,
    innerWidth: 0,
    innerHeight: 0,
    outerWidth: 0,
    outerHeight: 0
  };
  for ( var i=0, len = measurements.length; i < len; i++ ) {
    var measurement = measurements[i];
    size[ measurement ] = 0;
  }
  return size;
}



function defineGetSize( getStyleProperty ) {

// -------------------------- box sizing -------------------------- //

var boxSizingProp = getStyleProperty('boxSizing');
var isBoxSizeOuter;

/**
 * WebKit measures the outer-width on style.width on border-box elems
 * IE & Firefox measures the inner-width
 */
( function() {
  if ( !boxSizingProp ) {
    return;
  }

  var div = document.createElement('div');
  div.style.width = '200px';
  div.style.padding = '1px 2px 3px 4px';
  div.style.borderStyle = 'solid';
  div.style.borderWidth = '1px 2px 3px 4px';
  div.style[ boxSizingProp ] = 'border-box';

  var body = document.body || document.documentElement;
  body.appendChild( div );
  var style = getStyle( div );

  isBoxSizeOuter = getStyleSize( style.width ) === 200;
  body.removeChild( div );
})();


// -------------------------- getSize -------------------------- //

function getSize( elem ) {
  // use querySeletor if elem is string
  if ( typeof elem === 'string' ) {
    elem = document.querySelector( elem );
  }

  // do not proceed on non-objects
  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
    return;
  }

  var style = getStyle( elem );

  // if hidden, everything is 0
  if ( style.display === 'none' ) {
    return getZeroSize();
  }

  var size = {};
  size.width = elem.offsetWidth;
  size.height = elem.offsetHeight;

  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );

  // get all measurements
  for ( var i=0, len = measurements.length; i < len; i++ ) {
    var measurement = measurements[i];
    var value = style[ measurement ];
    value = mungeNonPixel( elem, value );
    var num = parseFloat( value );
    // any 'auto', 'medium' value will be 0
    size[ measurement ] = !isNaN( num ) ? num : 0;
  }

  var paddingWidth = size.paddingLeft + size.paddingRight;
  var paddingHeight = size.paddingTop + size.paddingBottom;
  var marginWidth = size.marginLeft + size.marginRight;
  var marginHeight = size.marginTop + size.marginBottom;
  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
  var borderHeight = size.borderTopWidth + size.borderBottomWidth;

  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

  // overwrite width and height if we can get it from style
  var styleWidth = getStyleSize( style.width );
  if ( styleWidth !== false ) {
    size.width = styleWidth +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
  }

  var styleHeight = getStyleSize( style.height );
  if ( styleHeight !== false ) {
    size.height = styleHeight +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
  }

  size.innerWidth = size.width - ( paddingWidth + borderWidth );
  size.innerHeight = size.height - ( paddingHeight + borderHeight );

  size.outerWidth = size.width + marginWidth;
  size.outerHeight = size.height + marginHeight;

  return size;
}

// IE8 returns percent values, not pixels
// taken from jQuery's curCSS
function mungeNonPixel( elem, value ) {
  // IE8 and has percent value
  if ( getComputedStyle || value.indexOf('%') === -1 ) {
    return value;
  }
  var style = elem.style;
  // Remember the original values
  var left = style.left;
  var rs = elem.runtimeStyle;
  var rsLeft = rs && rs.left;

  // Put in the new values to get a computed value out
  if ( rsLeft ) {
    rs.left = elem.currentStyle.left;
  }
  style.left = value;
  value = style.pixelLeft;

  // Revert the changed values
  style.left = left;
  if ( rsLeft ) {
    rs.left = rsLeft;
  }

  return value;
}

return getSize;

}

// transport
if ( typeof exports === 'object' ) {
  // CommonJS for Component
  module.exports = defineGetSize( require('desandro-get-style-property') );
} else if ( typeof define === 'function' && define.amd ) {
  // AMD for RequireJS
  define( [ 'get-style-property/get-style-property' ], defineGetSize );
} else {
  // browser global
  window.getSize = defineGetSize( window.getStyleProperty );
}

})( typeof window !== 'undefined' ? window : null );

},{"desandro-get-style-property":669}],669:[function(require,module,exports){
/*!
 * getStyleProperty v1.0.4
 * original by kangax
 * http://perfectionkills.com/feature-testing-css-properties/
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false, exports: false, module: false */

( function( window ) {

'use strict';

var prefixes = 'Webkit Moz ms Ms O'.split(' ');
var docElemStyle = document.documentElement.style;

function getStyleProperty( propName ) {
  if ( !propName ) {
    return;
  }

  // test standard property first
  if ( typeof docElemStyle[ propName ] === 'string' ) {
    return propName;
  }

  // capitalize
  propName = propName.charAt(0).toUpperCase() + propName.slice(1);

  // test vendor specific properties
  var prefixed;
  for ( var i=0, len = prefixes.length; i < len; i++ ) {
    prefixed = prefixes[i] + propName;
    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
      return prefixed;
    }
  }
}

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( function() {
    return getStyleProperty;
  });
} else if ( typeof exports === 'object' ) {
  // CommonJS for Component
  module.exports = getStyleProperty;
} else {
  // browser global
  window.getStyleProperty = getStyleProperty;
}

})( window );

},{}],670:[function(require,module,exports){
/**
 * Outlayer Item
 */

( function( window ) {
'use strict';

if (!window) return;

// ----- get style ----- //

var getComputedStyle = window.getComputedStyle;
var getStyle = getComputedStyle ?
  function( elem ) {
    return getComputedStyle( elem, null );
  } :
  function( elem ) {
    return elem.currentStyle;
  };


// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}

function isEmptyObj( obj ) {
  for ( var prop in obj ) {
    return false;
  }
  prop = null;
  return true;
}

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
function toDash( str ) {
  return str.replace( /([A-Z])/g, function( $1 ){
    return '-' + $1.toLowerCase();
  });
}

// -------------------------- Outlayer definition -------------------------- //

function outlayerItemDefinition( EventEmitter, getSize, getStyleProperty ) {

// -------------------------- CSS3 support -------------------------- //

var transitionProperty = getStyleProperty('transition');
var transformProperty = getStyleProperty('transform');
var supportsCSS3 = transitionProperty && transformProperty;
var is3d = !!getStyleProperty('perspective');

var transitionEndEvent = {
  WebkitTransition: 'webkitTransitionEnd',
  MozTransition: 'transitionend',
  OTransition: 'otransitionend',
  transition: 'transitionend'
}[ transitionProperty ];

// properties that could have vendor prefix
var prefixableProperties = [
  'transform',
  'transition',
  'transitionDuration',
  'transitionProperty'
];

// cache all vendor properties
var vendorProperties = ( function() {
  var cache = {};
  for ( var i=0, len = prefixableProperties.length; i < len; i++ ) {
    var prop = prefixableProperties[i];
    var supportedProp = getStyleProperty( prop );
    if ( supportedProp && supportedProp !== prop ) {
      cache[ prop ] = supportedProp;
    }
  }
  return cache;
})();

// -------------------------- Item -------------------------- //

function Item( element, layout ) {
  if ( !element ) {
    return;
  }

  this.element = element;
  // parent layout class, i.e. Masonry, Isotope, or Packery
  this.layout = layout;
  this.position = {
    x: 0,
    y: 0
  };

  this._create();
}

// inherit EventEmitter
extend( Item.prototype, EventEmitter.prototype );

Item.prototype._create = function() {
  // transition objects
  this._transn = {
    ingProperties: {},
    clean: {},
    onEnd: {}
  };

  this.css({
    position: 'absolute'
  });
};

// trigger specified handler for event type
Item.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

Item.prototype.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * apply CSS styles to element
 * @param {Object} style
 */
Item.prototype.css = function( style ) {
  var elemStyle = this.element.style;

  for ( var prop in style ) {
    // use vendor property if available
    var supportedProp = vendorProperties[ prop ] || prop;
    elemStyle[ supportedProp ] = style[ prop ];
  }
};

 // measure position, and sets it
Item.prototype.getPosition = function() {
  var style = getStyle( this.element );
  var layoutOptions = this.layout.options;
  var isOriginLeft = layoutOptions.isOriginLeft;
  var isOriginTop = layoutOptions.isOriginTop;
  var x = parseInt( style[ isOriginLeft ? 'left' : 'right' ], 10 );
  var y = parseInt( style[ isOriginTop ? 'top' : 'bottom' ], 10 );

  // clean up 'auto' or other non-integer values
  x = isNaN( x ) ? 0 : x;
  y = isNaN( y ) ? 0 : y;
  // remove padding from measurement
  var layoutSize = this.layout.size;
  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;

  this.position.x = x;
  this.position.y = y;
};

// set settled position, apply padding
Item.prototype.layoutPosition = function() {
  var layoutSize = this.layout.size;
  var layoutOptions = this.layout.options;
  var style = {};

  if ( layoutOptions.isOriginLeft ) {
    style.left = ( this.position.x + layoutSize.paddingLeft ) + 'px';
    // reset other property
    style.right = '';
  } else {
    style.right = ( this.position.x + layoutSize.paddingRight ) + 'px';
    style.left = '';
  }

  if ( layoutOptions.isOriginTop ) {
    style.top = ( this.position.y + layoutSize.paddingTop ) + 'px';
    style.bottom = '';
  } else {
    style.bottom = ( this.position.y + layoutSize.paddingBottom ) + 'px';
    style.top = '';
  }

  this.css( style );
  this.emitEvent( 'layout', [ this ] );
};


// transform translate function
var translate = is3d ?
  function( x, y ) {
    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
  } :
  function( x, y ) {
    return 'translate(' + x + 'px, ' + y + 'px)';
  };


Item.prototype._transitionTo = function( x, y ) {
  this.getPosition();
  // get current x & y from top/left
  var curX = this.position.x;
  var curY = this.position.y;

  var compareX = parseInt( x, 10 );
  var compareY = parseInt( y, 10 );
  var didNotMove = compareX === this.position.x && compareY === this.position.y;

  // save end position
  this.setPosition( x, y );

  // if did not move and not transitioning, just go to layout
  if ( didNotMove && !this.isTransitioning ) {
    this.layoutPosition();
    return;
  }

  var transX = x - curX;
  var transY = y - curY;
  var transitionStyle = {};
  // flip cooridinates if origin on right or bottom
  var layoutOptions = this.layout.options;
  transX = layoutOptions.isOriginLeft ? transX : -transX;
  transY = layoutOptions.isOriginTop ? transY : -transY;
  transitionStyle.transform = translate( transX, transY );

  this.transition({
    to: transitionStyle,
    onTransitionEnd: {
      transform: this.layoutPosition
    },
    isCleaning: true
  });
};

// non transition + transform support
Item.prototype.goTo = function( x, y ) {
  this.setPosition( x, y );
  this.layoutPosition();
};

// use transition and transforms if supported
Item.prototype.moveTo = supportsCSS3 ?
  Item.prototype._transitionTo : Item.prototype.goTo;

Item.prototype.setPosition = function( x, y ) {
  this.position.x = parseInt( x, 10 );
  this.position.y = parseInt( y, 10 );
};

// ----- transition ----- //

/**
 * @param {Object} style - CSS
 * @param {Function} onTransitionEnd
 */

// non transition, just trigger callback
Item.prototype._nonTransition = function( args ) {
  this.css( args.to );
  if ( args.isCleaning ) {
    this._removeStyles( args.to );
  }
  for ( var prop in args.onTransitionEnd ) {
    args.onTransitionEnd[ prop ].call( this );
  }
};

/**
 * proper transition
 * @param {Object} args - arguments
 *   @param {Object} to - style to transition to
 *   @param {Object} from - style to start transition from
 *   @param {Boolean} isCleaning - removes transition styles after transition
 *   @param {Function} onTransitionEnd - callback
 */
Item.prototype._transition = function( args ) {
  // redirect to nonTransition if no transition duration
  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
    this._nonTransition( args );
    return;
  }

  var _transition = this._transn;
  // keep track of onTransitionEnd callback by css property
  for ( var prop in args.onTransitionEnd ) {
    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
  }
  // keep track of properties that are transitioning
  for ( prop in args.to ) {
    _transition.ingProperties[ prop ] = true;
    // keep track of properties to clean up when transition is done
    if ( args.isCleaning ) {
      _transition.clean[ prop ] = true;
    }
  }

  // set from styles
  if ( args.from ) {
    this.css( args.from );
    // force redraw. http://blog.alexmaccaw.com/css-transitions
    var h = this.element.offsetHeight;
    // hack for JSHint to hush about unused var
    h = null;
  }
  // enable transition
  this.enableTransition( args.to );
  // set styles that are transitioning
  this.css( args.to );

  this.isTransitioning = true;

};

var itemTransitionProperties = transformProperty && ( toDash( transformProperty ) +
  ',opacity' );

Item.prototype.enableTransition = function(/* style */) {
  // only enable if not already transitioning
  // bug in IE10 were re-setting transition style will prevent
  // transitionend event from triggering
  if ( this.isTransitioning ) {
    return;
  }

  // make transition: foo, bar, baz from style object
  // TODO uncomment this bit when IE10 bug is resolved
  // var transitionValue = [];
  // for ( var prop in style ) {
  //   // dash-ify camelCased properties like WebkitTransition
  //   transitionValue.push( toDash( prop ) );
  // }
  // enable transition styles
  // HACK always enable transform,opacity for IE10
  this.css({
    transitionProperty: itemTransitionProperties,
    transitionDuration: this.layout.options.transitionDuration
  });
  // listen for transition end event
  this.element.addEventListener( transitionEndEvent, this, false );
};

Item.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];

// ----- events ----- //

Item.prototype.onwebkitTransitionEnd = function( event ) {
  this.ontransitionend( event );
};

Item.prototype.onotransitionend = function( event ) {
  this.ontransitionend( event );
};

// properties that I munge to make my life easier
var dashedVendorProperties = {
  '-webkit-transform': 'transform',
  '-moz-transform': 'transform',
  '-o-transform': 'transform'
};

Item.prototype.ontransitionend = function( event ) {
  // disregard bubbled events from children
  if ( event.target !== this.element ) {
    return;
  }
  var _transition = this._transn;
  // get property name of transitioned property, convert to prefix-free
  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;

  // remove property that has completed transitioning
  delete _transition.ingProperties[ propertyName ];
  // check if any properties are still transitioning
  if ( isEmptyObj( _transition.ingProperties ) ) {
    // all properties have completed transitioning
    this.disableTransition();
  }
  // clean style
  if ( propertyName in _transition.clean ) {
    // clean up style
    this.element.style[ event.propertyName ] = '';
    delete _transition.clean[ propertyName ];
  }
  // trigger onTransitionEnd callback
  if ( propertyName in _transition.onEnd ) {
    var onTransitionEnd = _transition.onEnd[ propertyName ];
    onTransitionEnd.call( this );
    delete _transition.onEnd[ propertyName ];
  }

  this.emitEvent( 'transitionEnd', [ this ] );
};

Item.prototype.disableTransition = function() {
  this.removeTransitionStyles();
  this.element.removeEventListener( transitionEndEvent, this, false );
  this.isTransitioning = false;
};

/**
 * removes style property from element
 * @param {Object} style
**/
Item.prototype._removeStyles = function( style ) {
  // clean up transition styles
  var cleanStyle = {};
  for ( var prop in style ) {
    cleanStyle[ prop ] = '';
  }
  this.css( cleanStyle );
};

var cleanTransitionStyle = {
  transitionProperty: '',
  transitionDuration: ''
};

Item.prototype.removeTransitionStyles = function() {
  // remove transition
  this.css( cleanTransitionStyle );
};

// ----- show/hide/remove ----- //

// remove element from DOM
Item.prototype.removeElem = function() {
  this.element.parentNode.removeChild( this.element );
  this.emitEvent( 'remove', [ this ] );
};

Item.prototype.remove = function() {
  // just remove element if no transition support or no transition
  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
    this.removeElem();
    return;
  }

  // start transition
  var _this = this;
  this.on( 'transitionEnd', function() {
    _this.removeElem();
    return true; // bind once
  });
  this.hide();
};

Item.prototype.reveal = function() {
  delete this.isHidden;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;
  this.transition({
    from: options.hiddenStyle,
    to: options.visibleStyle,
    isCleaning: true
  });
};

Item.prototype.hide = function() {
  // set flag
  this.isHidden = true;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;
  this.transition({
    from: options.visibleStyle,
    to: options.hiddenStyle,
    // keep hidden stuff hidden
    isCleaning: true,
    onTransitionEnd: {
      opacity: function() {
        // check if still hidden
        // during transition, item may have been un-hidden
        if ( this.isHidden ) {
          this.css({ display: 'none' });
        }
      }
    }
  });
};

Item.prototype.destroy = function() {
  this.css({
    position: '',
    left: '',
    right: '',
    top: '',
    bottom: '',
    transition: '',
    transform: ''
  });
};

return Item;

}

// -------------------------- transport -------------------------- //
if (typeof exports === 'object') {
  // CommonJS
  module.exports = outlayerItemDefinition(
    require('eventemitter'),
    require('get-size'),
    require('desandro-get-style-property')
  );
} else if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( [
      'eventEmitter/EventEmitter',
      'get-size/get-size',
      'get-style-property/get-style-property'
    ],
    outlayerItemDefinition );
} else {
  // browser global
  window.Outlayer = {};
  window.Outlayer.Item = outlayerItemDefinition(
    window.EventEmitter,
    window.getSize,
    window.getStyleProperty
  );
}

})( typeof window !== 'undefined' ? window : null );

},{"desandro-get-style-property":671,"eventemitter":675,"get-size":677}],671:[function(require,module,exports){
arguments[4][669][0].apply(exports,arguments)
},{"dup":669}],672:[function(require,module,exports){
/**
 * matchesSelector v1.0.3
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, module: false */

( function( ElemProto ) {

  'use strict';

  var matchesMethod = ( function() {
    // check for the standard method name first
    if ( ElemProto.matches ) {
      return 'matches';
    }
    // check un-prefixed
    if ( ElemProto.matchesSelector ) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];

    for ( var i=0, len = prefixes.length; i < len; i++ ) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if ( ElemProto[ method ] ) {
        return method;
      }
    }
  })();

  // ----- match ----- //

  function match( elem, selector ) {
    return elem[ matchesMethod ]( selector );
  }

  // ----- appendToFragment ----- //

  function checkParent( elem ) {
    // not needed if already has parent
    if ( elem.parentNode ) {
      return;
    }
    var fragment = document.createDocumentFragment();
    fragment.appendChild( elem );
  }

  // ----- query ----- //

  // fall back to using QSA
  // thx @jonathantneal https://gist.github.com/3062955
  function query( elem, selector ) {
    // append to fragment if no parent
    checkParent( elem );

    // match elem with all selected elems of parent
    var elems = elem.parentNode.querySelectorAll( selector );
    for ( var i=0, len = elems.length; i < len; i++ ) {
      // return true if match
      if ( elems[i] === elem ) {
        return true;
      }
    }
    // otherwise return false
    return false;
  }

  // ----- matchChild ----- //

  function matchChild( elem, selector ) {
    checkParent( elem );
    return match( elem, selector );
  }

  // ----- matchesSelector ----- //

  var matchesSelector;

  if ( matchesMethod ) {
    // IE9 supports matchesSelector, but doesn't work on orphaned elems
    // check for that
    var div = document.createElement('div');
    var supportsOrphans = match( div, 'div' );
    matchesSelector = supportsOrphans ? match : matchChild;
  } else {
    matchesSelector = query;
  }

  // transport
  if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( function() {
      return matchesSelector;
    });
  } else if ( typeof exports === 'object' ) {
    module.exports = matchesSelector;
  }
  else {
    // browser global
    window.matchesSelector = matchesSelector;
  }

})( Element.prototype );

},{}],673:[function(require,module,exports){
/*!
 * docReady v1.0.3
 * Cross browser DOMContentLoaded event emitter
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true*/
/*global define: false, require: false, module: false */

( function( window ) {
'use strict';

if (!window) return;

var document = window.document;
// collection of functions to be triggered on ready
var queue = [];

function docReady( fn ) {
  // throw out non-functions
  if ( typeof fn !== 'function' ) {
    return;
  }

  if ( docReady.isReady ) {
    // ready now, hit it
    fn();
  } else {
    // queue function when ready
    queue.push( fn );
  }
}

docReady.isReady = false;

// triggered on various doc ready events
function init( event ) {
  // bail if IE8 document is not ready just yet
  var isIE8NotReady = event.type === 'readystatechange' && document.readyState !== 'complete';
  if ( docReady.isReady || isIE8NotReady ) {
    return;
  }
  docReady.isReady = true;

  // process queue
  for ( var i=0, len = queue.length; i < len; i++ ) {
    var fn = queue[i];
    fn();
  }
}

function defineDocReady( eventie ) {
  eventie.bind( document, 'DOMContentLoaded', init );
  eventie.bind( document, 'readystatechange', init );
  eventie.bind( window, 'load', init );

  return docReady;
}

// transport
if ( typeof exports === 'object' ) {
  module.exports = defineDocReady( require('eventie') );
} else if ( typeof define === 'function' && define.amd ) {
  // AMD
  // if RequireJS, then doc is already ready
  docReady.isReady = typeof requirejs === 'function';
  define( [ 'eventie/eventie' ], defineDocReady );
} else {
  // browser global
  window.docReady = defineDocReady( window.eventie );
}

})( typeof window !== 'undefined' ? window : null );

},{"eventie":674}],674:[function(require,module,exports){
/*!
 * eventie v1.0.5
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false, module: false */

( function( window ) {
'use strict';

if (!window) return;

var docElem = document.documentElement;

var bind = function() {};

function getIEEvent( obj ) {
  var event = window.event;
  // add event.target
  event.target = event.target || event.srcElement || obj;
  return event;
}

if ( docElem.addEventListener ) {
  bind = function( obj, type, fn ) {
    obj.addEventListener( type, fn, false );
  };
} else if ( docElem.attachEvent ) {
  bind = function( obj, type, fn ) {
    obj[ type + fn ] = fn.handleEvent ?
      function() {
        var event = getIEEvent( obj );
        fn.handleEvent.call( fn, event );
      } :
      function() {
        var event = getIEEvent( obj );
        fn.call( obj, event );
      };
    obj.attachEvent( "on" + type, obj[ type + fn ] );
  };
}

var unbind = function() {};

if ( docElem.removeEventListener ) {
  unbind = function( obj, type, fn ) {
    obj.removeEventListener( type, fn, false );
  };
} else if ( docElem.detachEvent ) {
  unbind = function( obj, type, fn ) {
    obj.detachEvent( "on" + type, obj[ type + fn ] );
    try {
      delete obj[ type + fn ];
    } catch ( err ) {
      // can't delete window object properties
      obj[ type + fn ] = undefined;
    }
  };
}

var eventie = {
  bind: bind,
  unbind: unbind
};

// ----- module definition ----- //
if ( typeof exports === 'object' ) {
  // CommonJS
  module.exports = eventie;
} else if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( eventie );
} else {
  // browser global
  window.eventie = eventie;
}

})( typeof window !== 'undefined' ? window : null );

},{}],675:[function(require,module,exports){
/*!
 * EventEmitter v4.2.0 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */

(function () {
	// Place the script in strict mode
	'use strict';

	/**
	 * Class for managing events.
	 * Can be extended to provide event functionality in other classes.
	 *
	 * @class EventEmitter Manages event registering and emitting.
	 */
	function EventEmitter() {}

	// Shortcuts to improve speed and size

	// Easy access to the prototype
	var proto = EventEmitter.prototype;

	/**
	 * Finds the index of the listener for the event in it's storage array.
	 *
	 * @param {Function[]} listeners Array of listeners to search through.
	 * @param {Function} listener Method to look for.
	 * @return {Number} Index of the specified listener, -1 if not found
	 * @api private
	 */
	function indexOfListener(listeners, listener) {
		var i = listeners.length;
		while (i--) {
			if (listeners[i].listener === listener) {
				return i;
			}
		}

		return -1;
	}

	/**
	 * Returns the listener array for the specified event.
	 * Will initialise the event object and listener arrays if required.
	 * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	 * Each property in the object response is an array of listener functions.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Function[]|Object} All listener functions for the event.
	 */
	proto.getListeners = function getListeners(evt) {
		var events = this._getEvents();
		var response;
		var key;

		// Return a concatenated array of all matching events if
		// the selector is a regular expression.
		if (typeof evt === 'object') {
			response = {};
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					response[key] = events[key];
				}
			}
		}
		else {
			response = events[evt] || (events[evt] = []);
		}

		return response;
	};

	/**
	 * Takes a list of listener objects and flattens it into a list of listener functions.
	 *
	 * @param {Object[]} listeners Raw listener objects.
	 * @return {Function[]} Just the listener functions.
	 */
	proto.flattenListeners = function flattenListeners(listeners) {
		var flatListeners = [];
		var i;

		for (i = 0; i < listeners.length; i += 1) {
			flatListeners.push(listeners[i].listener);
		}

		return flatListeners;
	};

	/**
	 * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Object} All listener functions for an event in an object.
	 */
	proto.getListenersAsObject = function getListenersAsObject(evt) {
		var listeners = this.getListeners(evt);
		var response;

		if (listeners instanceof Array) {
			response = {};
			response[evt] = listeners;
		}

		return response || listeners;
	};

	/**
	 * Adds a listener function to the specified event.
	 * The listener will not be added if it is a duplicate.
	 * If the listener returns true then it will be removed after it is called.
	 * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListener = function addListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var listenerIsWrapped = typeof listener === 'object';
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
				listeners[key].push(listenerIsWrapped ? listener : {
					listener: listener,
					once: false
				});
			}
		}

		return this;
	};

	/**
	 * Alias of addListener
	 */
	proto.on = proto.addListener;

	/**
	 * Semi-alias of addListener. It will add a listener that will be
	 * automatically removed after it's first execution.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addOnceListener = function addOnceListener(evt, listener) {
		return this.addListener(evt, {
			listener: listener,
			once: true
		});
	};

	/**
	 * Alias of addOnceListener.
	 */
	proto.once = proto.addOnceListener;

	/**
	 * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	 * You need to tell it what event names should be matched by a regex.
	 *
	 * @param {String} evt Name of the event to create.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvent = function defineEvent(evt) {
		this.getListeners(evt);
		return this;
	};

	/**
	 * Uses defineEvent to define multiple events.
	 *
	 * @param {String[]} evts An array of event names to define.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvents = function defineEvents(evts) {
		for (var i = 0; i < evts.length; i += 1) {
			this.defineEvent(evts[i]);
		}
		return this;
	};

	/**
	 * Removes a listener function from the specified event.
	 * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to remove the listener from.
	 * @param {Function} listener Method to remove from the event.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListener = function removeListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var index;
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				index = indexOfListener(listeners[key], listener);

				if (index !== -1) {
					listeners[key].splice(index, 1);
				}
			}
		}

		return this;
	};

	/**
	 * Alias of removeListener
	 */
	proto.off = proto.removeListener;

	/**
	 * Adds listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	 * You can also pass it a regular expression to add the array of listeners to all events that match it.
	 * Yeah, this function does quite a bit. That's probably a bad thing.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListeners = function addListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(false, evt, listeners);
	};

	/**
	 * Removes listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be removed.
	 * You can also pass it a regular expression to remove the listeners from all events that match it.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListeners = function removeListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(true, evt, listeners);
	};

	/**
	 * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	 * The first argument will determine if the listeners are removed (true) or added (false).
	 * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be added/removed.
	 * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	 *
	 * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
		var i;
		var value;
		var single = remove ? this.removeListener : this.addListener;
		var multiple = remove ? this.removeListeners : this.addListeners;

		// If evt is an object then pass each of it's properties to this method
		if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			for (i in evt) {
				if (evt.hasOwnProperty(i) && (value = evt[i])) {
					// Pass the single listener straight through to the singular method
					if (typeof value === 'function') {
						single.call(this, i, value);
					}
					else {
						// Otherwise pass back to the multiple function
						multiple.call(this, i, value);
					}
				}
			}
		}
		else {
			// So evt must be a string
			// And listeners must be an array of listeners
			// Loop over it and pass each one to the multiple method
			i = listeners.length;
			while (i--) {
				single.call(this, evt, listeners[i]);
			}
		}

		return this;
	};

	/**
	 * Removes all listeners from a specified event.
	 * If you do not specify an event then all listeners will be removed.
	 * That means every event will be emptied.
	 * You can also pass a regex to remove all events that match it.
	 *
	 * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeEvent = function removeEvent(evt) {
		var type = typeof evt;
		var events = this._getEvents();
		var key;

		// Remove different things depending on the state of evt
		if (type === 'string') {
			// Remove all listeners for the specified event
			delete events[evt];
		}
		else if (type === 'object') {
			// Remove all events matching the regex.
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					delete events[key];
				}
			}
		}
		else {
			// Remove all listeners in all events
			delete this._events;
		}

		return this;
	};

	/**
	 * Emits an event of your choice.
	 * When emitted, every listener attached to that event will be executed.
	 * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	 * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	 * So they will not arrive within the array on the other side, they will be separate.
	 * You can also pass a regular expression to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {Array} [args] Optional array of arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emitEvent = function emitEvent(evt, args) {
		var listeners = this.getListenersAsObject(evt);
		var listener;
		var i;
		var key;
		var response;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				i = listeners[key].length;

				while (i--) {
					// If the listener returns true then it shall be removed from the event
					// The function is executed either with a basic call or an apply if there is an args array
					listener = listeners[key][i];
					response = listener.listener.apply(this, args || []);
					if (response === this._getOnceReturnValue() || listener.once === true) {
						this.removeListener(evt, listener.listener);
					}
				}
			}
		}

		return this;
	};

	/**
	 * Alias of emitEvent
	 */
	proto.trigger = proto.emitEvent;

	/**
	 * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	 * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {...*} Optional additional arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emit = function emit(evt) {
		var args = Array.prototype.slice.call(arguments, 1);
		return this.emitEvent(evt, args);
	};

	/**
	 * Sets the current value to check against when executing listeners. If a
	 * listeners return value matches the one set here then it will be removed
	 * after execution. This value defaults to true.
	 *
	 * @param {*} value The new value to check for when executing listeners.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.setOnceReturnValue = function setOnceReturnValue(value) {
		this._onceReturnValue = value;
		return this;
	};

	/**
	 * Fetches the current value to check against when executing listeners. If
	 * the listeners return value matches this one then it should be removed
	 * automatically. It will return true by default.
	 *
	 * @return {*|Boolean} The current value to check for or the default, true.
	 * @api private
	 */
	proto._getOnceReturnValue = function _getOnceReturnValue() {
		if (this.hasOwnProperty('_onceReturnValue')) {
			return this._onceReturnValue;
		}
		else {
			return true;
		}
	};

	/**
	 * Fetches the events object and creates one if required.
	 *
	 * @return {Object} The events storage object.
	 * @api private
	 */
	proto._getEvents = function _getEvents() {
		return this._events || (this._events = {});
	};

	// Expose the class either via AMD, CommonJS or the global object
	if (typeof define === 'function' && define.amd) {
		define(function () {
			return EventEmitter;
		});
	}
	else if (typeof module !== 'undefined' && module.exports){
		module.exports = EventEmitter;
	}
	else {
		this.EventEmitter = EventEmitter;
	}
}.call(this));

},{}],676:[function(require,module,exports){
arguments[4][674][0].apply(exports,arguments)
},{"dup":674}],677:[function(require,module,exports){
arguments[4][668][0].apply(exports,arguments)
},{"desandro-get-style-property":678,"dup":668}],678:[function(require,module,exports){
arguments[4][669][0].apply(exports,arguments)
},{"dup":669}],679:[function(require,module,exports){
/*!
 * Outlayer v1.2.0
 * the brains and guts of a layout library
 * MIT license
 */

( function( window ) {
'use strict';

if (!window) return;

// ----- vars ----- //

var document = window.document;
var console = window.console;
var jQuery = window.jQuery;

var noop = function() {};

// -------------------------- helpers -------------------------- //

// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}


var objToString = Object.prototype.toString;
function isArray( obj ) {
  return objToString.call( obj ) === '[object Array]';
}

// turn element or nodeList into an array
function makeArray( obj ) {
  var ary = [];
  if ( isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( obj && typeof obj.length === 'number' ) {
    // convert nodeList to array
    for ( var i=0, len = obj.length; i < len; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
}

// http://stackoverflow.com/a/384380/182183
var isElement = ( typeof HTMLElement === 'function' || typeof HTMLElement === 'object' ) ?
  function isElementDOM2( obj ) {
    return obj instanceof HTMLElement;
  } :
  function isElementQuirky( obj ) {
    return obj && typeof obj === 'object' &&
      obj.nodeType === 1 && typeof obj.nodeName === 'string';
  };

// index of helper cause IE8
var indexOf = Array.prototype.indexOf ? function( ary, obj ) {
    return ary.indexOf( obj );
  } : function( ary, obj ) {
    for ( var i=0, len = ary.length; i < len; i++ ) {
      if ( ary[i] === obj ) {
        return i;
      }
    }
    return -1;
  };

function removeFrom( obj, ary ) {
  var index = indexOf( ary, obj );
  if ( index !== -1 ) {
    ary.splice( index, 1 );
  }
}

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
function toDashed( str ) {
  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
    return $1 + '-' + $2;
  }).toLowerCase();
}


function outlayerDefinition( eventie, docReady, EventEmitter, getSize, matchesSelector, Item ) {

// -------------------------- Outlayer -------------------------- //

// globally unique identifiers
var GUID = 0;
// internal store of all Outlayer intances
var instances = {};


/**
 * @param {Element, String} element
 * @param {Object} options
 * @constructor
 */
function Outlayer( element, options ) {
  // use element as selector string
  if ( typeof element === 'string' ) {
    element = document.querySelector( element );
  }

  // bail out if not proper element
  if ( !element || !isElement( element ) ) {
    if ( console ) {
      console.error( 'Bad ' + this.constructor.namespace + ' element: ' + element );
    }
    return;
  }

  this.element = element;

  // options
  this.options = extend( {}, this.constructor.defaults );
  this.option( options );

  // add id for Outlayer.getFromElement
  var id = ++GUID;
  this.element.outlayerGUID = id; // expando
  instances[ id ] = this; // associate via id

  // kick it off
  this._create();

  if ( this.options.isInitLayout ) {
    this.layout();
  }
}

// settings are for internal use only
Outlayer.namespace = 'outlayer';
Outlayer.Item = Item;

// default options
Outlayer.defaults = {
  containerStyle: {
    position: 'relative'
  },
  isInitLayout: true,
  isOriginLeft: true,
  isOriginTop: true,
  isResizeBound: true,
  isResizingContainer: true,
  // item options
  transitionDuration: '0.4s',
  hiddenStyle: {
    opacity: 0,
    transform: 'scale(0.001)'
  },
  visibleStyle: {
    opacity: 1,
    transform: 'scale(1)'
  }
};

// inherit EventEmitter
extend( Outlayer.prototype, EventEmitter.prototype );

/**
 * set options
 * @param {Object} opts
 */
Outlayer.prototype.option = function( opts ) {
  extend( this.options, opts );
};

Outlayer.prototype._create = function() {
  // get items from children
  this.reloadItems();
  // elements that affect layout, but are not laid out
  this.stamps = [];
  this.stamp( this.options.stamp );
  // set container style
  extend( this.element.style, this.options.containerStyle );

  // bind resize method
  if ( this.options.isResizeBound ) {
    this.bindResize();
  }
};

// goes through all children again and gets bricks in proper order
Outlayer.prototype.reloadItems = function() {
  // collection of item elements
  this.items = this._itemize( this.element.children );
};


/**
 * turn elements into Outlayer.Items to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - collection of new Outlayer Items
 */
Outlayer.prototype._itemize = function( elems ) {

  var itemElems = this._filterFindItemElements( elems );
  var Item = this.constructor.Item;

  // create new Outlayer Items for collection
  var items = [];
  for ( var i=0, len = itemElems.length; i < len; i++ ) {
    var elem = itemElems[i];
    var item = new Item( elem, this );
    items.push( item );
  }

  return items;
};

/**
 * get item elements to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - item elements
 */
Outlayer.prototype._filterFindItemElements = function( elems ) {
  // make array of elems
  elems = makeArray( elems );
  var itemSelector = this.options.itemSelector;
  var itemElems = [];

  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    // check that elem is an actual element
    if ( !isElement( elem ) ) {
      continue;
    }
    // filter & find items if we have an item selector
    if ( itemSelector ) {
      // filter siblings
      if ( matchesSelector( elem, itemSelector ) ) {
        itemElems.push( elem );
      }
      // find children
      var childElems = elem.querySelectorAll( itemSelector );
      // concat childElems to filterFound array
      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
        itemElems.push( childElems[j] );
      }
    } else {
      itemElems.push( elem );
    }
  }

  return itemElems;
};

/**
 * getter method for getting item elements
 * @returns {Array} elems - collection of item elements
 */
Outlayer.prototype.getItemElements = function() {
  var elems = [];
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    elems.push( this.items[i].element );
  }
  return elems;
};

// ----- init & layout ----- //

/**
 * lays out all items
 */
Outlayer.prototype.layout = function() {
  this._resetLayout();
  this._manageStamps();

  // don't animate first layout
  var isInstant = this.options.isLayoutInstant !== undefined ?
    this.options.isLayoutInstant : !this._isLayoutInited;
  this.layoutItems( this.items, isInstant );

  // flag for initalized
  this._isLayoutInited = true;
};

// _init is alias for layout
Outlayer.prototype._init = Outlayer.prototype.layout;

/**
 * logic before any new layout
 */
Outlayer.prototype._resetLayout = function() {
  this.getSize();
};


Outlayer.prototype.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * get measurement from option, for columnWidth, rowHeight, gutter
 * if option is String -> get element from selector string, & get size of element
 * if option is Element -> get size of element
 * else use option as a number
 *
 * @param {String} measurement
 * @param {String} size - width or height
 * @private
 */
Outlayer.prototype._getMeasurement = function( measurement, size ) {
  var option = this.options[ measurement ];
  var elem;
  if ( !option ) {
    // default to 0
    this[ measurement ] = 0;
  } else {
    // use option as an element
    if ( typeof option === 'string' ) {
      elem = this.element.querySelector( option );
    } else if ( isElement( option ) ) {
      elem = option;
    }
    // use size of element, if element
    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
  }
};

/**
 * layout a collection of item elements
 * @api public
 */
Outlayer.prototype.layoutItems = function( items, isInstant ) {
  items = this._getItemsForLayout( items );

  this._layoutItems( items, isInstant );

  this._postLayout();
};

/**
 * get the items to be laid out
 * you may want to skip over some items
 * @param {Array} items
 * @returns {Array} items
 */
Outlayer.prototype._getItemsForLayout = function( items ) {
  var layoutItems = [];
  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    if ( !item.isIgnored ) {
      layoutItems.push( item );
    }
  }
  return layoutItems;
};

/**
 * layout items
 * @param {Array} items
 * @param {Boolean} isInstant
 */
Outlayer.prototype._layoutItems = function( items, isInstant ) {
  var _this = this;
  function onItemsLayout() {
    _this.emitEvent( 'layoutComplete', [ _this, items ] );
  }

  if ( !items || !items.length ) {
    // no items, emit event with empty array
    onItemsLayout();
    return;
  }

  // emit layoutComplete when done
  this._itemsOn( items, 'layout', onItemsLayout );

  var queue = [];

  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    // get x/y object from method
    var position = this._getItemLayoutPosition( item );
    // enqueue
    position.item = item;
    position.isInstant = isInstant || item.isLayoutInstant;
    queue.push( position );
  }

  this._processLayoutQueue( queue );
};

/**
 * get item layout position
 * @param {Outlayer.Item} item
 * @returns {Object} x and y position
 */
Outlayer.prototype._getItemLayoutPosition = function( /* item */ ) {
  return {
    x: 0,
    y: 0
  };
};

/**
 * iterate over array and position each item
 * Reason being - separating this logic prevents 'layout invalidation'
 * thx @paul_irish
 * @param {Array} queue
 */
Outlayer.prototype._processLayoutQueue = function( queue ) {
  for ( var i=0, len = queue.length; i < len; i++ ) {
    var obj = queue[i];
    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );
  }
};

/**
 * Sets position of item in DOM
 * @param {Outlayer.Item} item
 * @param {Number} x - horizontal position
 * @param {Number} y - vertical position
 * @param {Boolean} isInstant - disables transitions
 */
Outlayer.prototype._positionItem = function( item, x, y, isInstant ) {
  if ( isInstant ) {
    // if not transition, just set CSS
    item.goTo( x, y );
  } else {
    item.moveTo( x, y );
  }
};

/**
 * Any logic you want to do after each layout,
 * i.e. size the container
 */
Outlayer.prototype._postLayout = function() {
  this.resizeContainer();
};

Outlayer.prototype.resizeContainer = function() {
  if ( !this.options.isResizingContainer ) {
    return;
  }
  var size = this._getContainerSize();
  if ( size ) {
    this._setContainerMeasure( size.width, true );
    this._setContainerMeasure( size.height, false );
  }
};

/**
 * Sets width or height of container if returned
 * @returns {Object} size
 *   @param {Number} width
 *   @param {Number} height
 */
Outlayer.prototype._getContainerSize = noop;

/**
 * @param {Number} measure - size of width or height
 * @param {Boolean} isWidth
 */
Outlayer.prototype._setContainerMeasure = function( measure, isWidth ) {
  if ( measure === undefined ) {
    return;
  }

  var elemSize = this.size;
  // add padding and border width if border box
  if ( elemSize.isBorderBox ) {
    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
      elemSize.borderLeftWidth + elemSize.borderRightWidth :
      elemSize.paddingBottom + elemSize.paddingTop +
      elemSize.borderTopWidth + elemSize.borderBottomWidth;
  }

  measure = Math.max( measure, 0 );
  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
};

/**
 * trigger a callback for a collection of items events
 * @param {Array} items - Outlayer.Items
 * @param {String} eventName
 * @param {Function} callback
 */
Outlayer.prototype._itemsOn = function( items, eventName, callback ) {
  var doneCount = 0;
  var count = items.length;
  // event callback
  var _this = this;
  function tick() {
    doneCount++;
    if ( doneCount === count ) {
      callback.call( _this );
    }
    return true; // bind once
  }
  // bind callback
  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    item.on( eventName, tick );
  }
};

// -------------------------- ignore & stamps -------------------------- //


/**
 * keep item in collection, but do not lay it out
 * ignored items do not get skipped in layout
 * @param {Element} elem
 */
Outlayer.prototype.ignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    item.isIgnored = true;
  }
};

/**
 * return item to layout collection
 * @param {Element} elem
 */
Outlayer.prototype.unignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    delete item.isIgnored;
  }
};

/**
 * adds elements to stamps
 * @param {NodeList, Array, Element, or String} elems
 */
Outlayer.prototype.stamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ) {
    return;
  }

  this.stamps = this.stamps.concat( elems );
  // ignore
  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    this.ignore( elem );
  }
};

/**
 * removes elements to stamps
 * @param {NodeList, Array, or Element} elems
 */
Outlayer.prototype.unstamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ){
    return;
  }

  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    // filter out removed stamp elements
    removeFrom( elem, this.stamps );
    this.unignore( elem );
  }

};

/**
 * finds child elements
 * @param {NodeList, Array, Element, or String} elems
 * @returns {Array} elems
 */
Outlayer.prototype._find = function( elems ) {
  if ( !elems ) {
    return;
  }
  // if string, use argument as selector string
  if ( typeof elems === 'string' ) {
    elems = this.element.querySelectorAll( elems );
  }
  elems = makeArray( elems );
  return elems;
};

Outlayer.prototype._manageStamps = function() {
  if ( !this.stamps || !this.stamps.length ) {
    return;
  }

  this._getBoundingRect();

  for ( var i=0, len = this.stamps.length; i < len; i++ ) {
    var stamp = this.stamps[i];
    this._manageStamp( stamp );
  }
};

// update boundingLeft / Top
Outlayer.prototype._getBoundingRect = function() {
  // get bounding rect for container element
  var boundingRect = this.element.getBoundingClientRect();
  var size = this.size;
  this._boundingRect = {
    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
  };
};

/**
 * @param {Element} stamp
**/
Outlayer.prototype._manageStamp = noop;

/**
 * get x/y position of element relative to container element
 * @param {Element} elem
 * @returns {Object} offset - has left, top, right, bottom
 */
Outlayer.prototype._getElementOffset = function( elem ) {
  var boundingRect = elem.getBoundingClientRect();
  var thisRect = this._boundingRect;
  var size = getSize( elem );
  var offset = {
    left: boundingRect.left - thisRect.left - size.marginLeft,
    top: boundingRect.top - thisRect.top - size.marginTop,
    right: thisRect.right - boundingRect.right - size.marginRight,
    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
  };
  return offset;
};

// -------------------------- resize -------------------------- //

// enable event handlers for listeners
// i.e. resize -> onresize
Outlayer.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

/**
 * Bind layout to window resizing
 */
Outlayer.prototype.bindResize = function() {
  // bind just one listener
  if ( this.isResizeBound ) {
    return;
  }
  eventie.bind( window, 'resize', this );
  this.isResizeBound = true;
};

/**
 * Unbind layout to window resizing
 */
Outlayer.prototype.unbindResize = function() {
  if ( this.isResizeBound ) {
    eventie.unbind( window, 'resize', this );
  }
  this.isResizeBound = false;
};

// original debounce by John Hann
// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/

// this fires every resize
Outlayer.prototype.onresize = function() {
  if ( this.resizeTimeout ) {
    clearTimeout( this.resizeTimeout );
  }

  var _this = this;
  function delayed() {
    _this.resize();
    delete _this.resizeTimeout;
  }

  this.resizeTimeout = setTimeout( delayed, 100 );
};

// debounced, layout on resize
Outlayer.prototype.resize = function() {
  // don't trigger if size did not change
  // or if resize was unbound. See #9
  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
    return;
  }

  this.layout();
};

/**
 * check if layout is needed post layout
 * @returns Boolean
 */
Outlayer.prototype.needsResizeLayout = function() {
  var size = getSize( this.element );
  // check that this.size and size are there
  // IE8 triggers resize on body size change, so they might not be
  var hasSizes = this.size && size;
  return hasSizes && size.innerWidth !== this.size.innerWidth;
};

// -------------------------- methods -------------------------- //

/**
 * add items to Outlayer instance
 * @param {Array or NodeList or Element} elems
 * @returns {Array} items - Outlayer.Items
**/
Outlayer.prototype.addItems = function( elems ) {
  var items = this._itemize( elems );
  // add items to collection
  if ( items.length ) {
    this.items = this.items.concat( items );
  }
  return items;
};

/**
 * Layout newly-appended item elements
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.appended = function( elems ) {
  var items = this.addItems( elems );
  if ( !items.length ) {
    return;
  }
  // layout and reveal just the new items
  this.layoutItems( items, true );
  this.reveal( items );
};

/**
 * Layout prepended elements
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.prepended = function( elems ) {
  var items = this._itemize( elems );
  if ( !items.length ) {
    return;
  }
  // add items to beginning of collection
  var previousItems = this.items.slice(0);
  this.items = items.concat( previousItems );
  // start new layout
  this._resetLayout();
  this._manageStamps();
  // layout new stuff without transition
  this.layoutItems( items, true );
  this.reveal( items );
  // layout previous items
  this.layoutItems( previousItems );
};

/**
 * reveal a collection of items
 * @param {Array of Outlayer.Items} items
 */
Outlayer.prototype.reveal = function( items ) {
  var len = items && items.length;
  if ( !len ) {
    return;
  }
  for ( var i=0; i < len; i++ ) {
    var item = items[i];
    item.reveal();
  }
};

/**
 * hide a collection of items
 * @param {Array of Outlayer.Items} items
 */
Outlayer.prototype.hide = function( items ) {
  var len = items && items.length;
  if ( !len ) {
    return;
  }
  for ( var i=0; i < len; i++ ) {
    var item = items[i];
    item.hide();
  }
};

/**
 * get Outlayer.Item, given an Element
 * @param {Element} elem
 * @param {Function} callback
 * @returns {Outlayer.Item} item
 */
Outlayer.prototype.getItem = function( elem ) {
  // loop through items to get the one that matches
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    var item = this.items[i];
    if ( item.element === elem ) {
      // return item
      return item;
    }
  }
};

/**
 * get collection of Outlayer.Items, given Elements
 * @param {Array} elems
 * @returns {Array} items - Outlayer.Items
 */
Outlayer.prototype.getItems = function( elems ) {
  if ( !elems || !elems.length ) {
    return;
  }
  var items = [];
  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    var item = this.getItem( elem );
    if ( item ) {
      items.push( item );
    }
  }

  return items;
};

/**
 * remove element(s) from instance and DOM
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.remove = function( elems ) {
  elems = makeArray( elems );

  var removeItems = this.getItems( elems );
  // bail if no items to remove
  if ( !removeItems || !removeItems.length ) {
    return;
  }

  this._itemsOn( removeItems, 'remove', function() {
    this.emitEvent( 'removeComplete', [ this, removeItems ] );
  });

  for ( var i=0, len = removeItems.length; i < len; i++ ) {
    var item = removeItems[i];
    item.remove();
    // remove item from collection
    removeFrom( item, this.items );
  }
};

// ----- destroy ----- //

// remove and disable Outlayer instance
Outlayer.prototype.destroy = function() {
  // clean up dynamic styles
  var style = this.element.style;
  style.height = '';
  style.position = '';
  style.width = '';
  // destroy items
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    var item = this.items[i];
    item.destroy();
  }

  this.unbindResize();

  delete this.element.outlayerGUID;
  // remove data for jQuery
  if ( jQuery ) {
    jQuery.removeData( this.element, this.constructor.namespace );
  }

};

// -------------------------- data -------------------------- //

/**
 * get Outlayer instance from element
 * @param {Element} elem
 * @returns {Outlayer}
 */
Outlayer.data = function( elem ) {
  var id = elem && elem.outlayerGUID;
  return id && instances[ id ];
};


// -------------------------- create Outlayer class -------------------------- //

/**
 * create a layout class
 * @param {String} namespace
 */
Outlayer.create = function( namespace, options ) {
  // sub-class Outlayer
  function Layout() {
    Outlayer.apply( this, arguments );
  }
  // inherit Outlayer prototype, use Object.create if there
  if ( Object.create ) {
    Layout.prototype = Object.create( Outlayer.prototype );
  } else {
    extend( Layout.prototype, Outlayer.prototype );
  }
  // set contructor, used for namespace and Item
  Layout.prototype.constructor = Layout;

  Layout.defaults = extend( {}, Outlayer.defaults );
  // apply new options
  extend( Layout.defaults, options );
  // keep prototype.settings for backwards compatibility (Packery v1.2.0)
  Layout.prototype.settings = {};

  Layout.namespace = namespace;

  Layout.data = Outlayer.data;

  // sub-class Item
  Layout.Item = function LayoutItem() {
    Item.apply( this, arguments );
  };

  Layout.Item.prototype = new Item();

  // -------------------------- declarative -------------------------- //

  /**
   * allow user to initialize Outlayer via .js-namespace class
   * options are parsed from data-namespace-option attribute
   */
  docReady( function() {
    var dashedNamespace = toDashed( namespace );
    var elems = document.querySelectorAll( '.js-' + dashedNamespace );
    var dataAttr = 'data-' + dashedNamespace + '-options';

    for ( var i=0, len = elems.length; i < len; i++ ) {
      var elem = elems[i];
      var attr = elem.getAttribute( dataAttr );
      var options;
      try {
        options = attr && JSON.parse( attr );
      } catch ( error ) {
        // log error, do not initialize
        if ( console ) {
          console.error( 'Error parsing ' + dataAttr + ' on ' +
            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +
            error );
        }
        continue;
      }
      // initialize
      var instance = new Layout( elem, options );
      // make available via $().data('layoutname')
      if ( jQuery ) {
        jQuery.data( elem, namespace, instance );
      }
    }
  });

  // -------------------------- jQuery bridge -------------------------- //

  // make into jQuery plugin
  if ( jQuery && jQuery.bridget ) {
    jQuery.bridget( namespace, Layout );
  }

  return Layout;
};

// ----- fin ----- //

// back in global
Outlayer.Item = Item;

return Outlayer;

}

// -------------------------- transport -------------------------- //
if (typeof exports === 'object') {
  // CommonJS
  module.exports = outlayerDefinition(
    require('eventie'),
    require('doc-ready'),
    require('eventemitter'),
    require('get-size'),
    require('desandro-matches-selector'),
    require('./item')
  );
} else if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( [
      'eventie/eventie',
      'doc-ready/doc-ready',
      'eventEmitter/EventEmitter',
      'get-size/get-size',
      'matches-selector/matches-selector',
      './item'
    ],
    outlayerDefinition );
} else {
  // browser global
  window.Outlayer = outlayerDefinition(
    window.eventie,
    window.docReady,
    window.EventEmitter,
    window.getSize,
    window.matchesSelector,
    window.Outlayer.Item
  );
}

})( typeof window !== 'undefined' ? window : null );

},{"./item":670,"desandro-matches-selector":672,"doc-ready":673,"eventemitter":675,"eventie":676,"get-size":677}],680:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _React$findDOMNode = require('react');

var _React$findDOMNode2 = _interopRequireWildcard(_React$findDOMNode);

var _CSSPropertyOperations = require('react/lib/CSSPropertyOperations');

var _CSSPropertyOperations2 = _interopRequireWildcard(_CSSPropertyOperations);

var _shallowEqual = require('react/lib/shallowEqual');

var _shallowEqual2 = _interopRequireWildcard(_shallowEqual);

var Portal = (function (_React$Component) {
  function Portal() {
    _classCallCheck(this, Portal);

    _get(Object.getPrototypeOf(Portal.prototype), 'constructor', this).call(this);
    this.state = { active: false };
    this.openPortal = this.openPortal.bind(this);
    this.closePortal = this.closePortal.bind(this);
    this.handleOutsideMouseClick = this.handleOutsideMouseClick.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.portal = null;
    this.node = null;
  }

  _inherits(Portal, _React$Component);

  _createClass(Portal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.closeOnEsc) {
        document.addEventListener('keydown', this.handleKeydown);
      }

      if (this.props.closeOnOutsideClick) {
        document.addEventListener('mousedown', this.handleOutsideMouseClick);
        document.addEventListener('touchstart', this.handleOutsideMouseClick);
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.isOpened) {
        this.openPortal(this.props);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      // portal's 'is open' state is handled through the prop isOpened
      if (typeof newProps.isOpened !== 'undefined') {
        if (newProps.isOpened) {
          if (this.state.active) {
            this.renderPortal(newProps);
          } else {
            this.openPortal(newProps);
          }
        }
        if (!newProps.isOpened && this.state.active) {
          this.closePortal();
        }
      }

      // portal handles its own 'is open' state
      if (typeof newProps.isOpened === 'undefined' && this.state.active) {
        this.renderPortal(newProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.closeOnEsc) {
        document.removeEventListener('keydown', this.handleKeydown);
      }

      if (this.props.closeOnOutsideClick) {
        document.removeEventListener('mousedown', this.handleOutsideMouseClick);
        document.removeEventListener('touchstart', this.handleOutsideMouseClick);
      }

      this.closePortal();
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !_shallowEqual2['default'](this.props, nextProps) || !_shallowEqual2['default'](this.state, nextState);
    }
  }, {
    key: 'renderPortal',
    value: function renderPortal(props) {
      if (!this.node) {
        this.node = document.createElement('div');
        if (props.className) {
          this.node.className = props.className;
        }
        if (props.style) {
          _CSSPropertyOperations2['default'].setValueForStyles(this.node, props.style);
        }
        document.body.appendChild(this.node);
      }
      this.portal = _React$findDOMNode2['default'].render(_React$findDOMNode2['default'].cloneElement(props.children, { closePortal: this.closePortal }), this.node);
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.openByClickOn) {
        return _React$findDOMNode2['default'].createElement(
          'div',
          { className: 'openByClickOn', onClick: this.openPortal.bind(this, this.props) },
          this.props.openByClickOn
        );
      } else {
        return null;
      }
    }
  }, {
    key: 'openPortal',
    value: function openPortal(props, e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      this.setState({ active: true });
      this.renderPortal(props);
    }
  }, {
    key: 'closePortal',
    value: function closePortal() {
      if (this.node) {
        _React$findDOMNode2['default'].unmountComponentAtNode(this.node);
        document.body.removeChild(this.node);
      }
      this.portal = null;
      this.node = null;
      this.setState({ active: false });

      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: 'handleOutsideMouseClick',
    value: function handleOutsideMouseClick(e) {
      if (!this.state.active) {
        return;
      }
      if (isNodeInRoot(e.target, _React$findDOMNode.findDOMNode(this.portal))) {
        return;
      }
      e.stopPropagation();
      this.closePortal();
    }
  }, {
    key: 'handleKeydown',
    value: function handleKeydown(e) {
      // ESC
      if (e.keyCode === 27 && this.state.active) {
        this.closePortal();
      }
    }
  }]);

  return Portal;
})(_React$findDOMNode2['default'].Component);

exports['default'] = Portal;

Portal.propTypes = {
  className: _React$findDOMNode2['default'].PropTypes.string,
  style: _React$findDOMNode2['default'].PropTypes.object,
  children: _React$findDOMNode2['default'].PropTypes.element.isRequired,
  openByClickOn: _React$findDOMNode2['default'].PropTypes.element,
  closeOnEsc: _React$findDOMNode2['default'].PropTypes.bool,
  closeOnOutsideClick: _React$findDOMNode2['default'].PropTypes.bool,
  isOpened: _React$findDOMNode2['default'].PropTypes.bool,
  onClose: _React$findDOMNode2['default'].PropTypes.func
};

function isNodeInRoot(node, root) {
  while (node) {
    if (node === root) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
module.exports = exports['default'];
},{"react":"react","react/lib/CSSPropertyOperations":686,"react/lib/shallowEqual":840}],681:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * <TextareaAutosize />
 */

var _React = require('react');

var _React2 = _interopRequireWildcard(_React);

var _calculateNodeHeight = require('./calculateNodeHeight');

var _calculateNodeHeight2 = _interopRequireWildcard(_calculateNodeHeight);

var emptyFunction = function emptyFunction() {};

var TextareaAutosize = (function (_React$Component) {
  function TextareaAutosize(props) {
    _classCallCheck(this, TextareaAutosize);

    _get(Object.getPrototypeOf(TextareaAutosize.prototype), 'constructor', this).call(this, props);
    this.state = {
      height: null,
      minHeight: -Infinity,
      maxHeight: Infinity
    };
    this._onChange = this._onChange.bind(this);
    this._resizeComponent = this._resizeComponent.bind(this);
  }

  _inherits(TextareaAutosize, _React$Component);

  _createClass(TextareaAutosize, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var valueLink = _props.valueLink;
      var onChange = _props.onChange;

      var props = _objectWithoutProperties(_props, ['valueLink', 'onChange']);

      props = _extends({}, props);
      if (typeof valueLink === 'object') {
        props.value = this.props.valueLink.value;
      }
      props.style = _extends({}, props.style, {
        height: this.state.height
      });
      var maxHeight = Math.max(props.style.maxHeight ? props.style.maxHeight : Infinity, this.state.maxHeight);
      if (maxHeight < this.state.height) {
        props.style.overflow = 'hidden';
      }
      return _React2['default'].createElement('textarea', _extends({}, props, { onChange: this._onChange }));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._resizeComponent();
      window.addEventListener('resize', this._resizeComponent);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      // Re-render with the new content then recalculate the height as required.
      this.clearNextFrame();
      this.onNextFrameActionId = onNextFrame(this._resizeComponent);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      // Invoke callback when old height does not equal to new one.
      if (this.state.height !== prevState.height) {
        this.props.onHeightChange(this.state.height);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      //remove any scheduled events to prevent manipulating the node after it's
      //been unmounted
      this.clearNextFrame();
      window.removeEventListener('resize', this._resizeComponent);
    }
  }, {
    key: 'clearNextFrame',
    value: function clearNextFrame() {
      if (this.onNextFrameActionId) {
        clearNextFrameAction(this.onNextFrameActionId);
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange(e) {
      this._resizeComponent();
      var _props2 = this.props;
      var valueLink = _props2.valueLink;
      var onChange = _props2.onChange;

      if (valueLink) {
        valueLink.requestChange(e.target.value);
      } else {
        onChange(e);
      }
    }
  }, {
    key: '_resizeComponent',
    value: function _resizeComponent() {
      var useCacheForDOMMeasurements = this.props.useCacheForDOMMeasurements;

      this.setState(_calculateNodeHeight2['default'](_React2['default'].findDOMNode(this), useCacheForDOMMeasurements, this.props.rows || this.props.minRows, this.props.maxRows));
    }
  }, {
    key: 'value',

    /**
     * Read the current value of <textarea /> from DOM.
     */
    get: function () {
      return _React2['default'].findDOMNode(this).value;
    }
  }, {
    key: 'focus',

    /**
     * Put focus on a <textarea /> DOM element.
     */
    value: function focus() {
      _React2['default'].findDOMNode(this).focus();
    }
  }], [{
    key: 'propTypes',
    value: {
      /**
       * Current textarea value.
       */
      value: _React2['default'].PropTypes.string,

      /**
       * Callback on value change.
       */
      onChange: _React2['default'].PropTypes.func,

      /**
       * Callback on height changes.
       */
      onHeightChange: _React2['default'].PropTypes.func,

      /**
       * Try to cache DOM measurements performed by component so that we don't
       * touch DOM when it's not needed.
       *
       * This optimization doesn't work if we dynamically style <textarea />
       * component.
       */
      useCacheForDOMMeasurements: _React2['default'].PropTypes.bool,

      /**
       * Minimal numbder of rows to show.
       */
      rows: _React2['default'].PropTypes.number,

      /**
       * Alias for `rows`.
       */
      minRows: _React2['default'].PropTypes.number,

      /**
       * Maximum number of rows to show.
       */
      maxRows: _React2['default'].PropTypes.number
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      onChange: emptyFunction,
      onHeightChange: emptyFunction,
      useCacheForDOMMeasurements: false
    },
    enumerable: true
  }]);

  return TextareaAutosize;
})(_React2['default'].Component);

exports['default'] = TextareaAutosize;

function onNextFrame(cb) {
  if (window.requestAnimationFrame) {
    return window.requestAnimationFrame(cb);
  }
  return window.setTimeout(cb, 1);
}

function clearNextFrameAction(nextFrameId) {
  if (window.cancelAnimationFrame) {
    window.cancelAnimationFrame(nextFrameId);
  } else {
    window.clearTimeout(nextFrameId);
  }
}
module.exports = exports['default'];

},{"./calculateNodeHeight":682,"react":"react"}],682:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = calculateNodeHeight;
/**
 * calculateNodeHeight(uiTextNode, useCache = false)
 */

var HIDDEN_TEXTAREA_STYLE = '\n  height:0;\n  visibility:hidden;\n  overflow:hidden;\n  position:absolute;\n  z-index:-1000;\n  top:0;\n  right:0\n';

var SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];

var computedStyleCache = {};
var hiddenTextarea = undefined;

function calculateNodeHeight(uiTextNode) {
  var useCache = arguments[1] === undefined ? false : arguments[1];
  var minRows = arguments[2] === undefined ? null : arguments[2];
  var maxRows = arguments[3] === undefined ? null : arguments[3];

  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement('textarea');
    document.body.appendChild(hiddenTextarea);
  }

  // Copy all CSS properties that have an impact on the height of the content in
  // the textbox

  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache);

  var paddingSize = _calculateNodeStyling.paddingSize;
  var borderSize = _calculateNodeStyling.borderSize;
  var boxSizing = _calculateNodeStyling.boxSizing;
  var sizingStyle = _calculateNodeStyling.sizingStyle;

  // Need to have the overflow attribute to hide the scrollbar otherwise
  // text-lines will not calculated properly as the shadow will technically be
  // narrower for content
  hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);
  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';

  var minHeight = -Infinity;
  var maxHeight = Infinity;
  var height = hiddenTextarea.scrollHeight;

  if (boxSizing === 'border-box') {
    // border-box: add border, since height = content + padding + border
    height = height + borderSize;
  } else if (boxSizing === 'content-box') {
    // remove padding, since height = content
    height = height - paddingSize;
  }

  if (minRows !== null || maxRows !== null) {
    // measure height of a textarea with a single row
    hiddenTextarea.value = '';
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    if (minRows !== null) {
      minHeight = singleRowHeight * minRows;
      if (boxSizing === 'border-box') {
        minHeight = minHeight + paddingSize + borderSize;
      }
      height = Math.max(minHeight, height);
    }
    if (maxRows !== null) {
      maxHeight = singleRowHeight * maxRows;
      if (boxSizing === 'border-box') {
        maxHeight = maxHeight + paddingSize + borderSize;
      }
      height = Math.min(maxHeight, height);
    }
  }
  return { height: height, minHeight: minHeight, maxHeight: maxHeight };
}

function calculateNodeStyling(node) {
  var useCache = arguments[1] === undefined ? false : arguments[1];

  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');

  if (useCache && computedStyleCache[nodeRef]) {
    return computedStyleCache[nodeRef];
  }

  var style = window.getComputedStyle(node);

  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');

  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));

  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));

  var sizingStyle = SIZING_STYLE.map(function (name) {
    return '' + name + ':' + style.getPropertyValue(name);
  }).join(';');

  var nodeInfo = {
    sizingStyle: sizingStyle,
    paddingSize: paddingSize,
    borderSize: borderSize,
    boxSizing: boxSizing
  };

  if (useCache && nodeRef) {
    computedStyleCache[nodeRef] = nodeInfo;
  }

  return nodeInfo;
}
module.exports = exports['default'];

},{}],683:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

'use strict';

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":808}],684:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var FallbackCompositionState = require("./FallbackCompositionState");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}


/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(
    eventType,
    topLevelTargetID,
    nativeEvent
  );

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
      topLevelType === topLevelTypes.topCompositionEnd ||
      isFallbackCompositionEnd(topLevelType, nativeEvent)
    ) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(
    eventTypes.beforeInput,
    topLevelTargetID,
    nativeEvent
  );

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    return [
      extractCompositionEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ),
      extractBeforeInputEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      )
    ];
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":696,"./EventPropagators":701,"./ExecutionEnvironment":702,"./FallbackCompositionState":703,"./SyntheticCompositionEvent":781,"./SyntheticInputEvent":785,"./keyOf":831}],685:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],686:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))
},{"./CSSProperty":685,"./ExecutionEnvironment":702,"./camelizeStyleName":796,"./dangerousStyleValue":802,"./hyphenateStyleName":822,"./memoizeStringOnly":833,"./warning":844,"_process":646}],687:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        'Mismatched list of contexts in callback queue'
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./Object.assign":709,"./PooledClass":710,"./invariant":824,"_process":646}],688:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    (!('documentMode' in document) || document.documentMode > 8)
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    (!('documentMode' in document) || document.documentMode > 9)
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":696,"./EventPluginHub":698,"./EventPropagators":701,"./ExecutionEnvironment":702,"./ReactUpdates":775,"./SyntheticEvent":783,"./isEventSupported":825,"./isTextInputElement":827,"./keyOf":831}],689:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],690:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var setTextContent = require("./setTextContent");
var invariant = require("./invariant");

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":693,"./ReactMultiChildUpdateTypes":756,"./invariant":824,"./setTextContent":839,"_process":646}],691:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

'use strict';

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],692:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");

var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property %s. Did you mean %s?',
      name,
      standardName
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
      quoteAttributeValueForBrowser(id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return attributeName;
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":691,"./quoteAttributeValueForBrowser":837,"./warning":844,"_process":646}],693:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            'Danger: Discarding unexpected node:',
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See React.renderToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":702,"./createNodesFromMarkup":801,"./emptyFunction":803,"./getMarkupWrap":816,"./invariant":824,"_process":646}],694:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":831}],695:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":696,"./EventPropagators":701,"./ReactMount":754,"./SyntheticMouseEvent":787,"./keyOf":831}],696:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":830}],697:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":803,"_process":646}],698:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid =
    InstanceHandle &&
    InstanceHandle.traverseTwoPhase &&
    InstanceHandle.traverseEnterLeave;
  ("production" !== process.env.NODE_ENV ? invariant(
    valid,
    'InstanceHandle not injected before use!'
  ) : invariant(valid));
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":699,"./EventPluginUtils":700,"./accumulateInto":793,"./forEachAccumulated":809,"./invariant":824,"_process":646}],699:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],700:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, cb) {
  forEachEventDispatch(event, cb);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":696,"./invariant":824,"_process":646}],701:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":696,"./EventPluginHub":698,"./accumulateInto":793,"./forEachAccumulated":809,"_process":646}],702:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  (typeof window !== 'undefined' &&
  window.document && window.document.createElement)
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],703:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

},{"./Object.assign":709,"./PooledClass":710,"./getTextContentAccessor":819}],704:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // property is supported for OpenGraph in meta tags.
    property: null,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":691,"./ExecutionEnvironment":702}],705:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedStateMixin
 * @typechecks static-only
 */

'use strict';

var ReactLink = require("./ReactLink");
var ReactStateSetters = require("./ReactStateSetters");

/**
 * A simple mixin around ReactLink.forState().
 */
var LinkedStateMixin = {
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update. Note: you may want to use keyOf()
   * if you're using Google Closure Compiler advanced mode.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function(key) {
    return new ReactLink(
      this.state[key],
      ReactStateSetters.createStateKeySetter(this, key)
    );
  }
};

module.exports = LinkedStateMixin;

},{"./ReactLink":752,"./ReactStateSetters":771}],706:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":763,"./invariant":824,"_process":646}],707:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

'use strict';

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    var node = this.getDOMNode();
    ("production" !== process.env.NODE_ENV ? invariant(
      node,
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
    ) : invariant(node));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      node
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":713,"./accumulateInto":793,"./forEachAccumulated":809,"./invariant":824,"_process":646}],708:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":696,"./emptyFunction":803}],709:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;

},{}],710:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],711:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactClass = require("./ReactClass");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactReconciler = require("./ReactReconciler");
var ReactServerRendering = require("./ReactServerRendering");

var assign = require("./Object.assign");
var findDOMNode = require("./findDOMNode");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  Component: ReactComponent,
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactClass.createClass,
  createElement: createElement,
  cloneElement: cloneElement,
  createFactory: createFactory,
  createMixin: function(mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  findDOMNode: findDOMNode,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'https://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'https://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

React.version = '0.13.3';

module.exports = React;

}).call(this,require('_process'))
},{"./EventPluginUtils":700,"./ExecutionEnvironment":702,"./Object.assign":709,"./ReactChildren":715,"./ReactClass":716,"./ReactComponent":717,"./ReactContext":721,"./ReactCurrentOwner":722,"./ReactDOM":723,"./ReactDOMTextComponent":734,"./ReactDefaultInjection":737,"./ReactElement":740,"./ReactElementValidator":741,"./ReactInstanceHandles":749,"./ReactMount":754,"./ReactPerf":759,"./ReactPropTypes":763,"./ReactReconciler":766,"./ReactServerRendering":769,"./findDOMNode":806,"./onlyChild":834,"_process":646}],712:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var findDOMNode = require("./findDOMNode");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./findDOMNode":806}],713:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function() {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":696,"./EventPluginHub":698,"./EventPluginRegistry":699,"./Object.assign":709,"./ReactEventEmitterMixin":744,"./ViewportMetrics":792,"./isEventSupported":825}],714:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require("./ReactReconciler");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {

  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function(nestedChildNodes, transaction, context) {
    var children = flattenChildren(nestedChildNodes);
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        // The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    var nextChildren = flattenChildren(nextNestedChildNodes);
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
          prevChild, nextElement, transaction, context
        );
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(
          nextElement,
          null
        );
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function(renderedChildren) {
    for (var name in renderedChildren) {
      var renderedChild = renderedChildren[name];
      ReactReconciler.unmountComponent(renderedChild);
    }
  }

};

module.exports = ReactChildReconciler;

},{"./ReactReconciler":766,"./flattenChildren":807,"./instantiateReactComponent":823,"./shouldUpdateReactComponent":841}],715:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactFragment = require("./ReactFragment");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'ReactChildren.map(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return ReactFragment.create(mapResult);
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":710,"./ReactFragment":746,"./traverseAllChildren":843,"./warning":844,"_process":646}],716:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require("./ReactComponent");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdateQueue = require("./ReactUpdateQueue");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        childContextTypes,
        ReactPropTypeLocations.childContext
      );
    }
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        contextTypes,
        ReactPropTypeLocations.context
      );
    }
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        propTypes,
        ReactPropTypeLocations.prop
      );
    }
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      ("production" !== process.env.NODE_ENV ? warning(
        typeof typeDef[propName] === 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec !== 'function',
    'ReactClass: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactClass: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactClass: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys(): ' +
        'Tried to merge two objects with the same key: `%s`. This conflict ' +
        'may be due to a mixin; in particular, this may be caused by two ' +
        'getInitialState() or getDefaultProps() methods returning objects ' +
        'with clashing keys.',
        key
      ) : invariant(one[key] === undefined));
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== process.env.NODE_ENV) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): React component methods may only be bound to the ' +
          'component instance. See %s',
          componentName
        ) : null);
      } else if (!args.length) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): You are binding a component method to the component. ' +
          'React does this for you automatically in a high-performance ' +
          'way, so you can safely remove this call. See %s',
          componentName
        ) : null);
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(
        component,
        ReactErrorUtils.guard(
          method,
          component.constructor.displayName + '.' + autoBindKey
        )
      );
    }
  }
}

var typeDeprecationDescriptor = {
  enumerable: false,
  get: function() {
    var displayName = this.displayName || this.name || 'Component';
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      '%s.type is deprecated. Use %s directly to access the class.',
      displayName,
      displayName
    ) : null);
    Object.defineProperty(this, 'type', {
      value: this
    });
    return this;
  }
};

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function(newState, callback) {
    ReactUpdateQueue.enqueueReplaceState(this, newState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    if ("production" !== process.env.NODE_ENV) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing isMounted inside its render() function. ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(this);
    return (
      internalInstance &&
      internalInstance !== ReactLifeCycle.currentlyMountingInstance
    );
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function(partialProps, callback) {
    ReactUpdateQueue.enqueueSetProps(this, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function(newProps, callback) {
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function() {};
assign(
  ReactClassComponent.prototype,
  ReactComponent.prototype,
  ReactClassMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, context) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
          'JSX instead. See: https://fb.me/react-legacyfactory'
        ) : null);
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== process.env.NODE_ENV) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== process.env.NODE_ENV) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        spec.displayName || 'A component'
      ) : null);
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    // Legacy hook
    Constructor.type = Constructor;
    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

}).call(this,require('_process'))
},{"./Object.assign":709,"./ReactComponent":717,"./ReactCurrentOwner":722,"./ReactElement":740,"./ReactErrorUtils":743,"./ReactInstanceMap":750,"./ReactLifeCycle":751,"./ReactPropTypeLocationNames":761,"./ReactPropTypeLocations":762,"./ReactUpdateQueue":774,"./invariant":824,"./keyMirror":830,"./keyOf":831,"./warning":844,"_process":646}],717:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactUpdateQueue = require("./ReactUpdateQueue");

var invariant = require("./invariant");
var warning = require("./warning");

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context) {
  this.props = props;
  this.context = context;
}

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function(partialState, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof partialState === 'object' ||
    typeof partialState === 'function' ||
    partialState == null,
    'setState(...): takes an object of state variables to update or a ' +
    'function which returns an object of state variables.'
  ) : invariant(typeof partialState === 'object' ||
  typeof partialState === 'function' ||
  partialState == null));
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      partialState != null,
      'setState(...): You passed an undefined or null state object; ' +
      'instead, use forceUpdate().'
    ) : null);
  }
  ReactUpdateQueue.enqueueSetState(this, partialState);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function(callback) {
  ReactUpdateQueue.enqueueForceUpdate(this);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== process.env.NODE_ENV) {
  var deprecatedAPIs = {
    getDOMNode: [
      'getDOMNode',
      'Use React.findDOMNode(component) instead.'
    ],
    isMounted: [
      'isMounted',
      'Instead, make sure to clean up subscriptions and pending requests in ' +
      'componentWillUnmount to prevent memory leaks.'
    ],
    replaceProps: [
      'replaceProps',
      'Instead, call React.render again at the top level.'
    ],
    replaceState: [
      'replaceState',
      'Refactor your code to use setState instead (see ' +
      'https://github.com/facebook/react/issues/3236).'
    ],
    setProps: [
      'setProps',
      'Instead, call React.render again at the top level.'
    ]
  };
  var defineDeprecationWarning = function(methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function() {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            '%s(...) is deprecated in plain JavaScript React classes. %s',
            info[0],
            info[1]
          ) : null);
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./ReactUpdateQueue":774,"./invariant":824,"./warning":844,"_process":646}],718:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

'use strict';

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMount = require("./ReactMount");

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":727,"./ReactMount":754}],719:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require("./invariant");

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function(environment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactCompositeComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      ReactComponentEnvironment.unmountIDFromEnvironment =
        environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID =
        environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates =
        environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],720:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._isTopLevel = false;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(this._currentElement._context);

    var Component = ReactNativeComponent.getComponentClassForElement(
      this._currentElement
    );

    // Initialize the public class
    var inst = new Component(publicProps, publicContext);

    if ("production" !== process.env.NODE_ENV) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      ("production" !== process.env.NODE_ENV ? warning(
        inst.render != null,
        '%s(...): No `render` method found on the returned component ' +
        'instance: you may have forgotten to define `render` in your ' +
        'component or you may have accidentally tried to render an element ' +
        'whose type is a function that isn\'t a React component.',
        Component.displayName || Component.name || 'Component'
      ) : null);
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== process.env.NODE_ENV) {
      this._warnIfContextsDiffer(this._currentElement._context, context);
    }

    if ("production" !== process.env.NODE_ENV) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getInitialState ||
        inst.getInitialState.isReactClassApproved,
        'getInitialState was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Did you mean to define a state property instead?',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getDefaultProps ||
        inst.getDefaultProps.isReactClassApproved,
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Use a static property to define defaultProps instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.propTypes,
        'propTypes was defined as an instance property on %s. Use a static ' +
        'property to define propTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.contextTypes,
        'contextTypes was defined as an instance property on %s. Use a ' +
        'static property to define contextTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        typeof inst.componentShouldUpdate !== 'function',
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        (this.getName() || 'A component')
      ) : null);
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof initialState === 'object' && !Array.isArray(initialState),
      '%s.state: must be set to an object or null',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var childContext;
    var renderedElement;

    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
    ReactLifeCycle.currentlyMountingInstance = this;
    try {
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      childContext = this._getValidatedChildContext(context);
      renderedElement = this._renderValidatedComponent(childContext);
    } finally {
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
    }

    this._renderedComponent = this._instantiateReactComponent(
      renderedElement,
      this._currentElement.type // The wrapping type
    );

    var markup = ReactReconciler.mountComponent(
      this._renderedComponent,
      rootID,
      transaction,
      this._mergeChildContext(context, childContext)
    );
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
      ReactLifeCycle.currentlyUnmountingInstance = this;
      try {
        inst.componentWillUnmount();
      } finally {
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
      }
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;

    // Reset pending fields
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins.
    if (typeof this._currentElement.type === 'string') {
      return emptyObject;
    }
    var contextTypes = this._currentElement.type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.contextTypes) {
        this._checkPropTypes(
          Component.contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _getValidatedChildContext: function(currentContext) {
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof inst.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          inst.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in inst.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          this.getName() || 'ReactCompositeComponent',
          name
        ) : invariant(name in inst.constructor.childContextTypes));
      }
      return childContext;
    }
    return null;
  },

  _mergeChildContext: function(currentContext, childContext) {
    if (childContext) {
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.propTypes) {
        this._checkPropTypes(
          Component.propTypes,
          newProps,
          ReactPropTypeLocations.prop
        );
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== process.env.NODE_ENV ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Composite propType: %s%s',
              error.message,
              addendum
            ) : null);
          } else {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Context Types: %s%s',
              error.message,
              addendum
            ) : null);
          }
        }
      }
    }
  },

  receiveComponent: function(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
      transaction,
      prevElement,
      nextElement,
      prevContext,
      nextContext
    );
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
        this,
        this._pendingElement || this._currentElement,
        transaction,
        this._context
      );
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      if ("production" !== process.env.NODE_ENV) {
        ReactElementValidator.checkAndWarnForMutatedProps(
          this._currentElement
        );
      }

      this.updateComponent(
        transaction,
        this._currentElement,
        this._currentElement,
        this._context,
        this._context
      );
    }
  },

  /**
   * Compare two contexts, warning if they are different
   * TODO: Remove this check when owner-context is removed
   */
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
    ownerBasedContext = this._maskContext(ownerBasedContext);
    parentBasedContext = this._maskContext(parentBasedContext);
    var parentKeys = Object.keys(parentBasedContext).sort();
    var displayName = this.getName() || 'ReactCompositeComponent';
    for (var i = 0; i < parentKeys.length; i++) {
      var key = parentKeys[i];
      ("production" !== process.env.NODE_ENV ? warning(
        ownerBasedContext[key] === parentBasedContext[key],
        'owner-based and parent-based contexts differ '  +
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
        '(see: http://fb.me/react-context-by-parent)',
        ownerBasedContext[key],
        parentBasedContext[key],
        key,
        displayName
      ) : null);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function(
    transaction,
    prevParentElement,
    nextParentElement,
    prevUnmaskedContext,
    nextUnmaskedContext
  ) {
    var inst = this._instance;

    var nextContext = inst.context;
    var nextProps = inst.props;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement !== nextParentElement) {
      nextContext = this._processContext(nextParentElement._context);
      nextProps = this._processProps(nextParentElement.props);

      if ("production" !== process.env.NODE_ENV) {
        if (nextUnmaskedContext != null) {
          this._warnIfContextsDiffer(
            nextParentElement._context,
            nextUnmaskedContext
          );
        }
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate =
      this._pendingForceUpdate ||
      !inst.shouldComponentUpdate ||
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        typeof shouldUpdate !== 'undefined',
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
        'boolean value. Make sure to return true or false.',
        this.getName() || 'ReactCompositeComponent'
      ) : null);
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextParentElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        nextUnmaskedContext
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(
        nextState,
        typeof partial === 'function' ?
          partial.call(inst, nextState, props, context) :
          partial
      );
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction,
    unmaskedContext
  ) {
    var inst = this._instance;

    var prevProps = inst.props;
    var prevState = inst.state;
    var prevContext = inst.context;

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (inst.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
        inst
      );
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var childContext = this._getValidatedChildContext();
    var nextRenderedElement = this._renderValidatedComponent(childContext);
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
        prevComponentInstance,
        nextRenderedElement,
        transaction,
        this._mergeChildContext(context, childContext)
      );
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(
        nextRenderedElement,
        this._currentElement.type
      );
      var nextMarkup = ReactReconciler.mountComponent(
        this._renderedComponent,
        thisID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(
      prevComponentID,
      nextMarkup
    );
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function() {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== process.env.NODE_ENV) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function(childContext) {
    var renderedComponent;
    var previousContext = ReactContext.current;
    ReactContext.current = this._mergeChildContext(
      this._currentElement._context,
      childContext
    );
    ReactCurrentOwner.current = this;
    try {
      renderedComponent =
        this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactContext.current = previousContext;
      ReactCurrentOwner.current = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false ||
      ReactElement.isValidElement(renderedComponent),
      '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false ||
    ReactElement.isValidElement(renderedComponent)));
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function(ref, component) {
    var inst = this.getPublicInstance();
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
    refs[ref] = component.getPublicInstance();
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || (constructor && constructor.displayName) ||
      type.name || (constructor && constructor.name) ||
      null
    );
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by React.render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function() {
    return this._instance;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(
  ReactCompositeComponentMixin,
  'ReactCompositeComponent',
  {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  }
);

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./Object.assign":709,"./ReactComponentEnvironment":719,"./ReactContext":721,"./ReactCurrentOwner":722,"./ReactElement":740,"./ReactElementValidator":741,"./ReactInstanceMap":750,"./ReactLifeCycle":751,"./ReactNativeComponent":757,"./ReactPerf":759,"./ReactPropTypeLocationNames":761,"./ReactPropTypeLocations":762,"./ReactReconciler":766,"./ReactUpdates":775,"./emptyObject":804,"./invariant":824,"./shouldUpdateReactComponent":841,"./warning":844,"_process":646}],721:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

'use strict';

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var warning = require("./warning");

var didWarn = false;

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: emptyObject,

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        didWarn,
        'withContext is deprecated and will be removed in a future version. ' +
        'Use a wrapper component with getChildContext instead.'
      ) : null);

      didWarn = true;
    }

    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

}).call(this,require('_process'))
},{"./Object.assign":709,"./emptyObject":804,"./warning":844,"_process":646}],722:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],723:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactElement":740,"./ReactElementValidator":741,"./mapObject":832,"_process":646}],724:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var keyMirror = require("./keyMirror");

var button = ReactElement.createFactory('button');

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactClass.createClass({
  displayName: 'ReactDOMButton',
  tagName: 'BUTTON',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":683,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740,"./keyMirror":830}],725:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var warning = require("./warning");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * Optionally injectable operations for mutating the DOM
 */
var BackendIDOperations = null;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (props.dangerouslySetInnerHTML != null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      props.children == null,
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
    ) : invariant(props.children == null));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof props.dangerouslySetInnerHTML === 'object' &&
      '__html' in props.dangerouslySetInnerHTML,
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
      'for more information.'
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
    '__html' in props.dangerouslySetInnerHTML));
  }
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      props.innerHTML == null,
      'Directly setting property `innerHTML` is not permitted. ' +
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
    ) : null);
    ("production" !== process.env.NODE_ENV ? warning(
      !props.contentEditable || props.children == null,
      'A component is `contentEditable` and contains `children` managed by ' +
      'React. It is now your responsibility to guarantee that none of ' +
      'those nodes are unexpectedly modified or duplicated. This is ' +
      'probably not intentional.'
    ) : null);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
    'using JSX.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    ("production" !== process.env.NODE_ENV ? warning(
      registrationName !== 'onScroll' || isEventSupported('scroll', true),
      'This browser doesn\'t support the `onScroll` event'
    ) : null);
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(
  ReactDOMComponent.prototype,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin
);

ReactDOMComponent.injection = {
  injectIDOperations: function(IDOperations) {
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
  }
};

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":686,"./DOMProperty":691,"./DOMPropertyOperations":692,"./Object.assign":709,"./ReactBrowserEventEmitter":713,"./ReactComponentBrowserEnvironment":718,"./ReactMount":754,"./ReactMultiChild":755,"./ReactPerf":759,"./escapeTextContentForBrowser":805,"./invariant":824,"./isEventSupported":825,"./keyOf":831,"./warning":844,"_process":646}],726:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var form = ReactElement.createFactory('form');

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactClass.createClass({
  displayName: 'ReactDOMForm',
  tagName: 'FORM',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":696,"./LocalEventTrapMixin":707,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740}],727:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactDOMComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
    DOMPropertyOperations.deleteValueForProperty(node, name, value);
  },

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: function(id, styles) {
    var node = ReactMount.getNode(id);
    CSSPropertyOperations.setValueForStyles(node, styles);
  },

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: function(id, html) {
    var node = ReactMount.getNode(id);
    setInnerHTML(node, html);
  },

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: function(id, content) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.updateTextContent(node, content);
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function(updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  updatePropertyByID: 'updatePropertyByID',
  deletePropertyByID: 'deletePropertyByID',
  updateStylesByID: 'updateStylesByID',
  updateInnerHTMLByID: 'updateInnerHTMLByID',
  updateTextContentByID: 'updateTextContentByID',
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":686,"./DOMChildrenOperations":690,"./DOMPropertyOperations":692,"./ReactMount":754,"./ReactPerf":759,"./invariant":824,"./setInnerHTML":838,"_process":646}],728:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIframe
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var iframe = ReactElement.createFactory('iframe');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <iframe> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <iframe> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMIframe = ReactClass.createClass({
  displayName: 'ReactDOMIframe',
  tagName: 'IFRAME',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return iframe(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
  }
});

module.exports = ReactDOMIframe;

},{"./EventConstants":696,"./LocalEventTrapMixin":707,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740}],729:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var img = ReactElement.createFactory('img');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactClass.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":696,"./LocalEventTrapMixin":707,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740}],730:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var input = ReactElement.createFactory('input');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactClass.createClass({
  displayName: 'ReactDOMInput',
  tagName: 'INPUT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":683,"./DOMPropertyOperations":692,"./LinkedValueUtils":706,"./Object.assign":709,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740,"./ReactMount":754,"./ReactUpdates":775,"./invariant":824,"_process":646}],731:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var warning = require("./warning");

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740,"./warning":844,"_process":646}],732:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0, l = options.length; i < l; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactClass.createClass({
  displayName: 'ReactDOMSelect',
  tagName: 'SELECT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentWillMount: function() {
    this._pendingUpdate = false;
  },

  componentDidMount: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    } else if (this.props.defaultValue != null) {
      updateOptions(this, this.props.defaultValue);
    }
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      this._pendingUpdate = false;
      updateOptions(this, value);
    } else if (!prevProps.multiple !== !this.props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(this, this.props.multiple ? [] : '');
      }
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    this._pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":683,"./LinkedValueUtils":706,"./Object.assign":709,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740,"./ReactUpdates":775}],733:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = (
  ExecutionEnvironment.canUseDOM &&
  'selection' in document &&
  !('getSelection' in window)
);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":702,"./getNodeForCharacterOffset":817,"./getTextContentAccessor":819}],734:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDOMComponent = require("./ReactDOMComponent");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function(props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function(text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    var escapedText = escapeTextContentForBrowser(this._stringText);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
          this._rootNodeID,
          nextStringText
        );
      }
    }
  },

  unmountComponent: function() {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;

},{"./DOMPropertyOperations":692,"./Object.assign":709,"./ReactComponentBrowserEnvironment":718,"./ReactDOMComponent":725,"./escapeTextContentForBrowser":805}],735:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

var textarea = ReactElement.createFactory('textarea');

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactClass.createClass({
  displayName: 'ReactDOMTextarea',
  tagName: 'TEXTAREA',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":683,"./DOMPropertyOperations":692,"./LinkedValueUtils":706,"./Object.assign":709,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactElement":740,"./ReactUpdates":775,"./invariant":824,"./warning":844,"_process":646}],736:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b, c, d) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d);
    } else {
      transaction.perform(callback, null, a, b, c, d);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":709,"./ReactUpdates":775,"./Transaction":791,"./emptyFunction":803}],737:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactDOMIframe = require("./ReactDOMIframe");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactElement = require("./ReactElement");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function autoGenerateWrapperClass(type) {
  return ReactClass.createClass({
    tagName: type.toUpperCase(),
    render: function() {
      return new ReactElement(
        type,
        null,
        null,
        null,
        null,
        this.props
      );
    }
  });
}

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectTextComponentClass(
    ReactDOMTextComponent
  );

  ReactInjection.NativeComponent.injectAutoWrapper(
    autoGenerateWrapperClass
  );

  // This needs to happen before createFullPageComponent() otherwise the mixin
  // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":684,"./ChangeEventPlugin":688,"./ClientReactRootIndex":689,"./DefaultEventPluginOrder":694,"./EnterLeaveEventPlugin":695,"./ExecutionEnvironment":702,"./HTMLDOMPropertyConfig":704,"./MobileSafariClickEventPlugin":708,"./ReactBrowserComponentMixin":712,"./ReactClass":716,"./ReactComponentBrowserEnvironment":718,"./ReactDOMButton":724,"./ReactDOMComponent":725,"./ReactDOMForm":726,"./ReactDOMIDOperations":727,"./ReactDOMIframe":728,"./ReactDOMImg":729,"./ReactDOMInput":730,"./ReactDOMOption":731,"./ReactDOMSelect":732,"./ReactDOMTextComponent":734,"./ReactDOMTextarea":735,"./ReactDefaultBatchingStrategy":736,"./ReactDefaultPerf":738,"./ReactElement":740,"./ReactEventListener":745,"./ReactInjection":747,"./ReactInstanceHandles":749,"./ReactMount":754,"./ReactReconcileTransaction":765,"./SVGDOMPropertyConfig":776,"./SelectEventPlugin":777,"./ServerReactRootIndex":778,"./SimpleEventPlugin":779,"./createFullPageComponent":800,"_process":646}],738:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":691,"./ReactDefaultPerfAnalysis":739,"./ReactMount":754,"./ReactPerf":759,"./performanceNow":836}],739:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":709}],740:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var assign = require("./Object.assign");
var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the %s property of the React element. Instead, ' +
        'specify the correct value when initially creating the element.',
        key
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = {props: props, originalProps: assign({}, props)};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    try {
      Object.defineProperty(this._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true
      });
    } catch (x) {
    }
    this._store.validated = false;

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

ReactElement.cloneElement = function(element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return new ReactElement(
    element.type,
    key,
    ref,
    owner,
    element._context,
    props
  );
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))
},{"./Object.assign":709,"./ReactContext":721,"./ReactCurrentOwner":722,"./warning":844,"_process":646}],741:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactNativeComponent = require("./ReactNativeComponent");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the instance's name for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getName(instance) {
  var publicInstance = instance && instance.getPublicInstance();
  if (!publicInstance) {
    return undefined;
  }
  var constructor = publicInstance.constructor;
  if (!constructor) {
    return undefined;
  }
  return constructor.displayName || constructor.name || undefined;
}

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return (
    current && getName(current) || undefined
  );
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  warnAndMonitorForKeyUse(
    'Each child in an array or iterator should have a unique "key" prop.',
    element,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validatePropertyKey(name, element, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'Child objects should have non-numeric keys so ordering is preserved.',
    element,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} message The base warning that gets output.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function warnAndMonitorForKeyUse(message, element, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = typeof parentType === 'string' ?
    parentType : parentType.displayName || parentType.name;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[message] || (
    (ownerHasKeyUseWarning[message] = {})
  );
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  var parentOrOwnerAddendum =
    ownerName ? (" Check the render method of " + ownerName + ".") :
    parentName ? (" Check the React.render call using <" + parentName + ">.") :
    '';

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    message + '%s%s See https://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== process.env.NODE_ENV ? invariant(
          typeof propTypes[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          componentName || 'React class',
          ReactPropTypeLocationNames[location],
          propName
        ) : invariant(typeof propTypes[propName] === 'function'));
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(this);
        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }
    }
  }
}

var warnedPropsMutations = {};

/**
 * Warn about mutating props when setting `propName` on `element`.
 *
 * @param {string} propName The string key within props that was set
 * @param {ReactElement} element
 */
function warnForPropsMutation(propName, element) {
  var type = element.type;
  var elementName = typeof type === 'string' ? type : type.displayName;
  var ownerName = element._owner ?
    element._owner.getPublicInstance().constructor.displayName : null;

  var warningKey = propName + '|' + elementName + '|' + ownerName;
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
    return;
  }
  warnedPropsMutations[warningKey] = true;

  var elementInfo = '';
  if (elementName) {
    elementInfo = ' <' + elementName + ' />';
  }
  var ownerInfo = '';
  if (ownerName) {
    ownerInfo = ' The element was created by ' + ownerName + '.';
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
    'correct value when initially creating the element or use ' +
    'React.cloneElement to make a new element with updated props.%s',
    propName,
    elementInfo,
    ownerInfo
  ) : null);
}

// Inline Object.is polyfill
function is(a, b) {
  if (a !== a) {
    // NaN
    return b !== b;
  }
  if (a === 0 && b === 0) {
    // +-0
    return 1 / a === 1 / b;
  }
  return a === b;
}

/**
 * Given an element, check if its props have been mutated since element
 * creation (or the last call to this function). In particular, check if any
 * new props have been added, which we can't directly catch by defining warning
 * properties on the props object.
 *
 * @param {ReactElement} element
 */
function checkAndWarnForMutatedProps(element) {
  if (!element._store) {
    // Element was created using `new ReactElement` directly or with
    // `ReactElement.createElement`; skip mutation checking
    return;
  }

  var originalProps = element._store.originalProps;
  var props = element.props;

  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
        warnForPropsMutation(propName, element);

        // Copy over the new value so that the two props objects match again
        originalProps[propName] = props[propName];
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  if (element.type == null) {
    // This has already warned. Don't throw.
    return;
  }
  // Extract the component class from the element. Converts string types
  // to a composite class which may have propTypes.
  // TODO: Validating a string's propTypes is not decoupled from the
  // rendering target which is problematic.
  var componentClass = ReactNativeComponent.getComponentClassForElement(
    element
  );
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(
      name,
      componentClass.propTypes,
      element.props,
      ReactPropTypeLocations.prop
    );
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    ("production" !== process.env.NODE_ENV ? warning(
      componentClass.getDefaultProps.isReactClassApproved,
      'getDefaultProps is only used on classic React.createClass ' +
      'definitions. Use a static property named `defaultProps` instead.'
    ) : null);
  }
}

var ReactElementValidator = {

  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(
          validatedFactory,
          'type',
          {
            enumerable: false,
            get: function() {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'Factory.type is deprecated. Access the class directly ' +
                'before passing it to createFactory.'
              ) : null);
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          }
        );
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }


    return validatedFactory;
  },

  cloneElement: function(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":722,"./ReactElement":740,"./ReactFragment":746,"./ReactNativeComponent":757,"./ReactPropTypeLocationNames":761,"./ReactPropTypeLocations":762,"./getIteratorFn":815,"./invariant":824,"./warning":844,"_process":646}],742:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

var ReactEmptyComponentType = function() {};
ReactEmptyComponentType.prototype.componentDidMount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Make sure we run these methods in the correct order, we shouldn't
  // need this check. We're going to assume if we're here it means we ran
  // componentWillUnmount already so there is no internal instance (it gets
  // removed as part of the unmounting process).
  if (!internalInstance) {
    return;
  }
  registerNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.componentWillUnmount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Get rid of this check. See TODO in componentDidMount.
  if (!internalInstance) {
    return;
  }
  deregisterNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.render = function() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
};

var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

var ReactEmptyComponent = {
  emptyElement: emptyElement,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./ReactElement":740,"./ReactInstanceMap":750,"./invariant":824,"_process":646}],743:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],744:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":698}],745:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":697,"./ExecutionEnvironment":702,"./Object.assign":709,"./PooledClass":710,"./ReactInstanceHandles":749,"./ReactMount":754,"./ReactUpdates":775,"./getEventTarget":814,"./getUnboundedScrollPosition":820}],746:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactFragment
*/

'use strict';

var ReactElement = require("./ReactElement");

var warning = require("./warning");

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set a fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is opaque, for now.
 */

if ("production" !== process.env.NODE_ENV) {
  var fragmentKey = '_reactFragment';
  var didWarnKey = '_reactDidWarn';
  var canWarnForReactFragment = false;

  try {
    // Feature test. Don't even try to issue this warning if we can't use
    // enumerable: false.

    var dummy = function() {
      return 1;
    };

    Object.defineProperty(
      {},
      fragmentKey,
      {enumerable: false, value: true}
    );

    Object.defineProperty(
      {},
      'key',
      {enumerable: true, get: dummy}
    );

    canWarnForReactFragment = true;
  } catch (x) { }

  var proxyPropertyAccessWithWarning = function(obj, key) {
    Object.defineProperty(obj, key, {
      enumerable: true,
      get: function() {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an opaque type. Accessing any of its ' +
          'properties is deprecated. Pass it to one of the React.Children ' +
          'helpers.'
        ) : null);
        this[didWarnKey] = true;
        return this[fragmentKey][key];
      },
      set: function(value) {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an immutable opaque type. Mutating its ' +
          'properties is deprecated.'
        ) : null);
        this[didWarnKey] = true;
        this[fragmentKey][key] = value;
      }
    });
  };

  var issuedWarnings = {};

  var didWarnForFragment = function(fragment) {
    // We use the keys and the type of the value as a heuristic to dedupe the
    // warning to avoid spamming too much.
    var fragmentCacheKey = '';
    for (var key in fragment) {
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
    }
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
    issuedWarnings[fragmentCacheKey] = true;
    return alreadyWarnedOnce;
  };
}

var ReactFragment = {
  // Wrap a keyed object in an opaque proxy that warns you if you access any
  // of its properties.
  create: function(object) {
    if ("production" !== process.env.NODE_ENV) {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment only accepts a single object.',
          object
        ) : null);
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment does not accept a ReactElement ' +
          'without a wrapper object.'
        ) : null);
        return object;
      }
      if (canWarnForReactFragment) {
        var proxy = {};
        Object.defineProperty(proxy, fragmentKey, {
          enumerable: false,
          value: object
        });
        Object.defineProperty(proxy, didWarnKey, {
          writable: true,
          enumerable: false,
          value: false
        });
        for (var key in object) {
          proxyPropertyAccessWithWarning(proxy, key);
        }
        Object.preventExtensions(proxy);
        return proxy;
      }
    }
    return object;
  },
  // Extract the original keyed object from the fragment opaque type. Warn if
  // a plain object is passed here.
  extract: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        if (!fragment[fragmentKey]) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnForFragment(fragment),
            'Any use of a keyed object should be wrapped in ' +
            'React.addons.createFragment(object) before being passed as a ' +
            'child.'
          ) : null);
          return fragment;
        }
        return fragment[fragmentKey];
      }
    }
    return fragment;
  },
  // Check if this is a fragment and if so, extract the keyed object. If it
  // is a fragment-like object, warn that it should be wrapped. Ignore if we
  // can't determine what kind of object this is.
  extractIfFragment: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        // If it is the opaque type, return the keyed object.
        if (fragment[fragmentKey]) {
          return fragment[fragmentKey];
        }
        // Otherwise, check each property if it has an element, if it does
        // it is probably meant as a fragment, so we can warn early. Defer,
        // the warning to extract.
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
            // This looks like a fragment object, we should provide an
            // early warning.
            return ReactFragment.extract(fragment);
          }
        }
      }
    }
    return fragment;
  }
};

module.exports = ReactFragment;

}).call(this,require('_process'))
},{"./ReactElement":740,"./warning":844,"_process":646}],747:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactClass = require("./ReactClass");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMComponent: ReactDOMComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":691,"./EventPluginHub":698,"./ReactBrowserEventEmitter":713,"./ReactClass":716,"./ReactComponentEnvironment":719,"./ReactDOMComponent":725,"./ReactEmptyComponent":742,"./ReactNativeComponent":757,"./ReactPerf":759,"./ReactRootIndex":768,"./ReactUpdates":775}],748:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":733,"./containsNode":798,"./focusNode":808,"./getActiveElement":810}],749:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":768,"./invariant":824,"_process":646}],750:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function(key) {
    key._reactInternalInstance = undefined;
  },

  get: function(key) {
    return key._reactInternalInstance;
  },

  has: function(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

},{}],751:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLifeCycle
 */

'use strict';

/**
 * This module manages the bookkeeping when a component is in the process
 * of being mounted or being unmounted. This is used as a way to enforce
 * invariants (or warnings) when it is not recommended to call
 * setState/forceUpdate.
 *
 * currentlyMountingInstance: During the construction phase, it is not possible
 * to trigger an update since the instance is not fully mounted yet. However, we
 * currently allow this as a convenience for mutating the initial state.
 *
 * currentlyUnmountingInstance: During the unmounting phase, the instance is
 * still mounted and can therefore schedule an update. However, this is not
 * recommended and probably an error since it's about to be unmounted.
 * Therefore we still want to trigger in an error for that case.
 */

var ReactLifeCycle = {
  currentlyMountingInstance: null,
  currentlyUnmountingInstance: null
};

module.exports = ReactLifeCycle;

},{}],752:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLink
 * @typechecks static-only
 */

'use strict';

/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   this._handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

var React = require("./React");

/**
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

/**
 * Creates a PropType that enforces the ReactLink API and optionally checks the
 * type of the value being passed inside the link. Example:
 *
 * MyComponent.propTypes = {
 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
 * }
 */
function createLinkTypeChecker(linkType) {
  var shapes = {
    value: typeof linkType === 'undefined' ?
      React.PropTypes.any.isRequired :
      linkType.isRequired,
    requestChange: React.PropTypes.func.isRequired
  };
  return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
  link: createLinkTypeChecker
};

module.exports = ReactLink;

},{"./React":711}],753:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":794}],754:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdateQueue = require("./ReactUpdateQueue");
var ReactUpdates = require("./ReactUpdates");

var emptyObject = require("./emptyObject");
var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponent.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
  var markup = ReactReconciler.mountComponent(
    componentInstance, rootID, transaction, emptyObject
  );
  componentInstance._isTopLevel = true;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(
    mountComponentIntoNode,
    null,
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup
  );
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    ReactMount.scrollMonitor(container, function() {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function(
    nextElement,
    container,
    shouldReuseMarkup
  ) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent(): Render methods should be a pure function ' +
      'of props and state; triggering nested component updates from ' +
      'render is not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== process.env.NODE_ENV) {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'render(): Target node has markup rendered by React, but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'unmountComponentAtNode(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    ReactReconciler.unmountComponent(instance);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          ) : null);
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },

  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'mountComponentIntoNode(...): Target container is not valid.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
          checksum
        );

        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
        var difference = ' (client) ' +
          markup.substring(diffIndex - 20, diffIndex + 20) +
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        ("production" !== process.env.NODE_ENV ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document using ' +
          'server rendering but the checksum was invalid. This usually ' +
          'means you rendered a different component type or props on ' +
          'the client from the one on the server, or your render() ' +
          'methods are impure. React cannot handle this case due to ' +
          'cross-browser quirks by rendering at the document root. You ' +
          'should look for environment dependent code in your components ' +
          'and ensure the props are the same client and server side:\n%s',
          difference
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'React attempted to reuse markup in a container but the ' +
            'checksum was invalid. This generally means that you are ' +
            'using server rendering and the markup generated on the ' +
            'server was not what the client was expecting. React injected ' +
            'new markup to compensate which works but you have lost many ' +
            'of the benefits of server rendering. Instead, figure out ' +
            'why the markup being generated is different on the client ' +
            'or server:\n%s',
            difference
          ) : null);
        }
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      container.nodeType !== DOC_NODE_TYPE,
      'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

    setInnerHTML(container, markup);
  },

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":691,"./ReactBrowserEventEmitter":713,"./ReactCurrentOwner":722,"./ReactElement":740,"./ReactElementValidator":741,"./ReactEmptyComponent":742,"./ReactInstanceHandles":749,"./ReactInstanceMap":750,"./ReactMarkupChecksum":753,"./ReactPerf":759,"./ReactReconciler":766,"./ReactUpdateQueue":774,"./ReactUpdates":775,"./containsNode":798,"./emptyObject":804,"./getReactRootElementInContainer":818,"./instantiateReactComponent":823,"./invariant":824,"./setInnerHTML":838,"./shouldUpdateReactComponent":841,"./warning":844,"_process":646}],755:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var ReactReconciler = require("./ReactReconciler");
var ReactChildReconciler = require("./ReactChildReconciler");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction, context) {
      var children = ReactChildReconciler.instantiateChildren(
        nestedChildren, transaction, context
      );
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }

      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = ReactChildReconciler.updateChildren(
        prevChildren, nextNestedChildren, transaction, context
      );
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction, context
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(
      child,
      name,
      index,
      transaction,
      context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(
        child,
        rootID,
        transaction,
        context
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactChildReconciler":714,"./ReactComponentEnvironment":719,"./ReactMultiChildUpdateTypes":756,"./ReactReconciler":766}],756:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":830}],757:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require("./Object.assign");
var invariant = require("./invariant");

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function(componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  },
  // Temporary hack since we expect DOM refs to behave like composites,
  // for this release.
  injectAutoWrapper: function(wrapperFactory) {
    autoGenerateWrapperClass = wrapperFactory;
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    genericComponentClass,
    'There is no registered component for the tag %s',
    element.type
  ) : invariant(genericComponentClass));
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))
},{"./Object.assign":709,"./invariant":824,"_process":646}],758:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      (object &&
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],759:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function(object, objectName, methodNames) {
    if ("production" !== process.env.NODE_ENV) {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(
          objectName,
          methodNames[key],
          object[key]
        );
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":646}],760:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

'use strict';

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var joinClasses = require("./joinClasses");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  }

};

module.exports = ReactPropTransferer;

},{"./Object.assign":709,"./emptyFunction":803,"./joinClasses":829}],761:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":646}],762:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":830}],763:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ") +
          ("`" + componentName + "`.")
        );
      }
      return null;
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }
      propValue = ReactFragment.extractIfFragment(propValue);
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":740,"./ReactFragment":746,"./ReactPropTypeLocationNames":761,"./emptyFunction":803}],764:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":709,"./PooledClass":710,"./ReactBrowserEventEmitter":713}],765:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":687,"./Object.assign":709,"./PooledClass":710,"./ReactBrowserEventEmitter":713,"./ReactInputSelection":748,"./ReactPutListenerQueue":764,"./Transaction":791}],766:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require("./ReactRef");
var ReactElementValidator = require("./ReactElementValidator");

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(
        internalInstance._currentElement
      );
    }
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function(internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function(
    internalInstance, nextElement, transaction, context
  ) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    var refsChanged = ReactRef.shouldUpdateRefs(
      prevElement,
      nextElement
    );

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(
    internalInstance,
    transaction
  ) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;

}).call(this,require('_process'))
},{"./ReactElementValidator":741,"./ReactRef":767,"_process":646}],767:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require("./ReactOwner");

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  return (
    nextElement._owner !== prevElement._owner ||
    nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

},{"./ReactOwner":758}],768:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],769:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var emptyObject = require("./emptyObject");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup =
        componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactElement":740,"./ReactInstanceHandles":749,"./ReactMarkupChecksum":753,"./ReactServerRenderingTransaction":770,"./emptyObject":804,"./instantiateReactComponent":823,"./invariant":824,"_process":646}],770:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":687,"./Object.assign":709,"./PooledClass":710,"./ReactPutListenerQueue":764,"./Transaction":791,"./emptyFunction":803}],771:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactStateSetters
 */

'use strict';

var ReactStateSetters = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(component, funcReturningState) {
    return function(a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));
  }
};

function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

module.exports = ReactStateSetters;

},{}],772:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactTransitionChildMapping
 */

'use strict';

var ReactChildren = require("./ReactChildren");
var ReactFragment = require("./ReactFragment");

var ReactTransitionChildMapping = {
  /**
   * Given `this.props.children`, return an object mapping key to child. Just
   * simple syntactic sugar around ReactChildren.map().
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */
  getChildMapping: function(children) {
    if (!children) {
      return children;
    }
    return ReactFragment.extract(ReactChildren.map(children, function(child) {
      return child;
    }));
  },

  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */
  mergeChildMappings: function(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      if (next.hasOwnProperty(key)) {
        return next[key];
      } else {
        return prev[key];
      }
    }

    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = {};

    var pendingKeys = [];
    for (var prevKey in prev) {
      if (next.hasOwnProperty(prevKey)) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending.hasOwnProperty(nextKey)) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
            pendingNextKey
          );
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }

    // Finally, add the keys which didn't appear before any key in `next`
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }
};

module.exports = ReactTransitionChildMapping;

},{"./ReactChildren":715,"./ReactFragment":746}],773:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionGroup
 */

'use strict';

var React = require("./React");
var ReactTransitionChildMapping = require("./ReactTransitionChildMapping");

var assign = require("./Object.assign");
var cloneWithProps = require("./cloneWithProps");
var emptyFunction = require("./emptyFunction");

var ReactTransitionGroup = React.createClass({
  displayName: 'ReactTransitionGroup',

  propTypes: {
    component: React.PropTypes.any,
    childFactory: React.PropTypes.func
  },

  getDefaultProps: function() {
    return {
      component: 'span',
      childFactory: emptyFunction.thatReturnsArgument
    };
  },

  getInitialState: function() {
    return {
      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
    };
  },

  componentWillMount: function() {
    this.currentlyTransitioningKeys = {};
    this.keysToEnter = [];
    this.keysToLeave = [];
  },

  componentDidMount: function() {
    var initialChildMapping = this.state.children;
    for (var key in initialChildMapping) {
      if (initialChildMapping[key]) {
        this.performAppear(key);
      }
    }
  },

  componentWillReceiveProps: function(nextProps) {
    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
      nextProps.children
    );
    var prevChildMapping = this.state.children;

    this.setState({
      children: ReactTransitionChildMapping.mergeChildMappings(
        prevChildMapping,
        nextChildMapping
      )
    });

    var key;

    for (key in nextChildMapping) {
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
      if (nextChildMapping[key] && !hasPrev &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToEnter.push(key);
      }
    }

    for (key in prevChildMapping) {
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
      if (prevChildMapping[key] && !hasNext &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToLeave.push(key);
      }
    }

    // If we want to someday check for reordering, we could do it here.
  },

  componentDidUpdate: function() {
    var keysToEnter = this.keysToEnter;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);

    var keysToLeave = this.keysToLeave;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);
  },

  performAppear: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillAppear) {
      component.componentWillAppear(
        this._handleDoneAppearing.bind(this, key)
      );
    } else {
      this._handleDoneAppearing(key);
    }
  },

  _handleDoneAppearing: function(key) {
    var component = this.refs[key];
    if (component.componentDidAppear) {
      component.componentDidAppear();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully appeared. Remove it.
      this.performLeave(key);
    }
  },

  performEnter: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(
        this._handleDoneEntering.bind(this, key)
      );
    } else {
      this._handleDoneEntering(key);
    }
  },

  _handleDoneEntering: function(key) {
    var component = this.refs[key];
    if (component.componentDidEnter) {
      component.componentDidEnter();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);
    }
  },

  performLeave: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];
    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
    } else {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);
    }
  },

  _handleDoneLeaving: function(key) {
    var component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);
    } else {
      var newChildren = assign({}, this.state.children);
      delete newChildren[key];
      this.setState({children: newChildren});
    }
  },

  render: function() {
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    var childrenToRender = [];
    for (var key in this.state.children) {
      var child = this.state.children[key];
      if (child) {
        // You may need to apply reactive updates to a child as it is leaving.
        // The normal React way to do it won't work since the child will have
        // already been removed. In case you need this behavior you can provide
        // a childFactory function to wrap every child, even the ones that are
        // leaving.
        childrenToRender.push(cloneWithProps(
          this.props.childFactory(child),
          {ref: key, key: key}
        ));
      }
    }
    return React.createElement(
      this.props.component,
      this.props,
      childrenToRender
    );
  }
});

module.exports = ReactTransitionGroup;

},{"./Object.assign":709,"./React":711,"./ReactTransitionChildMapping":772,"./cloneWithProps":797,"./emptyFunction":803}],774:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactLifeCycle = require("./ReactLifeCycle");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

function enqueueUpdate(internalInstance) {
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
    // If we're in a componentWillMount handler, don't enqueue a rerender
    // because ReactUpdates assumes we're in a browser context (which is
    // wrong for server rendering) and we're about to do a render anyway.
    // See bug in #1740.
    ReactUpdates.enqueueUpdate(internalInstance);
  }
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    '%s(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.',
    callerName
  ) : invariant(ReactCurrentOwner.current == null));

  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== process.env.NODE_ENV) {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      ("production" !== process.env.NODE_ENV ? warning(
        !callerName,
        '%s(...): Can only update a mounted or mounting component. ' +
        'This usually means you called %s() on an unmounted ' +
        'component. This is a no-op.',
        callerName,
        callerName
      ) : null);
    }
    return null;
  }

  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
    return null;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function(publicInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function(internalInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'forceUpdate'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceState'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function(publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setState'
    );

    if (!internalInstance) {
      return;
    }

    var queue =
      internalInstance._pendingStateQueue ||
      (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function(publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'setProps(...): You called `setProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    var props = assign({}, element.props, partialProps);
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function(publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'replaceProps(...): You called `replaceProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function(internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;

}).call(this,require('_process'))
},{"./Object.assign":709,"./ReactCurrentOwner":722,"./ReactElement":740,"./ReactInstanceMap":750,"./ReactLifeCycle":751,"./ReactUpdates":775,"./invariant":824,"./warning":844,"_process":646}],775:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(
      component,
      transaction.reconcileTransaction
    );

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
          callbacks[j],
          component.getPublicInstance()
        );
      }
    }
  }
}

var flushBatchedUpdates = function() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":687,"./Object.assign":709,"./PooledClass":710,"./ReactCurrentOwner":722,"./ReactPerf":759,"./ReactReconciler":766,"./Transaction":791,"./invariant":824,"./warning":844,"_process":646}],776:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":691}],777:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":696,"./EventPropagators":701,"./ReactInputSelection":748,"./SyntheticEvent":783,"./getActiveElement":810,"./isTextInputElement":827,"./keyOf":831,"./shallowEqual":840}],778:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],779:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":696,"./EventPluginUtils":700,"./EventPropagators":701,"./SyntheticClipboardEvent":780,"./SyntheticDragEvent":782,"./SyntheticEvent":783,"./SyntheticFocusEvent":784,"./SyntheticKeyboardEvent":786,"./SyntheticMouseEvent":787,"./SyntheticTouchEvent":788,"./SyntheticUIEvent":789,"./SyntheticWheelEvent":790,"./getEventCharCode":811,"./invariant":824,"./keyOf":831,"./warning":844,"_process":646}],780:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

},{"./SyntheticEvent":783}],781:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;

},{"./SyntheticEvent":783}],782:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":787}],783:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":709,"./PooledClass":710,"./emptyFunction":803,"./getEventTarget":814}],784:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":789}],785:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;

},{"./SyntheticEvent":783}],786:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":789,"./getEventCharCode":811,"./getEventKey":812,"./getEventModifierState":813}],787:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":789,"./ViewportMetrics":792,"./getEventModifierState":813}],788:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":789,"./getEventModifierState":813}],789:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":783,"./getEventTarget":814}],790:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":787}],791:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],792:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{}],793:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],794:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

'use strict';

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],795:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],796:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":795}],797:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule cloneWithProps
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactPropTransferer = require("./ReactPropTransferer");

var keyOf = require("./keyOf");
var warning = require("./warning");

var CHILDREN_PROP = keyOf({children: null});

/**
 * Sometimes you want to change the props of a child passed to you. Usually
 * this is to add a CSS class.
 *
 * @param {ReactElement} child child element you'd like to clone
 * @param {object} props props you'd like to modify. className and style will be
 * merged automatically.
 * @return {ReactElement} a clone of child with props merged in.
 */
function cloneWithProps(child, props) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      !child.ref,
      'You are calling cloneWithProps() on a child with a ref. This is ' +
      'dangerous because you\'re creating a new child which will not be ' +
      'added as a ref to its parent.'
    ) : null);
  }

  var newProps = ReactPropTransferer.mergeProps(props, child.props);

  // Use `child.props.children` if it is provided.
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
      child.props.hasOwnProperty(CHILDREN_PROP)) {
    newProps.children = child.props.children;
  }

  // The current API doesn't retain _owner and _context, which is why this
  // doesn't use ReactElement.cloneAndReplaceProps.
  return ReactElement.createElement(child.type, newProps);
}

module.exports = cloneWithProps;

}).call(this,require('_process'))
},{"./ReactElement":740,"./ReactPropTransferer":760,"./keyOf":831,"./warning":844,"_process":646}],798:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":828}],799:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

},{"./toArray":842}],800:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

'use strict';

// Defeat circular references by requiring this directly.
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactClass.createClass({
    tagName: tag.toUpperCase(),
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactClass":716,"./ReactElement":740,"./invariant":824,"_process":646}],801:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFromMixed = require("./createArrayFromMixed");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":702,"./createArrayFromMixed":799,"./getMarkupWrap":816,"./invariant":824,"_process":646}],802:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":685}],803:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],804:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":646}],805:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;

},{}],806:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var isNode = require("./isNode");
var warning = require("./warning");

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== process.env.NODE_ENV) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      ("production" !== process.env.NODE_ENV ? warning(
        owner._warnedAboutRefsInRender,
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
        'render() should be a pure function of props and state. It should ' +
        'never access something that requires stale data from the previous ' +
        'render, such as refs. Move this logic to componentDidMount and ' +
        'componentDidUpdate instead.',
        owner.getName() || 'A component'
      ) : null);
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (isNode(componentOrElement)) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    componentOrElement.render == null ||
    typeof componentOrElement.render !== 'function',
    'Component (with keys: %s) contains `render` method ' +
    'but is not mounted in the DOM',
    Object.keys(componentOrElement)
  ) : invariant(componentOrElement.render == null ||
  typeof componentOrElement.render !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    false,
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
    Object.keys(componentOrElement)
  ) : invariant(false));
}

module.exports = findDOMNode;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":722,"./ReactInstanceMap":750,"./ReactMount":754,"./invariant":824,"./isNode":826,"./warning":844,"_process":646}],807:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'flattenChildren(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./traverseAllChildren":843,"./warning":844,"_process":646}],808:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],809:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],810:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],811:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],812:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":811}],813:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],814:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],815:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
  );
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

},{}],816:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'clipPath': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'clipPath': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":702,"./invariant":824,"_process":646}],817:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],818:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

'use strict';

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],819:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":702}],820:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],821:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],822:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":821}],823:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactNativeComponent = require("./ReactNativeComponent");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function() { };
assign(
  ReactCompositeComponentWrapper.prototype,
  ReactCompositeComponent.Mixin,
  {
    _instantiateReactComponent: instantiateReactComponent
  }
);

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' &&
    typeof type.prototype !== 'undefined' &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, parentCompositeType) {
  var instance;

  if (node === null || node === false) {
    node = ReactEmptyComponent.emptyElement;
  }

  if (typeof node === 'object') {
    var element = node;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        element && (typeof element.type === 'function' ||
                    typeof element.type === 'string'),
        'Only functions or strings can be mounted as React components.'
      ) : null);
    }

    // Special case string values
    if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
      // Avoid recursion if the wrapper renders itself.
      instance = ReactNativeComponent.createInternalComponent(element);
      // All native components are currently wrapped in a composite so we're
      // safe to assume that this is what we should instantiate.
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // represenations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'Encountered invalid React node of type %s',
      typeof node
    ) : invariant(false));
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function' &&
      typeof instance.unmountComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== process.env.NODE_ENV) {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== process.env.NODE_ENV) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./Object.assign":709,"./ReactCompositeComponent":720,"./ReactEmptyComponent":742,"./ReactNativeComponent":757,"./invariant":824,"./warning":844,"_process":646}],824:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":646}],825:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":702}],826:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
    typeof object.nodeType === 'number' &&
    typeof object.nodeName === 'string'))
  ));
}

module.exports = isNode;

},{}],827:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
  );
}

module.exports = isTextInputElement;

},{}],828:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":826}],829:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

'use strict';

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],830:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],831:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],832:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],833:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

},{}],834:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactElement":740,"./invariant":824,"_process":646}],835:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":702}],836:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":835}],837:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":805}],838:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function(node, html) {
    MSApp.execUnsafeLocalFunction(function() {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":702}],839:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var setInnerHTML = require("./setInnerHTML");

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function(node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function(node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

},{"./ExecutionEnvironment":702,"./escapeTextContentForBrowser":805,"./setInnerHTML":838}],840:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

'use strict';

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],841:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

var warning = require("./warning");

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement != null && nextElement != null) {
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return (nextType === 'string' || nextType === 'number');
    } else {
      if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
        var ownersMatch = prevElement._owner === nextElement._owner;
        var prevName = null;
        var nextName = null;
        var nextDisplayName = null;
        if ("production" !== process.env.NODE_ENV) {
          if (!ownersMatch) {
            if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
              prevName =
                prevElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
              nextName =
                nextElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement.type != null &&
                nextElement.type.displayName != null) {
              nextDisplayName = nextElement.type.displayName;
            }
            if (nextElement.type != null && typeof nextElement.type === 'string') {
              nextDisplayName = nextElement.type;
            }
            if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
              if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                if (prevElement._owner != null) {
                  prevElement._owner._isOwnerNecessary = true;
                }
                if (nextElement._owner != null) {
                  nextElement._owner._isOwnerNecessary = true;
                }
                ("production" !== process.env.NODE_ENV ? warning(
                  false,
                  '<%s /> is being rendered by both %s and %s using the same ' +
                  'key (%s) in the same place. Currently, this means that ' +
                  'they don\'t preserve state. This behavior should be very ' +
                  'rare so we\'re considering deprecating it. Please contact ' +
                  'the React team and explain your use case so that we can ' +
                  'take that into consideration.',
                  nextDisplayName || 'Unknown Component',
                  prevName || '[Unknown]',
                  nextName || '[Unknown]',
                  prevElement.key
                ) : null);
              }
            }
          }
        }
        return ownersMatch;
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

}).call(this,require('_process'))
},{"./warning":844,"_process":646}],842:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":824,"_process":646}],843:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
  children,
  nameSoFar,
  indexSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
      indexSoFar
    );
    return 1;
  }

  var child, nextName, nextIndex;
  var subtreeCount = 0; // Count of children found in the current subtree.

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = (
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
        getComponentKey(child, i)
      );
      nextIndex = indexSoFar + subtreeCount;
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        nextIndex,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, ii++)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnAboutMaps,
            'Using Maps as children is not yet fully supported. It is an ' +
            'experimental feature that might be removed. Convert it to a ' +
            'sequence / iterable of keyed ReactElements instead.'
          ) : null);
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    } else if (type === 'object') {
      ("production" !== process.env.NODE_ENV ? invariant(
        children.nodeType !== 1,
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
        'elements are not valid children of React components.'
      ) : invariant(children.nodeType !== 1));
      var fragment = ReactFragment.extract(children);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          child = fragment[key];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            wrapUserProvidedKey(key) + SUBSEPARATOR +
            getComponentKey(child, 0)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactElement":740,"./ReactFragment":746,"./ReactInstanceHandles":749,"./getIteratorFn":815,"./invariant":824,"./warning":844,"_process":646}],844:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
      console.warn(message);
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":803,"_process":646}],845:[function(require,module,exports){
/*! tether 1.1.0 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
}(this, function(require, exports, module) {

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TetherBase = undefined;
if (typeof TetherBase === 'undefined') {
  TetherBase = { modules: [] };
}

function getScrollParent(el) {
  var _getComputedStyle = getComputedStyle(el);

  var position = _getComputedStyle.position;

  if (position === 'fixed') {
    return el;
  }

  var parent = el;
  while (parent = parent.parentNode) {
    var style = undefined;
    try {
      style = getComputedStyle(parent);
    } catch (err) {}

    if (typeof style === 'undefined' || style === null) {
      return parent;
    }

    var _style = style;
    var overflow = _style.overflow;
    var overflowX = _style.overflowX;
    var overflowY = _style.overflowY;

    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
        return parent;
      }
    }
  }

  return document.body;
}

var uniqueId = (function () {
  var id = 0;
  return function () {
    return ++id;
  };
})();

var zeroPosCache = {};
var getOrigin = function getOrigin(doc) {
  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
  // jitter as the user scrolls that messes with our ability to detect if two positions
  // are equivilant or not.  We place an element at the top left of the page that will
  // get the same jitter, so we can cancel the two out.
  var node = doc._tetherZeroElement;
  if (typeof node === 'undefined') {
    node = doc.createElement('div');
    node.setAttribute('data-tether-id', uniqueId());
    extend(node.style, {
      top: 0,
      left: 0,
      position: 'absolute'
    });

    doc.body.appendChild(node);

    doc._tetherZeroElement = node;
  }

  var id = node.getAttribute('data-tether-id');
  if (typeof zeroPosCache[id] === 'undefined') {
    zeroPosCache[id] = {};

    var rect = node.getBoundingClientRect();
    for (var k in rect) {
      // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
      zeroPosCache[id][k] = rect[k];
    }

    // Clear the cache when this position call is done
    defer(function () {
      delete zeroPosCache[id];
    });
  }

  return zeroPosCache[id];
};

function getBounds(el) {
  var doc = undefined;
  if (el === document) {
    doc = document;
    el = document.documentElement;
  } else {
    doc = el.ownerDocument;
  }

  var docEl = doc.documentElement;

  var box = {};
  // The original object returned by getBoundingClientRect is immutable, so we clone it
  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
  var rect = el.getBoundingClientRect();
  for (var k in rect) {
    box[k] = rect[k];
  }

  var origin = getOrigin(doc);

  box.top -= origin.top;
  box.left -= origin.left;

  if (typeof box.width === 'undefined') {
    box.width = document.body.scrollWidth - box.left - box.right;
  }
  if (typeof box.height === 'undefined') {
    box.height = document.body.scrollHeight - box.top - box.bottom;
  }

  box.top = box.top - docEl.clientTop;
  box.left = box.left - docEl.clientLeft;
  box.right = doc.body.clientWidth - box.width - box.left;
  box.bottom = doc.body.clientHeight - box.height - box.top;

  return box;
}

function getOffsetParent(el) {
  return el.offsetParent || document.documentElement;
}

function getScrollBarSize() {
  var inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';

  var outer = document.createElement('div');
  extend(outer.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    pointerEvents: 'none',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });

  outer.appendChild(inner);

  document.body.appendChild(outer);

  var widthContained = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);

  var width = widthContained - widthScroll;

  return { width: width, height: width };
}

function extend() {
  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var args = [];

  Array.prototype.push.apply(args, arguments);

  args.slice(1).forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        if (({}).hasOwnProperty.call(obj, key)) {
          out[key] = obj[key];
        }
      }
    }
  });

  return out;
}

function removeClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.remove(cls);
      }
    });
  } else {
    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
    var className = getClassName(el).replace(regex, ' ');
    setClassName(el, className);
  }
}

function addClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.add(cls);
      }
    });
  } else {
    removeClass(el, name);
    var cls = getClassName(el) + (' ' + name);
    setClassName(el, cls);
  }
}

function hasClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    return el.classList.contains(name);
  }
  var className = getClassName(el);
  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
}

function getClassName(el) {
  if (el.className instanceof SVGAnimatedString) {
    return el.className.baseVal;
  }
  return el.className;
}

function setClassName(el, className) {
  el.setAttribute('class', className);
}

function updateClasses(el, add, all) {
  // Of the set of 'all' classes, we need the 'add' classes, and only the
  // 'add' classes to be set.
  all.forEach(function (cls) {
    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
      removeClass(el, cls);
    }
  });

  add.forEach(function (cls) {
    if (!hasClass(el, cls)) {
      addClass(el, cls);
    }
  });
}

var deferred = [];

var defer = function defer(fn) {
  deferred.push(fn);
};

var flush = function flush() {
  var fn = undefined;
  while (fn = deferred.pop()) {
    fn();
  }
};

var Evented = (function () {
  function Evented() {
    _classCallCheck(this, Evented);
  }

  _createClass(Evented, [{
    key: 'on',
    value: function on(event, handler, ctx) {
      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      if (typeof this.bindings === 'undefined') {
        this.bindings = {};
      }
      if (typeof this.bindings[event] === 'undefined') {
        this.bindings[event] = [];
      }
      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    }
  }, {
    key: 'once',
    value: function once(event, handler, ctx) {
      this.on(event, handler, ctx, true);
    }
  }, {
    key: 'off',
    value: function off(event, handler) {
      if (typeof this.bindings !== 'undefined' && typeof this.bindings[event] !== 'undefined') {
        return;
      }

      if (typeof handler === 'undefined') {
        delete this.bindings[event];
      } else {
        var i = 0;
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(event) {
      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
        var i = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        while (i < this.bindings[event].length) {
          var _bindings$event$i = this.bindings[event][i];
          var handler = _bindings$event$i.handler;
          var ctx = _bindings$event$i.ctx;
          var once = _bindings$event$i.once;

          var context = ctx;
          if (typeof context === 'undefined') {
            context = this;
          }

          handler.apply(context, args);

          if (once) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }]);

  return Evented;
})();

TetherBase.Utils = {
  getScrollParent: getScrollParent,
  getBounds: getBounds,
  getOffsetParent: getOffsetParent,
  extend: extend,
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  updateClasses: updateClasses,
  defer: defer,
  flush: flush,
  uniqueId: uniqueId,
  Evented: Evented,
  getScrollBarSize: getScrollBarSize
};
/* globals TetherBase, performance */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

if (typeof TetherBase === 'undefined') {
  throw new Error('You must include the utils.js file before tether.js');
}

var _TetherBase$Utils = TetherBase.Utils;
var getScrollParent = _TetherBase$Utils.getScrollParent;
var getBounds = _TetherBase$Utils.getBounds;
var getOffsetParent = _TetherBase$Utils.getOffsetParent;
var extend = _TetherBase$Utils.extend;
var addClass = _TetherBase$Utils.addClass;
var removeClass = _TetherBase$Utils.removeClass;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;
var flush = _TetherBase$Utils.flush;
var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;

function within(a, b) {
  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  return a + diff >= b && b >= a - diff;
}

var transformKey = (function () {
  if (typeof document === 'undefined') {
    return '';
  }
  var el = document.createElement('div');

  var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
  for (var i = 0; i < transforms.length; ++i) {
    var key = transforms[i];
    if (el.style[key] !== undefined) {
      return key;
    }
  }
})();

var tethers = [];

var position = function position() {
  tethers.forEach(function (tether) {
    tether.position(false);
  });
  flush();
};

function now() {
  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
    return performance.now();
  }
  return +new Date();
}

(function () {
  var lastCall = null;
  var lastDuration = null;
  var pendingTimeout = null;

  var tick = function tick() {
    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
      // We voluntarily throttle ourselves if we can't manage 60fps
      lastDuration = Math.min(lastDuration - 16, 250);

      // Just in case this is the last event, remember to position just once more
      pendingTimeout = setTimeout(tick, 250);
      return;
    }

    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
      // Some browsers call events a little too frequently, refuse to run more than is reasonable
      return;
    }

    if (typeof pendingTimeout !== 'undefined') {
      clearTimeout(pendingTimeout);
      pendingTimeout = null;
    }

    lastCall = now();
    position();
    lastDuration = now() - lastCall;
  };

  if (typeof window !== 'undefined') {
    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
      window.addEventListener(event, tick);
    });
  }
})();

var MIRROR_LR = {
  center: 'center',
  left: 'right',
  right: 'left'
};

var MIRROR_TB = {
  middle: 'middle',
  top: 'bottom',
  bottom: 'top'
};

var OFFSET_MAP = {
  top: 0,
  left: 0,
  middle: '50%',
  center: '50%',
  bottom: '100%',
  right: '100%'
};

var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (left === 'auto') {
    left = MIRROR_LR[relativeToAttachment.left];
  }

  if (top === 'auto') {
    top = MIRROR_TB[relativeToAttachment.top];
  }

  return { left: left, top: top };
};

var attachmentToOffset = function attachmentToOffset(attachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
    left = OFFSET_MAP[attachment.left];
  }

  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
    top = OFFSET_MAP[attachment.top];
  }

  return { left: left, top: top };
};

function addOffset() {
  var out = { top: 0, left: 0 };

  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
    offsets[_key] = arguments[_key];
  }

  offsets.forEach(function (_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (typeof top === 'string') {
      top = parseFloat(top, 10);
    }
    if (typeof left === 'string') {
      left = parseFloat(left, 10);
    }

    out.top += top;
    out.left += left;
  });

  return out;
}

function offsetToPx(offset, size) {
  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
  }
  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
  }

  return offset;
}

var parseOffset = function parseOffset(value) {
  var _value$split = value.split(' ');

  var _value$split2 = _slicedToArray(_value$split, 2);

  var top = _value$split2[0];
  var left = _value$split2[1];

  return { top: top, left: left };
};
var parseAttachment = parseOffset;

var TetherClass = (function () {
  function TetherClass(options) {
    var _this = this;

    _classCallCheck(this, TetherClass);

    this.position = this.position.bind(this);

    tethers.push(this);

    this.history = [];

    this.setOptions(options, false);

    TetherBase.modules.forEach(function (module) {
      if (typeof module.initialize !== 'undefined') {
        module.initialize.call(_this);
      }
    });

    this.position();
  }

  _createClass(TetherClass, [{
    key: 'getClass',
    value: function getClass() {
      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var classes = this.options.classes;

      if (typeof classes !== 'undefined' && classes[key]) {
        return this.options.classes[key];
      } else if (this.options.classPrefix) {
        return this.options.classPrefix + '-' + key;
      } else {
        return key;
      }
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      var _this2 = this;

      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };

      this.options = extend(defaults, options);

      var _options = this.options;
      var element = _options.element;
      var target = _options.target;
      var targetModifier = _options.targetModifier;

      this.element = element;
      this.target = target;
      this.targetModifier = targetModifier;

      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }

      ['element', 'target'].forEach(function (key) {
        if (typeof _this2[key] === 'undefined') {
          throw new Error('Tether Error: Both element and target must be defined');
        }

        if (typeof _this2[key].jquery !== 'undefined') {
          _this2[key] = _this2[key][0];
        } else if (typeof _this2[key] === 'string') {
          _this2[key] = document.querySelector(_this2[key]);
        }
      });

      addClass(this.element, this.getClass('element'));
      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('target'));
      }

      if (!this.options.attachment) {
        throw new Error('Tether Error: You must provide an attachment');
      }

      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);

      if (typeof this.scrollParent !== 'undefined') {
        this.disable();
      }

      if (this.targetModifier === 'scroll-handle') {
        this.scrollParent = this.target;
      } else {
        this.scrollParent = getScrollParent(this.target);
      }

      if (!(this.options.enabled === false)) {
        this.enable(pos);
      }
    }
  }, {
    key: 'getTargetBounds',
    value: function getTargetBounds() {
      if (typeof this.targetModifier !== 'undefined') {
        if (this.targetModifier === 'visible') {
          if (this.target === document.body) {
            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
          } else {
            var bounds = getBounds(this.target);

            var out = {
              height: bounds.height,
              width: bounds.width,
              top: bounds.top,
              left: bounds.left
            };

            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
            out.height = Math.min(innerHeight, out.height);
            out.height -= 2;

            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
            out.width = Math.min(innerWidth, out.width);
            out.width -= 2;

            if (out.top < pageYOffset) {
              out.top = pageYOffset;
            }
            if (out.left < pageXOffset) {
              out.left = pageXOffset;
            }

            return out;
          }
        } else if (this.targetModifier === 'scroll-handle') {
          var bounds = undefined;
          var target = this.target;
          if (target === document.body) {
            target = document.documentElement;

            bounds = {
              left: pageXOffset,
              top: pageYOffset,
              height: innerHeight,
              width: innerWidth
            };
          } else {
            bounds = getBounds(target);
          }

          var style = getComputedStyle(target);

          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

          var scrollBottom = 0;
          if (hasBottomScroll) {
            scrollBottom = 15;
          }

          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

          var out = {
            width: 15,
            height: height * 0.975 * (height / target.scrollHeight),
            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
          };

          var fitAdj = 0;
          if (height < 408 && this.target === document.body) {
            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
          }

          if (this.target !== document.body) {
            out.height = Math.max(out.height, 24);
          }

          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

          if (this.target === document.body) {
            out.height = Math.max(out.height, 24);
          }

          return out;
        }
      } else {
        return getBounds(this.target);
      }
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this._cache = {};
    }
  }, {
    key: 'cache',
    value: function cache(k, getter) {
      // More than one module will often need the same DOM info, so
      // we keep a cache which is cleared on each position call
      if (typeof this._cache === 'undefined') {
        this._cache = {};
      }

      if (typeof this._cache[k] === 'undefined') {
        this._cache[k] = getter.call(this);
      }

      return this._cache[k];
    }
  }, {
    key: 'enable',
    value: function enable() {
      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('enabled'));
      }
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;

      if (this.scrollParent !== document) {
        this.scrollParent.addEventListener('scroll', this.position);
      }

      if (pos) {
        this.position();
      }
    }
  }, {
    key: 'disable',
    value: function disable() {
      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;

      if (typeof this.scrollParent !== 'undefined') {
        this.scrollParent.removeEventListener('scroll', this.position);
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this3 = this;

      this.disable();

      tethers.forEach(function (tether, i) {
        if (tether === _this3) {
          tethers.splice(i, 1);
          return;
        }
      });
    }
  }, {
    key: 'updateAttachClasses',
    value: function updateAttachClasses(elementAttach, targetAttach) {
      var _this4 = this;

      elementAttach = elementAttach || this.attachment;
      targetAttach = targetAttach || this.targetAttachment;
      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
        // updateAttachClasses can be called more than once in a position call, so
        // we need to clean up after ourselves such that when the last defer gets
        // ran it doesn't add any extra classes from previous calls.
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }

      if (typeof this._addAttachClasses === 'undefined') {
        this._addAttachClasses = [];
      }
      var add = this._addAttachClasses;

      if (elementAttach.top) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
      }

      var all = [];
      sides.forEach(function (side) {
        all.push(_this4.getClass('element-attached') + '-' + side);
        all.push(_this4.getClass('target-attached') + '-' + side);
      });

      defer(function () {
        if (!(typeof _this4._addAttachClasses !== 'undefined')) {
          return;
        }

        updateClasses(_this4.element, _this4._addAttachClasses, all);
        if (!(_this4.options.addTargetClasses === false)) {
          updateClasses(_this4.target, _this4._addAttachClasses, all);
        }

        delete _this4._addAttachClasses;
      });
    }
  }, {
    key: 'position',
    value: function position() {
      var _this5 = this;

      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
      // tethers (in which case call Tether.Utils.flush yourself when you're done)

      if (!this.enabled) {
        return;
      }

      this.clearCache();

      // Turn 'auto' attachments into the appropriate corner or edge
      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

      this.updateAttachClasses(this.attachment, targetAttachment);

      var elementPos = this.cache('element-bounds', function () {
        return getBounds(_this5.element);
      });

      var width = elementPos.width;
      var height = elementPos.height;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize;

        // We cache the height and width to make it possible to position elements that are
        // getting hidden.
        width = _lastSize.width;
        height = _lastSize.height;
      } else {
        this.lastSize = { width: width, height: height };
      }

      var targetPos = this.cache('target-bounds', function () {
        return _this5.getTargetBounds();
      });
      var targetSize = targetPos;

      // Get an actual px offset from the attachment
      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

      // Add the manually provided offset
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);

      // It's now our goal to make (element position + offset) == (target position + target offset)
      var left = targetPos.left + targetOffset.left - offset.left;
      var top = targetPos.top + targetOffset.top - offset.top;

      for (var i = 0; i < TetherBase.modules.length; ++i) {
        var _module2 = TetherBase.modules[i];
        var ret = _module2.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize,
          attachment: this.attachment
        });

        if (ret === false) {
          return false;
        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
          continue;
        } else {
          top = ret.top;
          left = ret.left;
        }
      }

      // We describe the position three different ways to give the optimizer
      // a chance to decide the best possible way to position the element
      // with the fewest repaints.
      var next = {
        // It's position relative to the page (absolute positioning when
        // the element is a child of the body)
        page: {
          top: top,
          left: left
        },

        // It's position relative to the viewport (fixed positioning)
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };

      var scrollbarSize = undefined;
      if (document.body.scrollWidth > window.innerWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }

      if (document.body.scrollHeight > window.innerHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }

      if (['', 'static'].indexOf(document.body.style.position) === -1 || ['', 'static'].indexOf(document.body.parentElement.style.position) === -1) {
        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
        next.page.bottom = document.body.scrollHeight - top - height;
        next.page.right = document.body.scrollWidth - left - width;
      }

      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
        (function () {
          var offsetParent = _this5.cache('target-offsetparent', function () {
            return getOffsetParent(_this5.target);
          });
          var offsetPosition = _this5.cache('target-offsetparent-bounds', function () {
            return getBounds(offsetParent);
          });
          var offsetParentStyle = getComputedStyle(offsetParent);
          var offsetParentSize = offsetPosition;

          var offsetBorder = {};
          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
          });

          offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
          offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
              // We're within the visible part of the target's scroll parent
              var scrollTop = offsetParent.scrollTop;
              var scrollLeft = offsetParent.scrollLeft;

              // It's position relative to the target's offset parent (absolute positioning when
              // the element is moved to be a child of the target's offset parent).
              next.offset = {
                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
              };
            }
          }
        })();
      }

      // We could also travel up the DOM and try each containing context, rather than only
      // looking at the body, but we're gonna get diminishing returns.

      this.move(next);

      this.history.unshift(next);

      if (this.history.length > 3) {
        this.history.pop();
      }

      if (flushChanges) {
        flush();
      }

      return true;
    }

    // THE ISSUE
  }, {
    key: 'move',
    value: function move(pos) {
      var _this6 = this;

      if (!(typeof this.element.parentNode !== 'undefined')) {
        return;
      }

      var same = {};

      for (var type in pos) {
        same[type] = {};

        for (var key in pos[type]) {
          var found = false;

          for (var i = 0; i < this.history.length; ++i) {
            var point = this.history[i];
            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
              found = true;
              break;
            }
          }

          if (!found) {
            same[type][key] = true;
          }
        }
      }

      var css = { top: '', left: '', right: '', bottom: '' };

      var transcribe = function transcribe(_same, _pos) {
        var hasOptimizations = typeof _this6.options.optimizations !== 'undefined';
        var gpu = hasOptimizations ? _this6.options.optimizations.gpu : null;
        if (gpu !== false) {
          var yPos = undefined,
              xPos = undefined;
          if (_same.top) {
            css.top = 0;
            yPos = _pos.top;
          } else {
            css.bottom = 0;
            yPos = -_pos.bottom;
          }

          if (_same.left) {
            css.left = 0;
            xPos = _pos.left;
          } else {
            css.right = 0;
            xPos = -_pos.right;
          }

          css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';

          if (transformKey !== 'msTransform') {
            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
            // but IE9 doesn't support 3d transforms and will choke.
            css[transformKey] += " translateZ(0)";
          }
        } else {
          if (_same.top) {
            css.top = _pos.top + 'px';
          } else {
            css.bottom = _pos.bottom + 'px';
          }

          if (_same.left) {
            css.left = _pos.left + 'px';
          } else {
            css.right = _pos.right + 'px';
          }
        }
      };

      var moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, pos.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, pos.viewport);
      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
        (function () {
          css.position = 'absolute';
          var offsetParent = _this6.cache('target-offsetparent', function () {
            return getOffsetParent(_this6.target);
          });

          if (getOffsetParent(_this6.element) !== offsetParent) {
            defer(function () {
              _this6.element.parentNode.removeChild(_this6.element);
              offsetParent.appendChild(_this6.element);
            });
          }

          transcribe(same.offset, pos.offset);
          moved = true;
        })();
      } else {
        css.position = 'absolute';
        transcribe({ top: true, left: true }, pos.page);
      }

      if (!moved) {
        var offsetParentIsBody = true;
        var currentNode = this.element.parentNode;
        while (currentNode && currentNode.tagName !== 'BODY') {
          if (getComputedStyle(currentNode).position !== 'static') {
            offsetParentIsBody = false;
            break;
          }

          currentNode = currentNode.parentNode;
        }

        if (!offsetParentIsBody) {
          this.element.parentNode.removeChild(this.element);
          document.body.appendChild(this.element);
        }
      }

      // Any css change will trigger a repaint, so let's avoid one if nothing changed
      var writeCSS = {};
      var write = false;
      for (var key in css) {
        var val = css[key];
        var elVal = this.element.style[key];

        if (elVal !== '' && val !== '' && ['top', 'left', 'bottom', 'right'].indexOf(key) >= 0) {
          elVal = parseFloat(elVal);
          val = parseFloat(val);
        }

        if (elVal !== val) {
          write = true;
          writeCSS[key] = val;
        }
      }

      if (write) {
        defer(function () {
          extend(_this6.element.style, writeCSS);
        });
      }
    }
  }]);

  return TetherClass;
})();

TetherClass.modules = [];

TetherBase.position = position;

var Tether = extend(TetherClass, TetherBase);
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var extend = _TetherBase$Utils.extend;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

function getBoundingRect(tether, to) {
  if (to === 'scrollParent') {
    to = tether.scrollParent;
  } else if (to === 'window') {
    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
  }

  if (to === document) {
    to = to.documentElement;
  }

  if (typeof to.nodeType !== 'undefined') {
    (function () {
      var size = getBounds(to);
      var pos = size;
      var style = getComputedStyle(to);

      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

      BOUNDS_FORMAT.forEach(function (side, i) {
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style['border' + side + 'Width']);
        } else {
          to[i] -= parseFloat(style['border' + side + 'Width']);
        }
      });
    })();
  }

  return to;
}

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;
    var targetAttachment = _ref.targetAttachment;

    if (!this.options.constraints) {
      return true;
    }

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
      var _lastSize = this.lastSize;

      // Handle the item getting hidden as a result of our positioning without glitching
      // the classes in and out
      width = _lastSize.width;
      height = _lastSize.height;
    }

    var targetSize = this.cache('target-bounds', function () {
      return _this.getTargetBounds();
    });

    var targetHeight = targetSize.height;
    var targetWidth = targetSize.width;

    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

    this.options.constraints.forEach(function (constraint) {
      var outOfBoundsClass = constraint.outOfBoundsClass;
      var pinnedClass = constraint.pinnedClass;

      if (outOfBoundsClass) {
        allClasses.push(outOfBoundsClass);
      }
      if (pinnedClass) {
        allClasses.push(pinnedClass);
      }
    });

    allClasses.forEach(function (cls) {
      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
        allClasses.push(cls + '-' + side);
      });
    });

    var addClasses = [];

    var tAttachment = extend({}, targetAttachment);
    var eAttachment = extend({}, this.attachment);

    this.options.constraints.forEach(function (constraint) {
      var to = constraint.to;
      var attachment = constraint.attachment;
      var pin = constraint.pin;

      if (typeof attachment === 'undefined') {
        attachment = '';
      }

      var changeAttachX = undefined,
          changeAttachY = undefined;
      if (attachment.indexOf(' ') >= 0) {
        var _attachment$split = attachment.split(' ');

        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

        changeAttachY = _attachment$split2[0];
        changeAttachX = _attachment$split2[1];
      } else {
        changeAttachX = changeAttachY = attachment;
      }

      var bounds = getBoundingRect(_this, to);

      if (changeAttachY === 'target' || changeAttachY === 'both') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          top += targetHeight;
          tAttachment.top = 'bottom';
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          top -= targetHeight;
          tAttachment.top = 'top';
        }
      }

      if (changeAttachY === 'together') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          if (eAttachment.top === 'bottom') {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top += height;
            eAttachment.top = 'top';
          } else if (eAttachment.top === 'top') {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top -= height;
            eAttachment.top = 'bottom';
          }
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          if (eAttachment.top === 'top') {
            top -= targetHeight;
            tAttachment.top = 'top';

            top -= height;
            eAttachment.top = 'bottom';
          } else if (eAttachment.top === 'bottom') {
            top -= targetHeight;
            tAttachment.top = 'top';

            top += height;
            eAttachment.top = 'top';
          }
        }

        if (tAttachment.top === 'middle') {
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
        }
      }

      if (changeAttachX === 'target' || changeAttachX === 'both') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          left += targetWidth;
          tAttachment.left = 'right';
        }

        if (left + width > bounds[2] && tAttachment.left === 'right') {
          left -= targetWidth;
          tAttachment.left = 'left';
        }
      }

      if (changeAttachX === 'together') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          if (eAttachment.left === 'right') {
            left += targetWidth;
            tAttachment.left = 'right';

            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';

            left -= width;
            eAttachment.left = 'right';
          }
        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
          if (eAttachment.left === 'left') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left += width;
            eAttachment.left = 'left';
          }
        } else if (tAttachment.left === 'center') {
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
        }
      }

      if (changeAttachY === 'element' || changeAttachY === 'both') {
        if (top < bounds[1] && eAttachment.top === 'bottom') {
          top += height;
          eAttachment.top = 'top';
        }

        if (top + height > bounds[3] && eAttachment.top === 'top') {
          top -= height;
          eAttachment.top = 'bottom';
        }
      }

      if (changeAttachX === 'element' || changeAttachX === 'both') {
        if (left < bounds[0] && eAttachment.left === 'right') {
          left += width;
          eAttachment.left = 'left';
        }

        if (left + width > bounds[2] && eAttachment.left === 'left') {
          left -= width;
          eAttachment.left = 'right';
        }
      }

      if (typeof pin === 'string') {
        pin = pin.split(',').map(function (p) {
          return p.trim();
        });
      } else if (pin === true) {
        pin = ['top', 'left', 'right', 'bottom'];
      }

      pin = pin || [];

      var pinned = [];
      var oob = [];

      if (top < bounds[1]) {
        if (pin.indexOf('top') >= 0) {
          top = bounds[1];
          pinned.push('top');
        } else {
          oob.push('top');
        }
      }

      if (top + height > bounds[3]) {
        if (pin.indexOf('bottom') >= 0) {
          top = bounds[3] - height;
          pinned.push('bottom');
        } else {
          oob.push('bottom');
        }
      }

      if (left < bounds[0]) {
        if (pin.indexOf('left') >= 0) {
          left = bounds[0];
          pinned.push('left');
        } else {
          oob.push('left');
        }
      }

      if (left + width > bounds[2]) {
        if (pin.indexOf('right') >= 0) {
          left = bounds[2] - width;
          pinned.push('right');
        } else {
          oob.push('right');
        }
      }

      if (pinned.length) {
        (function () {
          var pinnedClass = undefined;
          if (typeof _this.options.pinnedClass !== 'undefined') {
            pinnedClass = _this.options.pinnedClass;
          } else {
            pinnedClass = _this.getClass('pinned');
          }

          addClasses.push(pinnedClass);
          pinned.forEach(function (side) {
            addClasses.push(pinnedClass + '-' + side);
          });
        })();
      }

      if (oob.length) {
        (function () {
          var oobClass = undefined;
          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
            oobClass = _this.options.outOfBoundsClass;
          } else {
            oobClass = _this.getClass('out-of-bounds');
          }

          addClasses.push(oobClass);
          oob.forEach(function (side) {
            addClasses.push(oobClass + '-' + side);
          });
        })();
      }

      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
        eAttachment.left = tAttachment.left = false;
      }
      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
        eAttachment.top = tAttachment.top = false;
      }

      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
        _this.updateAttachClasses(eAttachment, tAttachment);
      }
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return { top: top, left: left };
  }
});
/* globals TetherBase */

'use strict';

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    var targetPos = this.getTargetBounds();

    var bottom = top + height;
    var right = left + width;

    var abutted = [];
    if (top <= targetPos.bottom && bottom >= targetPos.top) {
      ['left', 'right'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === left || targetPosSide === right) {
          abutted.push(side);
        }
      });
    }

    if (left <= targetPos.right && right >= targetPos.left) {
      ['top', 'bottom'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === top || targetPosSide === bottom) {
          abutted.push(side);
        }
      });
    }

    var allClasses = [];
    var addClasses = [];

    var sides = ['left', 'top', 'right', 'bottom'];
    allClasses.push(this.getClass('abutted'));
    sides.forEach(function (side) {
      allClasses.push(_this.getClass('abutted') + '-' + side);
    });

    if (abutted.length) {
      addClasses.push(this.getClass('abutted'));
    }

    abutted.forEach(function (side) {
      addClasses.push(_this.getClass('abutted') + '-' + side);
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return true;
  }
});
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

TetherBase.modules.push({
  position: function position(_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (!this.options.shift) {
      return;
    }

    var shift = this.options.shift;
    if (typeof this.options.shift === 'function') {
      shift = this.options.shift.call(this, { top: top, left: left });
    }

    var shiftTop = undefined,
        shiftLeft = undefined;
    if (typeof shift === 'string') {
      shift = shift.split(' ');
      shift[1] = shift[1] || shift[0];

      var _shift = shift;

      var _shift2 = _slicedToArray(_shift, 2);

      shiftTop = _shift2[0];
      shiftLeft = _shift2[1];

      shiftTop = parseFloat(shiftTop, 10);
      shiftLeft = parseFloat(shiftLeft, 10);
    } else {
      shiftTop = shift.top;
      shiftLeft = shift.left;
    }

    top += shiftTop;
    left += shiftLeft;

    return { top: top, left: left };
  }
});
return Tether;

}));

},{}]},{},[1]);
